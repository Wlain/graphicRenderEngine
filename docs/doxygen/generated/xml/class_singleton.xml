<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="class_singleton" kind="class" language="C++" prot="public">
    <compoundname>Singleton</compoundname>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_singleton_1adb1b554fec7ae6065fe0e09111f3581f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Singleton&lt; T &gt;::Singleton</definition>
        <argsstring>()=default</argsstring>
        <name>Singleton</name>
        <qualifiedname>Singleton::Singleton</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/william/Developer/demo/graphicRenderEngine/ceres/utils/singleton.h" line="13" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_singleton_1a0bef92d66b31ee300f21be68c61e2993" prot="public" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>static T &amp; Singleton&lt; T &gt;::getInstance</definition>
        <argsstring>() noexcept(std::is_nothrow_constructible&lt; T &gt;::value)</argsstring>
        <name>getInstance</name>
        <qualifiedname>Singleton::getInstance</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/william/Developer/demo/graphicRenderEngine/ceres/utils/singleton.h" line="16" column="14" bodyfile="/Users/william/Developer/demo/graphicRenderEngine/ceres/utils/singleton.h" bodystart="16" bodyend="20"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_singleton_1adcf118a3021b7bf7f42a6f5875705e52" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type></type>
        <definition>virtual Singleton&lt; T &gt;::~Singleton</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>~Singleton</name>
        <qualifiedname>Singleton::~Singleton</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/william/Developer/demo/graphicRenderEngine/ceres/utils/singleton.h" line="21" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_singleton_1a23b2407170cc04f6746874704b928044" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Singleton&lt; T &gt;::Singleton</definition>
        <argsstring>(const Singleton &amp;)=delete</argsstring>
        <name>Singleton</name>
        <qualifiedname>Singleton::Singleton</qualifiedname>
        <param>
          <type>const <ref refid="class_singleton" kindref="compound">Singleton</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/william/Developer/demo/graphicRenderEngine/ceres/utils/singleton.h" line="22" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_singleton_1a77024ec0dcc861c2d5f4a848d726e2ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_singleton" kindref="compound">Singleton</ref> &amp;</type>
        <definition>Singleton &amp; Singleton&lt; T &gt;::operator=</definition>
        <argsstring>(const Singleton &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>Singleton::operator=</qualifiedname>
        <param>
          <type>const <ref refid="class_singleton" kindref="compound">Singleton</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/william/Developer/demo/graphicRenderEngine/ceres/utils/singleton.h" line="23" column="15"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/william/Developer/demo/graphicRenderEngine/ceres/utils/singleton.h" line="10" column="1" bodyfile="/Users/william/Developer/demo/graphicRenderEngine/ceres/utils/singleton.h" bodystart="11" bodyend="24"/>
    <listofallmembers>
      <member refid="class_singleton_1a0bef92d66b31ee300f21be68c61e2993" prot="public" virt="non-virtual"><scope>Singleton</scope><name>getInstance</name></member>
      <member refid="class_singleton_1a77024ec0dcc861c2d5f4a848d726e2ad" prot="public" virt="non-virtual"><scope>Singleton</scope><name>operator=</name></member>
      <member refid="class_singleton_1adb1b554fec7ae6065fe0e09111f3581f" prot="protected" virt="non-virtual"><scope>Singleton</scope><name>Singleton</name></member>
      <member refid="class_singleton_1a23b2407170cc04f6746874704b928044" prot="public" virt="non-virtual"><scope>Singleton</scope><name>Singleton</name></member>
      <member refid="class_singleton_1adcf118a3021b7bf7f42a6f5875705e52" prot="public" virt="virtual"><scope>Singleton</scope><name>~Singleton</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
