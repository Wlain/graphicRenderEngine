<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="tinycthread_8h" kind="file" language="C++">
    <compoundname>tinycthread.h</compoundname>
    <includes local="no">time.h</includes>
    <includes local="no">sys/time.h</includes>
    <includes local="no">pthread.h</includes>
    <includedby refid="tinycthread_8c" local="yes">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.c</includedby>
    <includedby refid="particles_8c" local="no">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/examples/particles.c</includedby>
    <includedby refid="empty_8c" local="yes">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/empty.c</includedby>
    <includedby refid="threads_8c" local="yes">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/threads.c</includedby>
    <incdepgraph>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h</label>
        <link refid="tinycthread_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>pthread.h</label>
      </node>
      <node id="3">
        <label>sys/time.h</label>
      </node>
      <node id="2">
        <label>time.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.c</label>
        <link refid="tinycthread_8c_source"/>
      </node>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h</label>
        <link refid="tinycthread_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/examples/particles.c</label>
        <link refid="particles_8c_source"/>
      </node>
      <node id="4">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/empty.c</label>
        <link refid="empty_8c_source"/>
      </node>
      <node id="5">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/threads.c</label>
        <link refid="threads_8c_source"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="tinycthread_8h_1a5ae43c395d15a661ba4877c72d8214ed" prot="public" static="no">
        <name>_TTHREAD_POSIX_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="55" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tinycthread_8h_1a7c27184597c6f4cb260d6b41aea5d9b8" prot="public" static="no">
        <name>_TTHREAD_PLATFORM_DEFINED_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="57" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tinycthread_8h_1a369266c24eacffb87046522897a570d5" prot="public" static="no">
        <name>_GNU_SOURCE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="64" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tinycthread_8h_1a3024ccd4a9af5109d24e6c57565d74a1" prot="public" static="no">
        <name>_POSIX_C_SOURCE</name>
        <initializer>199309L</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="68" column="18" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tinycthread_8h_1a78c99ffd76a7bb3c8c74db76207e9ab4" prot="public" static="no">
        <name>_XOPEN_SOURCE</name>
        <initializer>500</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="72" column="18" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tinycthread_8h_1aa43107f3cb85397223bf6d40be480480" prot="public" static="no">
        <name>TIME_UTC</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="103" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tinycthread_8h_1a953f67c466c6b20cb8b45bae7322a4bb" prot="public" static="no">
        <name>TINYCTHREAD_VERSION_MAJOR</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TinyCThread version (major number). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="133" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tinycthread_8h_1a4b0bb3afcfbecfad0a260c56a2600485" prot="public" static="no">
        <name>TINYCTHREAD_VERSION_MINOR</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TinyCThread version (minor number). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="135" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tinycthread_8h_1a68b525cf21cb295d457f87c45ca45604" prot="public" static="no">
        <name>TINYCTHREAD_VERSION</name>
        <initializer>(<ref refid="tinycthread_8h_1a953f67c466c6b20cb8b45bae7322a4bb" kindref="member">TINYCTHREAD_VERSION_MAJOR</ref> * 100 + <ref refid="tinycthread_8h_1a4b0bb3afcfbecfad0a260c56a2600485" kindref="member">TINYCTHREAD_VERSION_MINOR</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TinyCThread version (full version). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="137" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tinycthread_8h_1a6ee13d5bcebab292dbc98e06c6cf9fe7" prot="public" static="no">
        <name>_Thread_local</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="struct_thread" kindref="compound">Thread</ref> local storage keyword. A variable that is declared with the <computeroutput>_Thread_local</computeroutput> keyword makes the value of the variable local to each thread (known as thread-local storage, or TLS). Example usage: <programlisting><codeline><highlight class="normal">//<sp/>This<sp/>variable<sp/>is<sp/>local<sp/>to<sp/>each<sp/>thread.</highlight></codeline>
<codeline><highlight class="normal">_Thread_local<sp/>int<sp/>variable;</highlight></codeline>
</programlisting> <simplesect kind="note"><para>The <computeroutput>_Thread_local</computeroutput> keyword is a macro that maps to the corresponding compiler directive (e.g. <computeroutput>__declspec(thread)</computeroutput>). </para>
</simplesect>
<simplesect kind="note"><para>This directive is currently not supported on Mac OS X (it will give a compiler error), since compile-time TLS is not supported in the Mac OS X executable format. Also, some older versions of MinGW (before GCC 4.x) do not support this directive. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="163" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tinycthread_8h_1a11de84b15b6b59861b4366a192aadd58" prot="public" static="no">
        <name>TSS_DTOR_ITERATIONS</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="168" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tinycthread_8h_1a0944e70c2ce4eed616f7bcfd604fba96" prot="public" static="no">
        <name>thrd_error</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The requested operation failed </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="171" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tinycthread_8h_1a6f15c94421801f7f6a4338653b9017dc" prot="public" static="no">
        <name>thrd_success</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The requested operation succeeded </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="172" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tinycthread_8h_1aec454a4baf61e6d518bbfb8768bd6a1f" prot="public" static="no">
        <name>thrd_timeout</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The time specified in the call was reached without acquiring the requested resource </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="173" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tinycthread_8h_1a3c563aa25920a041d83d4019b113ab5d" prot="public" static="no">
        <name>thrd_busy</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The requested operation failed because a tesource requested by a test and return function is already in use </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="174" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tinycthread_8h_1ad6010b6ba8c0508cef692f066b09e2ef" prot="public" static="no">
        <name>thrd_nomem</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The requested operation failed because it was unable to allocate memory </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="175" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tinycthread_8h_1af5ebc375e7a7dca3e9fdcc0bc338f201" prot="public" static="no">
        <name>mtx_plain</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="178" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tinycthread_8h_1adf070d6198d7c0419e5eed91db5ac223" prot="public" static="no">
        <name>mtx_timed</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="179" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tinycthread_8h_1a2334ad10806834ffe52feac22fc5c198" prot="public" static="no">
        <name>mtx_try</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="180" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tinycthread_8h_1a23baf902554dba287faa32c646e35f61" prot="public" static="no">
        <name>mtx_recursive</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="181" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="tinycthread_8h_1ae653b263c1432a99c799cbf028bc65e2" prot="public" static="no">
        <type>pthread_mutex_t</type>
        <definition>typedef pthread_mutex_t mtx_t</definition>
        <argsstring></argsstring>
        <name>mtx_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="191" column="25" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="tinycthread_8h_1aa5c55d7c9eb959c15c4d5b73c02e8a41" prot="public" static="no">
        <type>pthread_cond_t</type>
        <definition>typedef pthread_cond_t cnd_t</definition>
        <argsstring></argsstring>
        <name>cnd_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="252" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="tinycthread_8h_1a40f328ffa956af453fe5c14704f88231" prot="public" static="no">
        <type>pthread_t</type>
        <definition>typedef pthread_t thrd_t</definition>
        <argsstring></argsstring>
        <name>thrd_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="317" column="19" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" bodystart="317" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="tinycthread_8h_1ab26bdfa456502f8c483f45bb39ca7336" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* thrd_start_t) (void *arg)</definition>
        <argsstring>)(void *arg)</argsstring>
        <name>thrd_start_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="struct_thread" kindref="compound">Thread</ref> start function. Any thread that is started with the <ref refid="tinycthread_8h_1a1a52b6cd2d15cc6c4741d5124f85d183" kindref="member">thrd_create()</ref> function must be started through a function of this type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>The thread argument (the <computeroutput>arg</computeroutput> argument of the corresponding <ref refid="tinycthread_8h_1a1a52b6cd2d15cc6c4741d5124f85d183" kindref="member">thrd_create()</ref> call). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The thread return value, which can be obtained by another thread by using the <ref refid="tinycthread_8h_1aa2e83a544f49f74cf217a69a882b5d80" kindref="member">thrd_join()</ref> function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="328" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" bodystart="328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="tinycthread_8h_1a0475af0e9cd14ba35427de7c8c49dab1" prot="public" static="no">
        <type>pthread_key_t</type>
        <definition>typedef pthread_key_t tss_t</definition>
        <argsstring></argsstring>
        <name>tss_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="398" column="23" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" bodystart="398" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="tinycthread_8h_1a7bd9f13e4169f842cbb831ea348049dd" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* tss_dtor_t) (void *val)</definition>
        <argsstring>)(void *val)</argsstring>
        <name>tss_dtor_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor function for a thread-specific storage. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the destructed thread-specific storage. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="404" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" bodystart="404" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="tinycthread_8h_1a89200caf0dc25fcc97df171d0034bff2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mtx_init</definition>
        <argsstring>(mtx_t *mtx, int type)</argsstring>
        <name>mtx_init</name>
        <param>
          <type>mtx_t *</type>
          <declname>mtx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a mutex object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mtx</parametername>
</parameternamelist>
<parameterdescription>
<para>A mutex object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit-mask that must have one of the following six values: <itemizedlist>
<listitem><para><computeroutput>mtx_plain</computeroutput> for a simple non-recursive mutex </para>
</listitem>
<listitem><para><computeroutput>mtx_timed</computeroutput> for a non-recursive mutex that supports timeout </para>
</listitem>
<listitem><para><computeroutput>mtx_try</computeroutput> for a non-recursive mutex that supports test and return </para>
</listitem>
<listitem><para><computeroutput>mtx_plain</computeroutput> | <computeroutput>mtx_recursive</computeroutput> (same as <computeroutput>mtx_plain</computeroutput>, but recursive) </para>
</listitem>
<listitem><para><computeroutput>mtx_timed</computeroutput> | <computeroutput>mtx_recursive</computeroutput> (same as <computeroutput>mtx_timed</computeroutput>, but recursive) </para>
</listitem>
<listitem><para><computeroutput>mtx_try</computeroutput> | <computeroutput>mtx_recursive</computeroutput> (same as <computeroutput>mtx_try</computeroutput>, but recursive) </para>
</listitem>
</itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="tinycthread_8h_1a6f15c94421801f7f6a4338653b9017dc" kindref="member">thrd_success</ref> on success, or <ref refid="tinycthread_8h_1a0944e70c2ce4eed616f7bcfd604fba96" kindref="member">thrd_error</ref> if the request could not be honored. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="206" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.c" bodystart="56" bodyend="75" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" declline="206" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="tinycthread_8h_1ae8b3732298d1d316db6438b4c561c0dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mtx_destroy</definition>
        <argsstring>(mtx_t *mtx)</argsstring>
        <name>mtx_destroy</name>
        <param>
          <type>mtx_t *</type>
          <declname>mtx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Release any resources used by the given mutex. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mtx</parametername>
</parameternamelist>
<parameterdescription>
<para>A mutex object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="211" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.c" bodystart="77" bodyend="84" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" declline="211" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="tinycthread_8h_1a8945984db67db8ee774872da64d0e424" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mtx_lock</definition>
        <argsstring>(mtx_t *mtx)</argsstring>
        <name>mtx_lock</name>
        <param>
          <type>mtx_t *</type>
          <declname>mtx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Lock the given mutex. Blocks until the given mutex can be locked. If the mutex is non-recursive, and the calling thread already has a lock on the mutex, this call will block forever. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mtx</parametername>
</parameternamelist>
<parameterdescription>
<para>A mutex object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="tinycthread_8h_1a6f15c94421801f7f6a4338653b9017dc" kindref="member">thrd_success</ref> on success, or <ref refid="tinycthread_8h_1a0944e70c2ce4eed616f7bcfd604fba96" kindref="member">thrd_error</ref> if the request could not be honored. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="221" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.c" bodystart="86" bodyend="99" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" declline="221" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="tinycthread_8h_1a98f9757dde089254735199ac738ff65f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mtx_timedlock</definition>
        <argsstring>(mtx_t *mtx, const struct timespec *ts)</argsstring>
        <name>mtx_timedlock</name>
        <param>
          <type>mtx_t *</type>
          <declname>mtx</declname>
        </param>
        <param>
          <type>const struct timespec *</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>NOT YET IMPLEMENTED. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="225" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.c" bodystart="101" bodyend="107" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" declline="225" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="tinycthread_8h_1ac577690ddd48f5a1fdf3dc97881a2199" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mtx_trylock</definition>
        <argsstring>(mtx_t *mtx)</argsstring>
        <name>mtx_trylock</name>
        <param>
          <type>mtx_t *</type>
          <declname>mtx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Try to lock the given mutex. The specified mutex shall support either test and return or timeout. If the mutex is already locked, the function returns without blocking. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mtx</parametername>
</parameternamelist>
<parameterdescription>
<para>A mutex object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="tinycthread_8h_1a6f15c94421801f7f6a4338653b9017dc" kindref="member">thrd_success</ref> on success, or <ref refid="tinycthread_8h_1a3c563aa25920a041d83d4019b113ab5d" kindref="member">thrd_busy</ref> if the resource requested is already in use, or <ref refid="tinycthread_8h_1a0944e70c2ce4eed616f7bcfd604fba96" kindref="member">thrd_error</ref> if the request could not be honored. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="235" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.c" bodystart="109" bodyend="122" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" declline="235" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="tinycthread_8h_1ae2fb1d2854461fa583017cc9b0bc6cca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mtx_unlock</definition>
        <argsstring>(mtx_t *mtx)</argsstring>
        <name>mtx_unlock</name>
        <param>
          <type>mtx_t *</type>
          <declname>mtx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unlock the given mutex. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mtx</parametername>
</parameternamelist>
<parameterdescription>
<para>A mutex object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="tinycthread_8h_1a6f15c94421801f7f6a4338653b9017dc" kindref="member">thrd_success</ref> on success, or <ref refid="tinycthread_8h_1a0944e70c2ce4eed616f7bcfd604fba96" kindref="member">thrd_error</ref> if the request could not be honored. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="242" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.c" bodystart="124" bodyend="133" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" declline="242" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="tinycthread_8h_1a146f4cd218c2a2f770be14c1dee26d08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cnd_init</definition>
        <argsstring>(cnd_t *cond)</argsstring>
        <name>cnd_init</name>
        <param>
          <type>cnd_t *</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a condition variable object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cond</parametername>
</parameternamelist>
<parameterdescription>
<para>A condition variable object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="tinycthread_8h_1a6f15c94421801f7f6a4338653b9017dc" kindref="member">thrd_success</ref> on success, or <ref refid="tinycthread_8h_1a0944e70c2ce4eed616f7bcfd604fba96" kindref="member">thrd_error</ref> if the request could not be honored. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="260" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.c" bodystart="140" bodyend="167" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" declline="260" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="tinycthread_8h_1aa925921fa9edc189f474ae10a23bcfd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cnd_destroy</definition>
        <argsstring>(cnd_t *cond)</argsstring>
        <name>cnd_destroy</name>
        <param>
          <type>cnd_t *</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Release any resources used by the given condition variable. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cond</parametername>
</parameternamelist>
<parameterdescription>
<para>A condition variable object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="265" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.c" bodystart="169" bodyend="184" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" declline="265" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="tinycthread_8h_1af76e066715b1190d38a69da1c511e30f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cnd_signal</definition>
        <argsstring>(cnd_t *cond)</argsstring>
        <name>cnd_signal</name>
        <param>
          <type>cnd_t *</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signal a condition variable. Unblocks one of the threads that are blocked on the given condition variable at the time of the call. If no threads are blocked on the condition variable at the time of the call, the function does nothing and return success. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cond</parametername>
</parameternamelist>
<parameterdescription>
<para>A condition variable object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="tinycthread_8h_1a6f15c94421801f7f6a4338653b9017dc" kindref="member">thrd_success</ref> on success, or <ref refid="tinycthread_8h_1a0944e70c2ce4eed616f7bcfd604fba96" kindref="member">thrd_error</ref> if the request could not be honored. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="275" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.c" bodystart="186" bodyend="209" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" declline="275" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="tinycthread_8h_1a66228b340509733bdf529b93bca8df14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cnd_broadcast</definition>
        <argsstring>(cnd_t *cond)</argsstring>
        <name>cnd_broadcast</name>
        <param>
          <type>cnd_t *</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Broadcast a condition variable. Unblocks all of the threads that are blocked on the given condition variable at the time of the call. If no threads are blocked on the condition variable at the time of the call, the function does nothing and return success. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cond</parametername>
</parameternamelist>
<parameterdescription>
<para>A condition variable object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="tinycthread_8h_1a6f15c94421801f7f6a4338653b9017dc" kindref="member">thrd_success</ref> on success, or <ref refid="tinycthread_8h_1a0944e70c2ce4eed616f7bcfd604fba96" kindref="member">thrd_error</ref> if the request could not be honored. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="285" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.c" bodystart="211" bodyend="234" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" declline="285" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="tinycthread_8h_1ac4dfb82fc3d92bb688cb07308af6a659" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cnd_wait</definition>
        <argsstring>(cnd_t *cond, mtx_t *mtx)</argsstring>
        <name>cnd_wait</name>
        <param>
          <type>cnd_t *</type>
          <declname>cond</declname>
        </param>
        <param>
          <type>mtx_t *</type>
          <declname>mtx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Wait for a condition variable to become signaled. The function atomically unlocks the given mutex and endeavors to block until the given condition variable is signaled by a call to cnd_signal or to cnd_broadcast. When the calling thread becomes unblocked it locks the mutex before it returns. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cond</parametername>
</parameternamelist>
<parameterdescription>
<para>A condition variable object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mtx</parametername>
</parameternamelist>
<parameterdescription>
<para>A mutex object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="tinycthread_8h_1a6f15c94421801f7f6a4338653b9017dc" kindref="member">thrd_success</ref> on success, or <ref refid="tinycthread_8h_1a0944e70c2ce4eed616f7bcfd604fba96" kindref="member">thrd_error</ref> if the request could not be honored. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="297" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.c" bodystart="285" bodyend="292" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" declline="297" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="tinycthread_8h_1a2bdc352d949424855c957b0d1916d443" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cnd_timedwait</definition>
        <argsstring>(cnd_t *cond, mtx_t *mtx, const struct timespec *ts)</argsstring>
        <name>cnd_timedwait</name>
        <param>
          <type>cnd_t *</type>
          <declname>cond</declname>
        </param>
        <param>
          <type>mtx_t *</type>
          <declname>mtx</declname>
        </param>
        <param>
          <type>const struct timespec *</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Wait for a condition variable to become signaled. The function atomically unlocks the given mutex and endeavors to block until the given condition variable is signaled by a call to cnd_signal or to cnd_broadcast, or until after the specified time. When the calling thread becomes unblocked it locks the mutex before it returns. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cond</parametername>
</parameternamelist>
<parameterdescription>
<para>A condition variable object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mtx</parametername>
</parameternamelist>
<parameterdescription>
<para>A mutex object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xt</parametername>
</parameternamelist>
<parameterdescription>
<para>A point in time at which the request will time out (absolute time). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="tinycthread_8h_1a6f15c94421801f7f6a4338653b9017dc" kindref="member">thrd_success</ref> upon success, or <ref refid="tinycthread_8h_1aec454a4baf61e6d518bbfb8768bd6a1f" kindref="member">thrd_timeout</ref> if the time specified in the call was reached without acquiring the requested resource, or <ref refid="tinycthread_8h_1a0944e70c2ce4eed616f7bcfd604fba96" kindref="member">thrd_error</ref> if the request could not be honored. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="311" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.c" bodystart="294" bodyend="315" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" declline="311" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="tinycthread_8h_1a1a52b6cd2d15cc6c4741d5124f85d183" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int thrd_create</definition>
        <argsstring>(thrd_t *thr, thrd_start_t func, void *arg)</argsstring>
        <name>thrd_create</name>
        <param>
          <type>thrd_t *</type>
          <declname>thr</declname>
        </param>
        <param>
          <type><ref refid="tinycthread_8h_1ab26bdfa456502f8c483f45bb39ca7336" kindref="member">thrd_start_t</ref></type>
          <declname>func</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new thread. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thr</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the newly created thread. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>A function pointer to the function that will be executed in the new thread. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>An argument to the thread function. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="tinycthread_8h_1a6f15c94421801f7f6a4338653b9017dc" kindref="member">thrd_success</ref> on success, or <ref refid="tinycthread_8h_1ad6010b6ba8c0508cef692f066b09e2ef" kindref="member">thrd_nomem</ref> if no memory could be allocated for the thread requested, or <ref refid="tinycthread_8h_1a0944e70c2ce4eed616f7bcfd604fba96" kindref="member">thrd_error</ref> if the request could not be honored. </para>
</simplesect>
<simplesect kind="note"><para>A thread’s identifier may be reused for a different thread once the original thread has exited and either been detached or joined to another thread. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="342" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.c" bodystart="361" bodyend="391" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" declline="342" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="tinycthread_8h_1ab67b6f182a848d979155d03598325fa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>thrd_t</type>
        <definition>thrd_t thrd_current</definition>
        <argsstring>(void)</argsstring>
        <name>thrd_current</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Identify the calling thread. <simplesect kind="return"><para>The identifier of the calling thread. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="347" column="8" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.c" bodystart="393" bodyend="400" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" declline="347" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="tinycthread_8h_1ad5380997f9e32a31f802bdd9cb266902" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int thrd_detach</definition>
        <argsstring>(thrd_t thr)</argsstring>
        <name>thrd_detach</name>
        <param>
          <type>thrd_t</type>
          <declname>thr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>NOT YET IMPLEMENTED. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="351" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.c" bodystart="402" bodyend="407" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" declline="351" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="tinycthread_8h_1a153e65a389814ce51ad07791e42b2118" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int thrd_equal</definition>
        <argsstring>(thrd_t thr0, thrd_t thr1)</argsstring>
        <name>thrd_equal</name>
        <param>
          <type>thrd_t</type>
          <declname>thr0</declname>
        </param>
        <param>
          <type>thrd_t</type>
          <declname>thr1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare two thread identifiers. The function determines if two thread identifiers refer to the same thread. <simplesect kind="return"><para>Zero if the two thread identifiers refer to different threads. Otherwise a nonzero value is returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="358" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.c" bodystart="409" bodyend="416" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" declline="358" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="tinycthread_8h_1ae13e483223c39327e190e79e18f20b15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void thrd_exit</definition>
        <argsstring>(int res)</argsstring>
        <name>thrd_exit</name>
        <param>
          <type>int</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Terminate execution of the calling thread. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>Result code of the calling thread. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="363" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.c" bodystart="418" bodyend="430" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" declline="363" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="tinycthread_8h_1aa2e83a544f49f74cf217a69a882b5d80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int thrd_join</definition>
        <argsstring>(thrd_t thr, int *res)</argsstring>
        <name>thrd_join</name>
        <param>
          <type>thrd_t</type>
          <declname>thr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Wait for a thread to terminate. The function joins the given thread with the current thread by blocking until the other thread has terminated. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thr</parametername>
</parameternamelist>
<parameterdescription>
<para>The thread to join with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>If this pointer is not NULL, the function will store the result code of the given thread in the integer pointed to by <computeroutput>res</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="tinycthread_8h_1a6f15c94421801f7f6a4338653b9017dc" kindref="member">thrd_success</ref> on success, or <ref refid="tinycthread_8h_1a0944e70c2ce4eed616f7bcfd604fba96" kindref="member">thrd_error</ref> if the request could not be honored. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="374" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.c" bodystart="432" bodyend="463" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" declline="374" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="tinycthread_8h_1a58d00bd1fc0cc3c91d4c34d5faf117c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int thrd_sleep</definition>
        <argsstring>(const struct timespec *time_point, struct timespec *remaining)</argsstring>
        <name>thrd_sleep</name>
        <param>
          <type>const struct timespec *</type>
          <declname>time_point</declname>
        </param>
        <param>
          <type>struct timespec *</type>
          <declname>remaining</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Put the calling thread to sleep. Suspend execution of the calling thread. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time_point</parametername>
</parameternamelist>
<parameterdescription>
<para>A point in time at which the thread will resume (absolute time). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>remaining</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-NULL, this parameter will hold the remaining time until time_point upon return. This will typically be zero, but if the thread was woken up by a signal that is not ignored before time_point was reached <computeroutput>remaining</computeroutput> will hold a positive time. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 (zero) on successful sleep, or -1 if an interrupt occurred. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="386" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.c" bodystart="465" bodyend="510" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" declline="386" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="tinycthread_8h_1acbfb78346e6b76b23da1d2d8df03549a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void thrd_yield</definition>
        <argsstring>(void)</argsstring>
        <name>thrd_yield</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Yield execution to another thread. Permit other threads to run, even if the current thread would ordinarily continue to run. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="392" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.c" bodystart="512" bodyend="519" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" declline="392" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="tinycthread_8h_1a286fe7927e9af276a9cfdbc8b9eb08ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tss_create</definition>
        <argsstring>(tss_t *key, tss_dtor_t dtor)</argsstring>
        <name>tss_create</name>
        <param>
          <type>tss_t *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="tinycthread_8h_1a7bd9f13e4169f842cbb831ea348049dd" kindref="member">tss_dtor_t</ref></type>
          <declname>dtor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a thread-specific storage. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique key identifier that will be set if the function is successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtor</parametername>
</parameternamelist>
<parameterdescription>
<para>Destructor function. This can be NULL. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="tinycthread_8h_1a6f15c94421801f7f6a4338653b9017dc" kindref="member">thrd_success</ref> on success, or <ref refid="tinycthread_8h_1a0944e70c2ce4eed616f7bcfd604fba96" kindref="member">thrd_error</ref> if the request could not be honored. </para>
</simplesect>
<simplesect kind="note"><para>The destructor function is not supported under Windows. If <computeroutput>dtor</computeroutput> is not NULL when calling this function under Windows, the function will fail and return <ref refid="tinycthread_8h_1a0944e70c2ce4eed616f7bcfd604fba96" kindref="member">thrd_error</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="416" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.c" bodystart="521" bodyend="541" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" declline="416" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="tinycthread_8h_1aecebbc66b206171d9381ba94528c6cb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tss_delete</definition>
        <argsstring>(tss_t key)</argsstring>
        <name>tss_delete</name>
        <param>
          <type>tss_t</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete a thread-specific storage. The function releases any resources used by the given thread-specific storage. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key that shall be deleted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="423" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.c" bodystart="543" bodyend="550" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" declline="423" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="tinycthread_8h_1a5cf26b78a3f19a4e7b6876f957f2059c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * tss_get</definition>
        <argsstring>(tss_t key)</argsstring>
        <name>tss_get</name>
        <param>
          <type>tss_t</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the value for a thread-specific storage. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The thread-specific storage identifier. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value for the current thread held in the given thread-specific storage. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="430" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.c" bodystart="552" bodyend="559" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" declline="430" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="tinycthread_8h_1a608e01c49b84a5ad4f085a9aedc6a680" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tss_set</definition>
        <argsstring>(tss_t key, void *val)</argsstring>
        <name>tss_set</name>
        <param>
          <type>tss_t</type>
          <declname>key</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the value for a thread-specific storage. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The thread-specific storage identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the thread-specific storage to set for the current thread. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="tinycthread_8h_1a6f15c94421801f7f6a4338653b9017dc" kindref="member">thrd_success</ref> on success, or <ref refid="tinycthread_8h_1a0944e70c2ce4eed616f7bcfd604fba96" kindref="member">thrd_error</ref> if the request could not be honored. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" line="439" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.c" bodystart="561" bodyend="575" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h" declline="439" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>mode:<sp/>c;<sp/>tab-width:<sp/>2;<sp/>indent-tabs-mode:<sp/>nil;<sp/>-*-</highlight></codeline>
<codeline lineno="2"><highlight class="comment">Copyright<sp/>(c)<sp/>2012<sp/>Marcus<sp/>Geelnard</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">This<sp/>software<sp/>is<sp/>provided<sp/>&apos;as-is&apos;,<sp/>without<sp/>any<sp/>express<sp/>or<sp/>implied</highlight></codeline>
<codeline lineno="5"><highlight class="comment">warranty.<sp/>In<sp/>no<sp/>event<sp/>will<sp/>the<sp/>authors<sp/>be<sp/>held<sp/>liable<sp/>for<sp/>any<sp/>damages</highlight></codeline>
<codeline lineno="6"><highlight class="comment">arising<sp/>from<sp/>the<sp/>use<sp/>of<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"></highlight></codeline>
<codeline lineno="8"><highlight class="comment">Permission<sp/>is<sp/>granted<sp/>to<sp/>anyone<sp/>to<sp/>use<sp/>this<sp/>software<sp/>for<sp/>any<sp/>purpose,</highlight></codeline>
<codeline lineno="9"><highlight class="comment">including<sp/>commercial<sp/>applications,<sp/>and<sp/>to<sp/>alter<sp/>it<sp/>and<sp/>redistribute<sp/>it</highlight></codeline>
<codeline lineno="10"><highlight class="comment">freely,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>restrictions:</highlight></codeline>
<codeline lineno="11"><highlight class="comment"></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/><sp/><sp/>1.<sp/>The<sp/>origin<sp/>of<sp/>this<sp/>software<sp/>must<sp/>not<sp/>be<sp/>misrepresented;<sp/>you<sp/>must<sp/>not</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/><sp/>claim<sp/>that<sp/>you<sp/>wrote<sp/>the<sp/>original<sp/>software.<sp/>If<sp/>you<sp/>use<sp/>this<sp/>software</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/>in<sp/>a<sp/>product,<sp/>an<sp/>acknowledgment<sp/>in<sp/>the<sp/>product<sp/>documentation<sp/>would<sp/>be</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/>appreciated<sp/>but<sp/>is<sp/>not<sp/>required.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"></highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/><sp/>2.<sp/>Altered<sp/>source<sp/>versions<sp/>must<sp/>be<sp/>plainly<sp/>marked<sp/>as<sp/>such,<sp/>and<sp/>must<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/><sp/>misrepresented<sp/>as<sp/>being<sp/>the<sp/>original<sp/>software.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"></highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/><sp/><sp/>3.<sp/>This<sp/>notice<sp/>may<sp/>not<sp/>be<sp/>removed<sp/>or<sp/>altered<sp/>from<sp/>any<sp/>source</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline lineno="22"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_TINYCTHREAD_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_TINYCTHREAD_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Which<sp/>platform<sp/>are<sp/>we<sp/>on?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(_TTHREAD_PLATFORM_DEFINED_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>defined(_WIN32)<sp/>||<sp/>defined(__WIN32__)<sp/>||<sp/>defined(__WINDOWS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>_TTHREAD_WIN32_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>_TTHREAD_POSIX_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>_TTHREAD_PLATFORM_DEFINED_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Activate<sp/>some<sp/>POSIX<sp/>functionality<sp/>(e.g.<sp/>clock_gettime<sp/>and<sp/>recursive<sp/>mutexes)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_TTHREAD_POSIX_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>_FEATURES_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>!defined(_GNU_SOURCE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>_GNU_SOURCE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>!defined(_POSIX_C_SOURCE)<sp/>||<sp/>((_POSIX_C_SOURCE<sp/>-<sp/>0)<sp/>&lt;<sp/>199309L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#undef<sp/>_POSIX_C_SOURCE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>_POSIX_C_SOURCE<sp/>199309L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>!defined(_XOPEN_SOURCE)<sp/>||<sp/>((_XOPEN_SOURCE<sp/>-<sp/>0)<sp/>&lt;<sp/>500)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#undef<sp/>_XOPEN_SOURCE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>_XOPEN_SOURCE<sp/>500</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Generic<sp/>includes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Platform<sp/>specific<sp/>includes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_TTHREAD_POSIX_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#include<sp/>&lt;sys/time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#include<sp/>&lt;pthread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_TTHREAD_WIN32_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>WIN32_LEAN_AND_MEAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>WIN32_LEAN_AND_MEAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>__UNDEF_LEAN_AND_MEAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifdef<sp/>__UNDEF_LEAN_AND_MEAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#undef<sp/>WIN32_LEAN_AND_MEAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#undef<sp/>__UNDEF_LEAN_AND_MEAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Workaround<sp/>for<sp/>missing<sp/>TIME_UTC:<sp/>If<sp/>time.h<sp/>doesn&apos;t<sp/>provide<sp/>TIME_UTC,</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/>it&apos;s<sp/>quite<sp/>likely<sp/>that<sp/>libc<sp/>does<sp/>not<sp/>support<sp/>it<sp/>either.<sp/>Hence,<sp/>fall<sp/>back<sp/>to</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/>the<sp/>only<sp/>other<sp/>supported<sp/>time<sp/>specifier:<sp/>CLOCK_REALTIME<sp/>(and<sp/>if<sp/>that<sp/>fails,</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/><sp/>we&apos;re<sp/>probably<sp/>emulating<sp/>clock_gettime<sp/>anyway,<sp/>so<sp/>anything<sp/>goes).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>TIME_UTC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifdef<sp/>CLOCK_REALTIME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>TIME_UTC<sp/>CLOCK_REALTIME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>TIME_UTC<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Workaround<sp/>for<sp/>missing<sp/>clock_gettime<sp/>(most<sp/>Windows<sp/>compilers,<sp/>afaik)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_TTHREAD_WIN32_)<sp/>||<sp/>defined(__APPLE_CC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_TTHREAD_EMULATE_CLOCK_GETTIME_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Emulate<sp/>struct<sp/>timespec<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_TTHREAD_WIN32_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_ttherad_timespec<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>time_t<sp/>tv_sec;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/>tv_nsec;</highlight></codeline>
<codeline lineno="115"><highlight class="normal">};</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>timespec<sp/>_ttherad_timespec</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Emulate<sp/>clockid_t<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_tthread_clockid_t;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>clockid_t<sp/>_tthread_clockid_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Emulate<sp/>clock_gettime<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_tthread_clock_gettime(clockid_t<sp/>clk_id,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>timespec<sp/>*ts);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>clock_gettime<sp/>_tthread_clock_gettime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CLOCK_REALTIME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CLOCK_REALTIME<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="tinycthread_8h_1a953f67c466c6b20cb8b45bae7322a4bb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TINYCTHREAD_VERSION_MAJOR<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="tinycthread_8h_1a4b0bb3afcfbecfad0a260c56a2600485" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TINYCTHREAD_VERSION_MINOR<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="tinycthread_8h_1a68b525cf21cb295d457f87c45ca45604" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TINYCTHREAD_VERSION<sp/>(TINYCTHREAD_VERSION_MAJOR<sp/>*<sp/>100<sp/>+<sp/>TINYCTHREAD_VERSION_MINOR)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>FIXME:<sp/>Check<sp/>for<sp/>a<sp/>PROPER<sp/>value<sp/>of<sp/>__STDC_VERSION__<sp/>to<sp/>know<sp/>if<sp/>we<sp/>have<sp/>C11<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!(defined(__STDC_VERSION__)<sp/>&amp;&amp;<sp/>(__STDC_VERSION__<sp/>&gt;=<sp/>201102L))<sp/>&amp;&amp;<sp/>!defined(_Thread_local)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/>#if<sp/>defined(__GNUC__)<sp/>||<sp/>defined(__INTEL_COMPILER)<sp/>||<sp/>defined(__SUNPRO_CC)<sp/>||<sp/>defined(__IBMCPP__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>_Thread_local<sp/>__thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="tinycthread_8h_1a6ee13d5bcebab292dbc98e06c6cf9fe7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>_Thread_local<sp/>__declspec(thread)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Macros<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TSS_DTOR_ITERATIONS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Function<sp/>return<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="tinycthread_8h_1a0944e70c2ce4eed616f7bcfd604fba96" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>thrd_error<sp/><sp/><sp/><sp/>0<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="tinycthread_8h_1a6f15c94421801f7f6a4338653b9017dc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>thrd_success<sp/><sp/>1<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="tinycthread_8h_1aec454a4baf61e6d518bbfb8768bd6a1f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>thrd_timeout<sp/><sp/>2<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174" refid="tinycthread_8h_1a3c563aa25920a041d83d4019b113ab5d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>thrd_busy<sp/><sp/><sp/><sp/><sp/>3<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175" refid="tinycthread_8h_1ad6010b6ba8c0508cef692f066b09e2ef" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>thrd_nomem<sp/><sp/><sp/><sp/>4<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Mutex<sp/>types<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>mtx_plain<sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>mtx_timed<sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>mtx_try<sp/><sp/><sp/><sp/><sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>mtx_recursive<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Mutex<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_TTHREAD_WIN32_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>CRITICAL_SECTION<sp/>mHandle;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Critical<sp/>section<sp/>handle<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mAlreadyLocked;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>TRUE<sp/>if<sp/>the<sp/>mutex<sp/>is<sp/>already<sp/>locked<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mRecursive;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>TRUE<sp/>if<sp/>the<sp/>mutex<sp/>is<sp/>recursive<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal">}<sp/>mtx_t;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>pthread_mutex_t<sp/>mtx_t;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="tinycthread_8h_1a89200caf0dc25fcc97df171d0034bff2" kindref="member">mtx_init</ref>(mtx_t<sp/>*mtx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tinycthread_8h_1ae8b3732298d1d316db6438b4c561c0dd" kindref="member">mtx_destroy</ref>(mtx_t<sp/>*mtx);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="tinycthread_8h_1a8945984db67db8ee774872da64d0e424" kindref="member">mtx_lock</ref>(mtx_t<sp/>*mtx);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="tinycthread_8h_1a98f9757dde089254735199ac738ff65f" kindref="member">mtx_timedlock</ref>(mtx_t<sp/>*mtx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>timespec<sp/>*ts);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="tinycthread_8h_1ac577690ddd48f5a1fdf3dc97881a2199" kindref="member">mtx_trylock</ref>(mtx_t<sp/>*mtx);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="tinycthread_8h_1ae2fb1d2854461fa583017cc9b0bc6cca" kindref="member">mtx_unlock</ref>(mtx_t<sp/>*mtx);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Condition<sp/>variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_TTHREAD_WIN32_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>HANDLE<sp/>mEvents[2];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Signal<sp/>and<sp/>broadcast<sp/>event<sp/>HANDLEs.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mWaitersCount;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Count<sp/>of<sp/>the<sp/>number<sp/>of<sp/>waiters.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>CRITICAL_SECTION<sp/>mWaitersCountLock;<sp/></highlight><highlight class="comment">/*<sp/>Serialize<sp/>access<sp/>to<sp/>mWaitersCount.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal">}<sp/>cnd_t;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>pthread_cond_t<sp/>cnd_t;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="tinycthread_8h_1a146f4cd218c2a2f770be14c1dee26d08" kindref="member">cnd_init</ref>(cnd_t<sp/>*cond);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tinycthread_8h_1aa925921fa9edc189f474ae10a23bcfd3" kindref="member">cnd_destroy</ref>(cnd_t<sp/>*cond);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="tinycthread_8h_1af76e066715b1190d38a69da1c511e30f" kindref="member">cnd_signal</ref>(cnd_t<sp/>*cond);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="tinycthread_8h_1a66228b340509733bdf529b93bca8df14" kindref="member">cnd_broadcast</ref>(cnd_t<sp/>*cond);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="tinycthread_8h_1ac4dfb82fc3d92bb688cb07308af6a659" kindref="member">cnd_wait</ref>(cnd_t<sp/>*cond,<sp/>mtx_t<sp/>*mtx);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="tinycthread_8h_1a2bdc352d949424855c957b0d1916d443" kindref="member">cnd_timedwait</ref>(cnd_t<sp/>*cond,<sp/>mtx_t<sp/>*mtx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>timespec<sp/>*ts);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Thread<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_TTHREAD_WIN32_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>HANDLE<sp/>thrd_t;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>pthread_t<sp/>thrd_t;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="328" refid="tinycthread_8h_1ab26bdfa456502f8c483f45bb39ca7336" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="tinycthread_8h_1ab26bdfa456502f8c483f45bb39ca7336" kindref="member">thrd_start_t</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="tinycthread_8h_1a1a52b6cd2d15cc6c4741d5124f85d183" kindref="member">thrd_create</ref>(thrd_t<sp/>*thr,<sp/><ref refid="tinycthread_8h_1ab26bdfa456502f8c483f45bb39ca7336" kindref="member">thrd_start_t</ref><sp/>func,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal">thrd_t<sp/><ref refid="tinycthread_8h_1ab67b6f182a848d979155d03598325fa7" kindref="member">thrd_current</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="tinycthread_8h_1ad5380997f9e32a31f802bdd9cb266902" kindref="member">thrd_detach</ref>(thrd_t<sp/>thr);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="tinycthread_8h_1a153e65a389814ce51ad07791e42b2118" kindref="member">thrd_equal</ref>(thrd_t<sp/>thr0,<sp/>thrd_t<sp/>thr1);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tinycthread_8h_1ae13e483223c39327e190e79e18f20b15" kindref="member">thrd_exit</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="tinycthread_8h_1aa2e83a544f49f74cf217a69a882b5d80" kindref="member">thrd_join</ref>(thrd_t<sp/>thr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*res);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="tinycthread_8h_1a58d00bd1fc0cc3c91d4c34d5faf117c3" kindref="member">thrd_sleep</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>timespec<sp/>*time_point,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>timespec<sp/>*remaining);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tinycthread_8h_1acbfb78346e6b76b23da1d2d8df03549a" kindref="member">thrd_yield</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Thread<sp/>local<sp/>storage<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_TTHREAD_WIN32_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>DWORD<sp/>tss_t;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>pthread_key_t<sp/>tss_t;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="404" refid="tinycthread_8h_1a7bd9f13e4169f842cbb831ea348049dd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="tinycthread_8h_1a7bd9f13e4169f842cbb831ea348049dd" kindref="member">tss_dtor_t</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="tinycthread_8h_1a286fe7927e9af276a9cfdbc8b9eb08ad" kindref="member">tss_create</ref>(tss_t<sp/>*key,<sp/><ref refid="tinycthread_8h_1a7bd9f13e4169f842cbb831ea348049dd" kindref="member">tss_dtor_t</ref><sp/>dtor);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tinycthread_8h_1aecebbc66b206171d9381ba94528c6cb7" kindref="member">tss_delete</ref>(tss_t<sp/>key);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="tinycthread_8h_1a5cf26b78a3f19a4e7b6876f957f2059c" kindref="member">tss_get</ref>(tss_t<sp/>key);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="tinycthread_8h_1a608e01c49b84a5ad4f085a9aedc6a680" kindref="member">tss_set</ref>(tss_t<sp/>key,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_TINYTHREAD_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/deps/tinycthread.h"/>
  </compounddef>
</doxygen>
