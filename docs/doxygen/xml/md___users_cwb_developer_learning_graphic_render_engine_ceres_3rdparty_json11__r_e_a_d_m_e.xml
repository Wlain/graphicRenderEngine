<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="md___users_cwb_developer_learning_graphic_render_engine_ceres_3rdparty_json11__r_e_a_d_m_e" kind="page">
    <compoundname>md__Users_cwb_developer_learning_graphicRenderEngine_ceres_3rdparty_json11_README</compoundname>
    <title>json11</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>json11 is a tiny JSON library for C++11, providing JSON parsing and serialization.</para>
<para>The core object provided by the library is <ref refid="classjson11_1_1_json" kindref="compound">json11::Json</ref>. A Json object represents any JSON value: null, bool, number (int or double), string (std::string), array (std::vector), or object (std::map).</para>
<para>Json objects act like values. They can be assigned, copied, moved, compared for equality or order, and so on. There are also helper methods Json::dump, to serialize a Json to a string, and Json::parse (static) to parse a std::string as a Json object.</para>
<para>It&apos;s easy to make a JSON object with C++11&apos;s new initializer syntax: <verbatim>Json my_json = Json::object {
    { &quot;key1&quot;, &quot;value1&quot; },
    { &quot;key2&quot;, false },
    { &quot;key3&quot;, Json::array { 1, 2, 3 } },
};
std::string json_str = my_json.dump();
</verbatim> There are also implicit constructors that allow standard and user-defined types to be automatically converted to JSON. For example: <verbatim>class Point {
public:
    int x;
    int y;
    Point (int x, int y) : x(x), y(y) {}
    Json to_json() const { return Json::array { x, y }; }
};

std::vector&lt;Point&gt; points = { { 1, 2 }, { 10, 20 }, { 100, 200 } };
std::string points_json = Json(points).dump();
</verbatim> JSON values can have their values queried and inspected: <verbatim>Json json = Json::array { Json::object { { &quot;k&quot;, &quot;v&quot; } } };
std::string str = json[0][&quot;k&quot;].string_value();
</verbatim> For more documentation see <ref refid="json11_8hpp_source" kindref="compound">json11.hpp</ref>. </para>
    </detaileddescription>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/README.md"/>
  </compounddef>
</doxygen>
