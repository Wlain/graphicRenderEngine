<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="src_2window_8c" kind="file" language="C++">
    <compoundname>window.c</compoundname>
    <includes refid="internal_8h" local="yes">internal.h</includes>
    <includes local="no">assert.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">float.h</includes>
    <incdepgraph>
      <node id="5">
        <label>stdint.h</label>
        <link refid="stdint_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>../include/GLFW/glfw3.h</label>
        <link refid="glfw_2include_2_g_l_f_w_2glfw3_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>egl_context.h</label>
        <link refid="egl__context_8h_source"/>
      </node>
      <node id="2">
        <label>internal.h</label>
        <link refid="internal_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>osmesa_context.h</label>
        <link refid="osmesa__context_8h_source"/>
      </node>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c</label>
        <link refid="src_2window_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>GL/gl.h</label>
      </node>
      <node id="11">
        <label>assert.h</label>
      </node>
      <node id="14">
        <label>float.h</label>
      </node>
      <node id="6">
        <label>limits.h</label>
      </node>
      <node id="4">
        <label>stddef.h</label>
      </node>
      <node id="13">
        <label>stdlib.h</label>
      </node>
      <node id="12">
        <label>string.h</label>
      </node>
      <node id="7">
        <label>wchar.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="src_2window_8c_1afb9ff9f75dd4d2dade4600dc38e8715e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _glfwInputWindowFocus</definition>
        <argsstring>(_GLFWwindow *window, GLFWbool focused)</argsstring>
        <name>_glfwInputWindowFocus</name>
        <param>
          <type><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <param>
          <type>GLFWbool</type>
          <declname>focused</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="45" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="45" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="src_2window_8c_1a782217003a0393ccd8bfba049cced9f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _glfwInputWindowPos</definition>
        <argsstring>(_GLFWwindow *window, int x, int y)</argsstring>
        <name>_glfwInputWindowPos</name>
        <param>
          <type><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="74" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="74" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="src_2window_8c_1a4becb396bda8c2a525a3d08d86354c6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _glfwInputWindowSize</definition>
        <argsstring>(_GLFWwindow *window, int width, int height)</argsstring>
        <name>_glfwInputWindowSize</name>
        <param>
          <type><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="83" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="83" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="src_2window_8c_1a2efc58babb5479443430b2a084786c62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _glfwInputWindowIconify</definition>
        <argsstring>(_GLFWwindow *window, GLFWbool iconified)</argsstring>
        <name>_glfwInputWindowIconify</name>
        <param>
          <type><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <param>
          <type>GLFWbool</type>
          <declname>iconified</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="91" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="91" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="src_2window_8c_1a3225b80b591337bcaa855c00da6ceb8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _glfwInputWindowMaximize</definition>
        <argsstring>(_GLFWwindow *window, GLFWbool maximized)</argsstring>
        <name>_glfwInputWindowMaximize</name>
        <param>
          <type><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <param>
          <type>GLFWbool</type>
          <declname>maximized</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="99" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="99" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="src_2window_8c_1a1f8385157e99fea8cc960c0fb2f2fc47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _glfwInputFramebufferSize</definition>
        <argsstring>(_GLFWwindow *window, int width, int height)</argsstring>
        <name>_glfwInputFramebufferSize</name>
        <param>
          <type><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="108" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="108" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="src_2window_8c_1ab44396b5037d1a39f77bf9e70a954ad3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _glfwInputWindowContentScale</definition>
        <argsstring>(_GLFWwindow *window, float xscale, float yscale)</argsstring>
        <name>_glfwInputWindowContentScale</name>
        <param>
          <type><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <param>
          <type>float</type>
          <declname>xscale</declname>
        </param>
        <param>
          <type>float</type>
          <declname>yscale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="117" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="117" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="src_2window_8c_1ad9d5a996eef8fe1afcacc325f4510d1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _glfwInputWindowDamage</definition>
        <argsstring>(_GLFWwindow *window)</argsstring>
        <name>_glfwInputWindowDamage</name>
        <param>
          <type><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="125" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="125" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="src_2window_8c_1ae47e309820934e21c92a3e60faeefe8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _glfwInputWindowCloseRequest</definition>
        <argsstring>(_GLFWwindow *window)</argsstring>
        <name>_glfwInputWindowCloseRequest</name>
        <param>
          <type><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="133" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="133" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="src_2window_8c_1a5cfc56e9a5e1e8dd88862c9c7b8a6f7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _glfwInputWindowMonitor</definition>
        <argsstring>(_GLFWwindow *window, _GLFWmonitor *monitor)</argsstring>
        <name>_glfwInputWindowMonitor</name>
        <param>
          <type><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <param>
          <type><ref refid="struct___g_l_f_wmonitor" kindref="compound">_GLFWmonitor</ref> *</type>
          <declname>monitor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="143" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="143" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1gaaccd00fafe81e2db94e8cdf55721e055" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI <ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
        <definition>GLFWAPI GLFWwindow * glfwCreateWindow</definition>
        <argsstring>(int width, int height, const char *title, GLFWmonitor *monitor, GLFWwindow *share)</argsstring>
        <name>glfwCreateWindow</name>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>title</declname>
        </param>
        <param>
          <type><ref refid="group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3" kindref="member">GLFWmonitor</ref> *</type>
          <declname>monitor</declname>
        </param>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>share</declname>
        </param>
        <briefdescription>
<para>Creates a window and its associated context. </para>
        </briefdescription>
        <detaileddescription>
<para>This function creates a window and its associated OpenGL or OpenGL ES context. Most of the options controlling how the window and its context should be created are specified with <ref refid="window_guide_1window_hints" kindref="member">window hints</ref>.</para>
<para>Successful creation does not change which context is current. Before you can use the newly created context, you need to <ref refid="context_guide_1context_current" kindref="member">make it current</ref>. For information about the <computeroutput>share</computeroutput> parameter, see <ref refid="context_guide_1context_sharing" kindref="member">Context object sharing</ref>.</para>
<para>The created window, framebuffer and context may differ from what you requested, as not all parameters and hints are <ref refid="window_guide_1window_hints_hard" kindref="member">hard constraints</ref>. This includes the size of the window, especially for full screen windows. To query the actual attributes of the created window, framebuffer and context, see <ref refid="group__window_1ga1bb0c7e100418e284dbb800789c63d40" kindref="member">glfwGetWindowAttrib</ref>, <ref refid="group__window_1ga7feb769ebb3f3d21579b5a3fb07be76e" kindref="member">glfwGetWindowSize</ref> and <ref refid="group__window_1gaf7d17f3534b4b6dc9a6f905e3a240b7e" kindref="member">glfwGetFramebufferSize</ref>.</para>
<para>To create a full screen window, you need to specify the monitor the window will cover. If no monitor is specified, the window will be windowed mode. Unless you have a way for the user to choose a specific monitor, it is recommended that you pick the primary monitor. For more information on how to query connected monitors, see <ref refid="monitor_guide_1monitor_monitors" kindref="member">Retrieving monitors</ref>.</para>
<para>For full screen windows, the specified size becomes the resolution of the window&apos;s <emphasis>desired video mode</emphasis>. As long as a full screen window is not iconified, the supported video mode most closely matching the desired video mode is set for the specified monitor. For more information about full screen windows, including the creation of so called <emphasis>windowed full screen</emphasis> or <emphasis>borderless full screen</emphasis> windows, see <ref refid="window_guide_1window_windowed_full_screen" kindref="member">&quot;Windowed full screen&quot; windows</ref>.</para>
<para>Once you have created the window, you can switch it between windowed and full screen mode with <ref refid="group__window_1ga12fabf78575e59c00f822f323ae0b6ae" kindref="member">glfwSetWindowMonitor</ref>. This will not affect its OpenGL or OpenGL ES context.</para>
<para>By default, newly created windows use the placement recommended by the window system. To create the window at a specific position, make it initially invisible using the <ref refid="window_guide_1GLFW_VISIBLE_hint" kindref="member">GLFW_VISIBLE</ref> window hint, set its <ref refid="window_guide_1window_pos" kindref="member">position</ref> and then <ref refid="window_guide_1window_hide" kindref="member">show</ref> it.</para>
<para>As long as at least one full screen window is not iconified, the screensaver is prohibited from starting.</para>
<para>Window systems put limits on window sizes. Very large or very small window dimensions may be overridden by the window system on creation. Check the actual <ref refid="window_guide_1window_size" kindref="member">size</ref> after creation.</para>
<para>The <ref refid="window_guide_1buffer_swap" kindref="member">swap interval</ref> is not set during window creation and the initial value may vary depending on driver settings and defaults.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">width</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired width, in screen coordinates, of the window. This must be greater than zero. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">height</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired height, in screen coordinates, of the window. This must be greater than zero. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">title</parametername>
</parameternamelist>
<parameterdescription>
<para>The initial, UTF-8 encoded window title. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">monitor</parametername>
</parameternamelist>
<parameterdescription>
<para>The monitor to use for full screen mode, or <computeroutput>NULL</computeroutput> for windowed mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">share</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose context to share resources with, or <computeroutput>NULL</computeroutput> to not share resources. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The handle of the created window, or <computeroutput>NULL</computeroutput> if an <ref refid="intro_guide_1error_handling" kindref="member">error</ref> occurred.</para>
</simplesect>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>, <ref refid="group__errors_1ga76f6bb9c4eea73db675f096b404593ce" kindref="member">GLFW_INVALID_ENUM</ref>, <ref refid="group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687" kindref="member">GLFW_INVALID_VALUE</ref>, <ref refid="group__errors_1ga56882b290db23261cc6c053c40c2d08e" kindref="member">GLFW_API_UNAVAILABLE</ref>, <ref refid="group__errors_1gad16c5565b4a69f9c2a9ac2c0dbc89462" kindref="member">GLFW_VERSION_UNAVAILABLE</ref>, <ref refid="group__errors_1ga196e125ef261d94184e2b55c05762f14" kindref="member">GLFW_FORMAT_UNAVAILABLE</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para><simplesect kind="remark"><para>@win32 Window creation will fail if the Microsoft GDI software OpenGL implementation is the only one available.</para>
</simplesect>
<simplesect kind="remark"><para>@win32 If the executable has an icon resource named <computeroutput>GLFW_ICON,</computeroutput> it will be set as the initial icon for the window. If no such icon is present, the <computeroutput>IDI_APPLICATION</computeroutput> icon will be used instead. To set a different icon, see <ref refid="group__window_1ga182987a1a62a41a924842b9473d560df" kindref="member">glfwSetWindowIcon</ref>.</para>
</simplesect>
<simplesect kind="remark"><para>@win32 The context to share resources with must not be current on any other thread.</para>
</simplesect>
<simplesect kind="remark"><para>@macos The OS only supports core profile contexts for OpenGL versions 3.2 and later. Before creating an OpenGL context of version 3.2 or later you must set the <ref refid="window_guide_1GLFW_OPENGL_PROFILE_hint" kindref="member">GLFW_OPENGL_PROFILE</ref> hint accordingly. OpenGL 3.0 and 3.1 contexts are not supported at all on macOS.</para>
</simplesect>
<simplesect kind="remark"><para>@macos The GLFW window has no icon, as it is not a document window, but the dock icon will be the same as the application bundle&apos;s icon. For more information on bundles, see the <ulink url="https://developer.apple.com/library/mac/documentation/CoreFoundation/Conceptual/CFBundles/">Bundle Programming Guide</ulink> in the Mac Developer Library.</para>
</simplesect>
<simplesect kind="remark"><para>@macos On OS X 10.10 and later the window frame will not be rendered at full resolution on Retina displays unless the <ref refid="window_guide_1GLFW_COCOA_RETINA_FRAMEBUFFER_hint" kindref="member">GLFW_COCOA_RETINA_FRAMEBUFFER</ref> hint is <computeroutput>GLFW_TRUE</computeroutput> and the <computeroutput>NSHighResolutionCapable</computeroutput> key is enabled in the application bundle&apos;s <computeroutput>Info.plist</computeroutput>. For more information, see <ulink url="https://developer.apple.com/library/mac/documentation/GraphicsAnimation/Conceptual/HighResolutionOSX/Explained/Explained.html">High Resolution Guidelines for OS X</ulink> in the Mac Developer Library. The GLFW test and example programs use a custom <computeroutput>Info.plist</computeroutput> template for this, which can be found as <computeroutput>CMake/Info.plist.in</computeroutput> in the source tree.</para>
</simplesect>
<simplesect kind="remark"><para>@macos When activating frame autosaving with <ref refid="window_guide_1GLFW_COCOA_FRAME_NAME_hint" kindref="member">GLFW_COCOA_FRAME_NAME</ref>, the specified window size and position may be overridden by previously saved values.</para>
</simplesect>
<simplesect kind="remark"><para>@x11 Some window managers will not respect the placement of initially hidden windows.</para>
</simplesect>
<simplesect kind="remark"><para>@x11 Due to the asynchronous nature of X11, it may take a moment for a window to reach its requested state. This means you may not be able to query the final size, position or other attributes directly after window creation.</para>
</simplesect>
<simplesect kind="remark"><para>@x11 The class part of the <computeroutput>WM_CLASS</computeroutput> window property will by default be set to the window title passed to this function. The instance part will use the contents of the <computeroutput>RESOURCE_NAME</computeroutput> environment variable, if present and not empty, or fall back to the window title. Set the <ref refid="window_guide_1GLFW_X11_CLASS_NAME_hint" kindref="member">GLFW_X11_CLASS_NAME</ref> and <ref refid="window_guide_1GLFW_X11_INSTANCE_NAME_hint" kindref="member">GLFW_X11_INSTANCE_NAME</ref> window hints to override this.</para>
</simplesect>
<simplesect kind="remark"><para>@wayland Compositors should implement the xdg-decoration protocol for GLFW to decorate the window properly. If this protocol isn&apos;t supported, or if the compositor prefers client-side decorations, a very simple fallback frame will be drawn using the wp_viewporter protocol. A compositor can still emit close, maximize or fullscreen events, using for instance a keybind mechanism. If neither of these protocols is supported, the window won&apos;t be decorated.</para>
</simplesect>
<simplesect kind="remark"><para>@wayland A full screen window will not attempt to change the mode, no matter what the requested size or refresh rate.</para>
</simplesect>
<simplesect kind="remark"><para>@wayland Screensaver inhibition requires the idle-inhibit protocol to be implemented in the user&apos;s compositor.</para>
</simplesect>
@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_creation" kindref="member">Window creation</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga806747476b7247d292be3711c323ea10" kindref="member">glfwDestroyWindow</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0. Replaces <computeroutput>glfwOpenWindow</computeroutput>.</para>
</simplesect>
This function creates a window and its associated OpenGL or OpenGL ES context. Most of the options controlling how the window and its context should be created are specified with <ref refid="window_guide_1window_hints" kindref="member">window hints</ref>.</para>
<para>Successful creation does not change which context is current. Before you can use the newly created context, you need to <ref refid="context_guide_1context_current" kindref="member">make it current</ref>. For information about the <computeroutput>share</computeroutput> parameter, see <ref refid="context_guide_1context_sharing" kindref="member">Context object sharing</ref>.</para>
<para>The created window, framebuffer and context may differ from what you requested, as not all parameters and hints are <ref refid="window_guide_1window_hints_hard" kindref="member">hard constraints</ref>. This includes the size of the window, especially for full screen windows. To query the actual attributes of the created window, framebuffer and context, see <ref refid="group__window_1ga1bb0c7e100418e284dbb800789c63d40" kindref="member">glfwGetWindowAttrib</ref>, <ref refid="group__window_1ga7feb769ebb3f3d21579b5a3fb07be76e" kindref="member">glfwGetWindowSize</ref> and <ref refid="group__window_1gaf7d17f3534b4b6dc9a6f905e3a240b7e" kindref="member">glfwGetFramebufferSize</ref>.</para>
<para>To create a full screen window, you need to specify the monitor the window will cover. If no monitor is specified, the window will be windowed mode. Unless you have a way for the user to choose a specific monitor, it is recommended that you pick the primary monitor. For more information on how to query connected monitors, see <ref refid="monitor_guide_1monitor_monitors" kindref="member">Retrieving monitors</ref>.</para>
<para>For full screen windows, the specified size becomes the resolution of the window&apos;s <emphasis>desired video mode</emphasis>. As long as a full screen window is not iconified, the supported video mode most closely matching the desired video mode is set for the specified monitor. For more information about full screen windows, including the creation of so called <emphasis>windowed full screen</emphasis> or <emphasis>borderless full screen</emphasis> windows, see <ref refid="window_guide_1window_windowed_full_screen" kindref="member">&quot;Windowed full screen&quot; windows</ref>.</para>
<para>By default, newly created windows use the placement recommended by the window system. To create the window at a specific position, make it initially invisible using the <ref refid="window_guide_1window_hints_wnd" kindref="member">GLFW_VISIBLE</ref> window hint, set its <ref refid="window_guide_1window_pos" kindref="member">position</ref> and then <ref refid="window_guide_1window_hide" kindref="member">show</ref> it.</para>
<para>As long as at least one full screen window is not iconified, the screensaver is prohibited from starting.</para>
<para>Window systems put limits on window sizes. Very large or very small window dimensions may be overridden by the window system on creation. Check the actual <ref refid="window_guide_1window_size" kindref="member">size</ref> after creation.</para>
<para>The <ref refid="window_guide_1buffer_swap" kindref="member">swap interval</ref> is not set during window creation and the initial value may vary depending on driver settings and defaults.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">width</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired width, in screen coordinates, of the window. This must be greater than zero. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">height</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired height, in screen coordinates, of the window. This must be greater than zero. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">title</parametername>
</parameternamelist>
<parameterdescription>
<para>The initial, UTF-8 encoded window title. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">monitor</parametername>
</parameternamelist>
<parameterdescription>
<para>The monitor to use for full screen mode, or <computeroutput>NULL</computeroutput> for windowed mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">share</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose context to share resources with, or <computeroutput>NULL</computeroutput> to not share resources. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The handle of the created window, or <computeroutput>NULL</computeroutput> if an <ref refid="intro_guide_1error_handling" kindref="member">error</ref> occurred.</para>
</simplesect>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>, <ref refid="group__errors_1ga76f6bb9c4eea73db675f096b404593ce" kindref="member">GLFW_INVALID_ENUM</ref>, <ref refid="group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687" kindref="member">GLFW_INVALID_VALUE</ref>, <ref refid="group__errors_1ga56882b290db23261cc6c053c40c2d08e" kindref="member">GLFW_API_UNAVAILABLE</ref>, <ref refid="group__errors_1gad16c5565b4a69f9c2a9ac2c0dbc89462" kindref="member">GLFW_VERSION_UNAVAILABLE</ref>, <ref refid="group__errors_1ga196e125ef261d94184e2b55c05762f14" kindref="member">GLFW_FORMAT_UNAVAILABLE</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para><simplesect kind="remark"><para>@win32 Window creation will fail if the Microsoft GDI software OpenGL implementation is the only one available.</para>
</simplesect>
<simplesect kind="remark"><para>@win32 If the executable has an icon resource named <computeroutput>GLFW_ICON,</computeroutput> it will be set as the icon for the window. If no such icon is present, the <computeroutput>IDI_WINLOGO</computeroutput> icon will be used instead.</para>
</simplesect>
<simplesect kind="remark"><para>@win32 The context to share resources with must not be current on any other thread.</para>
</simplesect>
<simplesect kind="remark"><para>@osx The GLFW window has no icon, as it is not a document window, but the dock icon will be the same as the application bundle&apos;s icon. For more information on bundles, see the <ulink url="https://developer.apple.com/library/mac/documentation/CoreFoundation/Conceptual/CFBundles/">Bundle Programming Guide</ulink> in the Mac Developer Library.</para>
</simplesect>
<simplesect kind="remark"><para>@osx The first time a window is created the menu bar is populated with common commands like Hide, Quit and About. The About entry opens a minimal about dialog with information from the application&apos;s bundle. The menu bar can be disabled with a compile-time option.</para>
</simplesect>
<simplesect kind="remark"><para>@osx On OS X 10.10 and later the window frame will not be rendered at full resolution on Retina displays unless the <computeroutput>NSHighResolutionCapable</computeroutput> key is enabled in the application bundle&apos;s <computeroutput>Info.plist</computeroutput>. For more information, see <ulink url="https://developer.apple.com/library/mac/documentation/GraphicsAnimation/Conceptual/HighResolutionOSX/Explained/Explained.html">High Resolution Guidelines for OS X</ulink> in the Mac Developer Library. The GLFW test and example programs use a custom <computeroutput>Info.plist</computeroutput> template for this, which can be found as <computeroutput>CMake/MacOSXBundleInfo.plist.in</computeroutput> in the source tree.</para>
</simplesect>
<simplesect kind="remark"><para>@x11 There is no mechanism for setting the window icon yet.</para>
</simplesect>
<simplesect kind="remark"><para>@x11 Some window managers will not respect the placement of initially hidden windows.</para>
</simplesect>
<simplesect kind="remark"><para>@x11 Due to the asynchronous nature of X11, it may take a moment for a window to reach its requested state. This means you may not be able to query the final size, position or other attributes directly after window creation.</para>
</simplesect>
@reentrancy This function must not be called from a callback.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_creation" kindref="member">Window creation</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga806747476b7247d292be3711c323ea10" kindref="member">glfwDestroyWindow</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0. Replaces <computeroutput>glfwOpenWindow</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="152" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="152" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga8050ddceed9dc6bd9d3aa35666195cd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void glfwDefaultWindowHints</definition>
        <argsstring>(void)</argsstring>
        <name>glfwDefaultWindowHints</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Resets all window hints to their default values. </para>
        </briefdescription>
        <detaileddescription>
<para>This function resets all window hints to their <ref refid="window_guide_1window_hints_values" kindref="member">default values</ref>.</para>
<para>@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_hints" kindref="member">Window creation hints</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga69c40728499720bef8a49aa925ea0efa" kindref="member">glfwWindowHint</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga3c2270562d7ba13d92680ba1090adafe" kindref="member">glfwWindowHintString</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0.</para>
</simplesect>
This function resets all window hints to their <ref refid="window_guide_1window_hints_values" kindref="member">default values</ref>.</para>
<para>@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_hints" kindref="member">Window creation hints</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga69c40728499720bef8a49aa925ea0efa" kindref="member">glfwWindowHint</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="253" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="253" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga69c40728499720bef8a49aa925ea0efa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI void</type>
        <definition>GLFWAPI void glfwWindowHint</definition>
        <argsstring>(int hint, int value)</argsstring>
        <name>glfwWindowHint</name>
        <param>
          <type>int</type>
          <declname>hint</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the specified window hint to the desired value. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets hints for the next call to <ref refid="group__window_1gaaccd00fafe81e2db94e8cdf55721e055" kindref="member">glfwCreateWindow</ref>. The hints, once set, retain their values until changed by a call to this function or <ref refid="group__window_1ga8050ddceed9dc6bd9d3aa35666195cd4" kindref="member">glfwDefaultWindowHints</ref>, or until the library is terminated.</para>
<para>Only integer value hints can be set with this function. String value hints are set with <ref refid="group__window_1ga3c2270562d7ba13d92680ba1090adafe" kindref="member">glfwWindowHintString</ref>.</para>
<para>This function does not check whether the specified hint values are valid. If you set hints to invalid values this will instead be reported by the next call to <ref refid="group__window_1gaaccd00fafe81e2db94e8cdf55721e055" kindref="member">glfwCreateWindow</ref>.</para>
<para>Some hints are platform specific. These may be set on any platform but they will only affect their specific platform. Other platforms will ignore them. Setting these hints requires no platform specific headers or functions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">hint</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="window_guide_1window_hints" kindref="member">window hint</ref> to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>The new value of the window hint.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1ga76f6bb9c4eea73db675f096b404593ce" kindref="member">GLFW_INVALID_ENUM</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_hints" kindref="member">Window creation hints</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga3c2270562d7ba13d92680ba1090adafe" kindref="member">glfwWindowHintString</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga8050ddceed9dc6bd9d3aa35666195cd4" kindref="member">glfwDefaultWindowHints</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0. Replaces <computeroutput>glfwOpenWindowHint</computeroutput>.</para>
</simplesect>
This function sets hints for the next call to <ref refid="group__window_1gaaccd00fafe81e2db94e8cdf55721e055" kindref="member">glfwCreateWindow</ref>. The hints, once set, retain their values until changed by a call to <ref refid="group__window_1ga69c40728499720bef8a49aa925ea0efa" kindref="member">glfwWindowHint</ref> or <ref refid="group__window_1ga8050ddceed9dc6bd9d3aa35666195cd4" kindref="member">glfwDefaultWindowHints</ref>, or until the library is terminated.</para>
<para>This function does not check whether the specified hint values are valid. If you set hints to invalid values this will instead be reported by the next call to <ref refid="group__window_1gaaccd00fafe81e2db94e8cdf55721e055" kindref="member">glfwCreateWindow</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">hint</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="window_guide_1window_hints" kindref="member">window hint</ref> to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>The new value of the window hint.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1ga76f6bb9c4eea73db675f096b404593ce" kindref="member">GLFW_INVALID_ENUM</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_hints" kindref="member">Window creation hints</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga8050ddceed9dc6bd9d3aa35666195cd4" kindref="member">glfwDefaultWindowHints</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0. Replaces <computeroutput>glfwOpenWindowHint</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="292" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="292" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga3c2270562d7ba13d92680ba1090adafe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI void</type>
        <definition>GLFWAPI void glfwWindowHintString</definition>
        <argsstring>(int hint, const char *value)</argsstring>
        <name>glfwWindowHintString</name>
        <param>
          <type>int</type>
          <declname>hint</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the specified window hint to the desired value. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets hints for the next call to <ref refid="group__window_1gaaccd00fafe81e2db94e8cdf55721e055" kindref="member">glfwCreateWindow</ref>. The hints, once set, retain their values until changed by a call to this function or <ref refid="group__window_1ga8050ddceed9dc6bd9d3aa35666195cd4" kindref="member">glfwDefaultWindowHints</ref>, or until the library is terminated.</para>
<para>Only string type hints can be set with this function. Integer value hints are set with <ref refid="group__window_1ga69c40728499720bef8a49aa925ea0efa" kindref="member">glfwWindowHint</ref>.</para>
<para>This function does not check whether the specified hint values are valid. If you set hints to invalid values this will instead be reported by the next call to <ref refid="group__window_1gaaccd00fafe81e2db94e8cdf55721e055" kindref="member">glfwCreateWindow</ref>.</para>
<para>Some hints are platform specific. These may be set on any platform but they will only affect their specific platform. Other platforms will ignore them. Setting these hints requires no platform specific headers or functions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">hint</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="window_guide_1window_hints" kindref="member">window hint</ref> to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>The new value of the window hint.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1ga76f6bb9c4eea73db675f096b404593ce" kindref="member">GLFW_INVALID_ENUM</ref>.</para>
<para>@pointer_lifetime The specified string is copied before this function returns.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_hints" kindref="member">Window creation hints</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga69c40728499720bef8a49aa925ea0efa" kindref="member">glfwWindowHint</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga8050ddceed9dc6bd9d3aa35666195cd4" kindref="member">glfwDefaultWindowHints</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.3. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="426" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="426" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga806747476b7247d292be3711c323ea10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI void</type>
        <definition>GLFWAPI void glfwDestroyWindow</definition>
        <argsstring>(GLFWwindow *handle)</argsstring>
        <name>glfwDestroyWindow</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <briefdescription>
<para>Destroys the specified window and its context. </para>
        </briefdescription>
        <detaileddescription>
<para>This function destroys the specified window and its context. On calling this function, no further callbacks will be called for that window.</para>
<para>If the context of the specified window is current on the main thread, it is detached before being destroyed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to destroy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para><simplesect kind="note"><para>The context of the specified window must not be current on any other thread when this function is called.</para>
</simplesect>
@reentrancy This function must not be called from a callback.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_creation" kindref="member">Window creation</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1gaaccd00fafe81e2db94e8cdf55721e055" kindref="member">glfwCreateWindow</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0. Replaces <computeroutput>glfwCloseWindow</computeroutput>.</para>
</simplesect>
This function destroys the specified window and its context. On calling this function, no further callbacks will be called for that window.</para>
<para>If the context of the specified window is current on the main thread, it is detached before being destroyed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to destroy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para><simplesect kind="note"><para>The context of the specified window must not be current on any other thread when this function is called.</para>
</simplesect>
@reentrancy This function must not be called from a callback.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_creation" kindref="member">Window creation</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1gaaccd00fafe81e2db94e8cdf55721e055" kindref="member">glfwCreateWindow</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0. Replaces <computeroutput>glfwCloseWindow</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="451" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="451" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1gaa6162f67dfa38b8beda2fea623649332" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI int</type>
        <definition>GLFWAPI int glfwWindowShouldClose</definition>
        <argsstring>(GLFWwindow *handle)</argsstring>
        <name>glfwWindowShouldClose</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <briefdescription>
<para>Checks the close flag of the specified window. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns the value of the close flag of the specified window.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to query. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the close flag.</para>
</simplesect>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>.</para>
<para>@thread_safety This function may be called from any thread. Access is not synchronized.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_close" kindref="member">Window closing and close flag</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="484" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="484" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga1cadeda7a1e2f224e06a8415d30741aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI void</type>
        <definition>GLFWAPI void glfwSetWindowShouldClose</definition>
        <argsstring>(GLFWwindow *handle, int value)</argsstring>
        <name>glfwSetWindowShouldClose</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the close flag of the specified window. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the value of the close flag of the specified window. This can be used to override the user&apos;s attempt to close the window, or to signal that it should be closed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose flag to change. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>The new value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>.</para>
<para>@thread_safety This function may be called from any thread. Access is not synchronized.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_close" kindref="member">Window closing and close flag</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="493" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="493" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga861ed3414ab8120e2f74151a666ed1dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI void</type>
        <definition>GLFWAPI void glfwSetWindowTitle</definition>
        <argsstring>(GLFWwindow *handle, const char *title)</argsstring>
        <name>glfwSetWindowTitle</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <param>
          <type>const char *</type>
          <declname>title</declname>
        </param>
        <briefdescription>
<para>Sets the title of the specified window. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the window title, encoded as UTF-8, of the specified window.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose title to change. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">title</parametername>
</parameternamelist>
<parameterdescription>
<para>The UTF-8 encoded window title.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para><simplesect kind="remark"><para>@macos The window title will not be updated until the next time you process events.</para>
</simplesect>
@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_title" kindref="member">Window title</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 1.0. @glfw3 Added window handle parameter.</para>
</simplesect>
This function sets the window title, encoded as UTF-8, of the specified window.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose title to change. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">title</parametername>
</parameternamelist>
<parameterdescription>
<para>The UTF-8 encoded window title.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para><simplesect kind="remark"><para>@osx The window title will not be updated until the next time you process events.</para>
</simplesect>
@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_title" kindref="member">Window title</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 1.0. @glfw3 Added window handle parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="502" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="502" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga182987a1a62a41a924842b9473d560df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI void</type>
        <definition>GLFWAPI void glfwSetWindowIcon</definition>
        <argsstring>(GLFWwindow *handle, int count, const GLFWimage *images)</argsstring>
        <name>glfwSetWindowIcon</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const <ref refid="struct_g_l_f_wimage" kindref="compound">GLFWimage</ref> *</type>
          <declname>images</declname>
        </param>
        <briefdescription>
<para>Sets the icon for the specified window. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the icon of the specified window. If passed an array of candidate images, those of or closest to the sizes desired by the system are selected. If no images are specified, the window reverts to its default icon.</para>
<para>The pixels are 32-bit, little-endian, non-premultiplied RGBA, i.e. eight bits per channel with the red channel first. They are arranged canonically as packed sequential rows, starting from the top-left corner.</para>
<para>The desired image sizes varies depending on platform and system settings. The selected images will be rescaled as needed. Good sizes include 16x16, 32x32 and 48x48.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose icon to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of images in the specified array, or zero to revert to the default window icon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">images</parametername>
</parameternamelist>
<parameterdescription>
<para>The images to create the icon from. This is ignored if count is zero.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>, <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref> and <ref refid="group__errors_1ga526fba20a01504a8086c763b6ca53ce5" kindref="member">GLFW_FEATURE_UNAVAILABLE</ref> (see remarks).</para>
<para>@pointer_lifetime The specified image data is copied before this function returns.</para>
<para><simplesect kind="remark"><para>@macos Regular windows do not have icons on macOS. This function will emit <ref refid="group__errors_1ga526fba20a01504a8086c763b6ca53ce5" kindref="member">GLFW_FEATURE_UNAVAILABLE</ref>. The dock icon will be the same as the application bundle&apos;s icon. For more information on bundles, see the <ulink url="https://developer.apple.com/library/mac/documentation/CoreFoundation/Conceptual/CFBundles/">Bundle Programming Guide</ulink> in the Mac Developer Library.</para>
</simplesect>
<simplesect kind="remark"><para>@wayland There is no existing protocol to change an icon, the window will thus inherit the one defined in the application&apos;s desktop file. This function will emit <ref refid="group__errors_1ga526fba20a01504a8086c763b6ca53ce5" kindref="member">GLFW_FEATURE_UNAVAILABLE</ref>.</para>
</simplesect>
@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_icon" kindref="member">Window icon</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.2.</para>
</simplesect>
This function sets the icon of the specified window. If passed an array of candidate images, those of or closest to the sizes desired by the system are selected. If no images are specified, the window reverts to its default icon.</para>
<para>The desired image sizes varies depending on platform and system settings. The selected images will be rescaled as needed. Good sizes include 16x16, 32x32 and 48x48.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose icon to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of images in the specified array, or zero to revert to the default window icon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">images</parametername>
</parameternamelist>
<parameterdescription>
<para>The images to create the icon from. This is ignored if count is zero.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para>@pointer_lifetime The specified image data is copied before this function returns.</para>
<para><simplesect kind="remark"><para>@osx The GLFW window has no icon, as it is not a document window, but the dock icon will be the same as the application bundle&apos;s icon. For more information on bundles, see the <ulink url="https://developer.apple.com/library/mac/documentation/CoreFoundation/Conceptual/CFBundles/">Bundle Programming Guide</ulink> in the Mac Developer Library.</para>
</simplesect>
@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_icon" kindref="member">Window icon</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.2. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="512" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="512" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga0076a8591ef7494d359730cf2250b45b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI void</type>
        <definition>GLFWAPI void glfwGetWindowPos</definition>
        <argsstring>(GLFWwindow *handle, int *xpos, int *ypos)</argsstring>
        <name>glfwGetWindowPos</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <param>
          <type>int *</type>
          <declname>xpos</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ypos</declname>
        </param>
        <briefdescription>
<para>Retrieves the position of the content area of the specified window. </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieves the position of the client area of the specified window.</para>
<para>This function retrieves the position, in screen coordinates, of the upper-left corner of the content area of the specified window.</para>
<para>Any or all of the position arguments may be <computeroutput>NULL</computeroutput>. If an error occurs, all non-<computeroutput>NULL</computeroutput> position arguments will be set to zero.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">xpos</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the x-coordinate of the upper-left corner of the content area, or <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ypos</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the y-coordinate of the upper-left corner of the content area, or <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>, <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref> and <ref refid="group__errors_1ga526fba20a01504a8086c763b6ca53ce5" kindref="member">GLFW_FEATURE_UNAVAILABLE</ref> (see remarks).</para>
<para><simplesect kind="remark"><para>@wayland There is no way for an application to retrieve the global position of its windows. This function will emit <ref refid="group__errors_1ga526fba20a01504a8086c763b6ca53ce5" kindref="member">GLFW_FEATURE_UNAVAILABLE</ref>.</para>
</simplesect>
@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_pos" kindref="member">Window position</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga0dc8d880a0d87be16d3ea8114561f6f0" kindref="member">glfwSetWindowPos</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0.</para>
</simplesect>
This function retrieves the position, in screen coordinates, of the upper-left corner of the client area of the specified window.</para>
<para>Any or all of the position arguments may be <computeroutput>NULL</computeroutput>. If an error occurs, all non-<computeroutput>NULL</computeroutput> position arguments will be set to zero.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">xpos</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the x-coordinate of the upper-left corner of the client area, or <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ypos</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the y-coordinate of the upper-left corner of the client area, or <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_pos" kindref="member">Window position</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga0dc8d880a0d87be16d3ea8114561f6f0" kindref="member">glfwSetWindowPos</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="524" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="524" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga0dc8d880a0d87be16d3ea8114561f6f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI void</type>
        <definition>GLFWAPI void glfwSetWindowPos</definition>
        <argsstring>(GLFWwindow *handle, int xpos, int ypos)</argsstring>
        <name>glfwSetWindowPos</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <param>
          <type>int</type>
          <declname>xpos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ypos</declname>
        </param>
        <briefdescription>
<para>Sets the position of the content area of the specified window. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets the position of the client area of the specified window.</para>
<para>This function sets the position, in screen coordinates, of the upper-left corner of the content area of the specified windowed mode window. If the window is a full screen window, this function does nothing.</para>
<para><bold>Do not use this function</bold> to move an already visible window unless you have very good reasons for doing so, as it will confuse and annoy the user.</para>
<para>The window manager may put limits on what positions are allowed. GLFW cannot and should not override these limits.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">xpos</parametername>
</parameternamelist>
<parameterdescription>
<para>The x-coordinate of the upper-left corner of the content area. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ypos</parametername>
</parameternamelist>
<parameterdescription>
<para>The y-coordinate of the upper-left corner of the content area.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>, <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref> and <ref refid="group__errors_1ga526fba20a01504a8086c763b6ca53ce5" kindref="member">GLFW_FEATURE_UNAVAILABLE</ref> (see remarks).</para>
<para><simplesect kind="remark"><para>@wayland There is no way for an application to set the global position of its windows. This function will emit <ref refid="group__errors_1ga526fba20a01504a8086c763b6ca53ce5" kindref="member">GLFW_FEATURE_UNAVAILABLE</ref>.</para>
</simplesect>
@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_pos" kindref="member">Window position</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga0076a8591ef7494d359730cf2250b45b" kindref="member">glfwGetWindowPos</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 1.0. @glfw3 Added window handle parameter.</para>
</simplesect>
This function sets the position, in screen coordinates, of the upper-left corner of the client area of the specified windowed mode window. If the window is a full screen window, this function does nothing.</para>
<para><bold>Do not use this function</bold> to move an already visible window unless you have very good reasons for doing so, as it will confuse and annoy the user.</para>
<para>The window manager may put limits on what positions are allowed. GLFW cannot and should not override these limits.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">xpos</parametername>
</parameternamelist>
<parameterdescription>
<para>The x-coordinate of the upper-left corner of the client area. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ypos</parametername>
</parameternamelist>
<parameterdescription>
<para>The y-coordinate of the upper-left corner of the client area.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_pos" kindref="member">Window position</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga0076a8591ef7494d359730cf2250b45b" kindref="member">glfwGetWindowPos</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 1.0. @glfw3 Added window handle parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="538" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="538" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga7feb769ebb3f3d21579b5a3fb07be76e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI void</type>
        <definition>GLFWAPI void glfwGetWindowSize</definition>
        <argsstring>(GLFWwindow *handle, int *width, int *height)</argsstring>
        <name>glfwGetWindowSize</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <param>
          <type>int *</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>Retrieves the size of the content area of the specified window. </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieves the size of the client area of the specified window.</para>
<para>This function retrieves the size, in screen coordinates, of the content area of the specified window. If you wish to retrieve the size of the framebuffer of the window in pixels, see <ref refid="group__window_1gaf7d17f3534b4b6dc9a6f905e3a240b7e" kindref="member">glfwGetFramebufferSize</ref>.</para>
<para>Any or all of the size arguments may be <computeroutput>NULL</computeroutput>. If an error occurs, all non-<computeroutput>NULL</computeroutput> size arguments will be set to zero.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose size to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">width</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the width, in screen coordinates, of the content area, or <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">height</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the height, in screen coordinates, of the content area, or <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_size" kindref="member">Window size</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1gae54d1f4915ded15e267ddd3f41496cd2" kindref="member">glfwSetWindowSize</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 1.0. @glfw3 Added window handle parameter.</para>
</simplesect>
This function retrieves the size, in screen coordinates, of the client area of the specified window. If you wish to retrieve the size of the framebuffer of the window in pixels, see <ref refid="group__window_1gaf7d17f3534b4b6dc9a6f905e3a240b7e" kindref="member">glfwGetFramebufferSize</ref>.</para>
<para>Any or all of the size arguments may be <computeroutput>NULL</computeroutput>. If an error occurs, all non-<computeroutput>NULL</computeroutput> size arguments will be set to zero.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose size to retrieve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">width</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the width, in screen coordinates, of the client area, or <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">height</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the height, in screen coordinates, of the client area, or <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_size" kindref="member">Window size</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1gae54d1f4915ded15e267ddd3f41496cd2" kindref="member">glfwSetWindowSize</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 1.0. @glfw3 Added window handle parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="551" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="551" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1gae54d1f4915ded15e267ddd3f41496cd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI void</type>
        <definition>GLFWAPI void glfwSetWindowSize</definition>
        <argsstring>(GLFWwindow *handle, int width, int height)</argsstring>
        <name>glfwSetWindowSize</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>Sets the size of the content area of the specified window. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets the size of the client area of the specified window.</para>
<para>This function sets the size, in screen coordinates, of the content area of the specified window.</para>
<para>For full screen windows, this function updates the resolution of its desired video mode and switches to the video mode closest to it, without affecting the window&apos;s context. As the context is unaffected, the bit depths of the framebuffer remain unchanged.</para>
<para>If you wish to update the refresh rate of the desired video mode in addition to its resolution, see <ref refid="group__window_1ga12fabf78575e59c00f822f323ae0b6ae" kindref="member">glfwSetWindowMonitor</ref>.</para>
<para>The window manager may put limits on what sizes are allowed. GLFW cannot and should not override these limits.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to resize. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">width</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired width, in screen coordinates, of the window content area. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">height</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired height, in screen coordinates, of the window content area.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para><simplesect kind="remark"><para>@wayland A full screen window will not attempt to change the mode, no matter what the requested size.</para>
</simplesect>
@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_size" kindref="member">Window size</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga7feb769ebb3f3d21579b5a3fb07be76e" kindref="member">glfwGetWindowSize</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga12fabf78575e59c00f822f323ae0b6ae" kindref="member">glfwSetWindowMonitor</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 1.0. @glfw3 Added window handle parameter.</para>
</simplesect>
This function sets the size, in screen coordinates, of the client area of the specified window.</para>
<para>For full screen windows, this function updates the resolution of its desired video mode and switches to the video mode closest to it, without affecting the window&apos;s context. As the context is unaffected, the bit depths of the framebuffer remain unchanged.</para>
<para>If you wish to update the refresh rate of the desired video mode in addition to its resolution, see <ref refid="group__window_1ga12fabf78575e59c00f822f323ae0b6ae" kindref="member">glfwSetWindowMonitor</ref>.</para>
<para>The window manager may put limits on what sizes are allowed. GLFW cannot and should not override these limits.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to resize. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">width</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired width, in screen coordinates, of the window client area. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">height</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired height, in screen coordinates, of the window client area.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_size" kindref="member">Window size</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga7feb769ebb3f3d21579b5a3fb07be76e" kindref="member">glfwGetWindowSize</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga12fabf78575e59c00f822f323ae0b6ae" kindref="member">glfwSetWindowMonitor</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 1.0. @glfw3 Added window handle parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="565" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="565" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga8af814fc98d786d1de2505b40b707de8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI void</type>
        <definition>GLFWAPI void glfwSetWindowSizeLimits</definition>
        <argsstring>(GLFWwindow *handle, int minwidth, int minheight, int maxwidth, int maxheight)</argsstring>
        <name>glfwSetWindowSizeLimits</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <param>
          <type>int</type>
          <declname>minwidth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>minheight</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxwidth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxheight</declname>
        </param>
        <briefdescription>
<para>Sets the size limits of the specified window. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the size limits of the content area of the specified window. If the window is full screen, the size limits only take effect once it is made windowed. If the window is not resizable, this function does nothing.</para>
<para>The size limits are applied immediately to a windowed mode window and may cause it to be resized.</para>
<para>The maximum dimensions must be greater than or equal to the minimum dimensions and all must be greater than or equal to zero.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to set limits for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">minwidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum width, in screen coordinates, of the content area, or <computeroutput>GLFW_DONT_CARE</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">minheight</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum height, in screen coordinates, of the content area, or <computeroutput>GLFW_DONT_CARE</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">maxwidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum width, in screen coordinates, of the content area, or <computeroutput>GLFW_DONT_CARE</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">maxheight</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum height, in screen coordinates, of the content area, or <computeroutput>GLFW_DONT_CARE</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>, <ref refid="group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687" kindref="member">GLFW_INVALID_VALUE</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para><simplesect kind="remark"><para>If you set size limits and an aspect ratio that conflict, the results are undefined.</para>
</simplesect>
<simplesect kind="remark"><para>@wayland The size limits will not be applied until the window is actually resized, either by the user or by the compositor.</para>
</simplesect>
@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_sizelimits" kindref="member">Window size limits</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1gad2ae94a2c5ee1c46a36e13a8f4ac68ac" kindref="member">glfwSetWindowAspectRatio</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.2.</para>
</simplesect>
This function sets the size limits of the client area of the specified window. If the window is full screen, the size limits only take effect if once it is made windowed. If the window is not resizable, this function does nothing.</para>
<para>The size limits are applied immediately to a windowed mode window and may cause it to be resized.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to set limits for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">minwidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum width, in screen coordinates, of the client area, or <computeroutput>GLFW_DONT_CARE</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">minheight</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum height, in screen coordinates, of the client area, or <computeroutput>GLFW_DONT_CARE</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">maxwidth</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum width, in screen coordinates, of the client area, or <computeroutput>GLFW_DONT_CARE</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">maxheight</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum height, in screen coordinates, of the client area, or <computeroutput>GLFW_DONT_CARE</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para><simplesect kind="remark"><para>If you set size limits and an aspect ratio that conflict, the results are undefined.</para>
</simplesect>
@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_sizelimits" kindref="member">Window size limits</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1gad2ae94a2c5ee1c46a36e13a8f4ac68ac" kindref="member">glfwSetWindowAspectRatio</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.2. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="580" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="580" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1gad2ae94a2c5ee1c46a36e13a8f4ac68ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI void</type>
        <definition>GLFWAPI void glfwSetWindowAspectRatio</definition>
        <argsstring>(GLFWwindow *handle, int numer, int denom)</argsstring>
        <name>glfwSetWindowAspectRatio</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <param>
          <type>int</type>
          <declname>numer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>denom</declname>
        </param>
        <briefdescription>
<para>Sets the aspect ratio of the specified window. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the required aspect ratio of the content area of the specified window. If the window is full screen, the aspect ratio only takes effect once it is made windowed. If the window is not resizable, this function does nothing.</para>
<para>The aspect ratio is specified as a numerator and a denominator and both values must be greater than zero. For example, the common 16:9 aspect ratio is specified as 16 and 9, respectively.</para>
<para>If the numerator and denominator is set to <computeroutput>GLFW_DONT_CARE</computeroutput> then the aspect ratio limit is disabled.</para>
<para>The aspect ratio is applied immediately to a windowed mode window and may cause it to be resized.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to set limits for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numer</parametername>
</parameternamelist>
<parameterdescription>
<para>The numerator of the desired aspect ratio, or <computeroutput>GLFW_DONT_CARE</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">denom</parametername>
</parameternamelist>
<parameterdescription>
<para>The denominator of the desired aspect ratio, or <computeroutput>GLFW_DONT_CARE</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>, <ref refid="group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687" kindref="member">GLFW_INVALID_VALUE</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para><simplesect kind="remark"><para>If you set size limits and an aspect ratio that conflict, the results are undefined.</para>
</simplesect>
<simplesect kind="remark"><para>@wayland The aspect ratio will not be applied until the window is actually resized, either by the user or by the compositor.</para>
</simplesect>
@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_sizelimits" kindref="member">Window size limits</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga8af814fc98d786d1de2505b40b707de8" kindref="member">glfwSetWindowSizeLimits</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.2.</para>
</simplesect>
This function sets the required aspect ratio of the client area of the specified window. If the window is full screen, the aspect ratio only takes effect once it is made windowed. If the window is not resizable, this function does nothing.</para>
<para>The aspect ratio is specified as a numerator and a denominator and both values must be greater than zero. For example, the common 16:9 aspect ratio is specified as 16 and 9, respectively.</para>
<para>If the numerator and denominator is set to <computeroutput>GLFW_DONT_CARE</computeroutput> then the aspect ratio limit is disabled.</para>
<para>The aspect ratio is applied immediately to a windowed mode window and may cause it to be resized.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to set limits for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numer</parametername>
</parameternamelist>
<parameterdescription>
<para>The numerator of the desired aspect ratio, or <computeroutput>GLFW_DONT_CARE</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">denom</parametername>
</parameternamelist>
<parameterdescription>
<para>The denominator of the desired aspect ratio, or <computeroutput>GLFW_DONT_CARE</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>, <ref refid="group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687" kindref="member">GLFW_INVALID_VALUE</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para><simplesect kind="remark"><para>If you set size limits and an aspect ratio that conflict, the results are undefined.</para>
</simplesect>
@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_sizelimits" kindref="member">Window size limits</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga8af814fc98d786d1de2505b40b707de8" kindref="member">glfwSetWindowSizeLimits</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.2. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="625" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="625" bodyend="652"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1gaf7d17f3534b4b6dc9a6f905e3a240b7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI void</type>
        <definition>GLFWAPI void glfwGetFramebufferSize</definition>
        <argsstring>(GLFWwindow *handle, int *width, int *height)</argsstring>
        <name>glfwGetFramebufferSize</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <param>
          <type>int *</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>Retrieves the size of the framebuffer of the specified window. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the size, in pixels, of the framebuffer of the specified window. If you wish to retrieve the size of the window in screen coordinates, see <ref refid="group__window_1ga7feb769ebb3f3d21579b5a3fb07be76e" kindref="member">glfwGetWindowSize</ref>.</para>
<para>Any or all of the size arguments may be <computeroutput>NULL</computeroutput>. If an error occurs, all non-<computeroutput>NULL</computeroutput> size arguments will be set to zero.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose framebuffer to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">width</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the width, in pixels, of the framebuffer, or <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">height</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the height, in pixels, of the framebuffer, or <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_fbsize" kindref="member">Framebuffer size</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga41d69f9f263d7b33ea03cf58772b4ea0" kindref="member">glfwSetFramebufferSizeCallback</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0.</para>
</simplesect>
This function retrieves the size, in pixels, of the framebuffer of the specified window. If you wish to retrieve the size of the window in screen coordinates, see <ref refid="group__window_1ga7feb769ebb3f3d21579b5a3fb07be76e" kindref="member">glfwGetWindowSize</ref>.</para>
<para>Any or all of the size arguments may be <computeroutput>NULL</computeroutput>. If an error occurs, all non-<computeroutput>NULL</computeroutput> size arguments will be set to zero.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose framebuffer to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">width</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the width, in pixels, of the framebuffer, or <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">height</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the height, in pixels, of the framebuffer, or <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_fbsize" kindref="member">Framebuffer size</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga41d69f9f263d7b33ea03cf58772b4ea0" kindref="member">glfwSetFramebufferSizeCallback</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="654" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="654" bodyend="666"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1gaad46cdaae2eb732f68d3a1499a7c5409" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI void</type>
        <definition>GLFWAPI void glfwGetWindowFrameSize</definition>
        <argsstring>(GLFWwindow *handle, int *left, int *top, int *right, int *bottom)</argsstring>
        <name>glfwGetWindowFrameSize</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <param>
          <type>int *</type>
          <declname>left</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>top</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>right</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>bottom</declname>
        </param>
        <briefdescription>
<para>Retrieves the size of the frame of the window. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the size, in screen coordinates, of each edge of the frame of the specified window. This size includes the title bar, if the window has one. The size of the frame may vary depending on the <ref refid="window_guide_1window_hints_wnd" kindref="member">window-related hints</ref> used to create it.</para>
<para>Because this function retrieves the size of each window frame edge and not the offset along a particular coordinate axis, the retrieved values will always be zero or positive.</para>
<para>Any or all of the size arguments may be <computeroutput>NULL</computeroutput>. If an error occurs, all non-<computeroutput>NULL</computeroutput> size arguments will be set to zero.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose frame size to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">left</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the size, in screen coordinates, of the left edge of the window frame, or <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">top</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the size, in screen coordinates, of the top edge of the window frame, or <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">right</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the size, in screen coordinates, of the right edge of the window frame, or <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">bottom</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the size, in screen coordinates, of the bottom edge of the window frame, or <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_size" kindref="member">Window size</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.1. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="668" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="668" bodyend="686"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga72718c983a9fffaa27f786bfe7d1c9ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI void</type>
        <definition>GLFWAPI void glfwGetWindowContentScale</definition>
        <argsstring>(GLFWwindow *handle, float *xscale, float *yscale)</argsstring>
        <name>glfwGetWindowContentScale</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <param>
          <type>float *</type>
          <declname>xscale</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>yscale</declname>
        </param>
        <briefdescription>
<para>Retrieves the content scale for the specified window. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the content scale for the specified window. The content scale is the ratio between the current DPI and the platform&apos;s default DPI. This is especially important for text and any UI elements. If the pixel dimensions of your UI scaled by this look appropriate on your machine then it should appear at a reasonable size on other machines regardless of their DPI and scaling settings. This relies on the system DPI and scaling settings being somewhat correct.</para>
<para>On systems where each monitors can have its own content scale, the window content scale will depend on which monitor the system considers the window to be on.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">xscale</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the x-axis content scale, or <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">yscale</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the y-axis content scale, or <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_scale" kindref="member">Window content scale</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1gac6edcddbe785445d0d2b7b7be500836e" kindref="member">glfwSetWindowContentScaleCallback</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__monitor_1ga28d856d94bea2ce8f09a67bb0346aaff" kindref="member">glfwGetMonitorContentScale</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.3. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="688" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="688" bodyend="701"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1gad124d57a1c1c519f60c9765cd0c2a89c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI float</type>
        <definition>GLFWAPI float glfwGetWindowOpacity</definition>
        <argsstring>(GLFWwindow *handle)</argsstring>
        <name>glfwGetWindowOpacity</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <briefdescription>
<para>Returns the opacity of the whole window. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns the opacity of the window, including any decorations.</para>
<para>The opacity (or alpha) value is a positive finite number between zero and one, where zero is fully transparent and one is fully opaque. If the system does not support whole window transparency, this function always returns one.</para>
<para>The initial opacity value for newly created windows is one.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to query. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The opacity value of the specified window.</para>
</simplesect>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_transparency" kindref="member">Window transparency</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga62a784fe328f227727cbcd0d07480ff3" kindref="member">glfwSetWindowOpacity</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.3. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="703" column="15" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="703" bodyend="710"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga62a784fe328f227727cbcd0d07480ff3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI void</type>
        <definition>GLFWAPI void glfwSetWindowOpacity</definition>
        <argsstring>(GLFWwindow *handle, float opacity)</argsstring>
        <name>glfwSetWindowOpacity</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <param>
          <type>float</type>
          <declname>opacity</declname>
        </param>
        <briefdescription>
<para>Sets the opacity of the whole window. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the opacity of the window, including any decorations.</para>
<para>The opacity (or alpha) value is a positive finite number between zero and one, where zero is fully transparent and one is fully opaque.</para>
<para>The initial opacity value for newly created windows is one.</para>
<para>A window created with framebuffer transparency may not use whole window transparency. The results of doing this are undefined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to set the opacity for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">opacity</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired opacity of the specified window.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>, <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref> and <ref refid="group__errors_1ga526fba20a01504a8086c763b6ca53ce5" kindref="member">GLFW_FEATURE_UNAVAILABLE</ref> (see remarks).</para>
<para><simplesect kind="remark"><para>@wayland There is no way to set an opacity factor for a window. This function will emit <ref refid="group__errors_1ga526fba20a01504a8086c763b6ca53ce5" kindref="member">GLFW_FEATURE_UNAVAILABLE</ref>.</para>
</simplesect>
@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_transparency" kindref="member">Window transparency</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1gad124d57a1c1c519f60c9765cd0c2a89c" kindref="member">glfwGetWindowOpacity</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.3. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="712" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="712" bodyend="729"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga24274e3c6ecd44e11fec5e6b66e4d7f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI void</type>
        <definition>GLFWAPI void glfwIconifyWindow</definition>
        <argsstring>(GLFWwindow *handle)</argsstring>
        <name>glfwIconifyWindow</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <briefdescription>
<para>Iconifies the specified window. </para>
        </briefdescription>
        <detaileddescription>
<para>This function iconifies (minimizes) the specified window if it was previously restored. If the window is already iconified, this function does nothing.</para>
<para>If the specified window is a full screen window, the original monitor resolution is restored until the window is restored.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to iconify.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para><simplesect kind="remark"><para>@wayland Once a window is iconified, <ref refid="group__window_1ga1e29caf0b819f578b04db52fff17256c" kindref="member">glfwRestoreWindow</ref> won’t be able to restore it. This is a design decision of the xdg-shell protocol.</para>
</simplesect>
@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_iconify" kindref="member">Window iconification</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga1e29caf0b819f578b04db52fff17256c" kindref="member">glfwRestoreWindow</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga4f825a55367d3fabde3d06e7f30128e8" kindref="member">glfwMaximizeWindow</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 2.1. @glfw3 Added window handle parameter.</para>
</simplesect>
This function iconifies (minimizes) the specified window if it was previously restored. If the window is already iconified, this function does nothing.</para>
<para>If the specified window is a full screen window, the original monitor resolution is restored until the window is restored.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to iconify.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_iconify" kindref="member">Window iconification</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga1e29caf0b819f578b04db52fff17256c" kindref="member">glfwRestoreWindow</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga4f825a55367d3fabde3d06e7f30128e8" kindref="member">glfwMaximizeWindow</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 2.1. @glfw3 Added window handle parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="731" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="731" bodyend="738"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga1e29caf0b819f578b04db52fff17256c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI void</type>
        <definition>GLFWAPI void glfwRestoreWindow</definition>
        <argsstring>(GLFWwindow *handle)</argsstring>
        <name>glfwRestoreWindow</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <briefdescription>
<para>Restores the specified window. </para>
        </briefdescription>
        <detaileddescription>
<para>This function restores the specified window if it was previously iconified (minimized) or maximized. If the window is already restored, this function does nothing.</para>
<para>If the specified window is a full screen window, the resolution chosen for the window is restored on the selected monitor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to restore.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_iconify" kindref="member">Window iconification</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga24274e3c6ecd44e11fec5e6b66e4d7f3" kindref="member">glfwIconifyWindow</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga4f825a55367d3fabde3d06e7f30128e8" kindref="member">glfwMaximizeWindow</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 2.1. @glfw3 Added window handle parameter.</para>
</simplesect>
This function restores the specified window if it was previously iconified (minimized) or maximized. If the window is already restored, this function does nothing.</para>
<para>If the specified window is a full screen window, the resolution chosen for the window is restored on the selected monitor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to restore.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_iconify" kindref="member">Window iconification</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga24274e3c6ecd44e11fec5e6b66e4d7f3" kindref="member">glfwIconifyWindow</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga4f825a55367d3fabde3d06e7f30128e8" kindref="member">glfwMaximizeWindow</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 2.1. @glfw3 Added window handle parameter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="740" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="740" bodyend="747"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga4f825a55367d3fabde3d06e7f30128e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI void</type>
        <definition>GLFWAPI void glfwMaximizeWindow</definition>
        <argsstring>(GLFWwindow *handle)</argsstring>
        <name>glfwMaximizeWindow</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <briefdescription>
<para>Maximizes the specified window. </para>
        </briefdescription>
        <detaileddescription>
<para>This function maximizes the specified window if it was previously not maximized. If the window is already maximized, this function does nothing.</para>
<para>If the specified window is a full screen window, this function does nothing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to maximize.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para><simplesect kind="par"><title>Thread Safety</title><para>This function may only be called from the main thread.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="window_guide_1window_iconify" kindref="member">Window iconification</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga24274e3c6ecd44e11fec5e6b66e4d7f3" kindref="member">glfwIconifyWindow</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga1e29caf0b819f578b04db52fff17256c" kindref="member">glfwRestoreWindow</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in GLFW 3.2.</para>
</simplesect>
This function maximizes the specified window if it was previously not maximized. If the window is already maximized, this function does nothing.</para>
<para>If the specified window is a full screen window, this function does nothing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to maximize.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Thread Safety</title><para>This function may only be called from the main thread.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="window_guide_1window_iconify" kindref="member">Window iconification</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga24274e3c6ecd44e11fec5e6b66e4d7f3" kindref="member">glfwIconifyWindow</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga1e29caf0b819f578b04db52fff17256c" kindref="member">glfwRestoreWindow</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in GLFW 3.2. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="749" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="749" bodyend="760"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga7945bcdff9e5e058cf36505d6873ed8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI void</type>
        <definition>GLFWAPI void glfwShowWindow</definition>
        <argsstring>(GLFWwindow *handle)</argsstring>
        <name>glfwShowWindow</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <briefdescription>
<para>Makes the specified window visible. </para>
        </briefdescription>
        <detaileddescription>
<para>This function makes the specified window visible if it was previously hidden. If the window is already visible or is in full screen mode, this function does nothing.</para>
<para>By default, windowed mode windows are focused when shown Set the <ref refid="window_guide_1GLFW_FOCUS_ON_SHOW_hint" kindref="member">GLFW_FOCUS_ON_SHOW</ref> window hint to change this behavior for all newly created windows, or change the behavior for an existing window with <ref refid="group__window_1gad39f43f07856efcf3d656426a9284c75" kindref="member">glfwSetWindowAttrib</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to make visible.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_hide" kindref="member">Window visibility</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1gaa17e287d521544bdeceafa09ac036e20" kindref="member">glfwHideWindow</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0.</para>
</simplesect>
This function makes the specified window visible if it was previously hidden. If the window is already visible or is in full screen mode, this function does nothing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to make visible.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_hide" kindref="member">Window visibility</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1gaa17e287d521544bdeceafa09ac036e20" kindref="member">glfwHideWindow</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="762" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="762" bodyend="776"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1gad0c9629abb49447bedd28080642b8538" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI void</type>
        <definition>GLFWAPI void glfwRequestWindowAttention</definition>
        <argsstring>(GLFWwindow *handle)</argsstring>
        <name>glfwRequestWindowAttention</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <briefdescription>
<para>Requests user attention to the specified window. </para>
        </briefdescription>
        <detaileddescription>
<para>This function requests user attention to the specified window. On platforms where this is not supported, attention is requested to the application as a whole.</para>
<para>Once the user has given attention, usually by focusing the window or application, the system will end the request automatically.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to request attention to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para><simplesect kind="remark"><para>@macos Attention is requested to the application as a whole, not the specific window.</para>
</simplesect>
@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_attention" kindref="member">Window attention request</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.3. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="778" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="778" bodyend="786"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1gaa17e287d521544bdeceafa09ac036e20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI void</type>
        <definition>GLFWAPI void glfwHideWindow</definition>
        <argsstring>(GLFWwindow *handle)</argsstring>
        <name>glfwHideWindow</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <briefdescription>
<para>Hides the specified window. </para>
        </briefdescription>
        <detaileddescription>
<para>This function hides the specified window if it was previously visible. If the window is already hidden or is in full screen mode, this function does nothing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to hide.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_hide" kindref="member">Window visibility</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga7945bcdff9e5e058cf36505d6873ed8c" kindref="member">glfwShowWindow</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0.</para>
</simplesect>
This function hides the specified window if it was previously visible. If the window is already hidden or is in full screen mode, this function does nothing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to hide.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_hide" kindref="member">Window visibility</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga7945bcdff9e5e058cf36505d6873ed8c" kindref="member">glfwShowWindow</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="788" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="788" bodyend="799"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga0da0e3daaa2d100f44a115c09077b510" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI void</type>
        <definition>GLFWAPI void glfwFocusWindow</definition>
        <argsstring>(GLFWwindow *handle)</argsstring>
        <name>glfwFocusWindow</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <briefdescription>
<para>Brings the specified window to front and sets input focus. </para>
        </briefdescription>
        <detaileddescription>
<para>This function brings the specified window to front and sets input focus. The window should already be visible and not iconified.</para>
<para>By default, both windowed and full screen mode windows are focused when initially created. Set the <ref refid="window_guide_1GLFW_FOCUSED_hint" kindref="member">GLFW_FOCUSED</ref> to disable this behavior.</para>
<para>Also by default, windowed mode windows are focused when shown with <ref refid="group__window_1ga7945bcdff9e5e058cf36505d6873ed8c" kindref="member">glfwShowWindow</ref>. Set the <ref refid="window_guide_1GLFW_FOCUS_ON_SHOW_hint" kindref="member">GLFW_FOCUS_ON_SHOW</ref> to disable this behavior.</para>
<para><bold>Do not use this function</bold> to steal focus from other applications unless you are certain that is what the user wants. Focus stealing can be extremely disruptive.</para>
<para>For a less disruptive way of getting the user&apos;s attention, see <ref refid="window_guide_1window_attention" kindref="member">attention requests</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to give input focus.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>, <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref> and <ref refid="group__errors_1ga526fba20a01504a8086c763b6ca53ce5" kindref="member">GLFW_FEATURE_UNAVAILABLE</ref> (see remarks).</para>
<para><simplesect kind="remark"><para>@wayland It is not possible for an application to set the input focus. This function will emit <ref refid="group__errors_1ga526fba20a01504a8086c763b6ca53ce5" kindref="member">GLFW_FEATURE_UNAVAILABLE</ref>.</para>
</simplesect>
@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_focus" kindref="member">Window input focus</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="window_guide_1window_attention" kindref="member">Window attention request</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.2.</para>
</simplesect>
This function brings the specified window to front and sets input focus. The window should already be visible and not iconified.</para>
<para>By default, both windowed and full screen mode windows are focused when initially created. Set the <ref refid="window_guide_1window_hints_wnd" kindref="member">GLFW_FOCUSED</ref> to disable this behavior.</para>
<para><bold>Do not use this function</bold> to steal focus from other applications unless you are certain that is what the user wants. Focus stealing can be extremely disruptive.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to give input focus.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_focus" kindref="member">Window input focus</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.2. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="801" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="801" bodyend="809"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga1bb0c7e100418e284dbb800789c63d40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI int</type>
        <definition>GLFWAPI int glfwGetWindowAttrib</definition>
        <argsstring>(GLFWwindow *handle, int attrib)</argsstring>
        <name>glfwGetWindowAttrib</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <param>
          <type>int</type>
          <declname>attrib</declname>
        </param>
        <briefdescription>
<para>Returns an attribute of the specified window. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns the value of an attribute of the specified window or its OpenGL or OpenGL ES context.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">attrib</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="window_guide_1window_attribs" kindref="member">window attribute</ref> whose value to return. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the attribute, or zero if an <ref refid="intro_guide_1error_handling" kindref="member">error</ref> occurred.</para>
</simplesect>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>, <ref refid="group__errors_1ga76f6bb9c4eea73db675f096b404593ce" kindref="member">GLFW_INVALID_ENUM</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para><simplesect kind="remark"><para>Framebuffer related hints are not window attributes. See <ref refid="window_guide_1window_attribs_fb" kindref="member">Framebuffer related attributes</ref> for more information.</para>
</simplesect>
<simplesect kind="remark"><para>Zero is a valid value for many window and context related attributes so you cannot use a return value of zero as an indication of errors. However, this function should not fail as long as it is passed valid arguments and the library has been <ref refid="intro_guide_1intro_init" kindref="member">initialized</ref>.</para>
</simplesect>
@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_attribs" kindref="member">Window attributes</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1gad39f43f07856efcf3d656426a9284c75" kindref="member">glfwSetWindowAttrib</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0. Replaces <computeroutput>glfwGetWindowParam</computeroutput> and <computeroutput>glfwGetGLVersion</computeroutput>.</para>
</simplesect>
This function returns the value of an attribute of the specified window or its OpenGL or OpenGL ES context.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to query. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">attrib</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="window_guide_1window_attribs" kindref="member">window attribute</ref> whose value to return. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the attribute, or zero if an <ref refid="intro_guide_1error_handling" kindref="member">error</ref> occurred.</para>
</simplesect>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>, <ref refid="group__errors_1ga76f6bb9c4eea73db675f096b404593ce" kindref="member">GLFW_INVALID_ENUM</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para><simplesect kind="remark"><para>Framebuffer related hints are not window attributes. See <ref refid="window_guide_1window_attribs_fb" kindref="member">Framebuffer related attributes</ref> for more information.</para>
</simplesect>
<simplesect kind="remark"><para>Zero is a valid value for many window and context related attributes so you cannot use a return value of zero as an indication of errors. However, this function should not fail as long as it is passed valid arguments and the library has been <ref refid="intro_guide_1intro_init" kindref="member">initialized</ref>.</para>
</simplesect>
@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_attribs" kindref="member">Window attributes</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0. Replaces <computeroutput>glfwGetWindowParam</computeroutput> and <computeroutput>glfwGetGLVersion</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="811" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="811" bodyend="870"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1gad39f43f07856efcf3d656426a9284c75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI void</type>
        <definition>GLFWAPI void glfwSetWindowAttrib</definition>
        <argsstring>(GLFWwindow *handle, int attrib, int value)</argsstring>
        <name>glfwSetWindowAttrib</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <param>
          <type>int</type>
          <declname>attrib</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets an attribute of the specified window. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the value of an attribute of the specified window.</para>
<para>The supported attributes are <ref refid="window_guide_1GLFW_DECORATED_attrib" kindref="member">GLFW_DECORATED</ref>, <ref refid="window_guide_1GLFW_RESIZABLE_attrib" kindref="member">GLFW_RESIZABLE</ref>, <ref refid="window_guide_1GLFW_FLOATING_attrib" kindref="member">GLFW_FLOATING</ref>, <ref refid="window_guide_1GLFW_AUTO_ICONIFY_attrib" kindref="member">GLFW_AUTO_ICONIFY</ref> and <ref refid="window_guide_1GLFW_FOCUS_ON_SHOW_attrib" kindref="member">GLFW_FOCUS_ON_SHOW</ref>. <ref refid="window_guide_1GLFW_MOUSE_PASSTHROUGH_attrib" kindref="member">GLFW_MOUSE_PASSTHROUGH</ref></para>
<para>Some of these attributes are ignored for full screen windows. The new value will take effect if the window is later made windowed.</para>
<para>Some of these attributes are ignored for windowed mode windows. The new value will take effect if the window is later made full screen.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to set the attribute for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">attrib</parametername>
</parameternamelist>
<parameterdescription>
<para>A supported window attribute. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>GLFW_TRUE</computeroutput> or <computeroutput>GLFW_FALSE</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>, <ref refid="group__errors_1ga76f6bb9c4eea73db675f096b404593ce" kindref="member">GLFW_INVALID_ENUM</ref>, <ref refid="group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687" kindref="member">GLFW_INVALID_VALUE</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para><simplesect kind="remark"><para>Calling <ref refid="group__window_1ga1bb0c7e100418e284dbb800789c63d40" kindref="member">glfwGetWindowAttrib</ref> will always return the latest value, even if that value is ignored by the current mode of the window.</para>
</simplesect>
@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_attribs" kindref="member">Window attributes</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga1bb0c7e100418e284dbb800789c63d40" kindref="member">glfwGetWindowAttrib</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.3. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="872" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="872" bodyend="910"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1gad441645a53bc9274a0ee163d40f0c637" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI <ref refid="group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3" kindref="member">GLFWmonitor</ref> *</type>
        <definition>GLFWAPI GLFWmonitor * glfwGetWindowMonitor</definition>
        <argsstring>(GLFWwindow *handle)</argsstring>
        <name>glfwGetWindowMonitor</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <briefdescription>
<para>Returns the monitor that the window uses for full screen mode. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns the handle of the monitor that the specified window is in full screen on.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to query. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The monitor, or <computeroutput>NULL</computeroutput> if the window is in windowed mode or an <ref refid="intro_guide_1error_handling" kindref="member">error</ref> occurred.</para>
</simplesect>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_monitor" kindref="member">Window monitor</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga12fabf78575e59c00f822f323ae0b6ae" kindref="member">glfwSetWindowMonitor</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0.</para>
</simplesect>
This function returns the handle of the monitor that the specified window is in full screen on.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window to query. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The monitor, or <computeroutput>NULL</computeroutput> if the window is in windowed mode or an error occurred.</para>
</simplesect>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_monitor" kindref="member">Window monitor</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga12fabf78575e59c00f822f323ae0b6ae" kindref="member">glfwSetWindowMonitor</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="912" column="21" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="912" bodyend="919"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga12fabf78575e59c00f822f323ae0b6ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI void</type>
        <definition>GLFWAPI void glfwSetWindowMonitor</definition>
        <argsstring>(GLFWwindow *wh, GLFWmonitor *mh, int xpos, int ypos, int width, int height, int refreshRate)</argsstring>
        <name>glfwSetWindowMonitor</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>wh</defname>
        </param>
        <param>
          <type><ref refid="group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3" kindref="member">GLFWmonitor</ref> *</type>
          <declname>monitor</declname>
          <defname>mh</defname>
        </param>
        <param>
          <type>int</type>
          <declname>xpos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ypos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <param>
          <type>int</type>
          <declname>refreshRate</declname>
        </param>
        <briefdescription>
<para>Sets the mode, monitor, video mode and placement of a window. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the monitor that the window uses for full screen mode or, if the monitor is <computeroutput>NULL</computeroutput>, makes it windowed mode.</para>
<para>When setting a monitor, this function updates the width, height and refresh rate of the desired video mode and switches to the video mode closest to it. The window position is ignored when setting a monitor.</para>
<para>When the monitor is <computeroutput>NULL</computeroutput>, the position, width and height are used to place the window content area. The refresh rate is ignored when no monitor is specified.</para>
<para>If you only wish to update the resolution of a full screen window or the size of a windowed mode window, see <ref refid="group__window_1gae54d1f4915ded15e267ddd3f41496cd2" kindref="member">glfwSetWindowSize</ref>.</para>
<para>When a window transitions from full screen to windowed mode, this function restores any previous window settings such as whether it is decorated, floating, resizable, has size or aspect ratio limits, etc.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose monitor, size or video mode to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">monitor</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired monitor, or <computeroutput>NULL</computeroutput> to set windowed mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">xpos</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired x-coordinate of the upper-left corner of the content area. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ypos</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired y-coordinate of the upper-left corner of the content area. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">width</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired with, in screen coordinates, of the content area or video mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">height</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired height, in screen coordinates, of the content area or video mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">refreshRate</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired refresh rate, in Hz, of the video mode, or <computeroutput>GLFW_DONT_CARE</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para><simplesect kind="remark"><para>The OpenGL or OpenGL ES context will not be destroyed or otherwise affected by any resizing or mode switching, although you may need to update your viewport if the framebuffer size has changed.</para>
</simplesect>
<simplesect kind="remark"><para>@wayland The desired window position is ignored, as there is no way for an application to set this property.</para>
</simplesect>
<simplesect kind="remark"><para>@wayland Setting the window to full screen will not attempt to change the mode, no matter what the requested size or refresh rate.</para>
</simplesect>
@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_monitor" kindref="member">Window monitor</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="window_guide_1window_full_screen" kindref="member">Full screen windows</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1gad441645a53bc9274a0ee163d40f0c637" kindref="member">glfwGetWindowMonitor</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1gae54d1f4915ded15e267ddd3f41496cd2" kindref="member">glfwSetWindowSize</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.2.</para>
</simplesect>
This function sets the monitor that the window uses for full screen mode or, if the monitor is <computeroutput>NULL</computeroutput>, makes it windowed mode.</para>
<para>When setting a monitor, this function updates the width, height and refresh rate of the desired video mode and switches to the video mode closest to it. The window position is ignored when setting a monitor.</para>
<para>When the monitor is <computeroutput>NULL</computeroutput>, the position, width and height are used to place the window client area. The refresh rate is ignored when no monitor is specified.</para>
<para>If you only wish to update the resolution of a full screen window or the size of a windowed mode window, see <ref refid="group__window_1gae54d1f4915ded15e267ddd3f41496cd2" kindref="member">glfwSetWindowSize</ref>.</para>
<para>When a window transitions from full screen to windowed mode, this function restores any previous window settings such as whether it is decorated, floating, resizable, has size or aspect ratio limits, etc..</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose monitor, size or video mode to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">monitor</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired monitor, or <computeroutput>NULL</computeroutput> to set windowed mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">xpos</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired x-coordinate of the upper-left corner of the client area. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ypos</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired y-coordinate of the upper-left corner of the client area. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">width</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired with, in screen coordinates, of the client area or video mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">height</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired height, in screen coordinates, of the client area or video mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">refreshRate</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired refresh rate, in Hz, of the video mode.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_monitor" kindref="member">Window monitor</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="window_guide_1window_full_screen" kindref="member">Full screen windows</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1gad441645a53bc9274a0ee163d40f0c637" kindref="member">glfwGetWindowMonitor</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1gae54d1f4915ded15e267ddd3f41496cd2" kindref="member">glfwSetWindowSize</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.2. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="921" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="921" bodyend="958"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1gacc9e68faee3c1763b54cd9bc405cf43e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI void</type>
        <definition>GLFWAPI void glfwSetWindowUserPointer</definition>
        <argsstring>(GLFWwindow *handle, void *pointer)</argsstring>
        <name>glfwSetWindowUserPointer</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <param>
          <type>void *</type>
          <declname>pointer</declname>
        </param>
        <briefdescription>
<para>Sets the user pointer of the specified window. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the user-defined pointer of the specified window. The current value is retained until the window is destroyed. The initial value is <computeroutput>NULL</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose pointer to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>The new value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>.</para>
<para>@thread_safety This function may be called from any thread. Access is not synchronized.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_userptr" kindref="member">User pointer</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1gad07c1ae8809c4f47e55ad8cc3f60e794" kindref="member">glfwGetWindowUserPointer</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0.</para>
</simplesect>
This function sets the user-defined pointer of the specified window. The current value is retained until the window is destroyed. The initial value is <computeroutput>NULL</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose pointer to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>The new value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>.</para>
<para>@thread_safety This function may be called from any thread. Access is not synchronized.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_userptr" kindref="member">User pointer</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1gad07c1ae8809c4f47e55ad8cc3f60e794" kindref="member">glfwGetWindowUserPointer</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="960" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="960" bodyend="967"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1gad07c1ae8809c4f47e55ad8cc3f60e794" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI void *</type>
        <definition>GLFWAPI void * glfwGetWindowUserPointer</definition>
        <argsstring>(GLFWwindow *handle)</argsstring>
        <name>glfwGetWindowUserPointer</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <briefdescription>
<para>Returns the user pointer of the specified window. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns the current value of the user-defined pointer of the specified window. The initial value is <computeroutput>NULL</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose pointer to return.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>.</para>
<para>@thread_safety This function may be called from any thread. Access is not synchronized.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_userptr" kindref="member">User pointer</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1gacc9e68faee3c1763b54cd9bc405cf43e" kindref="member">glfwSetWindowUserPointer</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0.</para>
</simplesect>
This function returns the current value of the user-defined pointer of the specified window. The initial value is <computeroutput>NULL</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose pointer to return.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>.</para>
<para>@thread_safety This function may be called from any thread. Access is not synchronized.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_userptr" kindref="member">User pointer</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1gacc9e68faee3c1763b54cd9bc405cf43e" kindref="member">glfwSetWindowUserPointer</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="969" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="969" bodyend="976"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga517b6e80b982efa06e9b8ca89d4a75a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI <ref refid="group__window_1gaffb62b9d3f7dc2d6e7c89d3d76142f13" kindref="member">GLFWwindowposfun</ref></type>
        <definition>GLFWAPI GLFWwindowposfun glfwSetWindowPosCallback</definition>
        <argsstring>(GLFWwindow *handle, GLFWwindowposfun cbfun)</argsstring>
        <name>glfwSetWindowPosCallback</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <param>
          <type><ref refid="group__window_1gaffb62b9d3f7dc2d6e7c89d3d76142f13" kindref="member">GLFWwindowposfun</ref></type>
          <declname>callback</declname>
          <defname>cbfun</defname>
        </param>
        <briefdescription>
<para>Sets the position callback for the specified window. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the position callback of the specified window, which is called when the window is moved. The callback is provided with the position, in screen coordinates, of the upper-left corner of the content area of the window.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose callback to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">callback</parametername>
</parameternamelist>
<parameterdescription>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been <ref refid="intro_guide_1intro_init" kindref="member">initialized</ref>.</para>
</simplesect>
@callback_signature <programlisting><codeline><highlight class="normal">void<sp/>function_name(GLFWwindow*<sp/>window,<sp/>int<sp/>xpos,<sp/>int<sp/>ypos)</highlight></codeline>
</programlisting> For more information about the callback parameters, see the <ref refid="group__window_1gaffb62b9d3f7dc2d6e7c89d3d76142f13" kindref="member">function pointer type</ref>.</para>
<para>@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>.</para>
<para><simplesect kind="remark"><para>@wayland This callback will never be called, as there is no way for an application to know its global position.</para>
</simplesect>
@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_pos" kindref="member">Window position</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0.</para>
</simplesect>
This function sets the position callback of the specified window, which is called when the window is moved. The callback is provided with the screen position of the upper-left corner of the client area of the window.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose callback to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cbfun</parametername>
</parameternamelist>
<parameterdescription>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been <ref refid="intro_guide_1intro_init" kindref="member">initialized</ref>.</para>
</simplesect>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_pos" kindref="member">Window position</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="978" column="26" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="978" bodyend="987"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1gab0754f8d5c7c4d5cae2a9937a0e00bc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI <ref refid="group__window_1gaac00a2d1d82875c2bac1af223e9d3c58" kindref="member">GLFWwindowsizefun</ref></type>
        <definition>GLFWAPI GLFWwindowsizefun glfwSetWindowSizeCallback</definition>
        <argsstring>(GLFWwindow *handle, GLFWwindowsizefun cbfun)</argsstring>
        <name>glfwSetWindowSizeCallback</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <param>
          <type><ref refid="group__window_1gaac00a2d1d82875c2bac1af223e9d3c58" kindref="member">GLFWwindowsizefun</ref></type>
          <declname>callback</declname>
          <defname>cbfun</defname>
        </param>
        <briefdescription>
<para>Sets the size callback for the specified window. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the size callback of the specified window, which is called when the window is resized. The callback is provided with the size, in screen coordinates, of the content area of the window.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose callback to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">callback</parametername>
</parameternamelist>
<parameterdescription>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been <ref refid="intro_guide_1intro_init" kindref="member">initialized</ref>.</para>
</simplesect>
@callback_signature <programlisting><codeline><highlight class="normal">void<sp/>function_name(GLFWwindow*<sp/>window,<sp/>int<sp/>width,<sp/>int<sp/>height)</highlight></codeline>
</programlisting> For more information about the callback parameters, see the <ref refid="group__window_1gaac00a2d1d82875c2bac1af223e9d3c58" kindref="member">function pointer type</ref>.</para>
<para>@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_size" kindref="member">Window size</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 1.0. @glfw3 Added window handle parameter and return value.</para>
</simplesect>
This function sets the size callback of the specified window, which is called when the window is resized. The callback is provided with the size, in screen coordinates, of the client area of the window.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose callback to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cbfun</parametername>
</parameternamelist>
<parameterdescription>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been <ref refid="intro_guide_1intro_init" kindref="member">initialized</ref>.</para>
</simplesect>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_size" kindref="member">Window size</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 1.0. @glfw3 Added window handle parameter and return value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="989" column="27" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="989" bodyend="998"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga693d778815971a06e1a5a7bcdeff3d36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI <ref refid="group__window_1ga5c46f9d2435a22b531382ea642216a61" kindref="member">GLFWwindowclosefun</ref></type>
        <definition>GLFWAPI GLFWwindowclosefun glfwSetWindowCloseCallback</definition>
        <argsstring>(GLFWwindow *handle, GLFWwindowclosefun cbfun)</argsstring>
        <name>glfwSetWindowCloseCallback</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <param>
          <type><ref refid="group__window_1ga5c46f9d2435a22b531382ea642216a61" kindref="member">GLFWwindowclosefun</ref></type>
          <declname>callback</declname>
          <defname>cbfun</defname>
        </param>
        <briefdescription>
<para>Sets the close callback for the specified window. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the close callback of the specified window, which is called when the user attempts to close the window, for example by clicking the close widget in the title bar.</para>
<para>The close flag is set before this callback is called, but you can modify it at any time with <ref refid="group__window_1ga1cadeda7a1e2f224e06a8415d30741aa" kindref="member">glfwSetWindowShouldClose</ref>.</para>
<para>The close callback is not triggered by <ref refid="group__window_1ga806747476b7247d292be3711c323ea10" kindref="member">glfwDestroyWindow</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose callback to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">callback</parametername>
</parameternamelist>
<parameterdescription>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been <ref refid="intro_guide_1intro_init" kindref="member">initialized</ref>.</para>
</simplesect>
@callback_signature <programlisting><codeline><highlight class="normal">void<sp/>function_name(GLFWwindow*<sp/>window)</highlight></codeline>
</programlisting> For more information about the callback parameters, see the <ref refid="group__window_1ga5c46f9d2435a22b531382ea642216a61" kindref="member">function pointer type</ref>.</para>
<para>@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>.</para>
<para><simplesect kind="remark"><para>@macos Selecting Quit from the application menu will trigger the close callback for all windows.</para>
</simplesect>
@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_close" kindref="member">Window closing and close flag</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 2.5. @glfw3 Added window handle parameter and return value.</para>
</simplesect>
This function sets the close callback of the specified window, which is called when the user attempts to close the window, for example by clicking the close widget in the title bar.</para>
<para>The close flag is set before this callback is called, but you can modify it at any time with <ref refid="group__window_1ga1cadeda7a1e2f224e06a8415d30741aa" kindref="member">glfwSetWindowShouldClose</ref>.</para>
<para>The close callback is not triggered by <ref refid="group__window_1ga806747476b7247d292be3711c323ea10" kindref="member">glfwDestroyWindow</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose callback to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cbfun</parametername>
</parameternamelist>
<parameterdescription>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been <ref refid="intro_guide_1intro_init" kindref="member">initialized</ref>.</para>
</simplesect>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>.</para>
<para><simplesect kind="remark"><para>@osx Selecting Quit from the application menu will trigger the close callback for all windows.</para>
</simplesect>
@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_close" kindref="member">Window closing and close flag</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 2.5. @glfw3 Added window handle parameter and return value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="1000" column="28" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="1000" bodyend="1009"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga62bfa902c07a03b8ad9be37da31a4be7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI <ref refid="group__window_1ga7747bf66194241cff4f12d3500d8f9cd" kindref="member">GLFWwindowrefreshfun</ref></type>
        <definition>GLFWAPI GLFWwindowrefreshfun glfwSetWindowRefreshCallback</definition>
        <argsstring>(GLFWwindow *handle, GLFWwindowrefreshfun cbfun)</argsstring>
        <name>glfwSetWindowRefreshCallback</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <param>
          <type><ref refid="group__window_1ga7747bf66194241cff4f12d3500d8f9cd" kindref="member">GLFWwindowrefreshfun</ref></type>
          <declname>callback</declname>
          <defname>cbfun</defname>
        </param>
        <briefdescription>
<para>Sets the refresh callback for the specified window. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the refresh callback of the specified window, which is called when the content area of the window needs to be redrawn, for example if the window has been exposed after having been covered by another window.</para>
<para>On compositing window systems such as Aero, Compiz, Aqua or Wayland, where the window contents are saved off-screen, this callback may be called only very infrequently or never at all.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose callback to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">callback</parametername>
</parameternamelist>
<parameterdescription>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been <ref refid="intro_guide_1intro_init" kindref="member">initialized</ref>.</para>
</simplesect>
@callback_signature <programlisting><codeline><highlight class="normal">void<sp/>function_name(GLFWwindow*<sp/>window);</highlight></codeline>
</programlisting> For more information about the callback parameters, see the <ref refid="group__window_1ga7747bf66194241cff4f12d3500d8f9cd" kindref="member">function pointer type</ref>.</para>
<para>@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_refresh" kindref="member">Window damage and refresh</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 2.5. @glfw3 Added window handle parameter and return value.</para>
</simplesect>
This function sets the refresh callback of the specified window, which is called when the client area of the window needs to be redrawn, for example if the window has been exposed after having been covered by another window.</para>
<para>On compositing window systems such as Aero, Compiz or Aqua, where the window contents are saved off-screen, this callback may be called only very infrequently or never at all.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose callback to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cbfun</parametername>
</parameternamelist>
<parameterdescription>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been <ref refid="intro_guide_1intro_init" kindref="member">initialized</ref>.</para>
</simplesect>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_refresh" kindref="member">Window damage and refresh</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 2.5. @glfw3 Added window handle parameter and return value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="1011" column="30" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="1011" bodyend="1020"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1gacce1c4dd273b5c4c60b05599f8725b4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI <ref refid="group__window_1ga6b15f80f61ff396d89720be2a183ca8a" kindref="member">GLFWwindowfocusfun</ref></type>
        <definition>GLFWAPI GLFWwindowfocusfun glfwSetWindowFocusCallback</definition>
        <argsstring>(GLFWwindow *handle, GLFWwindowfocusfun cbfun)</argsstring>
        <name>glfwSetWindowFocusCallback</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <param>
          <type><ref refid="group__window_1ga6b15f80f61ff396d89720be2a183ca8a" kindref="member">GLFWwindowfocusfun</ref></type>
          <declname>callback</declname>
          <defname>cbfun</defname>
        </param>
        <briefdescription>
<para>Sets the focus callback for the specified window. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the focus callback of the specified window, which is called when the window gains or loses input focus.</para>
<para>After the focus callback is called for a window that lost input focus, synthetic key and mouse button release events will be generated for all such that had been pressed. For more information, see <ref refid="group__input_1gaa4cbcb81b939b8800e44cea971ddae47" kindref="member">glfwSetKeyCallback</ref> and <ref refid="group__input_1gab8f17646f43cdca14e5095512618fdf6" kindref="member">glfwSetMouseButtonCallback</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose callback to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">callback</parametername>
</parameternamelist>
<parameterdescription>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been <ref refid="intro_guide_1intro_init" kindref="member">initialized</ref>.</para>
</simplesect>
@callback_signature <programlisting><codeline><highlight class="normal">void<sp/>function_name(GLFWwindow*<sp/>window,<sp/>int<sp/>focused)</highlight></codeline>
</programlisting> For more information about the callback parameters, see the <ref refid="group__window_1ga6b15f80f61ff396d89720be2a183ca8a" kindref="member">function pointer type</ref>.</para>
<para>@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_focus" kindref="member">Window input focus</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0.</para>
</simplesect>
This function sets the focus callback of the specified window, which is called when the window gains or loses input focus.</para>
<para>After the focus callback is called for a window that lost input focus, synthetic key and mouse button release events will be generated for all such that had been pressed. For more information, see <ref refid="group__input_1gaa4cbcb81b939b8800e44cea971ddae47" kindref="member">glfwSetKeyCallback</ref> and <ref refid="group__input_1gab8f17646f43cdca14e5095512618fdf6" kindref="member">glfwSetMouseButtonCallback</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose callback to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cbfun</parametername>
</parameternamelist>
<parameterdescription>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been <ref refid="intro_guide_1intro_init" kindref="member">initialized</ref>.</para>
</simplesect>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_focus" kindref="member">Window input focus</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="1022" column="28" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="1022" bodyend="1031"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga3e9f355edb6b9247149ddea2335eda69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI <ref refid="group__window_1gaaa80beaa1d108e6bc09f666e186e735c" kindref="member">GLFWwindowiconifyfun</ref></type>
        <definition>GLFWAPI GLFWwindowiconifyfun glfwSetWindowIconifyCallback</definition>
        <argsstring>(GLFWwindow *handle, GLFWwindowiconifyfun cbfun)</argsstring>
        <name>glfwSetWindowIconifyCallback</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <param>
          <type><ref refid="group__window_1gaaa80beaa1d108e6bc09f666e186e735c" kindref="member">GLFWwindowiconifyfun</ref></type>
          <declname>callback</declname>
          <defname>cbfun</defname>
        </param>
        <briefdescription>
<para>Sets the iconify callback for the specified window. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the iconification callback of the specified window, which is called when the window is iconified or restored.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose callback to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">callback</parametername>
</parameternamelist>
<parameterdescription>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been <ref refid="intro_guide_1intro_init" kindref="member">initialized</ref>.</para>
</simplesect>
@callback_signature <programlisting><codeline><highlight class="normal">void<sp/>function_name(GLFWwindow*<sp/>window,<sp/>int<sp/>iconified)</highlight></codeline>
</programlisting> For more information about the callback parameters, see the <ref refid="group__window_1gaaa80beaa1d108e6bc09f666e186e735c" kindref="member">function pointer type</ref>.</para>
<para>@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_iconify" kindref="member">Window iconification</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0.</para>
</simplesect>
This function sets the iconification callback of the specified window, which is called when the window is iconified or restored.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose callback to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cbfun</parametername>
</parameternamelist>
<parameterdescription>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been <ref refid="intro_guide_1intro_init" kindref="member">initialized</ref>.</para>
</simplesect>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_iconify" kindref="member">Window iconification</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="1033" column="30" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="1033" bodyend="1042"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1gae77b3960dcd40514fb7b2b8a6eb98137" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI <ref refid="group__window_1ga82868db51248e7bc2deb2082336e6c70" kindref="member">GLFWwindowmaximizefun</ref></type>
        <definition>GLFWAPI GLFWwindowmaximizefun glfwSetWindowMaximizeCallback</definition>
        <argsstring>(GLFWwindow *handle, GLFWwindowmaximizefun cbfun)</argsstring>
        <name>glfwSetWindowMaximizeCallback</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <param>
          <type><ref refid="group__window_1ga82868db51248e7bc2deb2082336e6c70" kindref="member">GLFWwindowmaximizefun</ref></type>
          <declname>callback</declname>
          <defname>cbfun</defname>
        </param>
        <briefdescription>
<para>Sets the maximize callback for the specified window. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the maximization callback of the specified window, which is called when the window is maximized or restored.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose callback to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">callback</parametername>
</parameternamelist>
<parameterdescription>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been <ref refid="intro_guide_1intro_init" kindref="member">initialized</ref>.</para>
</simplesect>
@callback_signature <programlisting><codeline><highlight class="normal">void<sp/>function_name(GLFWwindow*<sp/>window,<sp/>int<sp/>maximized)</highlight></codeline>
</programlisting> For more information about the callback parameters, see the <ref refid="group__window_1ga82868db51248e7bc2deb2082336e6c70" kindref="member">function pointer type</ref>.</para>
<para>@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_maximize" kindref="member">Window maximization</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.3. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="1044" column="31" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="1044" bodyend="1053"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga41d69f9f263d7b33ea03cf58772b4ea0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI <ref refid="group__window_1ga54302eebe2f81518a544723a1d805388" kindref="member">GLFWframebuffersizefun</ref></type>
        <definition>GLFWAPI GLFWframebuffersizefun glfwSetFramebufferSizeCallback</definition>
        <argsstring>(GLFWwindow *handle, GLFWframebuffersizefun cbfun)</argsstring>
        <name>glfwSetFramebufferSizeCallback</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <param>
          <type><ref refid="group__window_1ga54302eebe2f81518a544723a1d805388" kindref="member">GLFWframebuffersizefun</ref></type>
          <declname>callback</declname>
          <defname>cbfun</defname>
        </param>
        <briefdescription>
<para>Sets the framebuffer resize callback for the specified window. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the framebuffer resize callback of the specified window, which is called when the framebuffer of the specified window is resized.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose callback to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">callback</parametername>
</parameternamelist>
<parameterdescription>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been <ref refid="intro_guide_1intro_init" kindref="member">initialized</ref>.</para>
</simplesect>
@callback_signature <programlisting><codeline><highlight class="normal">void<sp/>function_name(GLFWwindow*<sp/>window,<sp/>int<sp/>width,<sp/>int<sp/>height)</highlight></codeline>
</programlisting> For more information about the callback parameters, see the <ref refid="group__window_1ga54302eebe2f81518a544723a1d805388" kindref="member">function pointer type</ref>.</para>
<para>@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_fbsize" kindref="member">Framebuffer size</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0.</para>
</simplesect>
This function sets the framebuffer resize callback of the specified window, which is called when the framebuffer of the specified window is resized.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose callback to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cbfun</parametername>
</parameternamelist>
<parameterdescription>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been <ref refid="intro_guide_1intro_init" kindref="member">initialized</ref>.</para>
</simplesect>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_fbsize" kindref="member">Framebuffer size</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="1055" column="32" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="1055" bodyend="1064"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1gac6edcddbe785445d0d2b7b7be500836e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI <ref refid="group__window_1gaca2e04ad85e70a646f07a870c2cad4ee" kindref="member">GLFWwindowcontentscalefun</ref></type>
        <definition>GLFWAPI GLFWwindowcontentscalefun glfwSetWindowContentScaleCallback</definition>
        <argsstring>(GLFWwindow *handle, GLFWwindowcontentscalefun cbfun)</argsstring>
        <name>glfwSetWindowContentScaleCallback</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
          <defname>handle</defname>
        </param>
        <param>
          <type><ref refid="group__window_1gaca2e04ad85e70a646f07a870c2cad4ee" kindref="member">GLFWwindowcontentscalefun</ref></type>
          <declname>callback</declname>
          <defname>cbfun</defname>
        </param>
        <briefdescription>
<para>Sets the window content scale callback for the specified window. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the window content scale callback of the specified window, which is called when the content scale of the specified window changes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">window</parametername>
</parameternamelist>
<parameterdescription>
<para>The window whose callback to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">callback</parametername>
</parameternamelist>
<parameterdescription>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set or the library had not been <ref refid="intro_guide_1intro_init" kindref="member">initialized</ref>.</para>
</simplesect>
@callback_signature <programlisting><codeline><highlight class="normal">void<sp/>function_name(GLFWwindow*<sp/>window,<sp/>float<sp/>xscale,<sp/>float<sp/>yscale)</highlight></codeline>
</programlisting> For more information about the callback parameters, see the <ref refid="group__window_1gaca2e04ad85e70a646f07a870c2cad4ee" kindref="member">function pointer type</ref>.</para>
<para>@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="window_guide_1window_scale" kindref="member">Window content scale</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga72718c983a9fffaa27f786bfe7d1c9ee" kindref="member">glfwGetWindowContentScale</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.3. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="1066" column="35" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="1066" bodyend="1075"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga872d16e4c77f58c0436f356255920cfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI void</type>
        <definition>GLFWAPI void glfwPollEvents</definition>
        <argsstring>(void)</argsstring>
        <name>glfwPollEvents</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Processes all pending events. </para>
        </briefdescription>
        <detaileddescription>
<para>This function processes only those events that are already in the event queue and then returns immediately. Processing events will cause the window and input callbacks associated with those events to be called.</para>
<para>On some platforms, a window move, resize or menu operation will cause event processing to block. This is due to how event processing is designed on those platforms. You can use the <ref refid="window_guide_1window_refresh" kindref="member">window refresh callback</ref> to redraw the contents of your window when necessary during such operations.</para>
<para>Do not assume that callbacks you set will <emphasis>only</emphasis> be called in response to event processing functions like this one. While it is necessary to poll for events, window systems that require GLFW to register callbacks of its own can pass events to GLFW in response to many window system function calls. GLFW will pass those events on to the application callbacks before returning.</para>
<para>Event processing is not required for joystick input to work.</para>
<para>@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para>@reentrancy This function must not be called from a callback.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="input_guide_1events" kindref="member">Event processing</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga6e042d05823c11e11c7339b81a237738" kindref="member">glfwWaitEvents</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga05223a0a4c5e50f10f289e60398153aa" kindref="member">glfwWaitEventsTimeout</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 1.0.</para>
</simplesect>
This function processes only those events that are already in the event queue and then returns immediately. Processing events will cause the window and input callbacks associated with those events to be called.</para>
<para>On some platforms, a window move, resize or menu operation will cause event processing to block. This is due to how event processing is designed on those platforms. You can use the <ref refid="window_guide_1window_refresh" kindref="member">window refresh callback</ref> to redraw the contents of your window when necessary during such operations.</para>
<para>On some platforms, certain events are sent directly to the application without going through the event queue, causing callbacks to be called outside of a call to one of the event processing functions.</para>
<para>Event processing is not required for joystick input to work.</para>
<para>@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para>@reentrancy This function must not be called from a callback.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="input_guide_1events" kindref="member">Event processing</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga6e042d05823c11e11c7339b81a237738" kindref="member">glfwWaitEvents</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga05223a0a4c5e50f10f289e60398153aa" kindref="member">glfwWaitEventsTimeout</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 1.0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="1077" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="1077" bodyend="1081"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga6e042d05823c11e11c7339b81a237738" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI void</type>
        <definition>GLFWAPI void glfwWaitEvents</definition>
        <argsstring>(void)</argsstring>
        <name>glfwWaitEvents</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Waits until events are queued and processes them. </para>
        </briefdescription>
        <detaileddescription>
<para>This function puts the calling thread to sleep until at least one event is available in the event queue. Once one or more events are available, it behaves exactly like <ref refid="group__window_1ga872d16e4c77f58c0436f356255920cfc" kindref="member">glfwPollEvents</ref>, i.e. the events in the queue are processed and the function then returns immediately. Processing events will cause the window and input callbacks associated with those events to be called.</para>
<para>Since not all events are associated with callbacks, this function may return without a callback having been called even if you are monitoring all callbacks.</para>
<para>On some platforms, a window move, resize or menu operation will cause event processing to block. This is due to how event processing is designed on those platforms. You can use the <ref refid="window_guide_1window_refresh" kindref="member">window refresh callback</ref> to redraw the contents of your window when necessary during such operations.</para>
<para>Do not assume that callbacks you set will <emphasis>only</emphasis> be called in response to event processing functions like this one. While it is necessary to poll for events, window systems that require GLFW to register callbacks of its own can pass events to GLFW in response to many window system function calls. GLFW will pass those events on to the application callbacks before returning.</para>
<para>Event processing is not required for joystick input to work.</para>
<para>@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para>@reentrancy This function must not be called from a callback.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="input_guide_1events" kindref="member">Event processing</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga872d16e4c77f58c0436f356255920cfc" kindref="member">glfwPollEvents</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga05223a0a4c5e50f10f289e60398153aa" kindref="member">glfwWaitEventsTimeout</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 2.5.</para>
</simplesect>
This function puts the calling thread to sleep until at least one event is available in the event queue. Once one or more events are available, it behaves exactly like <ref refid="group__window_1ga872d16e4c77f58c0436f356255920cfc" kindref="member">glfwPollEvents</ref>, i.e. the events in the queue are processed and the function then returns immediately. Processing events will cause the window and input callbacks associated with those events to be called.</para>
<para>Since not all events are associated with callbacks, this function may return without a callback having been called even if you are monitoring all callbacks.</para>
<para>On some platforms, a window move, resize or menu operation will cause event processing to block. This is due to how event processing is designed on those platforms. You can use the <ref refid="window_guide_1window_refresh" kindref="member">window refresh callback</ref> to redraw the contents of your window when necessary during such operations.</para>
<para>On some platforms, certain callbacks may be called outside of a call to one of the event processing functions.</para>
<para>If no windows exist, this function returns immediately. For synchronization of threads in applications that do not create windows, use your threading library of choice.</para>
<para>Event processing is not required for joystick input to work.</para>
<para>@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para>@reentrancy This function must not be called from a callback.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="input_guide_1events" kindref="member">Event processing</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga872d16e4c77f58c0436f356255920cfc" kindref="member">glfwPollEvents</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga05223a0a4c5e50f10f289e60398153aa" kindref="member">glfwWaitEventsTimeout</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 2.5. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="1083" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="1083" bodyend="1087"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1ga05223a0a4c5e50f10f289e60398153aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI void</type>
        <definition>GLFWAPI void glfwWaitEventsTimeout</definition>
        <argsstring>(double timeout)</argsstring>
        <name>glfwWaitEventsTimeout</name>
        <param>
          <type>double</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Waits with timeout until events are queued and processes them. </para>
        </briefdescription>
        <detaileddescription>
<para>This function puts the calling thread to sleep until at least one event is available in the event queue, or until the specified timeout is reached. If one or more events are available, it behaves exactly like <ref refid="group__window_1ga872d16e4c77f58c0436f356255920cfc" kindref="member">glfwPollEvents</ref>, i.e. the events in the queue are processed and the function then returns immediately. Processing events will cause the window and input callbacks associated with those events to be called.</para>
<para>The timeout value must be a positive finite number.</para>
<para>Since not all events are associated with callbacks, this function may return without a callback having been called even if you are monitoring all callbacks.</para>
<para>On some platforms, a window move, resize or menu operation will cause event processing to block. This is due to how event processing is designed on those platforms. You can use the <ref refid="window_guide_1window_refresh" kindref="member">window refresh callback</ref> to redraw the contents of your window when necessary during such operations.</para>
<para>Do not assume that callbacks you set will <emphasis>only</emphasis> be called in response to event processing functions like this one. While it is necessary to poll for events, window systems that require GLFW to register callbacks of its own can pass events to GLFW in response to many window system function calls. GLFW will pass those events on to the application callbacks before returning.</para>
<para>Event processing is not required for joystick input to work.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum amount of time, in seconds, to wait.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>, <ref refid="group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687" kindref="member">GLFW_INVALID_VALUE</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para>@reentrancy This function must not be called from a callback.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="input_guide_1events" kindref="member">Event processing</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga872d16e4c77f58c0436f356255920cfc" kindref="member">glfwPollEvents</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga6e042d05823c11e11c7339b81a237738" kindref="member">glfwWaitEvents</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.2.</para>
</simplesect>
This function puts the calling thread to sleep until at least one event is available in the event queue, or until the specified timeout is reached. If one or more events are available, it behaves exactly like <ref refid="group__window_1ga872d16e4c77f58c0436f356255920cfc" kindref="member">glfwPollEvents</ref>, i.e. the events in the queue are processed and the function then returns immediately. Processing events will cause the window and input callbacks associated with those events to be called.</para>
<para>The timeout value must be a positive finite number.</para>
<para>Since not all events are associated with callbacks, this function may return without a callback having been called even if you are monitoring all callbacks.</para>
<para>On some platforms, a window move, resize or menu operation will cause event processing to block. This is due to how event processing is designed on those platforms. You can use the <ref refid="window_guide_1window_refresh" kindref="member">window refresh callback</ref> to redraw the contents of your window when necessary during such operations.</para>
<para>On some platforms, certain callbacks may be called outside of a call to one of the event processing functions.</para>
<para>If no windows exist, this function returns immediately. For synchronization of threads in applications that do not create windows, use your threading library of choice.</para>
<para>Event processing is not required for joystick input to work.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum amount of time, in seconds, to wait.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@reentrancy This function must not be called from a callback.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="input_guide_1events" kindref="member">Event processing</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga872d16e4c77f58c0436f356255920cfc" kindref="member">glfwPollEvents</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga6e042d05823c11e11c7339b81a237738" kindref="member">glfwWaitEvents</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.2. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="1089" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="1089" bodyend="1103"/>
      </memberdef>
      <memberdef kind="function" id="group__window_1gad6f6b997278c91c43b35970eb9713d7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI void</type>
        <definition>GLFWAPI void glfwPostEmptyEvent</definition>
        <argsstring>(void)</argsstring>
        <name>glfwPostEmptyEvent</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Posts an empty event to the event queue. </para>
        </briefdescription>
        <detaileddescription>
<para>This function posts an empty event from the current thread to the event queue, causing <ref refid="group__window_1ga6e042d05823c11e11c7339b81a237738" kindref="member">glfwWaitEvents</ref> or <ref refid="group__window_1ga05223a0a4c5e50f10f289e60398153aa" kindref="member">glfwWaitEventsTimeout</ref> to return.</para>
<para>@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para>@thread_safety This function may be called from any thread.</para>
<para><simplesect kind="see"><para><ref refid="input_guide_1events" kindref="member">Event processing</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga6e042d05823c11e11c7339b81a237738" kindref="member">glfwWaitEvents</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga05223a0a4c5e50f10f289e60398153aa" kindref="member">glfwWaitEventsTimeout</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.1.</para>
</simplesect>
This function posts an empty event from the current thread to the event queue, causing <ref refid="group__window_1ga6e042d05823c11e11c7339b81a237738" kindref="member">glfwWaitEvents</ref> to return.</para>
<para>If no windows exist, this function returns immediately. For synchronization of threads in applications that do not create windows, use your threading library of choice.</para>
<para>@errors Possible errors include <ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref> and <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para>@thread_safety This function may be called from any thread.</para>
<para><simplesect kind="see"><para><ref refid="input_guide_1events" kindref="member">Event processing</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__window_1ga6e042d05823c11e11c7339b81a237738" kindref="member">glfwWaitEvents</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.1. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" line="1105" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c" bodystart="1105" bodyend="1109"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GLFW<sp/>3.4<sp/>-<sp/>www.glfw.org</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2002-2006<sp/>Marcus<sp/>Geelnard</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2006-2019<sp/>Camilla<sp/>Löwy<sp/>&lt;elmindreda@glfw.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2012<sp/>Torsten<sp/>Walluhn<sp/>&lt;tw@mad-cad.net&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>software<sp/>is<sp/>provided<sp/>&apos;as-is&apos;,<sp/>without<sp/>any<sp/>express<sp/>or<sp/>implied</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>warranty.<sp/>In<sp/>no<sp/>event<sp/>will<sp/>the<sp/>authors<sp/>be<sp/>held<sp/>liable<sp/>for<sp/>any<sp/>damages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>arising<sp/>from<sp/>the<sp/>use<sp/>of<sp/>this<sp/>software.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Permission<sp/>is<sp/>granted<sp/>to<sp/>anyone<sp/>to<sp/>use<sp/>this<sp/>software<sp/>for<sp/>any<sp/>purpose,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>including<sp/>commercial<sp/>applications,<sp/>and<sp/>to<sp/>alter<sp/>it<sp/>and<sp/>redistribute<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>freely,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>restrictions:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>1.<sp/>The<sp/>origin<sp/>of<sp/>this<sp/>software<sp/>must<sp/>not<sp/>be<sp/>misrepresented;<sp/>you<sp/>must<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>claim<sp/>that<sp/>you<sp/>wrote<sp/>the<sp/>original<sp/>software.<sp/>If<sp/>you<sp/>use<sp/>this<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>in<sp/>a<sp/>product,<sp/>an<sp/>acknowledgment<sp/>in<sp/>the<sp/>product<sp/>documentation<sp/>would</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>be<sp/>appreciated<sp/>but<sp/>is<sp/>not<sp/>required.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2.<sp/>Altered<sp/>source<sp/>versions<sp/>must<sp/>be<sp/>plainly<sp/>marked<sp/>as<sp/>such,<sp/>and<sp/>must<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>be<sp/>misrepresented<sp/>as<sp/>being<sp/>the<sp/>original<sp/>software.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>3.<sp/>This<sp/>notice<sp/>may<sp/>not<sp/>be<sp/>removed<sp/>or<sp/>altered<sp/>from<sp/>any<sp/>source</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Please<sp/>use<sp/>C89<sp/>style<sp/>variable<sp/>declarations<sp/>in<sp/>this<sp/>file<sp/>because<sp/>VS<sp/>2010</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;internal.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;float.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Notifies<sp/>shared<sp/>code<sp/>that<sp/>a<sp/>window<sp/>has<sp/>lost<sp/>or<sp/>received<sp/>input<sp/>focus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_glfwInputWindowFocus(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window,<sp/>GLFWbool<sp/>focused)</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window-&gt;callbacks.focus)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window-&gt;callbacks.focus((<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*)<sp/>window,<sp/>focused);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!focused)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key,<sp/>button;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(key<sp/>=<sp/>0;<sp/><sp/>key<sp/>&lt;=<sp/>GLFW_KEY_LAST;<sp/><sp/>key++)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window-&gt;keys[key]<sp/>==<sp/><ref refid="group__input_1ga2485743d0b59df3791c45951c4195265" kindref="member">GLFW_PRESS</ref>)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scancode<sp/>=<sp/>_glfwPlatformGetKeyScancode(key);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfwInputKey(window,<sp/>key,<sp/>scancode,<sp/><ref refid="group__input_1gada11d965c4da13090ad336e030e4d11f" kindref="member">GLFW_RELEASE</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(button<sp/>=<sp/>0;<sp/><sp/>button<sp/>&lt;=<sp/>GLFW_MOUSE_BUTTON_LAST;<sp/><sp/>button++)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window-&gt;mouseButtons[button]<sp/>==<sp/><ref refid="group__input_1ga2485743d0b59df3791c45951c4195265" kindref="member">GLFW_PRESS</ref>)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfwInputMouseClick(window,<sp/>button,<sp/><ref refid="group__input_1gada11d965c4da13090ad336e030e4d11f" kindref="member">GLFW_RELEASE</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Notifies<sp/>shared<sp/>code<sp/>that<sp/>a<sp/>window<sp/>has<sp/>moved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>position<sp/>is<sp/>specified<sp/>in<sp/>content<sp/>area<sp/>relative<sp/>screen<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_glfwInputWindowPos(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y)</highlight></codeline>
<codeline lineno="75"><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window-&gt;callbacks.pos)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window-&gt;callbacks.pos((<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*)<sp/>window,<sp/>x,<sp/>y);</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Notifies<sp/>shared<sp/>code<sp/>that<sp/>a<sp/>window<sp/>has<sp/>been<sp/>resized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>size<sp/>is<sp/>specified<sp/>in<sp/>screen<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_glfwInputWindowSize(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height)</highlight></codeline>
<codeline lineno="84"><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window-&gt;callbacks.size)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window-&gt;callbacks.size((<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*)<sp/>window,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Notifies<sp/>shared<sp/>code<sp/>that<sp/>a<sp/>window<sp/>has<sp/>been<sp/>iconified<sp/>or<sp/>restored</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_glfwInputWindowIconify(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window,<sp/>GLFWbool<sp/>iconified)</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window-&gt;callbacks.iconify)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window-&gt;callbacks.iconify((<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*)<sp/>window,<sp/>iconified);</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Notifies<sp/>shared<sp/>code<sp/>that<sp/>a<sp/>window<sp/>has<sp/>been<sp/>maximized<sp/>or<sp/>restored</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_glfwInputWindowMaximize(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window,<sp/>GLFWbool<sp/>maximized)</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window-&gt;callbacks.maximize)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window-&gt;callbacks.maximize((<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*)<sp/>window,<sp/>maximized);</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Notifies<sp/>shared<sp/>code<sp/>that<sp/>a<sp/>window<sp/>framebuffer<sp/>has<sp/>been<sp/>resized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>size<sp/>is<sp/>specified<sp/>in<sp/>pixels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_glfwInputFramebufferSize(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height)</highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window-&gt;callbacks.fbsize)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window-&gt;callbacks.fbsize((<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*)<sp/>window,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Notifies<sp/>shared<sp/>code<sp/>that<sp/>a<sp/>window<sp/>content<sp/>scale<sp/>has<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>scale<sp/>is<sp/>specified<sp/>as<sp/>the<sp/>ratio<sp/>between<sp/>the<sp/>current<sp/>and<sp/>default<sp/>DPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_glfwInputWindowContentScale(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>xscale,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>yscale)</highlight></codeline>
<codeline lineno="118"><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window-&gt;callbacks.scale)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window-&gt;callbacks.scale((<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*)<sp/>window,<sp/>xscale,<sp/>yscale);</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Notifies<sp/>shared<sp/>code<sp/>that<sp/>the<sp/>window<sp/>contents<sp/>needs<sp/>updating</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_glfwInputWindowDamage(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window)</highlight></codeline>
<codeline lineno="126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window-&gt;callbacks.refresh)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window-&gt;callbacks.refresh((<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*)<sp/>window);</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Notifies<sp/>shared<sp/>code<sp/>that<sp/>the<sp/>user<sp/>wishes<sp/>to<sp/>close<sp/>a<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_glfwInputWindowCloseRequest(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window)</highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;shouldClose<sp/>=<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref>;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window-&gt;callbacks.close)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window-&gt;callbacks.close((<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*)<sp/>window);</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Notifies<sp/>shared<sp/>code<sp/>that<sp/>a<sp/>window<sp/>has<sp/>changed<sp/>its<sp/>desired<sp/>monitor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_glfwInputWindowMonitor(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window,<sp/><ref refid="struct___g_l_f_wmonitor" kindref="compound">_GLFWmonitor</ref>*<sp/>monitor)</highlight></codeline>
<codeline lineno="144"><highlight class="normal">{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;monitor<sp/>=<sp/>monitor;</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152" refid="group__window_1gaaccd00fafe81e2db94e8cdf55721e055" refkind="member"><highlight class="normal">GLFWAPI<sp/><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/><ref refid="group__window_1gaaccd00fafe81e2db94e8cdf55721e055" kindref="member">glfwCreateWindow</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>title,</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3" kindref="member">GLFWmonitor</ref>*<sp/>monitor,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>share)</highlight></codeline>
<codeline lineno="156"><highlight class="normal">{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wfbconfig" kindref="compound">_GLFWfbconfig</ref><sp/>fbconfig;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wctxconfig" kindref="compound">_GLFWctxconfig</ref><sp/>ctxconfig;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwndconfig" kindref="compound">_GLFWwndconfig</ref><sp/>wndconfig;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(title<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(width<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(height<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT_OR_RETURN(NULL);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width<sp/>&lt;=<sp/>0<sp/>||<sp/>height<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfwInputError(<ref refid="group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687" kindref="member">GLFW_INVALID_VALUE</ref>,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>window<sp/>size<sp/>%ix%i&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>fbconfig<sp/><sp/>=<sp/>_glfw.hints.framebuffer;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>ctxconfig<sp/>=<sp/>_glfw.hints.context;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>wndconfig<sp/>=<sp/>_glfw.hints.window;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>wndconfig.width<sp/><sp/><sp/>=<sp/>width;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>wndconfig.height<sp/><sp/>=<sp/>height;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>wndconfig.title<sp/><sp/><sp/>=<sp/>title;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>ctxconfig.share<sp/><sp/><sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>share;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_glfwIsValidContextConfig(&amp;ctxconfig))</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>window<sp/>=<sp/>calloc(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>));</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;next<sp/>=<sp/>_glfw.windowListHead;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfw.windowListHead<sp/>=<sp/>window;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;videoMode.width<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>width;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;videoMode.height<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>height;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;videoMode.redBits<sp/><sp/><sp/><sp/><sp/>=<sp/>fbconfig.redBits;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;videoMode.greenBits<sp/><sp/><sp/>=<sp/>fbconfig.greenBits;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;videoMode.blueBits<sp/><sp/><sp/><sp/>=<sp/>fbconfig.blueBits;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;videoMode.refreshRate<sp/>=<sp/>_glfw.hints.refreshRate;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;monitor<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(<ref refid="struct___g_l_f_wmonitor" kindref="compound">_GLFWmonitor</ref>*)<sp/>monitor;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;resizable<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>wndconfig.resizable;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;decorated<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>wndconfig.decorated;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;autoIconify<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>wndconfig.autoIconify;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;floating<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>wndconfig.floating;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;focusOnShow<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>wndconfig.focusOnShow;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;mousePassthrough<sp/>=<sp/>wndconfig.mousePassthrough;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;cursorMode<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GLFW_CURSOR_NORMAL;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;minwidth<sp/><sp/><sp/><sp/>=<sp/>GLFW_DONT_CARE;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;minheight<sp/><sp/><sp/>=<sp/>GLFW_DONT_CARE;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;maxwidth<sp/><sp/><sp/><sp/>=<sp/>GLFW_DONT_CARE;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;maxheight<sp/><sp/><sp/>=<sp/>GLFW_DONT_CARE;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;numer<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GLFW_DONT_CARE;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;denom<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GLFW_DONT_CARE;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Open<sp/>the<sp/>actual<sp/>window<sp/>and<sp/>create<sp/>its<sp/>context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_glfwPlatformCreateWindow(window,<sp/>&amp;wndconfig,<sp/>&amp;ctxconfig,<sp/>&amp;fbconfig))</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__window_1ga806747476b7247d292be3711c323ea10" kindref="member">glfwDestroyWindow</ref>((<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*)<sp/>window);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctxconfig.client<sp/>!=<sp/>GLFW_NO_API)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_glfwRefreshContextAttribs(window,<sp/>&amp;ctxconfig))</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__window_1ga806747476b7247d292be3711c323ea10" kindref="member">glfwDestroyWindow</ref>((<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*)<sp/>window);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wndconfig.mousePassthrough)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfwPlatformSetWindowMousePassthrough(window,<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref>);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window-&gt;monitor)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wndconfig.centerCursor)</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfwCenterCursorInContentArea(window);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wndconfig.visible)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfwPlatformShowWindow(window);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wndconfig.focused)</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfwPlatformFocusWindow(window);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*)<sp/>window;</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253" refid="group__window_1ga8050ddceed9dc6bd9d3aa35666195cd4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga8050ddceed9dc6bd9d3aa35666195cd4" kindref="member">glfwDefaultWindowHints</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="254"><highlight class="normal">{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT();</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>default<sp/>is<sp/>OpenGL<sp/>with<sp/>minimum<sp/>version<sp/>1.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;_glfw.hints.context,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(_glfw.hints.context));</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfw.hints.context.client<sp/>=<sp/>GLFW_OPENGL_API;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfw.hints.context.source<sp/>=<sp/>GLFW_NATIVE_CONTEXT_API;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfw.hints.context.major<sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfw.hints.context.minor<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>default<sp/>is<sp/>a<sp/>focused,<sp/>visible,<sp/>resizable<sp/>window<sp/>with<sp/>decorations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;_glfw.hints.window,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(_glfw.hints.window));</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfw.hints.window.resizable<sp/><sp/><sp/><sp/>=<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref>;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfw.hints.window.visible<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref>;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfw.hints.window.decorated<sp/><sp/><sp/><sp/>=<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref>;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfw.hints.window.focused<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref>;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfw.hints.window.autoIconify<sp/><sp/>=<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref>;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfw.hints.window.centerCursor<sp/>=<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref>;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfw.hints.window.focusOnShow<sp/><sp/>=<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref>;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>default<sp/>is<sp/>24<sp/>bits<sp/>of<sp/>color,<sp/>24<sp/>bits<sp/>of<sp/>depth<sp/>and<sp/>8<sp/>bits<sp/>of<sp/>stencil,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>buffered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;_glfw.hints.framebuffer,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(_glfw.hints.framebuffer));</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfw.hints.framebuffer.redBits<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfw.hints.framebuffer.greenBits<sp/><sp/><sp/><sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfw.hints.framebuffer.blueBits<sp/><sp/><sp/><sp/><sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfw.hints.framebuffer.alphaBits<sp/><sp/><sp/><sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfw.hints.framebuffer.depthBits<sp/><sp/><sp/><sp/>=<sp/>24;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfw.hints.framebuffer.stencilBits<sp/><sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfw.hints.framebuffer.doublebuffer<sp/>=<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref>;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>default<sp/>is<sp/>to<sp/>select<sp/>the<sp/>highest<sp/>available<sp/>refresh<sp/>rate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfw.hints.refreshRate<sp/>=<sp/>GLFW_DONT_CARE;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>default<sp/>is<sp/>to<sp/>use<sp/>full<sp/>Retina<sp/>resolution<sp/>framebuffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfw.hints.window.ns.retina<sp/>=<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref>;</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292" refid="group__window_1ga69c40728499720bef8a49aa925ea0efa" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga69c40728499720bef8a49aa925ea0efa" kindref="member">glfwWindowHint</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hint,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>)</highlight></codeline>
<codeline lineno="293"><highlight class="normal">{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT();</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(hint)</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1gaf78ed8e417dbcc1e354906cc2708c982" kindref="member">GLFW_RED_BITS</ref>:</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.framebuffer.redBits<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1gafba3b72638c914e5fb8a237dd4c50d4d" kindref="member">GLFW_GREEN_BITS</ref>:</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.framebuffer.greenBits<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1gab292ea403db6d514537b515311bf9ae3" kindref="member">GLFW_BLUE_BITS</ref>:</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.framebuffer.blueBits<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1gafed79a3f468997877da86c449bd43e8c" kindref="member">GLFW_ALPHA_BITS</ref>:</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.framebuffer.alphaBits<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga318a55eac1fee57dfe593b6d38149d07" kindref="member">GLFW_DEPTH_BITS</ref>:</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.framebuffer.depthBits<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga5339890a45a1fb38e93cb9fcc5fd069d" kindref="member">GLFW_STENCIL_BITS</ref>:</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.framebuffer.stencilBits<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1gaead34a9a683b2bc20eecf30ba738bfc6" kindref="member">GLFW_ACCUM_RED_BITS</ref>:</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.framebuffer.accumRedBits<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga65713cee1326f8e9d806fdf93187b471" kindref="member">GLFW_ACCUM_GREEN_BITS</ref>:</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.framebuffer.accumGreenBits<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga22bbe9104a8ce1f8b88fb4f186aa36ce" kindref="member">GLFW_ACCUM_BLUE_BITS</ref>:</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.framebuffer.accumBlueBits<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1gae829b55591c18169a40ab4067a041b1f" kindref="member">GLFW_ACCUM_ALPHA_BITS</ref>:</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.framebuffer.accumAlphaBits<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1gab05108c5029443b371112b031d1fa174" kindref="member">GLFW_AUX_BUFFERS</ref>:</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.framebuffer.auxBuffers<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga83d991efca02537e2d69969135b77b03" kindref="member">GLFW_STEREO</ref>:</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.framebuffer.stereo<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>?<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref><sp/>:<sp/><ref refid="group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5" kindref="member">GLFW_FALSE</ref>;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga714a5d569e8a274ea58fdfa020955339" kindref="member">GLFW_DOUBLEBUFFER</ref>:</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.framebuffer.doublebuffer<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>?<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref><sp/>:<sp/><ref refid="group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5" kindref="member">GLFW_FALSE</ref>;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga60a0578c3b9449027d683a9c6abb9f14" kindref="member">GLFW_TRANSPARENT_FRAMEBUFFER</ref>:</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.framebuffer.transparent<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>?<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref><sp/>:<sp/><ref refid="group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5" kindref="member">GLFW_FALSE</ref>;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga2cdf86fdcb7722fb8829c4e201607535" kindref="member">GLFW_SAMPLES</ref>:</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.framebuffer.samples<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga444a8f00414a63220591f9fdb7b5642b" kindref="member">GLFW_SRGB_CAPABLE</ref>:</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.framebuffer.sRGB<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>?<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref><sp/>:<sp/><ref refid="group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5" kindref="member">GLFW_FALSE</ref>;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1gadba13c7a1b3aa40831eb2beedbd5bd1d" kindref="member">GLFW_RESIZABLE</ref>:</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.window.resizable<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>?<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref><sp/>:<sp/><ref refid="group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5" kindref="member">GLFW_FALSE</ref>;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga21b854d36314c94d65aed84405b2f25e" kindref="member">GLFW_DECORATED</ref>:</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.window.decorated<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>?<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref><sp/>:<sp/><ref refid="group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5" kindref="member">GLFW_FALSE</ref>;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga54ddb14825a1541a56e22afb5f832a9e" kindref="member">GLFW_FOCUSED</ref>:</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.window.focused<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>?<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref><sp/>:<sp/><ref refid="group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5" kindref="member">GLFW_FALSE</ref>;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga9d9874fc928200136a6dcdad726aa252" kindref="member">GLFW_AUTO_ICONIFY</ref>:</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.window.autoIconify<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>?<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref><sp/>:<sp/><ref refid="group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5" kindref="member">GLFW_FALSE</ref>;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga7fb0be51407783b41adbf5bec0b09d80" kindref="member">GLFW_FLOATING</ref>:</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.window.floating<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>?<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref><sp/>:<sp/><ref refid="group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5" kindref="member">GLFW_FALSE</ref>;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1gad8ccb396253ad0b72c6d4c917eb38a03" kindref="member">GLFW_MAXIMIZED</ref>:</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.window.maximized<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>?<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref><sp/>:<sp/><ref refid="group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5" kindref="member">GLFW_FALSE</ref>;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1gafb3cdc45297e06d8f1eb13adc69ca6c4" kindref="member">GLFW_VISIBLE</ref>:</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.window.visible<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>?<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref><sp/>:<sp/><ref refid="group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5" kindref="member">GLFW_FALSE</ref>;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1gab6ef2d02eb55800d249ccf1af253c35e" kindref="member">GLFW_COCOA_RETINA_FRAMEBUFFER</ref>:</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.window.ns.retina<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>?<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref><sp/>:<sp/><ref refid="group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5" kindref="member">GLFW_FALSE</ref>;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GLFW_WIN32_KEYBOARD_MENU:</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.window.win32.keymenu<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>?<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref><sp/>:<sp/><ref refid="group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5" kindref="member">GLFW_FALSE</ref>;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga53c84ed2ddd94e15bbd44b1f6f7feafc" kindref="member">GLFW_COCOA_GRAPHICS_SWITCHING</ref>:</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.context.nsgl.offline<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>?<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref><sp/>:<sp/><ref refid="group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5" kindref="member">GLFW_FALSE</ref>;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga620bc4280c7eab81ac9f02204500ed47" kindref="member">GLFW_SCALE_TO_MONITOR</ref>:</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.window.scaleToMonitor<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>?<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref><sp/>:<sp/><ref refid="group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5" kindref="member">GLFW_FALSE</ref>;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga5ac0847c0aa0b3619f2855707b8a7a77" kindref="member">GLFW_CENTER_CURSOR</ref>:</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.window.centerCursor<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>?<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref><sp/>:<sp/><ref refid="group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5" kindref="member">GLFW_FALSE</ref>;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1gafa94b1da34bfd6488c0d709761504dfc" kindref="member">GLFW_FOCUS_ON_SHOW</ref>:</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.window.focusOnShow<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>?<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref><sp/>:<sp/><ref refid="group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5" kindref="member">GLFW_FALSE</ref>;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga88981797d29800808ec242274ab5c03a" kindref="member">GLFW_MOUSE_PASSTHROUGH</ref>:</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.window.mousePassthrough<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>?<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref><sp/>:<sp/><ref refid="group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5" kindref="member">GLFW_FALSE</ref>;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga649309cf72a3d3de5b1348ca7936c95b" kindref="member">GLFW_CLIENT_API</ref>:</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.context.client<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga5154cebfcd831c1cc63a4d5ac9bb4486" kindref="member">GLFW_CONTEXT_CREATION_API</ref>:</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.context.source<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1gafe5e4922de1f9932d7e9849bb053b0c0" kindref="member">GLFW_CONTEXT_VERSION_MAJOR</ref>:</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.context.major<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga31aca791e4b538c4e4a771eb95cc2d07" kindref="member">GLFW_CONTEXT_VERSION_MINOR</ref>:</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.context.minor<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1gade3593916b4c507900aa2d6844810e00" kindref="member">GLFW_CONTEXT_ROBUSTNESS</ref>:</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.context.robustness<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga13d24b12465da8b28985f46c8557925b" kindref="member">GLFW_OPENGL_FORWARD_COMPAT</ref>:</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.context.forward<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>?<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref><sp/>:<sp/><ref refid="group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5" kindref="member">GLFW_FALSE</ref>;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga8d55e3afec73c7de0509c3b7ad1d9e3f" kindref="member">GLFW_CONTEXT_DEBUG</ref>:</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.context.debug<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>?<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref><sp/>:<sp/><ref refid="group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5" kindref="member">GLFW_FALSE</ref>;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga5a52fdfd46d8249c211f923675728082" kindref="member">GLFW_CONTEXT_NO_ERROR</ref>:</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.context.noerror<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>?<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref><sp/>:<sp/><ref refid="group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5" kindref="member">GLFW_FALSE</ref>;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga44f3a6b4261fbe351e0b950b0f372e12" kindref="member">GLFW_OPENGL_PROFILE</ref>:</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.context.profile<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga72b648a8378fe3310c7c7bbecc0f7be6" kindref="member">GLFW_CONTEXT_RELEASE_BEHAVIOR</ref>:</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.context.release<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga0f20825e6e47ee8ba389024519682212" kindref="member">GLFW_REFRESH_RATE</ref>:</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.hints.refreshRate<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfwInputError(<ref refid="group__errors_1ga76f6bb9c4eea73db675f096b404593ce" kindref="member">GLFW_INVALID_ENUM</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>window<sp/>hint<sp/>0x%08X&quot;</highlight><highlight class="normal">,<sp/>hint);</highlight></codeline>
<codeline lineno="424"><highlight class="normal">}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426" refid="group__window_1ga3c2270562d7ba13d92680ba1090adafe" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga3c2270562d7ba13d92680ba1090adafe" kindref="member">glfwWindowHintString</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hint,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classvalue" kindref="compound">value</ref>)</highlight></codeline>
<codeline lineno="427"><highlight class="normal">{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="classvalue" kindref="compound">value</ref><sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT();</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(hint)</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga70fa0fbc745de6aa824df79a580e84b5" kindref="member">GLFW_COCOA_FRAME_NAME</ref>:</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strncpy(_glfw.hints.window.ns.frameName,<sp/><ref refid="classvalue" kindref="compound">value</ref>,</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(_glfw.hints.window.ns.frameName)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1gae5a9ea2fccccd92edbd343fc56461114" kindref="member">GLFW_X11_CLASS_NAME</ref>:</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strncpy(_glfw.hints.window.x11.className,<sp/><ref refid="classvalue" kindref="compound">value</ref>,</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(_glfw.hints.window.x11.className)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga494c3c0d911e4b860b946530a3e389e8" kindref="member">GLFW_X11_INSTANCE_NAME</ref>:</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strncpy(_glfw.hints.window.x11.instanceName,<sp/><ref refid="classvalue" kindref="compound">value</ref>,</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(_glfw.hints.window.x11.instanceName)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfwInputError(<ref refid="group__errors_1ga76f6bb9c4eea73db675f096b404593ce" kindref="member">GLFW_INVALID_ENUM</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>window<sp/>hint<sp/>string<sp/>0x%08X&quot;</highlight><highlight class="normal">,<sp/>hint);</highlight></codeline>
<codeline lineno="449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451" refid="group__window_1ga806747476b7247d292be3711c323ea10" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga806747476b7247d292be3711c323ea10" kindref="member">glfwDestroyWindow</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle)</highlight></codeline>
<codeline lineno="452"><highlight class="normal">{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT();</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allow<sp/>closing<sp/>of<sp/>NULL<sp/>(to<sp/>match<sp/>the<sp/>behavior<sp/>of<sp/>free)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>all<sp/>callbacks<sp/>to<sp/>avoid<sp/>exposing<sp/>a<sp/>half<sp/>torn-down<sp/>window<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;window-&gt;callbacks,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(window-&gt;callbacks));</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>window&apos;s<sp/>context<sp/>must<sp/>not<sp/>be<sp/>current<sp/>on<sp/>another<sp/>thread<sp/>when<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>window<sp/>is<sp/>destroyed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window<sp/>==<sp/>_glfwPlatformGetTls(&amp;_glfw.contextSlot))</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__context_1gafd76c93e15ec8b0b90506a9936a46185" kindref="member">glfwMakeContextCurrent</ref>(NULL);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfwPlatformDestroyWindow(window);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unlink<sp/>window<sp/>from<sp/>global<sp/>linked<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>**<sp/>prev<sp/>=<sp/>&amp;_glfw.windowListHead;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*prev<sp/>!=<sp/>window)</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>&amp;((*prev)-&gt;next);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*prev<sp/>=<sp/>window-&gt;next;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>free(window);</highlight></codeline>
<codeline lineno="482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484" refid="group__window_1gaa6162f67dfa38b8beda2fea623649332" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__window_1gaa6162f67dfa38b8beda2fea623649332" kindref="member">glfwWindowShouldClose</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle)</highlight></codeline>
<codeline lineno="485"><highlight class="normal">{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT_OR_RETURN(0);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>window-&gt;shouldClose;</highlight></codeline>
<codeline lineno="491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493" refid="group__window_1ga1cadeda7a1e2f224e06a8415d30741aa" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga1cadeda7a1e2f224e06a8415d30741aa" kindref="member">glfwSetWindowShouldClose</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>)</highlight></codeline>
<codeline lineno="494"><highlight class="normal">{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT();</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;shouldClose<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502" refid="group__window_1ga861ed3414ab8120e2f74151a666ed1dc" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga861ed3414ab8120e2f74151a666ed1dc" kindref="member">glfwSetWindowTitle</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>title)</highlight></codeline>
<codeline lineno="503"><highlight class="normal">{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(title<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT();</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfwPlatformSetWindowTitle(window,<sp/>title);</highlight></codeline>
<codeline lineno="510"><highlight class="normal">}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512" refid="group__window_1ga182987a1a62a41a924842b9473d560df" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga182987a1a62a41a924842b9473d560df" kindref="member">glfwSetWindowIcon</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle,</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_g_l_f_wimage" kindref="compound">GLFWimage</ref>*<sp/>images)</highlight></codeline>
<codeline lineno="514"><highlight class="normal">{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(count<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(count<sp/>==<sp/>0<sp/>||<sp/>images<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT();</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfwPlatformSetWindowIcon(window,<sp/>count,<sp/>images);</highlight></codeline>
<codeline lineno="522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524" refid="group__window_1ga0076a8591ef7494d359730cf2250b45b" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga0076a8591ef7494d359730cf2250b45b" kindref="member">glfwGetWindowPos</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>xpos,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>ypos)</highlight></codeline>
<codeline lineno="525"><highlight class="normal">{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xpos)</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*xpos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ypos)</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ypos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT();</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfwPlatformGetWindowPos(window,<sp/>xpos,<sp/>ypos);</highlight></codeline>
<codeline lineno="536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538" refid="group__window_1ga0dc8d880a0d87be16d3ea8114561f6f0" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga0dc8d880a0d87be16d3ea8114561f6f0" kindref="member">glfwSetWindowPos</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xpos,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ypos)</highlight></codeline>
<codeline lineno="539"><highlight class="normal">{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT();</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window-&gt;monitor)</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfwPlatformSetWindowPos(window,<sp/>xpos,<sp/>ypos);</highlight></codeline>
<codeline lineno="549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551" refid="group__window_1ga7feb769ebb3f3d21579b5a3fb07be76e" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga7feb769ebb3f3d21579b5a3fb07be76e" kindref="member">glfwGetWindowSize</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>height)</highlight></codeline>
<codeline lineno="552"><highlight class="normal">{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width)</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*width<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(height)</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*height<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT();</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfwPlatformGetWindowSize(window,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565" refid="group__window_1gae54d1f4915ded15e267ddd3f41496cd2" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__window_1gae54d1f4915ded15e267ddd3f41496cd2" kindref="member">glfwSetWindowSize</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height)</highlight></codeline>
<codeline lineno="566"><highlight class="normal">{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(width<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(height<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT();</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;videoMode.width<sp/><sp/>=<sp/>width;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;videoMode.height<sp/>=<sp/>height;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfwPlatformSetWindowSize(window,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580" refid="group__window_1ga8af814fc98d786d1de2505b40b707de8" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga8af814fc98d786d1de2505b40b707de8" kindref="member">glfwSetWindowSizeLimits</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle,</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minwidth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minheight,</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxwidth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxheight)</highlight></codeline>
<codeline lineno="583"><highlight class="normal">{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT();</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(minwidth<sp/>!=<sp/>GLFW_DONT_CARE<sp/>&amp;&amp;<sp/>minheight<sp/>!=<sp/>GLFW_DONT_CARE)</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(minwidth<sp/>&lt;<sp/>0<sp/>||<sp/>minheight<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfwInputError(<ref refid="group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687" kindref="member">GLFW_INVALID_VALUE</ref>,</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>window<sp/>minimum<sp/>size<sp/>%ix%i&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minwidth,<sp/>minheight);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxwidth<sp/>!=<sp/>GLFW_DONT_CARE<sp/>&amp;&amp;<sp/>maxheight<sp/>!=<sp/>GLFW_DONT_CARE)</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxwidth<sp/>&lt;<sp/>0<sp/>||<sp/>maxheight<sp/>&lt;<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxwidth<sp/>&lt;<sp/>minwidth<sp/>||<sp/>maxheight<sp/>&lt;<sp/>minheight)</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfwInputError(<ref refid="group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687" kindref="member">GLFW_INVALID_VALUE</ref>,</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>window<sp/>maximum<sp/>size<sp/>%ix%i&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxwidth,<sp/>maxheight);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;minwidth<sp/><sp/>=<sp/>minwidth;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;minheight<sp/>=<sp/>minheight;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;maxwidth<sp/><sp/>=<sp/>maxwidth;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;maxheight<sp/>=<sp/>maxheight;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window-&gt;monitor<sp/>||<sp/>!window-&gt;resizable)</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfwPlatformSetWindowSizeLimits(window,</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minwidth,<sp/>minheight,</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxwidth,<sp/>maxheight);</highlight></codeline>
<codeline lineno="623"><highlight class="normal">}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625" refid="group__window_1gad2ae94a2c5ee1c46a36e13a8f4ac68ac" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__window_1gad2ae94a2c5ee1c46a36e13a8f4ac68ac" kindref="member">glfwSetWindowAspectRatio</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>denom)</highlight></codeline>
<codeline lineno="626"><highlight class="normal">{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(numer<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(denom<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT();</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numer<sp/>!=<sp/>GLFW_DONT_CARE<sp/>&amp;&amp;<sp/>denom<sp/>!=<sp/>GLFW_DONT_CARE)</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numer<sp/>&lt;=<sp/>0<sp/>||<sp/>denom<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfwInputError(<ref refid="group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687" kindref="member">GLFW_INVALID_VALUE</ref>,</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>window<sp/>aspect<sp/>ratio<sp/>%i:%i&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numer,<sp/>denom);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;numer<sp/>=<sp/>numer;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;denom<sp/>=<sp/>denom;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window-&gt;monitor<sp/>||<sp/>!window-&gt;resizable)</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfwPlatformSetWindowAspectRatio(window,<sp/>numer,<sp/>denom);</highlight></codeline>
<codeline lineno="652"><highlight class="normal">}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654" refid="group__window_1gaf7d17f3534b4b6dc9a6f905e3a240b7e" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__window_1gaf7d17f3534b4b6dc9a6f905e3a240b7e" kindref="member">glfwGetFramebufferSize</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>height)</highlight></codeline>
<codeline lineno="655"><highlight class="normal">{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width)</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*width<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(height)</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*height<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT();</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfwPlatformGetFramebufferSize(window,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="666"><highlight class="normal">}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668" refid="group__window_1gaad46cdaae2eb732f68d3a1499a7c5409" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__window_1gaad46cdaae2eb732f68d3a1499a7c5409" kindref="member">glfwGetWindowFrameSize</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle,</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>left,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>top,</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>right,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>bottom)</highlight></codeline>
<codeline lineno="671"><highlight class="normal">{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(left)</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*left<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(top)</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*top<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(right)</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*right<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bottom)</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*bottom<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT();</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfwPlatformGetWindowFrameSize(window,<sp/>left,<sp/>top,<sp/>right,<sp/>bottom);</highlight></codeline>
<codeline lineno="686"><highlight class="normal">}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688" refid="group__window_1ga72718c983a9fffaa27f786bfe7d1c9ee" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga72718c983a9fffaa27f786bfe7d1c9ee" kindref="member">glfwGetWindowContentScale</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle,</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>xscale,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>yscale)</highlight></codeline>
<codeline lineno="690"><highlight class="normal">{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xscale)</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*xscale<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yscale)</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*yscale<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT();</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfwPlatformGetWindowContentScale(window,<sp/>xscale,<sp/>yscale);</highlight></codeline>
<codeline lineno="701"><highlight class="normal">}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703" refid="group__window_1gad124d57a1c1c519f60c9765cd0c2a89c" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="group__window_1gad124d57a1c1c519f60c9765cd0c2a89c" kindref="member">glfwGetWindowOpacity</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle)</highlight></codeline>
<codeline lineno="704"><highlight class="normal">{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT_OR_RETURN(1.f);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_glfwPlatformGetWindowOpacity(window);</highlight></codeline>
<codeline lineno="710"><highlight class="normal">}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712" refid="group__window_1ga62a784fe328f227727cbcd0d07480ff3" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga62a784fe328f227727cbcd0d07480ff3" kindref="member">glfwSetWindowOpacity</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>opacity)</highlight></codeline>
<codeline lineno="713"><highlight class="normal">{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(opacity<sp/>==<sp/>opacity);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(opacity<sp/>&gt;=<sp/>0.f);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(opacity<sp/>&lt;=<sp/>1.f);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT();</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opacity<sp/>!=<sp/>opacity<sp/>||<sp/>opacity<sp/>&lt;<sp/>0.f<sp/>||<sp/>opacity<sp/>&gt;<sp/>1.f)</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfwInputError(<ref refid="group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687" kindref="member">GLFW_INVALID_VALUE</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>window<sp/>opacity<sp/>%f&quot;</highlight><highlight class="normal">,<sp/>opacity);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfwPlatformSetWindowOpacity(window,<sp/>opacity);</highlight></codeline>
<codeline lineno="729"><highlight class="normal">}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731" refid="group__window_1ga24274e3c6ecd44e11fec5e6b66e4d7f3" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga24274e3c6ecd44e11fec5e6b66e4d7f3" kindref="member">glfwIconifyWindow</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle)</highlight></codeline>
<codeline lineno="732"><highlight class="normal">{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT();</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfwPlatformIconifyWindow(window);</highlight></codeline>
<codeline lineno="738"><highlight class="normal">}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740" refid="group__window_1ga1e29caf0b819f578b04db52fff17256c" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga1e29caf0b819f578b04db52fff17256c" kindref="member">glfwRestoreWindow</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle)</highlight></codeline>
<codeline lineno="741"><highlight class="normal">{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT();</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfwPlatformRestoreWindow(window);</highlight></codeline>
<codeline lineno="747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749" refid="group__window_1ga4f825a55367d3fabde3d06e7f30128e8" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga4f825a55367d3fabde3d06e7f30128e8" kindref="member">glfwMaximizeWindow</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle)</highlight></codeline>
<codeline lineno="750"><highlight class="normal">{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT();</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window-&gt;monitor)</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfwPlatformMaximizeWindow(window);</highlight></codeline>
<codeline lineno="760"><highlight class="normal">}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762" refid="group__window_1ga7945bcdff9e5e058cf36505d6873ed8c" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga7945bcdff9e5e058cf36505d6873ed8c" kindref="member">glfwShowWindow</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle)</highlight></codeline>
<codeline lineno="763"><highlight class="normal">{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT();</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window-&gt;monitor)</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfwPlatformShowWindow(window);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window-&gt;focusOnShow)</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfwPlatformFocusWindow(window);</highlight></codeline>
<codeline lineno="776"><highlight class="normal">}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778" refid="group__window_1gad0c9629abb49447bedd28080642b8538" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__window_1gad0c9629abb49447bedd28080642b8538" kindref="member">glfwRequestWindowAttention</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle)</highlight></codeline>
<codeline lineno="779"><highlight class="normal">{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT();</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfwPlatformRequestWindowAttention(window);</highlight></codeline>
<codeline lineno="786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788" refid="group__window_1gaa17e287d521544bdeceafa09ac036e20" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__window_1gaa17e287d521544bdeceafa09ac036e20" kindref="member">glfwHideWindow</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle)</highlight></codeline>
<codeline lineno="789"><highlight class="normal">{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT();</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window-&gt;monitor)</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfwPlatformHideWindow(window);</highlight></codeline>
<codeline lineno="799"><highlight class="normal">}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801" refid="group__window_1ga0da0e3daaa2d100f44a115c09077b510" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga0da0e3daaa2d100f44a115c09077b510" kindref="member">glfwFocusWindow</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle)</highlight></codeline>
<codeline lineno="802"><highlight class="normal">{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT();</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfwPlatformFocusWindow(window);</highlight></codeline>
<codeline lineno="809"><highlight class="normal">}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811" refid="group__window_1ga1bb0c7e100418e284dbb800789c63d40" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga1bb0c7e100418e284dbb800789c63d40" kindref="member">glfwGetWindowAttrib</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>attrib)</highlight></codeline>
<codeline lineno="812"><highlight class="normal">{</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT_OR_RETURN(0);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(attrib)</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga54ddb14825a1541a56e22afb5f832a9e" kindref="member">GLFW_FOCUSED</ref>:</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_glfwPlatformWindowFocused(window);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga39d44b7c056e55e581355a92d240b58a" kindref="member">GLFW_ICONIFIED</ref>:</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_glfwPlatformWindowIconified(window);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1gafb3cdc45297e06d8f1eb13adc69ca6c4" kindref="member">GLFW_VISIBLE</ref>:</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_glfwPlatformWindowVisible(window);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1gad8ccb396253ad0b72c6d4c917eb38a03" kindref="member">GLFW_MAXIMIZED</ref>:</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_glfwPlatformWindowMaximized(window);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga8665c71c6fa3d22425c6a0e8a3f89d8a" kindref="member">GLFW_HOVERED</ref>:</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_glfwPlatformWindowHovered(window);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1gafa94b1da34bfd6488c0d709761504dfc" kindref="member">GLFW_FOCUS_ON_SHOW</ref>:</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>window-&gt;focusOnShow;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga88981797d29800808ec242274ab5c03a" kindref="member">GLFW_MOUSE_PASSTHROUGH</ref>:</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>window-&gt;mousePassthrough;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga60a0578c3b9449027d683a9c6abb9f14" kindref="member">GLFW_TRANSPARENT_FRAMEBUFFER</ref>:</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_glfwPlatformFramebufferTransparent(window);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1gadba13c7a1b3aa40831eb2beedbd5bd1d" kindref="member">GLFW_RESIZABLE</ref>:</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>window-&gt;resizable;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga21b854d36314c94d65aed84405b2f25e" kindref="member">GLFW_DECORATED</ref>:</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>window-&gt;decorated;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga7fb0be51407783b41adbf5bec0b09d80" kindref="member">GLFW_FLOATING</ref>:</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>window-&gt;floating;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga9d9874fc928200136a6dcdad726aa252" kindref="member">GLFW_AUTO_ICONIFY</ref>:</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>window-&gt;autoIconify;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga649309cf72a3d3de5b1348ca7936c95b" kindref="member">GLFW_CLIENT_API</ref>:</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>window-&gt;context.client;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga5154cebfcd831c1cc63a4d5ac9bb4486" kindref="member">GLFW_CONTEXT_CREATION_API</ref>:</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>window-&gt;context.source;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1gafe5e4922de1f9932d7e9849bb053b0c0" kindref="member">GLFW_CONTEXT_VERSION_MAJOR</ref>:</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>window-&gt;context.major;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga31aca791e4b538c4e4a771eb95cc2d07" kindref="member">GLFW_CONTEXT_VERSION_MINOR</ref>:</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>window-&gt;context.minor;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1gafb9475071aa77c6fb05ca5a5c8678a08" kindref="member">GLFW_CONTEXT_REVISION</ref>:</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>window-&gt;context.revision;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1gade3593916b4c507900aa2d6844810e00" kindref="member">GLFW_CONTEXT_ROBUSTNESS</ref>:</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>window-&gt;context.robustness;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga13d24b12465da8b28985f46c8557925b" kindref="member">GLFW_OPENGL_FORWARD_COMPAT</ref>:</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>window-&gt;context.forward;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga8d55e3afec73c7de0509c3b7ad1d9e3f" kindref="member">GLFW_CONTEXT_DEBUG</ref>:</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>window-&gt;context.debug;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga44f3a6b4261fbe351e0b950b0f372e12" kindref="member">GLFW_OPENGL_PROFILE</ref>:</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>window-&gt;context.profile;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga72b648a8378fe3310c7c7bbecc0f7be6" kindref="member">GLFW_CONTEXT_RELEASE_BEHAVIOR</ref>:</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>window-&gt;context.release;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga5a52fdfd46d8249c211f923675728082" kindref="member">GLFW_CONTEXT_NO_ERROR</ref>:</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>window-&gt;context.noerror;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfwInputError(<ref refid="group__errors_1ga76f6bb9c4eea73db675f096b404593ce" kindref="member">GLFW_INVALID_ENUM</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>window<sp/>attribute<sp/>0x%08X&quot;</highlight><highlight class="normal">,<sp/>attrib);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="870"><highlight class="normal">}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872" refid="group__window_1gad39f43f07856efcf3d656426a9284c75" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__window_1gad39f43f07856efcf3d656426a9284c75" kindref="member">glfwSetWindowAttrib</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>attrib,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>)</highlight></codeline>
<codeline lineno="873"><highlight class="normal">{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT();</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>?<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref><sp/>:<sp/><ref refid="group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5" kindref="member">GLFW_FALSE</ref>;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(attrib<sp/>==<sp/><ref refid="group__window_1ga9d9874fc928200136a6dcdad726aa252" kindref="member">GLFW_AUTO_ICONIFY</ref>)</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window-&gt;autoIconify<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(attrib<sp/>==<sp/><ref refid="group__window_1gadba13c7a1b3aa40831eb2beedbd5bd1d" kindref="member">GLFW_RESIZABLE</ref>)</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window-&gt;resizable<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!window-&gt;monitor)</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfwPlatformSetWindowResizable(window,<sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(attrib<sp/>==<sp/><ref refid="group__window_1ga21b854d36314c94d65aed84405b2f25e" kindref="member">GLFW_DECORATED</ref>)</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window-&gt;decorated<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!window-&gt;monitor)</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfwPlatformSetWindowDecorated(window,<sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(attrib<sp/>==<sp/><ref refid="group__window_1ga7fb0be51407783b41adbf5bec0b09d80" kindref="member">GLFW_FLOATING</ref>)</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window-&gt;floating<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!window-&gt;monitor)</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfwPlatformSetWindowFloating(window,<sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(attrib<sp/>==<sp/><ref refid="group__window_1gafa94b1da34bfd6488c0d709761504dfc" kindref="member">GLFW_FOCUS_ON_SHOW</ref>)</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window-&gt;focusOnShow<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(attrib<sp/>==<sp/><ref refid="group__window_1ga88981797d29800808ec242274ab5c03a" kindref="member">GLFW_MOUSE_PASSTHROUGH</ref>)</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window-&gt;mousePassthrough<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfwPlatformSetWindowMousePassthrough(window,<sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfwInputError(<ref refid="group__errors_1ga76f6bb9c4eea73db675f096b404593ce" kindref="member">GLFW_INVALID_ENUM</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>window<sp/>attribute<sp/>0x%08X&quot;</highlight><highlight class="normal">,<sp/>attrib);</highlight></codeline>
<codeline lineno="910"><highlight class="normal">}</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912" refid="group__window_1gad441645a53bc9274a0ee163d40f0c637" refkind="member"><highlight class="normal">GLFWAPI<sp/><ref refid="group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3" kindref="member">GLFWmonitor</ref>*<sp/><ref refid="group__window_1gad441645a53bc9274a0ee163d40f0c637" kindref="member">glfwGetWindowMonitor</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle)</highlight></codeline>
<codeline lineno="913"><highlight class="normal">{</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT_OR_RETURN(NULL);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3" kindref="member">GLFWmonitor</ref>*)<sp/>window-&gt;monitor;</highlight></codeline>
<codeline lineno="919"><highlight class="normal">}</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921" refid="group__window_1ga12fabf78575e59c00f822f323ae0b6ae" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga12fabf78575e59c00f822f323ae0b6ae" kindref="member">glfwSetWindowMonitor</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>wh,</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3" kindref="member">GLFWmonitor</ref>*<sp/>mh,</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xpos,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ypos,</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>refreshRate)</highlight></codeline>
<codeline lineno="926"><highlight class="normal">{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>wh;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wmonitor" kindref="compound">_GLFWmonitor</ref>*<sp/>monitor<sp/>=<sp/>(<ref refid="struct___g_l_f_wmonitor" kindref="compound">_GLFWmonitor</ref>*)<sp/>mh;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(width<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(height<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT();</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width<sp/>&lt;=<sp/>0<sp/>||<sp/>height<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfwInputError(<ref refid="group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687" kindref="member">GLFW_INVALID_VALUE</ref>,</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>window<sp/>size<sp/>%ix%i&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(refreshRate<sp/>&lt;<sp/>0<sp/>&amp;&amp;<sp/>refreshRate<sp/>!=<sp/>GLFW_DONT_CARE)</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfwInputError(<ref refid="group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687" kindref="member">GLFW_INVALID_VALUE</ref>,</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>refresh<sp/>rate<sp/>%i&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refreshRate);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;videoMode.width<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>width;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;videoMode.height<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>height;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;videoMode.refreshRate<sp/>=<sp/>refreshRate;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfwPlatformSetWindowMonitor(window,<sp/>monitor,</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xpos,<sp/>ypos,<sp/>width,<sp/>height,</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refreshRate);</highlight></codeline>
<codeline lineno="958"><highlight class="normal">}</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960" refid="group__window_1gacc9e68faee3c1763b54cd9bc405cf43e" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__window_1gacc9e68faee3c1763b54cd9bc405cf43e" kindref="member">glfwSetWindowUserPointer</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pointer)</highlight></codeline>
<codeline lineno="961"><highlight class="normal">{</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT();</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/>window-&gt;userPointer<sp/>=<sp/>pointer;</highlight></codeline>
<codeline lineno="967"><highlight class="normal">}</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969" refid="group__window_1gad07c1ae8809c4f47e55ad8cc3f60e794" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="group__window_1gad07c1ae8809c4f47e55ad8cc3f60e794" kindref="member">glfwGetWindowUserPointer</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle)</highlight></codeline>
<codeline lineno="970"><highlight class="normal">{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT_OR_RETURN(NULL);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>window-&gt;userPointer;</highlight></codeline>
<codeline lineno="976"><highlight class="normal">}</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="978" refid="group__window_1ga517b6e80b982efa06e9b8ca89d4a75a6" refkind="member"><highlight class="normal">GLFWAPI<sp/><ref refid="group__window_1gaffb62b9d3f7dc2d6e7c89d3d76142f13" kindref="member">GLFWwindowposfun</ref><sp/><ref refid="group__window_1ga517b6e80b982efa06e9b8ca89d4a75a6" kindref="member">glfwSetWindowPosCallback</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle,</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__window_1gaffb62b9d3f7dc2d6e7c89d3d76142f13" kindref="member">GLFWwindowposfun</ref><sp/>cbfun)</highlight></codeline>
<codeline lineno="980"><highlight class="normal">{</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT_OR_RETURN(NULL);</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_SWAP_POINTERS(window-&gt;callbacks.pos,<sp/>cbfun);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cbfun;</highlight></codeline>
<codeline lineno="987"><highlight class="normal">}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989" refid="group__window_1gab0754f8d5c7c4d5cae2a9937a0e00bc5" refkind="member"><highlight class="normal">GLFWAPI<sp/><ref refid="group__window_1gaac00a2d1d82875c2bac1af223e9d3c58" kindref="member">GLFWwindowsizefun</ref><sp/><ref refid="group__window_1gab0754f8d5c7c4d5cae2a9937a0e00bc5" kindref="member">glfwSetWindowSizeCallback</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle,</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__window_1gaac00a2d1d82875c2bac1af223e9d3c58" kindref="member">GLFWwindowsizefun</ref><sp/>cbfun)</highlight></codeline>
<codeline lineno="991"><highlight class="normal">{</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT_OR_RETURN(NULL);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_SWAP_POINTERS(window-&gt;callbacks.size,<sp/>cbfun);</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cbfun;</highlight></codeline>
<codeline lineno="998"><highlight class="normal">}</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000" refid="group__window_1ga693d778815971a06e1a5a7bcdeff3d36" refkind="member"><highlight class="normal">GLFWAPI<sp/><ref refid="group__window_1ga5c46f9d2435a22b531382ea642216a61" kindref="member">GLFWwindowclosefun</ref><sp/><ref refid="group__window_1ga693d778815971a06e1a5a7bcdeff3d36" kindref="member">glfwSetWindowCloseCallback</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle,</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__window_1ga5c46f9d2435a22b531382ea642216a61" kindref="member">GLFWwindowclosefun</ref><sp/>cbfun)</highlight></codeline>
<codeline lineno="1002"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT_OR_RETURN(NULL);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_SWAP_POINTERS(window-&gt;callbacks.close,<sp/>cbfun);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cbfun;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011" refid="group__window_1ga62bfa902c07a03b8ad9be37da31a4be7" refkind="member"><highlight class="normal">GLFWAPI<sp/><ref refid="group__window_1ga7747bf66194241cff4f12d3500d8f9cd" kindref="member">GLFWwindowrefreshfun</ref><sp/><ref refid="group__window_1ga62bfa902c07a03b8ad9be37da31a4be7" kindref="member">glfwSetWindowRefreshCallback</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle,</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__window_1ga7747bf66194241cff4f12d3500d8f9cd" kindref="member">GLFWwindowrefreshfun</ref><sp/>cbfun)</highlight></codeline>
<codeline lineno="1013"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT_OR_RETURN(NULL);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_SWAP_POINTERS(window-&gt;callbacks.refresh,<sp/>cbfun);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cbfun;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022" refid="group__window_1gacce1c4dd273b5c4c60b05599f8725b4e" refkind="member"><highlight class="normal">GLFWAPI<sp/><ref refid="group__window_1ga6b15f80f61ff396d89720be2a183ca8a" kindref="member">GLFWwindowfocusfun</ref><sp/><ref refid="group__window_1gacce1c4dd273b5c4c60b05599f8725b4e" kindref="member">glfwSetWindowFocusCallback</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle,</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__window_1ga6b15f80f61ff396d89720be2a183ca8a" kindref="member">GLFWwindowfocusfun</ref><sp/>cbfun)</highlight></codeline>
<codeline lineno="1024"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT_OR_RETURN(NULL);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_SWAP_POINTERS(window-&gt;callbacks.focus,<sp/>cbfun);</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cbfun;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight></codeline>
<codeline lineno="1033" refid="group__window_1ga3e9f355edb6b9247149ddea2335eda69" refkind="member"><highlight class="normal">GLFWAPI<sp/><ref refid="group__window_1gaaa80beaa1d108e6bc09f666e186e735c" kindref="member">GLFWwindowiconifyfun</ref><sp/><ref refid="group__window_1ga3e9f355edb6b9247149ddea2335eda69" kindref="member">glfwSetWindowIconifyCallback</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle,</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__window_1gaaa80beaa1d108e6bc09f666e186e735c" kindref="member">GLFWwindowiconifyfun</ref><sp/>cbfun)</highlight></codeline>
<codeline lineno="1035"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT_OR_RETURN(NULL);</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_SWAP_POINTERS(window-&gt;callbacks.iconify,<sp/>cbfun);</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cbfun;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044" refid="group__window_1gae77b3960dcd40514fb7b2b8a6eb98137" refkind="member"><highlight class="normal">GLFWAPI<sp/><ref refid="group__window_1ga82868db51248e7bc2deb2082336e6c70" kindref="member">GLFWwindowmaximizefun</ref><sp/><ref refid="group__window_1gae77b3960dcd40514fb7b2b8a6eb98137" kindref="member">glfwSetWindowMaximizeCallback</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle,</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__window_1ga82868db51248e7bc2deb2082336e6c70" kindref="member">GLFWwindowmaximizefun</ref><sp/>cbfun)</highlight></codeline>
<codeline lineno="1046"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT_OR_RETURN(NULL);</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_SWAP_POINTERS(window-&gt;callbacks.maximize,<sp/>cbfun);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cbfun;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055" refid="group__window_1ga41d69f9f263d7b33ea03cf58772b4ea0" refkind="member"><highlight class="normal">GLFWAPI<sp/><ref refid="group__window_1ga54302eebe2f81518a544723a1d805388" kindref="member">GLFWframebuffersizefun</ref><sp/><ref refid="group__window_1ga41d69f9f263d7b33ea03cf58772b4ea0" kindref="member">glfwSetFramebufferSizeCallback</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle,</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__window_1ga54302eebe2f81518a544723a1d805388" kindref="member">GLFWframebuffersizefun</ref><sp/>cbfun)</highlight></codeline>
<codeline lineno="1057"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT_OR_RETURN(NULL);</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_SWAP_POINTERS(window-&gt;callbacks.fbsize,<sp/>cbfun);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cbfun;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066" refid="group__window_1gac6edcddbe785445d0d2b7b7be500836e" refkind="member"><highlight class="normal">GLFWAPI<sp/><ref refid="group__window_1gaca2e04ad85e70a646f07a870c2cad4ee" kindref="member">GLFWwindowcontentscalefun</ref><sp/><ref refid="group__window_1gac6edcddbe785445d0d2b7b7be500836e" kindref="member">glfwSetWindowContentScaleCallback</ref>(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>handle,</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__window_1gaca2e04ad85e70a646f07a870c2cad4ee" kindref="member">GLFWwindowcontentscalefun</ref><sp/>cbfun)</highlight></codeline>
<codeline lineno="1068"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*<sp/>window<sp/>=<sp/>(<ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref>*)<sp/>handle;</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(window<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT_OR_RETURN(NULL);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_SWAP_POINTERS(window-&gt;callbacks.scale,<sp/>cbfun);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cbfun;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077" refid="group__window_1ga872d16e4c77f58c0436f356255920cfc" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga872d16e4c77f58c0436f356255920cfc" kindref="member">glfwPollEvents</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1078"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT();</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfwPlatformPollEvents();</highlight></codeline>
<codeline lineno="1081"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083" refid="group__window_1ga6e042d05823c11e11c7339b81a237738" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga6e042d05823c11e11c7339b81a237738" kindref="member">glfwWaitEvents</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1084"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT();</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfwPlatformWaitEvents();</highlight></codeline>
<codeline lineno="1087"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089" refid="group__window_1ga05223a0a4c5e50f10f289e60398153aa" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__window_1ga05223a0a4c5e50f10f289e60398153aa" kindref="member">glfwWaitEventsTimeout</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timeout)</highlight></codeline>
<codeline lineno="1090"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT();</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(timeout<sp/>==<sp/>timeout);</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(timeout<sp/>&gt;=<sp/>0.0);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(timeout<sp/>&lt;=<sp/>DBL_MAX);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timeout<sp/>!=<sp/>timeout<sp/>||<sp/>timeout<sp/>&lt;<sp/>0.0<sp/>||<sp/>timeout<sp/>&gt;<sp/>DBL_MAX)</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfwInputError(<ref refid="group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687" kindref="member">GLFW_INVALID_VALUE</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>time<sp/>%f&quot;</highlight><highlight class="normal">,<sp/>timeout);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfwPlatformWaitEventsTimeout(timeout);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight></codeline>
<codeline lineno="1105" refid="group__window_1gad6f6b997278c91c43b35970eb9713d7e" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__window_1gad6f6b997278c91c43b35970eb9713d7e" kindref="member">glfwPostEmptyEvent</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_REQUIRE_INIT();</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfwPlatformPostEmptyEvent();</highlight></codeline>
<codeline lineno="1109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/window.c"/>
  </compounddef>
</doxygen>
