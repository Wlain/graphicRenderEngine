<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="stb__dxt_8h" kind="file" language="C++">
    <compoundname>stb_dxt.h</compoundname>
    <includedby refid="test__c__compilation_8c" local="yes">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/test_c_compilation.c</includedby>
    <includedby refid="test__cpp__compilation_8cpp" local="yes">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/test_cpp_compilation.cpp</includedby>
    <includedby refid="test__dxt_8c" local="yes">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/test_dxt.c</includedby>
    <invincdepgraph>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/stb_dxt.h</label>
        <link refid="stb__dxt_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/test_c_compilation.c</label>
        <link refid="test__c__compilation_8c_source"/>
      </node>
      <node id="3">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/test_cpp_compilation.cpp</label>
        <link refid="test__cpp__compilation_8cpp_source"/>
      </node>
      <node id="4">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/test_dxt.c</label>
        <link refid="test__dxt_8c_source"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="stb__dxt_8h_1a1d358322592ae8baf87b5d0510982423" prot="public" static="no">
        <name>STBDDEF</name>
        <initializer>extern</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/stb_dxt.h" line="50" column="10" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/stb_dxt.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__dxt_8h_1a66caf1067d4a10989d14d4a467d87afd" prot="public" static="no">
        <name>STB_DXT_NORMAL</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/stb_dxt.h" line="54" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/stb_dxt.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__dxt_8h_1a9851d8451666ebdf414fcd8f140223c7" prot="public" static="no">
        <name>STB_DXT_DITHER</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/stb_dxt.h" line="55" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/stb_dxt.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__dxt_8h_1a738c05354806afe9d33b1d6ed302e036" prot="public" static="no">
        <name>STB_DXT_HIGHQUAL</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/stb_dxt.h" line="56" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/stb_dxt.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__dxt_8h_1a4c4af02f1985b0fe367bc6f4c740fc0b" prot="public" static="no">
        <name>STB_COMPRESS_DXT_BLOCK</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/stb_dxt.h" line="62" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/stb_dxt.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="stb__dxt_8h_1a9e8ecb916eb492d93ca8aa1bd80c5c81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STBDDEF void</type>
        <definition>STBDDEF void stb_compress_dxt_block</definition>
        <argsstring>(unsigned char *dest, const unsigned char *src_rgba_four_bytes_per_pixel, int alpha, int mode)</argsstring>
        <name>stb_compress_dxt_block</name>
        <param>
          <type>unsigned char *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>src_rgba_four_bytes_per_pixel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/stb_dxt.h" line="58" column="14" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/stb_dxt.h" declline="58" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="stb__dxt_8h_1ad29d00fdb52584723532527e4c805bd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STBDDEF void</type>
        <definition>STBDDEF void stb_compress_bc4_block</definition>
        <argsstring>(unsigned char *dest, const unsigned char *src_r_one_byte_per_pixel)</argsstring>
        <name>stb_compress_bc4_block</name>
        <param>
          <type>unsigned char *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>src_r_one_byte_per_pixel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/stb_dxt.h" line="59" column="14" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/stb_dxt.h" declline="59" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="stb__dxt_8h_1ae1b7b69a9096bc2a6bff074ff1a35e05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STBDDEF void</type>
        <definition>STBDDEF void stb_compress_bc5_block</definition>
        <argsstring>(unsigned char *dest, const unsigned char *src_rg_two_byte_per_pixel)</argsstring>
        <name>stb_compress_bc5_block</name>
        <param>
          <type>unsigned char *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>src_rg_two_byte_per_pixel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/stb_dxt.h" line="60" column="14" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/stb_dxt.h" declline="60" declcolumn="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>stb_dxt.h<sp/>-<sp/>v1.12<sp/>-<sp/>DXT1/DXT5<sp/>compressor<sp/>-<sp/>public<sp/>domain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>original<sp/>by<sp/>fabian<sp/>&quot;ryg&quot;<sp/>giesen<sp/>-<sp/>ported<sp/>to<sp/>C<sp/>by<sp/>stb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>use<sp/>&apos;#define<sp/>STB_DXT_IMPLEMENTATION&apos;<sp/>before<sp/>including<sp/>to<sp/>create<sp/>the<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>USAGE:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>call<sp/>stb_compress_dxt_block()<sp/>for<sp/>every<sp/>block<sp/>(you<sp/>must<sp/>pad)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>source<sp/>should<sp/>be<sp/>a<sp/>4x4<sp/>block<sp/>of<sp/>RGBA<sp/>data<sp/>in<sp/>row-major<sp/>order;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Alpha<sp/>channel<sp/>is<sp/>not<sp/>stored<sp/>if<sp/>you<sp/>specify<sp/>alpha=0<sp/>(but<sp/>you</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>must<sp/>supply<sp/>some<sp/>constant<sp/>alpha<sp/>in<sp/>the<sp/>alpha<sp/>channel).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>You<sp/>can<sp/>turn<sp/>on<sp/>dithering<sp/>and<sp/>&quot;high<sp/>quality&quot;<sp/>using<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>version<sp/>history:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>v1.12<sp/><sp/>-<sp/>(ryg)<sp/>fix<sp/>bug<sp/>in<sp/>single-color<sp/>table<sp/>generator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>v1.11<sp/><sp/>-<sp/>(ryg)<sp/>avoid<sp/>racy<sp/>global<sp/>init,<sp/>better<sp/>single-color<sp/>tables,<sp/>remove<sp/>dither</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>v1.10<sp/><sp/>-<sp/>(i.c)<sp/>various<sp/>small<sp/>quality<sp/>improvements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>v1.09<sp/><sp/>-<sp/>(stb)<sp/>update<sp/>documentation<sp/>re:<sp/>surprising<sp/>alpha<sp/>channel<sp/>requirement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>v1.08<sp/><sp/>-<sp/>(stb)<sp/>fix<sp/>bug<sp/>in<sp/>dxt-with-alpha<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>v1.07<sp/><sp/>-<sp/>(stb)<sp/>bc4;<sp/>allow<sp/>not<sp/>using<sp/>libc;<sp/>add<sp/>STB_DXT_STATIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>v1.06<sp/><sp/>-<sp/>(stb)<sp/>fix<sp/>to<sp/>known-broken<sp/>1.05</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>v1.05<sp/><sp/>-<sp/>(stb)<sp/>support<sp/>bc5/3dc<sp/>(Arvids<sp/>Kokins),<sp/>use<sp/>extern<sp/>&quot;C&quot;<sp/>in<sp/>C++<sp/>(Pavel<sp/>Krajcevski)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>v1.04<sp/><sp/>-<sp/>(ryg)<sp/>default<sp/>to<sp/>no<sp/>rounding<sp/>bias<sp/>for<sp/>lerped<sp/>colors<sp/>(as<sp/>per<sp/>S3TC/DX10<sp/>spec);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>single<sp/>color<sp/>match<sp/>fix<sp/>(allow<sp/>for<sp/>inexact<sp/>color<sp/>interpolation);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimal<sp/>DXT5<sp/>index<sp/>finder;<sp/>&quot;high<sp/>quality&quot;<sp/>mode<sp/>that<sp/>runs<sp/>multiple<sp/>refinement<sp/>steps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>v1.03<sp/><sp/>-<sp/>(stb)<sp/>endianness<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>v1.02<sp/><sp/>-<sp/>(stb)<sp/>fix<sp/>alpha<sp/>encoding<sp/>bug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>v1.01<sp/><sp/>-<sp/>(stb)<sp/>fix<sp/>bug<sp/>converting<sp/>to<sp/>RGB<sp/>that<sp/>messed<sp/>up<sp/>quality,<sp/>thanks<sp/>ryg<sp/>&amp;<sp/>cbloom</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>v1.00<sp/><sp/>-<sp/>(stb)<sp/>first<sp/>release</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Rich<sp/>Geldreich<sp/>(more<sp/>accurate<sp/>index<sp/>selection)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Kevin<sp/>Schmidt<sp/>(#defines<sp/>for<sp/>&quot;freestanding&quot;<sp/>compilation)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>github:ppiastucki<sp/>(BC4<sp/>support)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Ignacio<sp/>Castano<sp/>-<sp/>improve<sp/>DXT<sp/>endpoint<sp/>quantization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Alan<sp/>Hickman<sp/>-<sp/>static<sp/>table<sp/>initialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LICENSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>See<sp/>end<sp/>of<sp/>file<sp/>for<sp/>license<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_INCLUDE_STB_DXT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_INCLUDE_STB_DXT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DXT_STATIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBDDEF<sp/>static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBDDEF<sp/>extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compression<sp/>mode<sp/>(bitflags)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_DXT_NORMAL<sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_DXT_DITHER<sp/><sp/><sp/><sp/>1<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>dithering.<sp/>was<sp/>always<sp/>dubious,<sp/>now<sp/>deprecated.<sp/>does<sp/>nothing!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_DXT_HIGHQUAL<sp/><sp/>2<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>high<sp/>quality<sp/>mode,<sp/>does<sp/>two<sp/>refinement<sp/>steps<sp/>instead<sp/>of<sp/>1.<sp/>~30-40%<sp/>slower.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">STBDDEF<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_compress_dxt_block(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src_rgba_four_bytes_per_pixel,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alpha,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode);</highlight></codeline>
<codeline lineno="59"><highlight class="normal">STBDDEF<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_compress_bc4_block(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src_r_one_byte_per_pixel);</highlight></codeline>
<codeline lineno="60"><highlight class="normal">STBDDEF<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_compress_bc5_block(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src_rg_two_byte_per_pixel);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_COMPRESS_DXT_BLOCK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>STB_INCLUDE_STB_DXT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DXT_IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/>configuration<sp/>options<sp/>for<sp/>DXT<sp/>encoder.<sp/>set<sp/>them<sp/>in<sp/>the<sp/>project/makefile<sp/>or<sp/>just<sp/>define</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/>them<sp/>at<sp/>the<sp/>top.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STB_DXT_USE_ROUNDING_BIAS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>use<sp/>a<sp/>rounding<sp/>bias<sp/>during<sp/>color<sp/>interpolation.<sp/>this<sp/>is<sp/>closer<sp/>to<sp/>what<sp/>&quot;ideal&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>interpolation<sp/>would<sp/>do<sp/>but<sp/>doesn&apos;t<sp/>match<sp/>the<sp/>S3TC/DX10<sp/>spec.<sp/>old<sp/>versions<sp/>(pre-1.03)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>implicitly<sp/>had<sp/>this<sp/>turned<sp/>on.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>in<sp/>case<sp/>you&apos;re<sp/>targeting<sp/>a<sp/>specific<sp/>type<sp/>of<sp/>hardware<sp/>(e.g.<sp/>console<sp/>programmers):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>NVidia<sp/>and<sp/>Intel<sp/>GPUs<sp/>(as<sp/>of<sp/>2010)<sp/>as<sp/>well<sp/>as<sp/>DX9<sp/>ref<sp/>use<sp/>DXT<sp/>decoders<sp/>that<sp/>are<sp/>closer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>to<sp/>STB_DXT_USE_ROUNDING_BIAS.<sp/>AMD/ATI,<sp/>S3<sp/>and<sp/>DX10<sp/>ref<sp/>are<sp/>closer<sp/>to<sp/>rounding<sp/>with<sp/>no<sp/>bias.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>you<sp/>also<sp/>see<sp/>&quot;(a*5<sp/>+<sp/>b*3)<sp/>/<sp/>8&quot;<sp/>on<sp/>some<sp/>old<sp/>GPU<sp/>designs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#define<sp/>STB_DXT_USE_ROUNDING_BIAS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(STBD_FABS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STBD_FABS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBD_FABS(x)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fabs(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>stb__OMatch5[256][2]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/>{<sp/><sp/>0,<sp/><sp/>0<sp/>},<sp/>{<sp/><sp/>0,<sp/><sp/>0<sp/>},<sp/>{<sp/><sp/>0,<sp/><sp/>1<sp/>},<sp/>{<sp/><sp/>0,<sp/><sp/>1<sp/>},<sp/>{<sp/><sp/>1,<sp/><sp/>0<sp/>},<sp/>{<sp/><sp/>1,<sp/><sp/>0<sp/>},<sp/>{<sp/><sp/>1,<sp/><sp/>0<sp/>},<sp/>{<sp/><sp/>1,<sp/><sp/>1<sp/>},</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/>{<sp/><sp/>1,<sp/><sp/>1<sp/>},<sp/>{<sp/><sp/>1,<sp/><sp/>1<sp/>},<sp/>{<sp/><sp/>1,<sp/><sp/>2<sp/>},<sp/>{<sp/><sp/>0,<sp/><sp/>4<sp/>},<sp/>{<sp/><sp/>2,<sp/><sp/>1<sp/>},<sp/>{<sp/><sp/>2,<sp/><sp/>1<sp/>},<sp/>{<sp/><sp/>2,<sp/><sp/>1<sp/>},<sp/>{<sp/><sp/>2,<sp/><sp/>2<sp/>},</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/>{<sp/><sp/>2,<sp/><sp/>2<sp/>},<sp/>{<sp/><sp/>2,<sp/><sp/>2<sp/>},<sp/>{<sp/><sp/>2,<sp/><sp/>3<sp/>},<sp/>{<sp/><sp/>1,<sp/><sp/>5<sp/>},<sp/>{<sp/><sp/>3,<sp/><sp/>2<sp/>},<sp/>{<sp/><sp/>3,<sp/><sp/>2<sp/>},<sp/>{<sp/><sp/>4,<sp/><sp/>0<sp/>},<sp/>{<sp/><sp/>3,<sp/><sp/>3<sp/>},</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/>{<sp/><sp/>3,<sp/><sp/>3<sp/>},<sp/>{<sp/><sp/>3,<sp/><sp/>3<sp/>},<sp/>{<sp/><sp/>3,<sp/><sp/>4<sp/>},<sp/>{<sp/><sp/>3,<sp/><sp/>4<sp/>},<sp/>{<sp/><sp/>3,<sp/><sp/>4<sp/>},<sp/>{<sp/><sp/>3,<sp/><sp/>5<sp/>},<sp/>{<sp/><sp/>4,<sp/><sp/>3<sp/>},<sp/>{<sp/><sp/>4,<sp/><sp/>3<sp/>},</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/>{<sp/><sp/>5,<sp/><sp/>2<sp/>},<sp/>{<sp/><sp/>4,<sp/><sp/>4<sp/>},<sp/>{<sp/><sp/>4,<sp/><sp/>4<sp/>},<sp/>{<sp/><sp/>4,<sp/><sp/>5<sp/>},<sp/>{<sp/><sp/>4,<sp/><sp/>5<sp/>},<sp/>{<sp/><sp/>5,<sp/><sp/>4<sp/>},<sp/>{<sp/><sp/>5,<sp/><sp/>4<sp/>},<sp/>{<sp/><sp/>5,<sp/><sp/>4<sp/>},</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/>{<sp/><sp/>6,<sp/><sp/>3<sp/>},<sp/>{<sp/><sp/>5,<sp/><sp/>5<sp/>},<sp/>{<sp/><sp/>5,<sp/><sp/>5<sp/>},<sp/>{<sp/><sp/>5,<sp/><sp/>6<sp/>},<sp/>{<sp/><sp/>4,<sp/><sp/>8<sp/>},<sp/>{<sp/><sp/>6,<sp/><sp/>5<sp/>},<sp/>{<sp/><sp/>6,<sp/><sp/>5<sp/>},<sp/>{<sp/><sp/>6,<sp/><sp/>5<sp/>},</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/>{<sp/><sp/>6,<sp/><sp/>6<sp/>},<sp/>{<sp/><sp/>6,<sp/><sp/>6<sp/>},<sp/>{<sp/><sp/>6,<sp/><sp/>6<sp/>},<sp/>{<sp/><sp/>6,<sp/><sp/>7<sp/>},<sp/>{<sp/><sp/>5,<sp/><sp/>9<sp/>},<sp/>{<sp/><sp/>7,<sp/><sp/>6<sp/>},<sp/>{<sp/><sp/>7,<sp/><sp/>6<sp/>},<sp/>{<sp/><sp/>8,<sp/><sp/>4<sp/>},</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/>{<sp/><sp/>7,<sp/><sp/>7<sp/>},<sp/>{<sp/><sp/>7,<sp/><sp/>7<sp/>},<sp/>{<sp/><sp/>7,<sp/><sp/>7<sp/>},<sp/>{<sp/><sp/>7,<sp/><sp/>8<sp/>},<sp/>{<sp/><sp/>7,<sp/><sp/>8<sp/>},<sp/>{<sp/><sp/>7,<sp/><sp/>8<sp/>},<sp/>{<sp/><sp/>7,<sp/><sp/>9<sp/>},<sp/>{<sp/><sp/>8,<sp/><sp/>7<sp/>},</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/>{<sp/><sp/>8,<sp/><sp/>7<sp/>},<sp/>{<sp/><sp/>9,<sp/><sp/>6<sp/>},<sp/>{<sp/><sp/>8,<sp/><sp/>8<sp/>},<sp/>{<sp/><sp/>8,<sp/><sp/>8<sp/>},<sp/>{<sp/><sp/>8,<sp/><sp/>9<sp/>},<sp/>{<sp/><sp/>8,<sp/><sp/>9<sp/>},<sp/>{<sp/><sp/>9,<sp/><sp/>8<sp/>},<sp/>{<sp/><sp/>9,<sp/><sp/>8<sp/>},</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/>{<sp/><sp/>9,<sp/><sp/>8<sp/>},<sp/>{<sp/>10,<sp/><sp/>7<sp/>},<sp/>{<sp/><sp/>9,<sp/><sp/>9<sp/>},<sp/>{<sp/><sp/>9,<sp/><sp/>9<sp/>},<sp/>{<sp/><sp/>9,<sp/>10<sp/>},<sp/>{<sp/><sp/>8,<sp/>12<sp/>},<sp/>{<sp/>10,<sp/><sp/>9<sp/>},<sp/>{<sp/>10,<sp/><sp/>9<sp/>},</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/>{<sp/>10,<sp/><sp/>9<sp/>},<sp/>{<sp/>10,<sp/>10<sp/>},<sp/>{<sp/>10,<sp/>10<sp/>},<sp/>{<sp/>10,<sp/>10<sp/>},<sp/>{<sp/>10,<sp/>11<sp/>},<sp/>{<sp/><sp/>9,<sp/>13<sp/>},<sp/>{<sp/>11,<sp/>10<sp/>},<sp/>{<sp/>11,<sp/>10<sp/>},</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/>{<sp/>12,<sp/><sp/>8<sp/>},<sp/>{<sp/>11,<sp/>11<sp/>},<sp/>{<sp/>11,<sp/>11<sp/>},<sp/>{<sp/>11,<sp/>11<sp/>},<sp/>{<sp/>11,<sp/>12<sp/>},<sp/>{<sp/>11,<sp/>12<sp/>},<sp/>{<sp/>11,<sp/>12<sp/>},<sp/>{<sp/>11,<sp/>13<sp/>},</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/>{<sp/>12,<sp/>11<sp/>},<sp/>{<sp/>12,<sp/>11<sp/>},<sp/>{<sp/>13,<sp/>10<sp/>},<sp/>{<sp/>12,<sp/>12<sp/>},<sp/>{<sp/>12,<sp/>12<sp/>},<sp/>{<sp/>12,<sp/>13<sp/>},<sp/>{<sp/>12,<sp/>13<sp/>},<sp/>{<sp/>13,<sp/>12<sp/>},</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/>{<sp/>13,<sp/>12<sp/>},<sp/>{<sp/>13,<sp/>12<sp/>},<sp/>{<sp/>14,<sp/>11<sp/>},<sp/>{<sp/>13,<sp/>13<sp/>},<sp/>{<sp/>13,<sp/>13<sp/>},<sp/>{<sp/>13,<sp/>14<sp/>},<sp/>{<sp/>12,<sp/>16<sp/>},<sp/>{<sp/>14,<sp/>13<sp/>},</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/>{<sp/>14,<sp/>13<sp/>},<sp/>{<sp/>14,<sp/>13<sp/>},<sp/>{<sp/>14,<sp/>14<sp/>},<sp/>{<sp/>14,<sp/>14<sp/>},<sp/>{<sp/>14,<sp/>14<sp/>},<sp/>{<sp/>14,<sp/>15<sp/>},<sp/>{<sp/>13,<sp/>17<sp/>},<sp/>{<sp/>15,<sp/>14<sp/>},</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/>{<sp/>15,<sp/>14<sp/>},<sp/>{<sp/>16,<sp/>12<sp/>},<sp/>{<sp/>15,<sp/>15<sp/>},<sp/>{<sp/>15,<sp/>15<sp/>},<sp/>{<sp/>15,<sp/>15<sp/>},<sp/>{<sp/>15,<sp/>16<sp/>},<sp/>{<sp/>15,<sp/>16<sp/>},<sp/>{<sp/>15,<sp/>16<sp/>},</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/>{<sp/>15,<sp/>17<sp/>},<sp/>{<sp/>16,<sp/>15<sp/>},<sp/>{<sp/>16,<sp/>15<sp/>},<sp/>{<sp/>17,<sp/>14<sp/>},<sp/>{<sp/>16,<sp/>16<sp/>},<sp/>{<sp/>16,<sp/>16<sp/>},<sp/>{<sp/>16,<sp/>17<sp/>},<sp/>{<sp/>16,<sp/>17<sp/>},</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/>{<sp/>17,<sp/>16<sp/>},<sp/>{<sp/>17,<sp/>16<sp/>},<sp/>{<sp/>17,<sp/>16<sp/>},<sp/>{<sp/>18,<sp/>15<sp/>},<sp/>{<sp/>17,<sp/>17<sp/>},<sp/>{<sp/>17,<sp/>17<sp/>},<sp/>{<sp/>17,<sp/>18<sp/>},<sp/>{<sp/>16,<sp/>20<sp/>},</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/>{<sp/>18,<sp/>17<sp/>},<sp/>{<sp/>18,<sp/>17<sp/>},<sp/>{<sp/>18,<sp/>17<sp/>},<sp/>{<sp/>18,<sp/>18<sp/>},<sp/>{<sp/>18,<sp/>18<sp/>},<sp/>{<sp/>18,<sp/>18<sp/>},<sp/>{<sp/>18,<sp/>19<sp/>},<sp/>{<sp/>17,<sp/>21<sp/>},</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/>{<sp/>19,<sp/>18<sp/>},<sp/>{<sp/>19,<sp/>18<sp/>},<sp/>{<sp/>20,<sp/>16<sp/>},<sp/>{<sp/>19,<sp/>19<sp/>},<sp/>{<sp/>19,<sp/>19<sp/>},<sp/>{<sp/>19,<sp/>19<sp/>},<sp/>{<sp/>19,<sp/>20<sp/>},<sp/>{<sp/>19,<sp/>20<sp/>},</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/>{<sp/>19,<sp/>20<sp/>},<sp/>{<sp/>19,<sp/>21<sp/>},<sp/>{<sp/>20,<sp/>19<sp/>},<sp/>{<sp/>20,<sp/>19<sp/>},<sp/>{<sp/>21,<sp/>18<sp/>},<sp/>{<sp/>20,<sp/>20<sp/>},<sp/>{<sp/>20,<sp/>20<sp/>},<sp/>{<sp/>20,<sp/>21<sp/>},</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/>{<sp/>20,<sp/>21<sp/>},<sp/>{<sp/>21,<sp/>20<sp/>},<sp/>{<sp/>21,<sp/>20<sp/>},<sp/>{<sp/>21,<sp/>20<sp/>},<sp/>{<sp/>22,<sp/>19<sp/>},<sp/>{<sp/>21,<sp/>21<sp/>},<sp/>{<sp/>21,<sp/>21<sp/>},<sp/>{<sp/>21,<sp/>22<sp/>},</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/>{<sp/>20,<sp/>24<sp/>},<sp/>{<sp/>22,<sp/>21<sp/>},<sp/>{<sp/>22,<sp/>21<sp/>},<sp/>{<sp/>22,<sp/>21<sp/>},<sp/>{<sp/>22,<sp/>22<sp/>},<sp/>{<sp/>22,<sp/>22<sp/>},<sp/>{<sp/>22,<sp/>22<sp/>},<sp/>{<sp/>22,<sp/>23<sp/>},</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/>{<sp/>21,<sp/>25<sp/>},<sp/>{<sp/>23,<sp/>22<sp/>},<sp/>{<sp/>23,<sp/>22<sp/>},<sp/>{<sp/>24,<sp/>20<sp/>},<sp/>{<sp/>23,<sp/>23<sp/>},<sp/>{<sp/>23,<sp/>23<sp/>},<sp/>{<sp/>23,<sp/>23<sp/>},<sp/>{<sp/>23,<sp/>24<sp/>},</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/>{<sp/>23,<sp/>24<sp/>},<sp/>{<sp/>23,<sp/>24<sp/>},<sp/>{<sp/>23,<sp/>25<sp/>},<sp/>{<sp/>24,<sp/>23<sp/>},<sp/>{<sp/>24,<sp/>23<sp/>},<sp/>{<sp/>25,<sp/>22<sp/>},<sp/>{<sp/>24,<sp/>24<sp/>},<sp/>{<sp/>24,<sp/>24<sp/>},</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/>{<sp/>24,<sp/>25<sp/>},<sp/>{<sp/>24,<sp/>25<sp/>},<sp/>{<sp/>25,<sp/>24<sp/>},<sp/>{<sp/>25,<sp/>24<sp/>},<sp/>{<sp/>25,<sp/>24<sp/>},<sp/>{<sp/>26,<sp/>23<sp/>},<sp/>{<sp/>25,<sp/>25<sp/>},<sp/>{<sp/>25,<sp/>25<sp/>},</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/>{<sp/>25,<sp/>26<sp/>},<sp/>{<sp/>24,<sp/>28<sp/>},<sp/>{<sp/>26,<sp/>25<sp/>},<sp/>{<sp/>26,<sp/>25<sp/>},<sp/>{<sp/>26,<sp/>25<sp/>},<sp/>{<sp/>26,<sp/>26<sp/>},<sp/>{<sp/>26,<sp/>26<sp/>},<sp/>{<sp/>26,<sp/>26<sp/>},</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/>{<sp/>26,<sp/>27<sp/>},<sp/>{<sp/>25,<sp/>29<sp/>},<sp/>{<sp/>27,<sp/>26<sp/>},<sp/>{<sp/>27,<sp/>26<sp/>},<sp/>{<sp/>28,<sp/>24<sp/>},<sp/>{<sp/>27,<sp/>27<sp/>},<sp/>{<sp/>27,<sp/>27<sp/>},<sp/>{<sp/>27,<sp/>27<sp/>},</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/>{<sp/>27,<sp/>28<sp/>},<sp/>{<sp/>27,<sp/>28<sp/>},<sp/>{<sp/>27,<sp/>28<sp/>},<sp/>{<sp/>27,<sp/>29<sp/>},<sp/>{<sp/>28,<sp/>27<sp/>},<sp/>{<sp/>28,<sp/>27<sp/>},<sp/>{<sp/>29,<sp/>26<sp/>},<sp/>{<sp/>28,<sp/>28<sp/>},</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/>{<sp/>28,<sp/>28<sp/>},<sp/>{<sp/>28,<sp/>29<sp/>},<sp/>{<sp/>28,<sp/>29<sp/>},<sp/>{<sp/>29,<sp/>28<sp/>},<sp/>{<sp/>29,<sp/>28<sp/>},<sp/>{<sp/>29,<sp/>28<sp/>},<sp/>{<sp/>30,<sp/>27<sp/>},<sp/>{<sp/>29,<sp/>29<sp/>},</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/>{<sp/>29,<sp/>29<sp/>},<sp/>{<sp/>29,<sp/>30<sp/>},<sp/>{<sp/>29,<sp/>30<sp/>},<sp/>{<sp/>30,<sp/>29<sp/>},<sp/>{<sp/>30,<sp/>29<sp/>},<sp/>{<sp/>30,<sp/>29<sp/>},<sp/>{<sp/>30,<sp/>30<sp/>},<sp/>{<sp/>30,<sp/>30<sp/>},</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/>{<sp/>30,<sp/>30<sp/>},<sp/>{<sp/>30,<sp/>31<sp/>},<sp/>{<sp/>30,<sp/>31<sp/>},<sp/>{<sp/>31,<sp/>30<sp/>},<sp/>{<sp/>31,<sp/>30<sp/>},<sp/>{<sp/>31,<sp/>30<sp/>},<sp/>{<sp/>31,<sp/>31<sp/>},<sp/>{<sp/>31,<sp/>31<sp/>},</highlight></codeline>
<codeline lineno="128"><highlight class="normal">};</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>stb__OMatch6[256][2]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/>{<sp/><sp/>0,<sp/><sp/>0<sp/>},<sp/>{<sp/><sp/>0,<sp/><sp/>1<sp/>},<sp/>{<sp/><sp/>1,<sp/><sp/>0<sp/>},<sp/>{<sp/><sp/>1,<sp/><sp/>1<sp/>},<sp/>{<sp/><sp/>1,<sp/><sp/>1<sp/>},<sp/>{<sp/><sp/>1,<sp/><sp/>2<sp/>},<sp/>{<sp/><sp/>2,<sp/><sp/>1<sp/>},<sp/>{<sp/><sp/>2,<sp/><sp/>2<sp/>},</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/>{<sp/><sp/>2,<sp/><sp/>2<sp/>},<sp/>{<sp/><sp/>2,<sp/><sp/>3<sp/>},<sp/>{<sp/><sp/>3,<sp/><sp/>2<sp/>},<sp/>{<sp/><sp/>3,<sp/><sp/>3<sp/>},<sp/>{<sp/><sp/>3,<sp/><sp/>3<sp/>},<sp/>{<sp/><sp/>3,<sp/><sp/>4<sp/>},<sp/>{<sp/><sp/>4,<sp/><sp/>3<sp/>},<sp/>{<sp/><sp/>4,<sp/><sp/>4<sp/>},</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/>{<sp/><sp/>4,<sp/><sp/>4<sp/>},<sp/>{<sp/><sp/>4,<sp/><sp/>5<sp/>},<sp/>{<sp/><sp/>5,<sp/><sp/>4<sp/>},<sp/>{<sp/><sp/>5,<sp/><sp/>5<sp/>},<sp/>{<sp/><sp/>5,<sp/><sp/>5<sp/>},<sp/>{<sp/><sp/>5,<sp/><sp/>6<sp/>},<sp/>{<sp/><sp/>6,<sp/><sp/>5<sp/>},<sp/>{<sp/><sp/>6,<sp/><sp/>6<sp/>},</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/>{<sp/><sp/>6,<sp/><sp/>6<sp/>},<sp/>{<sp/><sp/>6,<sp/><sp/>7<sp/>},<sp/>{<sp/><sp/>7,<sp/><sp/>6<sp/>},<sp/>{<sp/><sp/>7,<sp/><sp/>7<sp/>},<sp/>{<sp/><sp/>7,<sp/><sp/>7<sp/>},<sp/>{<sp/><sp/>7,<sp/><sp/>8<sp/>},<sp/>{<sp/><sp/>8,<sp/><sp/>7<sp/>},<sp/>{<sp/><sp/>8,<sp/><sp/>8<sp/>},</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/>{<sp/><sp/>8,<sp/><sp/>8<sp/>},<sp/>{<sp/><sp/>8,<sp/><sp/>9<sp/>},<sp/>{<sp/><sp/>9,<sp/><sp/>8<sp/>},<sp/>{<sp/><sp/>9,<sp/><sp/>9<sp/>},<sp/>{<sp/><sp/>9,<sp/><sp/>9<sp/>},<sp/>{<sp/><sp/>9,<sp/>10<sp/>},<sp/>{<sp/>10,<sp/><sp/>9<sp/>},<sp/>{<sp/>10,<sp/>10<sp/>},</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/>{<sp/>10,<sp/>10<sp/>},<sp/>{<sp/>10,<sp/>11<sp/>},<sp/>{<sp/>11,<sp/>10<sp/>},<sp/>{<sp/><sp/>8,<sp/>16<sp/>},<sp/>{<sp/>11,<sp/>11<sp/>},<sp/>{<sp/>11,<sp/>12<sp/>},<sp/>{<sp/>12,<sp/>11<sp/>},<sp/>{<sp/><sp/>9,<sp/>17<sp/>},</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/>{<sp/>12,<sp/>12<sp/>},<sp/>{<sp/>12,<sp/>13<sp/>},<sp/>{<sp/>13,<sp/>12<sp/>},<sp/>{<sp/>11,<sp/>16<sp/>},<sp/>{<sp/>13,<sp/>13<sp/>},<sp/>{<sp/>13,<sp/>14<sp/>},<sp/>{<sp/>14,<sp/>13<sp/>},<sp/>{<sp/>12,<sp/>17<sp/>},</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/>{<sp/>14,<sp/>14<sp/>},<sp/>{<sp/>14,<sp/>15<sp/>},<sp/>{<sp/>15,<sp/>14<sp/>},<sp/>{<sp/>14,<sp/>16<sp/>},<sp/>{<sp/>15,<sp/>15<sp/>},<sp/>{<sp/>15,<sp/>16<sp/>},<sp/>{<sp/>16,<sp/>14<sp/>},<sp/>{<sp/>16,<sp/>15<sp/>},</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/>{<sp/>17,<sp/>14<sp/>},<sp/>{<sp/>16,<sp/>16<sp/>},<sp/>{<sp/>16,<sp/>17<sp/>},<sp/>{<sp/>17,<sp/>16<sp/>},<sp/>{<sp/>18,<sp/>15<sp/>},<sp/>{<sp/>17,<sp/>17<sp/>},<sp/>{<sp/>17,<sp/>18<sp/>},<sp/>{<sp/>18,<sp/>17<sp/>},</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/>{<sp/>20,<sp/>14<sp/>},<sp/>{<sp/>18,<sp/>18<sp/>},<sp/>{<sp/>18,<sp/>19<sp/>},<sp/>{<sp/>19,<sp/>18<sp/>},<sp/>{<sp/>21,<sp/>15<sp/>},<sp/>{<sp/>19,<sp/>19<sp/>},<sp/>{<sp/>19,<sp/>20<sp/>},<sp/>{<sp/>20,<sp/>19<sp/>},</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/>{<sp/>20,<sp/>20<sp/>},<sp/>{<sp/>20,<sp/>20<sp/>},<sp/>{<sp/>20,<sp/>21<sp/>},<sp/>{<sp/>21,<sp/>20<sp/>},<sp/>{<sp/>21,<sp/>21<sp/>},<sp/>{<sp/>21,<sp/>21<sp/>},<sp/>{<sp/>21,<sp/>22<sp/>},<sp/>{<sp/>22,<sp/>21<sp/>},</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/>{<sp/>22,<sp/>22<sp/>},<sp/>{<sp/>22,<sp/>22<sp/>},<sp/>{<sp/>22,<sp/>23<sp/>},<sp/>{<sp/>23,<sp/>22<sp/>},<sp/>{<sp/>23,<sp/>23<sp/>},<sp/>{<sp/>23,<sp/>23<sp/>},<sp/>{<sp/>23,<sp/>24<sp/>},<sp/>{<sp/>24,<sp/>23<sp/>},</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/>{<sp/>24,<sp/>24<sp/>},<sp/>{<sp/>24,<sp/>24<sp/>},<sp/>{<sp/>24,<sp/>25<sp/>},<sp/>{<sp/>25,<sp/>24<sp/>},<sp/>{<sp/>25,<sp/>25<sp/>},<sp/>{<sp/>25,<sp/>25<sp/>},<sp/>{<sp/>25,<sp/>26<sp/>},<sp/>{<sp/>26,<sp/>25<sp/>},</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/>{<sp/>26,<sp/>26<sp/>},<sp/>{<sp/>26,<sp/>26<sp/>},<sp/>{<sp/>26,<sp/>27<sp/>},<sp/>{<sp/>27,<sp/>26<sp/>},<sp/>{<sp/>24,<sp/>32<sp/>},<sp/>{<sp/>27,<sp/>27<sp/>},<sp/>{<sp/>27,<sp/>28<sp/>},<sp/>{<sp/>28,<sp/>27<sp/>},</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/>{<sp/>25,<sp/>33<sp/>},<sp/>{<sp/>28,<sp/>28<sp/>},<sp/>{<sp/>28,<sp/>29<sp/>},<sp/>{<sp/>29,<sp/>28<sp/>},<sp/>{<sp/>27,<sp/>32<sp/>},<sp/>{<sp/>29,<sp/>29<sp/>},<sp/>{<sp/>29,<sp/>30<sp/>},<sp/>{<sp/>30,<sp/>29<sp/>},</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/>{<sp/>28,<sp/>33<sp/>},<sp/>{<sp/>30,<sp/>30<sp/>},<sp/>{<sp/>30,<sp/>31<sp/>},<sp/>{<sp/>31,<sp/>30<sp/>},<sp/>{<sp/>30,<sp/>32<sp/>},<sp/>{<sp/>31,<sp/>31<sp/>},<sp/>{<sp/>31,<sp/>32<sp/>},<sp/>{<sp/>32,<sp/>30<sp/>},</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/>{<sp/>32,<sp/>31<sp/>},<sp/>{<sp/>33,<sp/>30<sp/>},<sp/>{<sp/>32,<sp/>32<sp/>},<sp/>{<sp/>32,<sp/>33<sp/>},<sp/>{<sp/>33,<sp/>32<sp/>},<sp/>{<sp/>34,<sp/>31<sp/>},<sp/>{<sp/>33,<sp/>33<sp/>},<sp/>{<sp/>33,<sp/>34<sp/>},</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/>{<sp/>34,<sp/>33<sp/>},<sp/>{<sp/>36,<sp/>30<sp/>},<sp/>{<sp/>34,<sp/>34<sp/>},<sp/>{<sp/>34,<sp/>35<sp/>},<sp/>{<sp/>35,<sp/>34<sp/>},<sp/>{<sp/>37,<sp/>31<sp/>},<sp/>{<sp/>35,<sp/>35<sp/>},<sp/>{<sp/>35,<sp/>36<sp/>},</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/>{<sp/>36,<sp/>35<sp/>},<sp/>{<sp/>36,<sp/>36<sp/>},<sp/>{<sp/>36,<sp/>36<sp/>},<sp/>{<sp/>36,<sp/>37<sp/>},<sp/>{<sp/>37,<sp/>36<sp/>},<sp/>{<sp/>37,<sp/>37<sp/>},<sp/>{<sp/>37,<sp/>37<sp/>},<sp/>{<sp/>37,<sp/>38<sp/>},</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/>{<sp/>38,<sp/>37<sp/>},<sp/>{<sp/>38,<sp/>38<sp/>},<sp/>{<sp/>38,<sp/>38<sp/>},<sp/>{<sp/>38,<sp/>39<sp/>},<sp/>{<sp/>39,<sp/>38<sp/>},<sp/>{<sp/>39,<sp/>39<sp/>},<sp/>{<sp/>39,<sp/>39<sp/>},<sp/>{<sp/>39,<sp/>40<sp/>},</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/>{<sp/>40,<sp/>39<sp/>},<sp/>{<sp/>40,<sp/>40<sp/>},<sp/>{<sp/>40,<sp/>40<sp/>},<sp/>{<sp/>40,<sp/>41<sp/>},<sp/>{<sp/>41,<sp/>40<sp/>},<sp/>{<sp/>41,<sp/>41<sp/>},<sp/>{<sp/>41,<sp/>41<sp/>},<sp/>{<sp/>41,<sp/>42<sp/>},</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/>{<sp/>42,<sp/>41<sp/>},<sp/>{<sp/>42,<sp/>42<sp/>},<sp/>{<sp/>42,<sp/>42<sp/>},<sp/>{<sp/>42,<sp/>43<sp/>},<sp/>{<sp/>43,<sp/>42<sp/>},<sp/>{<sp/>40,<sp/>48<sp/>},<sp/>{<sp/>43,<sp/>43<sp/>},<sp/>{<sp/>43,<sp/>44<sp/>},</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/>{<sp/>44,<sp/>43<sp/>},<sp/>{<sp/>41,<sp/>49<sp/>},<sp/>{<sp/>44,<sp/>44<sp/>},<sp/>{<sp/>44,<sp/>45<sp/>},<sp/>{<sp/>45,<sp/>44<sp/>},<sp/>{<sp/>43,<sp/>48<sp/>},<sp/>{<sp/>45,<sp/>45<sp/>},<sp/>{<sp/>45,<sp/>46<sp/>},</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/>{<sp/>46,<sp/>45<sp/>},<sp/>{<sp/>44,<sp/>49<sp/>},<sp/>{<sp/>46,<sp/>46<sp/>},<sp/>{<sp/>46,<sp/>47<sp/>},<sp/>{<sp/>47,<sp/>46<sp/>},<sp/>{<sp/>46,<sp/>48<sp/>},<sp/>{<sp/>47,<sp/>47<sp/>},<sp/>{<sp/>47,<sp/>48<sp/>},</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/>{<sp/>48,<sp/>46<sp/>},<sp/>{<sp/>48,<sp/>47<sp/>},<sp/>{<sp/>49,<sp/>46<sp/>},<sp/>{<sp/>48,<sp/>48<sp/>},<sp/>{<sp/>48,<sp/>49<sp/>},<sp/>{<sp/>49,<sp/>48<sp/>},<sp/>{<sp/>50,<sp/>47<sp/>},<sp/>{<sp/>49,<sp/>49<sp/>},</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/>{<sp/>49,<sp/>50<sp/>},<sp/>{<sp/>50,<sp/>49<sp/>},<sp/>{<sp/>52,<sp/>46<sp/>},<sp/>{<sp/>50,<sp/>50<sp/>},<sp/>{<sp/>50,<sp/>51<sp/>},<sp/>{<sp/>51,<sp/>50<sp/>},<sp/>{<sp/>53,<sp/>47<sp/>},<sp/>{<sp/>51,<sp/>51<sp/>},</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/>{<sp/>51,<sp/>52<sp/>},<sp/>{<sp/>52,<sp/>51<sp/>},<sp/>{<sp/>52,<sp/>52<sp/>},<sp/>{<sp/>52,<sp/>52<sp/>},<sp/>{<sp/>52,<sp/>53<sp/>},<sp/>{<sp/>53,<sp/>52<sp/>},<sp/>{<sp/>53,<sp/>53<sp/>},<sp/>{<sp/>53,<sp/>53<sp/>},</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/>{<sp/>53,<sp/>54<sp/>},<sp/>{<sp/>54,<sp/>53<sp/>},<sp/>{<sp/>54,<sp/>54<sp/>},<sp/>{<sp/>54,<sp/>54<sp/>},<sp/>{<sp/>54,<sp/>55<sp/>},<sp/>{<sp/>55,<sp/>54<sp/>},<sp/>{<sp/>55,<sp/>55<sp/>},<sp/>{<sp/>55,<sp/>55<sp/>},</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/>{<sp/>55,<sp/>56<sp/>},<sp/>{<sp/>56,<sp/>55<sp/>},<sp/>{<sp/>56,<sp/>56<sp/>},<sp/>{<sp/>56,<sp/>56<sp/>},<sp/>{<sp/>56,<sp/>57<sp/>},<sp/>{<sp/>57,<sp/>56<sp/>},<sp/>{<sp/>57,<sp/>57<sp/>},<sp/>{<sp/>57,<sp/>57<sp/>},</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/>{<sp/>57,<sp/>58<sp/>},<sp/>{<sp/>58,<sp/>57<sp/>},<sp/>{<sp/>58,<sp/>58<sp/>},<sp/>{<sp/>58,<sp/>58<sp/>},<sp/>{<sp/>58,<sp/>59<sp/>},<sp/>{<sp/>59,<sp/>58<sp/>},<sp/>{<sp/>59,<sp/>59<sp/>},<sp/>{<sp/>59,<sp/>59<sp/>},</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/>{<sp/>59,<sp/>60<sp/>},<sp/>{<sp/>60,<sp/>59<sp/>},<sp/>{<sp/>60,<sp/>60<sp/>},<sp/>{<sp/>60,<sp/>60<sp/>},<sp/>{<sp/>60,<sp/>61<sp/>},<sp/>{<sp/>61,<sp/>60<sp/>},<sp/>{<sp/>61,<sp/>61<sp/>},<sp/>{<sp/>61,<sp/>61<sp/>},</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/>{<sp/>61,<sp/>62<sp/>},<sp/>{<sp/>62,<sp/>61<sp/>},<sp/>{<sp/>62,<sp/>62<sp/>},<sp/>{<sp/>62,<sp/>62<sp/>},<sp/>{<sp/>62,<sp/>63<sp/>},<sp/>{<sp/>63,<sp/>62<sp/>},<sp/>{<sp/>63,<sp/>63<sp/>},<sp/>{<sp/>63,<sp/>63<sp/>},</highlight></codeline>
<codeline lineno="162"><highlight class="normal">};</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__Mul8Bit(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>a*b<sp/>+<sp/>128;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(t<sp/>+<sp/>(t<sp/>&gt;&gt;<sp/>8))<sp/>&gt;&gt;<sp/>8;</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__From16Bit(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>v)</highlight></codeline>
<codeline lineno="171"><highlight class="normal">{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rv<sp/>=<sp/>(v<sp/>&amp;<sp/>0xf800)<sp/>&gt;&gt;<sp/>11;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gv<sp/>=<sp/>(v<sp/>&amp;<sp/>0x07e0)<sp/>&gt;&gt;<sp/><sp/>5;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bv<sp/>=<sp/>(v<sp/>&amp;<sp/>0x001f)<sp/>&gt;&gt;<sp/><sp/>0;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>expand<sp/>to<sp/>8<sp/>bits<sp/>via<sp/>bit<sp/>replication</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/>out[0]<sp/>=<sp/>(rv<sp/>*<sp/>33)<sp/>&gt;&gt;<sp/>2;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/>out[1]<sp/>=<sp/>(gv<sp/>*<sp/>65)<sp/>&gt;&gt;<sp/>4;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/>out[2]<sp/>=<sp/>(bv<sp/>*<sp/>33)<sp/>&gt;&gt;<sp/>2;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/>out[3]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>stb__As16Bit(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">)((stb__Mul8Bit(r,31)<sp/>&lt;&lt;<sp/>11)<sp/>+<sp/>(stb__Mul8Bit(g,63)<sp/>&lt;&lt;<sp/>5)<sp/>+<sp/>stb__Mul8Bit(b,31));</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">//<sp/>linear<sp/>interpolation<sp/>at<sp/>1/3<sp/>point<sp/>between<sp/>a<sp/>and<sp/>b,<sp/>using<sp/>desired<sp/>rounding<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__Lerp13(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="190"><highlight class="normal">{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DXT_USE_ROUNDING_BIAS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>rounding<sp/>bias</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+<sp/>stb__Mul8Bit(b-a,<sp/>0x55);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>without<sp/>rounding<sp/>bias</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>replace<sp/>&quot;/<sp/>3&quot;<sp/>by<sp/>&quot;*<sp/>0xaaab)<sp/>&gt;&gt;<sp/>17&quot;<sp/>if<sp/>your<sp/>compiler<sp/>sucks<sp/>or<sp/>you<sp/>really<sp/>need<sp/>every<sp/>ounce<sp/>of<sp/>speed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(2*a<sp/>+<sp/>b)<sp/>/<sp/>3;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">//<sp/>lerp<sp/>RGB<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__Lerp13RGB(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p2)</highlight></codeline>
<codeline lineno="203"><highlight class="normal">{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/>out[0]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)stb__Lerp13(p1[0],<sp/>p2[0]);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/>out[1]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)stb__Lerp13(p1[1],<sp/>p2[1]);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/>out[2]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)stb__Lerp13(p1[2],<sp/>p2[2]);</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">/****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__EvalColors(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*color,</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>c0,</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>c1)</highlight></codeline>
<codeline lineno="212"><highlight class="normal">{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/>stb__From16Bit(color+<sp/>0,<sp/>c0);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/>stb__From16Bit(color+<sp/>4,<sp/>c1);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/>stb__Lerp13RGB(color+<sp/>8,<sp/>color+0,<sp/>color+4);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/>stb__Lerp13RGB(color+12,<sp/>color+4,<sp/>color+0);</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>color<sp/>matching<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__MatchColorsBlock(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*block,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*color)</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structmask" kindref="compound">mask</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dirr<sp/>=<sp/>color[0*4+0]<sp/>-<sp/>color[1*4+0];</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dirg<sp/>=<sp/>color[0*4+1]<sp/>-<sp/>color[1*4+1];</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dirb<sp/>=<sp/>color[0*4+2]<sp/>-<sp/>color[1*4+2];</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dots[16];</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stops[4];</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c0Point,<sp/>halfPoint,<sp/>c3Point;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;16;i++)</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dots[i]<sp/>=<sp/>block[i*4+0]*dirr<sp/>+<sp/>block[i*4+1]*dirg<sp/>+<sp/>block[i*4+2]*dirb;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;4;i++)</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stops[i]<sp/>=<sp/>color[i*4+0]*dirr<sp/>+<sp/>color[i*4+1]*dirg<sp/>+<sp/>color[i*4+2]*dirb;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>think<sp/>of<sp/>the<sp/>colors<sp/>as<sp/>arranged<sp/>on<sp/>a<sp/>line;<sp/>project<sp/>point<sp/>onto<sp/>that<sp/>line,<sp/>then<sp/>choose</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>next<sp/>color<sp/>out<sp/>of<sp/>available<sp/>ones.<sp/>we<sp/>compute<sp/>the<sp/>crossover<sp/>points<sp/>for<sp/>&quot;best<sp/>color<sp/>in<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>half&quot;/&quot;best<sp/>in<sp/>bottom<sp/>half&quot;<sp/>and<sp/>then<sp/>the<sp/>same<sp/>inside<sp/>that<sp/>subinterval.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>relying<sp/>on<sp/>this<sp/>1d<sp/>approximation<sp/>isn&apos;t<sp/>always<sp/>optimal<sp/>in<sp/>terms<sp/>of<sp/>euclidean<sp/>distance,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>it&apos;s<sp/>very<sp/>close<sp/>and<sp/>a<sp/>lot<sp/>faster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>http://cbloomrants.blogspot.com/2008/12/12-08-08-dxtc-summary.html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/>c0Point<sp/><sp/><sp/>=<sp/>(stops[1]<sp/>+<sp/>stops[3]);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/>halfPoint<sp/>=<sp/>(stops[3]<sp/>+<sp/>stops[2]);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/>c3Point<sp/><sp/><sp/>=<sp/>(stops[2]<sp/>+<sp/>stops[0]);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=15;i&gt;=0;i--)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dot<sp/>=<sp/>dots[i]*2;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmask" kindref="compound">mask</ref><sp/>&lt;&lt;=<sp/>2;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dot<sp/>&lt;<sp/>halfPoint)</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmask" kindref="compound">mask</ref><sp/>|=<sp/>(dot<sp/>&lt;<sp/>c0Point)<sp/>?<sp/>1<sp/>:<sp/>3;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmask" kindref="compound">mask</ref><sp/>|=<sp/>(dot<sp/>&lt;<sp/>c3Point)<sp/>?<sp/>2<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structmask" kindref="compound">mask</ref>;</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>color<sp/>optimization<sp/>function.<sp/>(Clever<sp/>code,<sp/>part<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__OptimizeColorsBlock(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*block,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*pmax16,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*pmin16)</highlight></codeline>
<codeline lineno="264"><highlight class="normal">{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mind,maxd;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*minp,<sp/>*maxp;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>magn;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v_r,v_g,v_b;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nIterPower<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>covf[6],vfr,vfg,vfb;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>determine<sp/>color<sp/>distribution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cov[6];</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mu[3],<ref refid="group__core__func__common_1ga2c2bde1cec025b7ddff83c74a1113719" kindref="member">min</ref>[3],<ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">max</ref>[3];</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch,i,iter;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(ch=0;ch&lt;3;ch++)</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*bp<sp/>=<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>block)<sp/>+<sp/>ch;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>muv,minv,maxv;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>muv<sp/>=<sp/>minv<sp/>=<sp/>maxv<sp/>=<sp/>bp[0];</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=4;i&lt;64;i+=4)</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>muv<sp/>+=<sp/>bp[i];</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bp[i]<sp/>&lt;<sp/>minv)<sp/>minv<sp/>=<sp/>bp[i];</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bp[i]<sp/>&gt;<sp/>maxv)<sp/>maxv<sp/>=<sp/>bp[i];</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>mu[ch]<sp/>=<sp/>(muv<sp/>+<sp/>8)<sp/>&gt;&gt;<sp/>4;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__core__func__common_1ga2c2bde1cec025b7ddff83c74a1113719" kindref="member">min</ref>[ch]<sp/>=<sp/>minv;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">max</ref>[ch]<sp/>=<sp/>maxv;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>determine<sp/>covariance<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;6;i++)</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>cov[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;16;i++)</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>block[i*4+0]<sp/>-<sp/>mu[0];</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g<sp/>=<sp/>block[i*4+1]<sp/>-<sp/>mu[1];</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>block[i*4+2]<sp/>-<sp/>mu[2];</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>cov[0]<sp/>+=<sp/>r*r;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>cov[1]<sp/>+=<sp/>r*g;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>cov[2]<sp/>+=<sp/>r*b;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>cov[3]<sp/>+=<sp/>g*g;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>cov[4]<sp/>+=<sp/>g*b;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>cov[5]<sp/>+=<sp/>b*b;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>covariance<sp/>matrix<sp/>to<sp/>float,<sp/>find<sp/>principal<sp/>axis<sp/>via<sp/>power<sp/>iter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;6;i++)</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>covf[i]<sp/>=<sp/>cov[i]<sp/>/<sp/>255.0f;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>vfr<sp/>=<sp/>(float)<sp/>(<ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">max</ref>[0]<sp/>-<sp/><ref refid="group__core__func__common_1ga2c2bde1cec025b7ddff83c74a1113719" kindref="member">min</ref>[0]);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>vfg<sp/>=<sp/>(float)<sp/>(<ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">max</ref>[1]<sp/>-<sp/><ref refid="group__core__func__common_1ga2c2bde1cec025b7ddff83c74a1113719" kindref="member">min</ref>[1]);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>vfb<sp/>=<sp/>(float)<sp/>(<ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">max</ref>[2]<sp/>-<sp/><ref refid="group__core__func__common_1ga2c2bde1cec025b7ddff83c74a1113719" kindref="member">min</ref>[2]);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iter=0;iter&lt;nIterPower;iter++)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>vfr*covf[0]<sp/>+<sp/>vfg*covf[1]<sp/>+<sp/>vfb*covf[2];</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>g<sp/>=<sp/>vfr*covf[1]<sp/>+<sp/>vfg*covf[3]<sp/>+<sp/>vfb*covf[4];</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>vfr*covf[2]<sp/>+<sp/>vfg*covf[4]<sp/>+<sp/>vfb*covf[5];</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>vfr<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>vfg<sp/>=<sp/>g;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>vfb<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>magn<sp/>=<sp/>STBD_FABS(vfr);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(STBD_FABS(vfg)<sp/>&gt;<sp/>magn)<sp/>magn<sp/>=<sp/>STBD_FABS(vfg);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(STBD_FABS(vfb)<sp/>&gt;<sp/>magn)<sp/>magn<sp/>=<sp/>STBD_FABS(vfb);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(magn<sp/>&lt;<sp/>4.0f)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>too<sp/>small,<sp/>default<sp/>to<sp/>luminance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v_r<sp/>=<sp/>299;<sp/></highlight><highlight class="comment">//<sp/>JPEG<sp/>YCbCr<sp/>luma<sp/>coefs,<sp/>scaled<sp/>by<sp/>1000.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v_g<sp/>=<sp/>587;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v_b<sp/>=<sp/>114;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>magn<sp/>=<sp/>512.0<sp/>/<sp/>magn;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v_r<sp/>=<sp/>(int)<sp/>(vfr<sp/>*<sp/>magn);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v_g<sp/>=<sp/>(int)<sp/>(vfg<sp/>*<sp/>magn);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v_b<sp/>=<sp/>(int)<sp/>(vfb<sp/>*<sp/>magn);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/>minp<sp/>=<sp/>maxp<sp/>=<sp/>block;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/>mind<sp/>=<sp/>maxd<sp/>=<sp/>block[0]*v_r<sp/>+<sp/>block[1]*v_g<sp/>+<sp/>block[2]*v_b;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pick<sp/>colors<sp/>at<sp/>extreme<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=1;i&lt;16;i++)</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dot<sp/>=<sp/>block[i*4+0]*v_r<sp/>+<sp/>block[i*4+1]*v_g<sp/>+<sp/>block[i*4+2]*v_b;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dot<sp/>&lt;<sp/>mind)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mind<sp/>=<sp/>dot;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minp<sp/>=<sp/>block+i*4;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dot<sp/>&gt;<sp/>maxd)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxd<sp/>=<sp/>dot;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxp<sp/>=<sp/>block+i*4;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/>*pmax16<sp/>=<sp/>stb__As16Bit(maxp[0],maxp[1],maxp[2]);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/>*pmin16<sp/>=<sp/>stb__As16Bit(minp[0],minp[1],minp[2]);</highlight></codeline>
<codeline lineno="367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>stb__midpoints5[32]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/>0.015686f,<sp/>0.047059f,<sp/>0.078431f,<sp/>0.111765f,<sp/>0.145098f,<sp/>0.176471f,<sp/>0.207843f,<sp/>0.241176f,<sp/>0.274510f,<sp/>0.305882f,<sp/>0.337255f,<sp/>0.370588f,<sp/>0.403922f,<sp/>0.435294f,<sp/>0.466667f,<sp/>0.5f,</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/>0.533333f,<sp/>0.564706f,<sp/>0.596078f,<sp/>0.629412f,<sp/>0.662745f,<sp/>0.694118f,<sp/>0.725490f,<sp/>0.758824f,<sp/>0.792157f,<sp/>0.823529f,<sp/>0.854902f,<sp/>0.888235f,<sp/>0.921569f,<sp/>0.952941f,<sp/>0.984314f,<sp/>1.0f</highlight></codeline>
<codeline lineno="372"><highlight class="normal">};</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>stb__midpoints6[64]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/>0.007843f,<sp/>0.023529f,<sp/>0.039216f,<sp/>0.054902f,<sp/>0.070588f,<sp/>0.086275f,<sp/>0.101961f,<sp/>0.117647f,<sp/>0.133333f,<sp/>0.149020f,<sp/>0.164706f,<sp/>0.180392f,<sp/>0.196078f,<sp/>0.211765f,<sp/>0.227451f,<sp/>0.245098f,</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/>0.262745f,<sp/>0.278431f,<sp/>0.294118f,<sp/>0.309804f,<sp/>0.325490f,<sp/>0.341176f,<sp/>0.356863f,<sp/>0.372549f,<sp/>0.388235f,<sp/>0.403922f,<sp/>0.419608f,<sp/>0.435294f,<sp/>0.450980f,<sp/>0.466667f,<sp/>0.482353f,<sp/>0.500000f,</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/>0.517647f,<sp/>0.533333f,<sp/>0.549020f,<sp/>0.564706f,<sp/>0.580392f,<sp/>0.596078f,<sp/>0.611765f,<sp/>0.627451f,<sp/>0.643137f,<sp/>0.658824f,<sp/>0.674510f,<sp/>0.690196f,<sp/>0.705882f,<sp/>0.721569f,<sp/>0.737255f,<sp/>0.754902f,</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/>0.772549f,<sp/>0.788235f,<sp/>0.803922f,<sp/>0.819608f,<sp/>0.835294f,<sp/>0.850980f,<sp/>0.866667f,<sp/>0.882353f,<sp/>0.898039f,<sp/>0.913725f,<sp/>0.929412f,<sp/>0.945098f,<sp/>0.960784f,<sp/>0.976471f,<sp/>0.992157f,<sp/>1.0f</highlight></codeline>
<codeline lineno="379"><highlight class="normal">};</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>stb__Quantize5(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x)</highlight></codeline>
<codeline lineno="382"><highlight class="normal">{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>q;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/>x<sp/>=<sp/>x<sp/>&lt;<sp/>0<sp/>?<sp/>0<sp/>:<sp/>x<sp/>&gt;<sp/>1<sp/>?<sp/>1<sp/>:<sp/>x;<sp/><sp/></highlight><highlight class="comment">//<sp/>saturate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/>q<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>short)(x<sp/>*<sp/>31);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/>q<sp/>+=<sp/>(x<sp/>&gt;<sp/>stb__midpoints5[q]);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>q;</highlight></codeline>
<codeline lineno="388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>stb__Quantize6(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x)</highlight></codeline>
<codeline lineno="391"><highlight class="normal">{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>q;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/>x<sp/>=<sp/>x<sp/>&lt;<sp/>0<sp/>?<sp/>0<sp/>:<sp/>x<sp/>&gt;<sp/>1<sp/>?<sp/>1<sp/>:<sp/>x;<sp/><sp/></highlight><highlight class="comment">//<sp/>saturate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/>q<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>short)(x<sp/>*<sp/>63);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/>q<sp/>+=<sp/>(x<sp/>&gt;<sp/>stb__midpoints6[q]);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>q;</highlight></codeline>
<codeline lineno="397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>refinement<sp/>function.<sp/>(Clever<sp/>code,<sp/>part<sp/>2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tries<sp/>to<sp/>optimize<sp/>colors<sp/>to<sp/>suit<sp/>block<sp/>contents<sp/>better.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(By<sp/>solving<sp/>a<sp/>least<sp/>squares<sp/>system<sp/>via<sp/>normal<sp/>equations+Cramer&apos;s<sp/>rule)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__RefineBlock(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*block,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*pmax16,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*pmin16,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structmask" kindref="compound">mask</ref>)</highlight></codeline>
<codeline lineno="403"><highlight class="normal">{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w1Tab[4]<sp/>=<sp/>{<sp/>3,0,2,1<sp/>};</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prods[4]<sp/>=<sp/>{<sp/>0x090000,0x000900,0x040102,0x010402<sp/>};</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>^some<sp/>magic<sp/>to<sp/>save<sp/>a<sp/>lot<sp/>of<sp/>multiplies<sp/>in<sp/>the<sp/>accumulating<sp/>loop...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(precomputed<sp/>products<sp/>of<sp/>weights<sp/>for<sp/>least<sp/>squares<sp/>system,<sp/>accumulated<sp/>inside<sp/>one<sp/>32-bit<sp/>register)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>oldMin,<sp/>oldMax,<sp/>min16,<sp/>max16;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>akku<sp/>=<sp/>0,<sp/>xx,xy,yy;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>At1_r,At1_g,At1_b;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>At2_r,At2_g,At2_b;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cm<sp/>=<sp/><ref refid="structmask" kindref="compound">mask</ref>;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/>oldMin<sp/>=<sp/>*pmin16;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/>oldMax<sp/>=<sp/>*pmax16;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((<ref refid="structmask" kindref="compound">mask</ref><sp/>^<sp/>(<ref refid="structmask" kindref="compound">mask</ref>&lt;&lt;2))<sp/>&lt;<sp/>4)<sp/></highlight><highlight class="comment">//<sp/>all<sp/>pixels<sp/>have<sp/>the<sp/>same<sp/>index?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>yes,<sp/>linear<sp/>system<sp/>would<sp/>be<sp/>singular;<sp/>solve<sp/>using<sp/>optimal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>single-color<sp/>match<sp/>on<sp/>average<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>8,<sp/>g<sp/>=<sp/>8,<sp/>b<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;16;++i)<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>+=<sp/>block[i*4+0];</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>+=<sp/>block[i*4+1];</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>+=<sp/>block[i*4+2];</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>&gt;&gt;=<sp/>4;<sp/>g<sp/>&gt;&gt;=<sp/>4;<sp/>b<sp/>&gt;&gt;=<sp/>4;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>max16<sp/>=<sp/>(stb__OMatch5[r][0]&lt;&lt;11)<sp/>|<sp/>(stb__OMatch6[g][0]&lt;&lt;5)<sp/>|<sp/>stb__OMatch5[b][0];</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min16<sp/>=<sp/>(stb__OMatch5[r][1]&lt;&lt;11)<sp/>|<sp/>(stb__OMatch6[g][1]&lt;&lt;5)<sp/>|<sp/>stb__OMatch5[b][1];</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>At1_r<sp/>=<sp/>At1_g<sp/>=<sp/>At1_b<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>At2_r<sp/>=<sp/>At2_g<sp/>=<sp/>At2_b<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;16;++i,cm&gt;&gt;=2)<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref><sp/>=<sp/>cm&amp;3;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w1<sp/>=<sp/>w1Tab[<ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>];</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>block[i*4+0];</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g<sp/>=<sp/>block[i*4+1];</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>block[i*4+2];</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>akku<sp/><sp/><sp/><sp/>+=<sp/>prods[<ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>];</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>At1_r<sp/><sp/><sp/>+=<sp/>w1*r;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>At1_g<sp/><sp/><sp/>+=<sp/>w1*g;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>At1_b<sp/><sp/><sp/>+=<sp/>w1*b;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>At2_r<sp/><sp/><sp/>+=<sp/>r;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>At2_g<sp/><sp/><sp/>+=<sp/>g;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>At2_b<sp/><sp/><sp/>+=<sp/>b;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>At2_r<sp/>=<sp/>3*At2_r<sp/>-<sp/>At1_r;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>At2_g<sp/>=<sp/>3*At2_g<sp/>-<sp/>At1_g;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>At2_b<sp/>=<sp/>3*At2_b<sp/>-<sp/>At1_b;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>extract<sp/>solutions<sp/>and<sp/>decide<sp/>solvability</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xx<sp/>=<sp/>akku<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>yy<sp/>=<sp/>(akku<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xy<sp/>=<sp/>(akku<sp/>&gt;&gt;<sp/>0)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>3.0f<sp/>/<sp/>255.0f<sp/>/<sp/>(xx*yy<sp/>-<sp/>xy*xy);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>max16<sp/>=<sp/><sp/>stb__Quantize5((At1_r*yy<sp/>-<sp/>At2_r<sp/>*<sp/>xy)<sp/>*<sp/>f)<sp/>&lt;&lt;<sp/>11;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>max16<sp/>|=<sp/>stb__Quantize6((At1_g*yy<sp/>-<sp/>At2_g<sp/>*<sp/>xy)<sp/>*<sp/>f)<sp/>&lt;&lt;<sp/>5;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>max16<sp/>|=<sp/>stb__Quantize5((At1_b*yy<sp/>-<sp/>At2_b<sp/>*<sp/>xy)<sp/>*<sp/>f)<sp/>&lt;&lt;<sp/>0;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min16<sp/>=<sp/><sp/>stb__Quantize5((At2_r*xx<sp/>-<sp/>At1_r<sp/>*<sp/>xy)<sp/>*<sp/>f)<sp/>&lt;&lt;<sp/>11;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min16<sp/>|=<sp/>stb__Quantize6((At2_g*xx<sp/>-<sp/>At1_g<sp/>*<sp/>xy)<sp/>*<sp/>f)<sp/>&lt;&lt;<sp/>5;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min16<sp/>|=<sp/>stb__Quantize5((At2_b*xx<sp/>-<sp/>At1_b<sp/>*<sp/>xy)<sp/>*<sp/>f)<sp/>&lt;&lt;<sp/>0;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/>*pmin16<sp/>=<sp/>min16;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/>*pmax16<sp/>=<sp/>max16;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oldMin<sp/>!=<sp/>min16<sp/>||<sp/>oldMax<sp/>!=<sp/>max16;</highlight></codeline>
<codeline lineno="476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Color<sp/>block<sp/>compression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__CompressColorBlock(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dest,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*block,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode)</highlight></codeline>
<codeline lineno="480"><highlight class="normal">{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structmask" kindref="compound">mask</ref>;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>refinecount;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>max16,<sp/>min16;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>color[4*4];</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/>refinecount<sp/>=<sp/>(mode<sp/>&amp;<sp/>STB_DXT_HIGHQUAL)<sp/>?<sp/>2<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>block<sp/>is<sp/>constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=1;i&lt;16;i++)</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>block)[i]<sp/>!=<sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>block)[0])</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>==<sp/>16)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>constant<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>block[0],<sp/>g<sp/>=<sp/>block[1],<sp/>b<sp/>=<sp/>block[2];</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmask" kindref="compound">mask</ref><sp/><sp/>=<sp/>0xaaaaaaaa;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>max16<sp/>=<sp/>(stb__OMatch5[r][0]&lt;&lt;11)<sp/>|<sp/>(stb__OMatch6[g][0]&lt;&lt;5)<sp/>|<sp/>stb__OMatch5[b][0];</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min16<sp/>=<sp/>(stb__OMatch5[r][1]&lt;&lt;11)<sp/>|<sp/>(stb__OMatch6[g][1]&lt;&lt;5)<sp/>|<sp/>stb__OMatch5[b][1];</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>step:<sp/>PCA+map<sp/>along<sp/>principal<sp/>axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__OptimizeColorsBlock(block,&amp;max16,&amp;min16);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max16<sp/>!=<sp/>min16)<sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__EvalColors(color,max16,min16);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmask" kindref="compound">mask</ref><sp/>=<sp/>stb__MatchColorsBlock(block,color);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmask" kindref="compound">mask</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>third<sp/>step:<sp/>refine<sp/>(multiple<sp/>times<sp/>if<sp/>requested)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;refinecount;i++)<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastmask<sp/>=<sp/><ref refid="structmask" kindref="compound">mask</ref>;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__RefineBlock(block,&amp;max16,&amp;min16,<ref refid="structmask" kindref="compound">mask</ref>))<sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max16<sp/>!=<sp/>min16)<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__EvalColors(color,max16,min16);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmask" kindref="compound">mask</ref><sp/>=<sp/>stb__MatchColorsBlock(block,color);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmask" kindref="compound">mask</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="structmask" kindref="compound">mask</ref><sp/>==<sp/>lastmask)</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>the<sp/>color<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(max16<sp/>&lt;<sp/>min16)</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>min16;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>min16<sp/>=<sp/>max16;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>max16<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="structmask" kindref="compound">mask</ref><sp/>^=<sp/>0x55555555;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>dest[0]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)<sp/>(max16);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>dest[1]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)<sp/>(max16<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>dest[2]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)<sp/>(min16);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>dest[3]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)<sp/>(min16<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>dest[4]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)<sp/>(<ref refid="structmask" kindref="compound">mask</ref>);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>dest[5]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)<sp/>(<ref refid="structmask" kindref="compound">mask</ref><sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>dest[6]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)<sp/>(<ref refid="structmask" kindref="compound">mask</ref><sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>dest[7]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)<sp/>(<ref refid="structmask" kindref="compound">mask</ref><sp/>&gt;&gt;<sp/>24);</highlight></codeline>
<codeline lineno="544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Alpha<sp/>block<sp/>compression<sp/>(this<sp/>is<sp/>easy<sp/>for<sp/>a<sp/>change)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__CompressAlphaBlock(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dest,</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stride)</highlight></codeline>
<codeline lineno="548"><highlight class="normal">{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,dist,bias,dist4,dist2,bits,<ref refid="structmask" kindref="compound">mask</ref>;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>min/max<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mn,mx;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/>mn<sp/>=<sp/>mx<sp/>=<sp/>src[0];</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=1;i&lt;16;i++)</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src[i*stride]<sp/>&lt;<sp/>mn)<sp/>mn<sp/>=<sp/>src[i*stride];</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src[i*stride]<sp/>&gt;<sp/>mx)<sp/>mx<sp/>=<sp/>src[i*stride];</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>encode<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/>dest[0]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)mx;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/>dest[1]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)mn;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/>dest<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>determine<sp/>bias<sp/>and<sp/>emit<sp/>color<sp/>indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>given<sp/>the<sp/>choice<sp/>of<sp/>mx/mn,<sp/>these<sp/>indices<sp/>are<sp/>optimal:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>http://fgiesen.wordpress.com/2009/12/15/dxt5-alpha-block-index-determination/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/>dist<sp/>=<sp/>mx-mn;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/>dist4<sp/>=<sp/>dist*4;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/>dist2<sp/>=<sp/>dist*2;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/>bias<sp/>=<sp/>(dist<sp/>&lt;<sp/>8)<sp/>?<sp/>(dist<sp/>-<sp/>1)<sp/>:<sp/>(dist/2<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/>bias<sp/>-=<sp/>mn<sp/>*<sp/>7;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/>bits<sp/>=<sp/>0,<ref refid="structmask" kindref="compound">mask</ref>=0;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;16;i++)<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>src[i*stride]*7<sp/>+<sp/>bias;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ind,t;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>select<sp/>index.<sp/>this<sp/>is<sp/>a<sp/>&quot;linear<sp/>scale&quot;<sp/>lerp<sp/>factor<sp/>between<sp/>0<sp/>(val=min)<sp/>and<sp/>7<sp/>(val=max).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(a<sp/>&gt;=<sp/>dist4)<sp/>?<sp/>-1<sp/>:<sp/>0;<sp/>ind<sp/>=<sp/><sp/>t<sp/>&amp;<sp/>4;<sp/>a<sp/>-=<sp/>dist4<sp/>&amp;<sp/>t;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>(a<sp/>&gt;=<sp/>dist2)<sp/>?<sp/>-1<sp/>:<sp/>0;<sp/>ind<sp/>+=<sp/>t<sp/>&amp;<sp/>2;<sp/>a<sp/>-=<sp/>dist2<sp/>&amp;<sp/>t;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ind<sp/>+=<sp/>(a<sp/>&gt;=<sp/>dist);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>turn<sp/>linear<sp/>scale<sp/>into<sp/>DXT<sp/>index<sp/>(0/1<sp/>are<sp/>extremal<sp/>pts)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ind<sp/>=<sp/>-ind<sp/>&amp;<sp/>7;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ind<sp/>^=<sp/>(2<sp/>&gt;<sp/>ind);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmask" kindref="compound">mask</ref><sp/>|=<sp/>ind<sp/>&lt;&lt;<sp/>bits;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((bits<sp/>+=<sp/>3)<sp/>&gt;=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dest++<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)<ref refid="structmask" kindref="compound">mask</ref>;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmask" kindref="compound">mask</ref><sp/>&gt;&gt;=<sp/>8;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>-=<sp/>8;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="normal">}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_compress_dxt_block(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alpha,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode)</highlight></codeline>
<codeline lineno="600"><highlight class="normal">{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>data[16][4];</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alpha)<sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__CompressAlphaBlock(dest,(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>src+3,<sp/>4);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>a<sp/>new<sp/>copy<sp/>of<sp/>the<sp/>data<sp/>in<sp/>which<sp/>alpha<sp/>is<sp/>opaque,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>code<sp/>uses<sp/>a<sp/>fast<sp/>test<sp/>for<sp/>color<sp/>constancy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(data,<sp/>src,<sp/>4*16);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>16;<sp/>++i)</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[i][3]<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src<sp/>=<sp/>&amp;data[0][0];</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/>stb__CompressColorBlock(dest,(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>src,mode);</highlight></codeline>
<codeline lineno="615"><highlight class="normal">}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_compress_bc4_block(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src)</highlight></codeline>
<codeline lineno="618"><highlight class="normal">{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/>stb__CompressAlphaBlock(dest,(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>src,<sp/>1);</highlight></codeline>
<codeline lineno="620"><highlight class="normal">}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_compress_bc5_block(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src)</highlight></codeline>
<codeline lineno="623"><highlight class="normal">{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/>stb__CompressAlphaBlock(dest,(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>src,2);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/>stb__CompressAlphaBlock(dest<sp/>+<sp/>8,(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>src+1,2);</highlight></codeline>
<codeline lineno="626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>STB_DXT_IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compile<sp/>with<sp/>STB_DXT_IMPLEMENTATION<sp/>and<sp/>STB_DXT_GENERATE_TABLES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="comment">//<sp/>defined<sp/>to<sp/>generate<sp/>the<sp/>tables<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DXT_GENERATE_TABLES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="635"><highlight class="normal">{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*omatch_names[]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;stb__OMatch5&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;stb__OMatch6&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dequant_mults[2]<sp/>=<sp/>{<sp/>33*4,<sp/>65<sp/>};<sp/></highlight><highlight class="comment">//<sp/>.4<sp/>fixed-point<sp/>dequant<sp/>multipliers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>optimal<sp/>endpoint<sp/>tables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>2;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dequant<sp/>=<sp/>dequant_mults[i];</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>i<sp/>?<sp/>64<sp/>:<sp/>32;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;static<sp/>const<sp/>unsigned<sp/>char<sp/>%s[256][2]<sp/>=<sp/>{\n&quot;</highlight><highlight class="normal">,<sp/>omatch_names[i]);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>256;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mn,<sp/>mx;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>best_mn<sp/>=<sp/>0,<sp/>best_mx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>best_err<sp/>=<sp/>256<sp/>*<sp/>100;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mn=0;mn&lt;size;mn++)<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mx=0;mx&lt;size;mx++)<sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mine<sp/>=<sp/>(mn<sp/>*<sp/>dequant)<sp/>&gt;&gt;<sp/>4;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxe<sp/>=<sp/>(mx<sp/>*<sp/>dequant)<sp/>&gt;&gt;<sp/>4;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err<sp/>=<sp/><ref refid="group__core__func__common_1ga693d77696ff36572a0da79efec965acd" kindref="member">abs</ref>(stb__Lerp13(maxe,<sp/>mine)<sp/>-<sp/>j)<sp/>*<sp/>100;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DX10<sp/>spec<sp/>says<sp/>that<sp/>interpolation<sp/>must<sp/>be<sp/>within<sp/>3%<sp/>of<sp/>&quot;correct&quot;<sp/>result,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>this<sp/>as<sp/>error<sp/>term.<sp/>Normally<sp/>we&apos;d<sp/>expect<sp/>a<sp/>random<sp/>distribution<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>+-1.5%<sp/>error,<sp/>but<sp/>nowhere<sp/>in<sp/>the<sp/>spec<sp/>does<sp/>it<sp/>say<sp/>that<sp/>the<sp/>error<sp/>has<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unbiased<sp/>-<sp/>better<sp/>safe<sp/>than<sp/>sorry.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>+=<sp/><ref refid="group__core__func__common_1ga693d77696ff36572a0da79efec965acd" kindref="member">abs</ref>(maxe<sp/>-<sp/>mine)<sp/>*<sp/>3;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(err<sp/>&lt;<sp/>best_err)<sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best_mn<sp/>=<sp/>mn;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best_mx<sp/>=<sp/>mx;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best_err<sp/>=<sp/>err;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((j<sp/>%<sp/>8)<sp/>==<sp/>0)<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>2<sp/>spaces,<sp/>third<sp/>is<sp/>done<sp/>below</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>{<sp/>%2d,<sp/>%2d<sp/>},&quot;</highlight><highlight class="normal">,<sp/>best_mx,<sp/>best_mn);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((j<sp/>%<sp/>8)<sp/>==<sp/>7)<sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;};\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="676"><highlight class="normal">}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="680"><highlight class="comment">------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="681"><highlight class="comment">This<sp/>software<sp/>is<sp/>available<sp/>under<sp/>2<sp/>licenses<sp/>--<sp/>choose<sp/>whichever<sp/>you<sp/>prefer.</highlight></codeline>
<codeline lineno="682"><highlight class="comment">------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="683"><highlight class="comment">ALTERNATIVE<sp/>A<sp/>-<sp/>MIT<sp/>License</highlight></codeline>
<codeline lineno="684"><highlight class="comment">Copyright<sp/>(c)<sp/>2017<sp/>Sean<sp/>Barrett</highlight></codeline>
<codeline lineno="685"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy<sp/>of</highlight></codeline>
<codeline lineno="686"><highlight class="comment">this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in</highlight></codeline>
<codeline lineno="687"><highlight class="comment">the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to</highlight></codeline>
<codeline lineno="688"><highlight class="comment">use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies</highlight></codeline>
<codeline lineno="689"><highlight class="comment">of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do</highlight></codeline>
<codeline lineno="690"><highlight class="comment">so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="691"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="692"><highlight class="comment">copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="693"><highlight class="comment">THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="694"><highlight class="comment">IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="695"><highlight class="comment">FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="696"><highlight class="comment">AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="697"><highlight class="comment">LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="698"><highlight class="comment">OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="699"><highlight class="comment">SOFTWARE.</highlight></codeline>
<codeline lineno="700"><highlight class="comment">------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="701"><highlight class="comment">ALTERNATIVE<sp/>B<sp/>-<sp/>Public<sp/>Domain<sp/>(www.unlicense.org)</highlight></codeline>
<codeline lineno="702"><highlight class="comment">This<sp/>is<sp/>free<sp/>and<sp/>unencumbered<sp/>software<sp/>released<sp/>into<sp/>the<sp/>public<sp/>domain.</highlight></codeline>
<codeline lineno="703"><highlight class="comment">Anyone<sp/>is<sp/>free<sp/>to<sp/>copy,<sp/>modify,<sp/>publish,<sp/>use,<sp/>compile,<sp/>sell,<sp/>or<sp/>distribute<sp/>this</highlight></codeline>
<codeline lineno="704"><highlight class="comment">software,<sp/>either<sp/>in<sp/>source<sp/>code<sp/>form<sp/>or<sp/>as<sp/>a<sp/>compiled<sp/>binary,<sp/>for<sp/>any<sp/>purpose,</highlight></codeline>
<codeline lineno="705"><highlight class="comment">commercial<sp/>or<sp/>non-commercial,<sp/>and<sp/>by<sp/>any<sp/>means.</highlight></codeline>
<codeline lineno="706"><highlight class="comment">In<sp/>jurisdictions<sp/>that<sp/>recognize<sp/>copyright<sp/>laws,<sp/>the<sp/>author<sp/>or<sp/>authors<sp/>of<sp/>this</highlight></codeline>
<codeline lineno="707"><highlight class="comment">software<sp/>dedicate<sp/>any<sp/>and<sp/>all<sp/>copyright<sp/>interest<sp/>in<sp/>the<sp/>software<sp/>to<sp/>the<sp/>public</highlight></codeline>
<codeline lineno="708"><highlight class="comment">domain.<sp/>We<sp/>make<sp/>this<sp/>dedication<sp/>for<sp/>the<sp/>benefit<sp/>of<sp/>the<sp/>public<sp/>at<sp/>large<sp/>and<sp/>to</highlight></codeline>
<codeline lineno="709"><highlight class="comment">the<sp/>detriment<sp/>of<sp/>our<sp/>heirs<sp/>and<sp/>successors.<sp/>We<sp/>intend<sp/>this<sp/>dedication<sp/>to<sp/>be<sp/>an</highlight></codeline>
<codeline lineno="710"><highlight class="comment">overt<sp/>act<sp/>of<sp/>relinquishment<sp/>in<sp/>perpetuity<sp/>of<sp/>all<sp/>present<sp/>and<sp/>future<sp/>rights<sp/>to</highlight></codeline>
<codeline lineno="711"><highlight class="comment">this<sp/>software<sp/>under<sp/>copyright<sp/>law.</highlight></codeline>
<codeline lineno="712"><highlight class="comment">THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="713"><highlight class="comment">IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="714"><highlight class="comment">FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="715"><highlight class="comment">AUTHORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="716"><highlight class="comment">ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION</highlight></codeline>
<codeline lineno="717"><highlight class="comment">WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="718"><highlight class="comment">------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="719"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/stb_dxt.h"/>
  </compounddef>
</doxygen>
