<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="component__wise_8inl" kind="file" language="C++">
    <compoundname>component_wise.inl</compoundname>
    <includes local="no">limits</includes>
    <includedby refid="component__wise_8hpp" local="yes">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/component_wise.hpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/component_wise.inl</label>
        <link refid="component__wise_8inl"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>limits</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/component_wise.hpp</label>
        <link refid="component__wise_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/component_wise.inl</label>
        <link refid="component__wise_8inl"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/texture.hpp</label>
        <link refid="texture_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/gtx/gtx_component_wise.cpp</label>
        <link refid="gtx__component__wise_8cpp_source"/>
      </node>
      <node id="4">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/gtx/gtx_texture.cpp</label>
        <link refid="gtx__texture_8cpp_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structglm_1_1detail_1_1compute__comp_normalize" prot="public">glm::detail::compute_compNormalize</innerclass>
    <innerclass refid="structglm_1_1detail_1_1compute__comp_normalize_3_01_l_00_01_t_00_01float_type_00_01_q_00_01true_00_01true_01_4" prot="public">glm::detail::compute_compNormalize&lt; L, T, floatType, Q, true, true &gt;</innerclass>
    <innerclass refid="structglm_1_1detail_1_1compute__comp_normalize_3_01_l_00_01_t_00_01float_type_00_01_q_00_01true_00_01false_01_4" prot="public">glm::detail::compute_compNormalize&lt; L, T, floatType, Q, true, false &gt;</innerclass>
    <innerclass refid="structglm_1_1detail_1_1compute__comp_normalize_3_01_l_00_01_t_00_01float_type_00_01_q_00_01false_00_01true_01_4" prot="public">glm::detail::compute_compNormalize&lt; L, T, floatType, Q, false, true &gt;</innerclass>
    <innerclass refid="structglm_1_1detail_1_1compute__comp_scale" prot="public">glm::detail::compute_compScale</innerclass>
    <innerclass refid="structglm_1_1detail_1_1compute__comp_scale_3_01_l_00_01_t_00_01float_type_00_01_q_00_01true_00_01true_01_4" prot="public">glm::detail::compute_compScale&lt; L, T, floatType, Q, true, true &gt;</innerclass>
    <innerclass refid="structglm_1_1detail_1_1compute__comp_scale_3_01_l_00_01_t_00_01float_type_00_01_q_00_01true_00_01false_01_4" prot="public">glm::detail::compute_compScale&lt; L, T, floatType, Q, true, false &gt;</innerclass>
    <innerclass refid="structglm_1_1detail_1_1compute__comp_scale_3_01_l_00_01_t_00_01float_type_00_01_q_00_01false_00_01true_01_4" prot="public">glm::detail::compute_compScale&lt; L, T, floatType, Q, false, true &gt;</innerclass>
    <innernamespace refid="namespaceglm">glm</innernamespace>
    <innernamespace refid="namespaceglm_1_1detail">glm::detail</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="group__gtx__component__wise" kindref="compound">GLM_GTX_component_wise</ref> </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">glm{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail</highlight></codeline>
<codeline lineno="8"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;length_t<sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">Type,<sp/>qualifier<sp/>Q,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isInteger,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal">Type&gt;</highlight></codeline>
<codeline lineno="10" refid="structglm_1_1detail_1_1compute__comp_normalize" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structglm_1_1detail_1_1compute__comp_normalize" kindref="compound">compute_compNormalize</ref></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;length_t<sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">Type,<sp/>qualifier<sp/>Q&gt;</highlight></codeline>
<codeline lineno="14" refid="structglm_1_1detail_1_1compute__comp_normalize_3_01_l_00_01_t_00_01float_type_00_01_q_00_01true_00_01true_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structglm_1_1detail_1_1compute__comp_normalize" kindref="compound">compute_compNormalize</ref>&lt;L,<sp/>T,<sp/>floatType,<sp/>Q,<sp/>true,<sp/>true&gt;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, floatType, Q&gt;</ref><sp/>call(<ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, T, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>v)</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>floatType<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Min<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">floatType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="group__core__func__common_1ga2c2bde1cec025b7ddff83c74a1113719" kindref="member">std::numeric_limits&lt;T&gt;::min</ref>());</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>floatType<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Max<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">floatType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">std::numeric_limits&lt;T&gt;::max</ref>());</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, floatType, Q&gt;</ref>(v)<sp/>-<sp/>Min)<sp/>/<sp/>(Max<sp/>-<sp/>Min)<sp/>*<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">floatType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(2)<sp/>-<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">floatType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;length_t<sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">Type,<sp/>qualifier<sp/>Q&gt;</highlight></codeline>
<codeline lineno="25" refid="structglm_1_1detail_1_1compute__comp_normalize_3_01_l_00_01_t_00_01float_type_00_01_q_00_01true_00_01false_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structglm_1_1detail_1_1compute__comp_normalize" kindref="compound">compute_compNormalize</ref>&lt;L,<sp/>T,<sp/>floatType,<sp/>Q,<sp/>true,<sp/>false&gt;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, floatType, Q&gt;</ref><sp/>call(<ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, T, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>v)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, floatType, Q&gt;</ref>(v)<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">floatType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">std::numeric_limits&lt;T&gt;::max</ref>());</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;length_t<sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">Type,<sp/>qualifier<sp/>Q&gt;</highlight></codeline>
<codeline lineno="34" refid="structglm_1_1detail_1_1compute__comp_normalize_3_01_l_00_01_t_00_01float_type_00_01_q_00_01false_00_01true_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structglm_1_1detail_1_1compute__comp_normalize" kindref="compound">compute_compNormalize</ref>&lt;L,<sp/>T,<sp/>floatType,<sp/>Q,<sp/>false,<sp/>true&gt;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, floatType, Q&gt;</ref><sp/>call(<ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, T, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>v)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;length_t<sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">Type,<sp/>qualifier<sp/>Q,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isInteger,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal">Type&gt;</highlight></codeline>
<codeline lineno="43" refid="structglm_1_1detail_1_1compute__comp_scale" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structglm_1_1detail_1_1compute__comp_scale" kindref="compound">compute_compScale</ref></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>{};</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;length_t<sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">Type,<sp/>qualifier<sp/>Q&gt;</highlight></codeline>
<codeline lineno="47" refid="structglm_1_1detail_1_1compute__comp_scale_3_01_l_00_01_t_00_01float_type_00_01_q_00_01true_00_01true_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structglm_1_1detail_1_1compute__comp_scale" kindref="compound">compute_compScale</ref>&lt;L,<sp/>T,<sp/>floatType,<sp/>Q,<sp/>true,<sp/>true&gt;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, T, Q&gt;</ref><sp/>call(<ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, floatType, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>v)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>floatType<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Max<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">floatType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">std::numeric_limits&lt;T&gt;::max</ref>())<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">floatType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0.5);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, floatType, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scaled(v<sp/>*<sp/>Max);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, T, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Result(Scaled<sp/>-<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">floatType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0.5));</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;length_t<sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">Type,<sp/>qualifier<sp/>Q&gt;</highlight></codeline>
<codeline lineno="59" refid="structglm_1_1detail_1_1compute__comp_scale_3_01_l_00_01_t_00_01float_type_00_01_q_00_01true_00_01false_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structglm_1_1detail_1_1compute__comp_scale" kindref="compound">compute_compScale</ref>&lt;L,<sp/>T,<sp/>floatType,<sp/>Q,<sp/>true,<sp/>false&gt;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, T, Q&gt;</ref><sp/>call(<ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, floatType, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>v)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, T, Q&gt;</ref>(<ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, floatType, Q&gt;</ref>(v)<sp/>*<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">floatType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">std::numeric_limits&lt;T&gt;::max</ref>()));</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;length_t<sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">Type,<sp/>qualifier<sp/>Q&gt;</highlight></codeline>
<codeline lineno="68" refid="structglm_1_1detail_1_1compute__comp_scale_3_01_l_00_01_t_00_01float_type_00_01_q_00_01false_00_01true_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structglm_1_1detail_1_1compute__comp_scale" kindref="compound">compute_compScale</ref>&lt;L,<sp/>T,<sp/>floatType,<sp/>Q,<sp/>false,<sp/>true&gt;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, T, Q&gt;</ref><sp/>call(<ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, floatType, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>v)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight><highlight class="comment">//namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">Type,<sp/>length_t<sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>qualifier<sp/>Q&gt;</highlight></codeline>
<codeline lineno="78" refid="group__gtx__component__wise_1ga3f5d893b2805999d155de26f7a9593d2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, floatType, Q&gt;</ref><sp/><ref refid="group__gtx__component__wise_1ga3f5d893b2805999d155de26f7a9593d2" kindref="member">compNormalize</ref>(<ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, T, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>v)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLM_STATIC_ASSERT(std::numeric_limits&lt;floatType&gt;::is_iec559,<sp/></highlight><highlight class="stringliteral">&quot;&apos;compNormalize&apos;<sp/>accepts<sp/>only<sp/>floating-point<sp/>types<sp/>for<sp/>&apos;floatType&apos;<sp/>template<sp/>parameter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1detail_1_1compute__comp_normalize" kindref="compound">detail::compute_compNormalize&lt;L, T, floatType, Q, std::numeric_limits&lt;T&gt;::is_integer</ref>,<sp/>std::numeric_limits&lt;T&gt;::is_signed&gt;::call(v);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>length_t<sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">Type,<sp/>qualifier<sp/>Q&gt;</highlight></codeline>
<codeline lineno="86" refid="group__gtx__component__wise_1gab0e4a1a73c60f93d8bfbe97f331476a9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, T, Q&gt;</ref><sp/><ref refid="group__gtx__component__wise_1gab0e4a1a73c60f93d8bfbe97f331476a9" kindref="member">compScale</ref>(<ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, floatType, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>v)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLM_STATIC_ASSERT(std::numeric_limits&lt;floatType&gt;::is_iec559,<sp/></highlight><highlight class="stringliteral">&quot;&apos;compScale&apos;<sp/>accepts<sp/>only<sp/>floating-point<sp/>types<sp/>for<sp/>&apos;floatType&apos;<sp/>template<sp/>parameter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1detail_1_1compute__comp_scale" kindref="compound">detail::compute_compScale&lt;L, T, floatType, Q, std::numeric_limits&lt;T&gt;::is_integer</ref>,<sp/>std::numeric_limits&lt;T&gt;::is_signed&gt;::call(v);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;length_t<sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>qualifier<sp/>Q&gt;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/>T<sp/>compAdd(<ref refid="structvec" kindref="compound">vec&lt;L, T, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>v)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>Result(0);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(length_t<sp/>i<sp/>=<sp/>0,<sp/>n<sp/>=<sp/>v.length();<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>+=<sp/>v[i];</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;length_t<sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>qualifier<sp/>Q&gt;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/>T<sp/><ref refid="group__gtx__component__wise_1gae8ab88024197202c9479d33bdc5a8a5d" kindref="member">compMul</ref>(<ref refid="structvec" kindref="compound">vec&lt;L, T, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>v)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>Result(1);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(length_t<sp/>i<sp/>=<sp/>0,<sp/>n<sp/>=<sp/>v.length();<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>*=<sp/>v[i];</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;length_t<sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>qualifier<sp/>Q&gt;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/>T<sp/><ref refid="group__gtx__component__wise_1gab5d0832b5c7bb01b8d7395973bfb1425" kindref="member">compMin</ref>(<ref refid="structvec" kindref="compound">vec&lt;L, T, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>v)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>Result(v[0]);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(length_t<sp/>i<sp/>=<sp/>1,<sp/>n<sp/>=<sp/>v.length();<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/><ref refid="group__core__func__common_1ga2c2bde1cec025b7ddff83c74a1113719" kindref="member">min</ref>(Result,<sp/>v[i]);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;length_t<sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>qualifier<sp/>Q&gt;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/>T<sp/><ref refid="group__gtx__component__wise_1gabfa4bb19298c8c73d4217ba759c496b6" kindref="member">compMax</ref>(<ref refid="structvec" kindref="compound">vec&lt;L, T, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>v)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>Result(v[0]);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(length_t<sp/>i<sp/>=<sp/>1,<sp/>n<sp/>=<sp/>v.length();<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/><ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">max</ref>(Result,<sp/>v[i]);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight><highlight class="comment">//namespace<sp/>glm</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/component_wise.inl"/>
  </compounddef>
</doxygen>
