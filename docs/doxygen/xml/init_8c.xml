<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="init_8c" kind="file" language="C++">
    <compoundname>init.c</compoundname>
    <includes refid="internal_8h" local="yes">internal.h</includes>
    <includes refid="mappings_8h" local="yes">mappings.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdarg.h</includes>
    <includes local="no">assert.h</includes>
    <incdepgraph>
      <node id="5">
        <label>stdint.h</label>
        <link refid="stdint_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>../include/GLFW/glfw3.h</label>
        <link refid="glfw_2include_2_g_l_f_w_2glfw3_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>egl_context.h</label>
        <link refid="egl__context_8h_source"/>
      </node>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/init.c</label>
        <link refid="init_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>internal.h</label>
        <link refid="internal_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>mappings.h</label>
        <link refid="mappings_8h_source"/>
      </node>
      <node id="10">
        <label>osmesa_context.h</label>
        <link refid="osmesa__context_8h_source"/>
      </node>
      <node id="8">
        <label>GL/gl.h</label>
      </node>
      <node id="16">
        <label>assert.h</label>
      </node>
      <node id="6">
        <label>limits.h</label>
      </node>
      <node id="15">
        <label>stdarg.h</label>
      </node>
      <node id="4">
        <label>stddef.h</label>
      </node>
      <node id="14">
        <label>stdio.h</label>
      </node>
      <node id="13">
        <label>stdlib.h</label>
      </node>
      <node id="12">
        <label>string.h</label>
      </node>
      <node id="7">
        <label>wchar.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="init_8c_1a3007bc654ca6468ee69759007f70ba1e" prot="public" static="no" mutable="no">
        <type><ref refid="struct___g_l_f_wlibrary" kindref="compound">_GLFWlibrary</ref></type>
        <definition>_GLFWlibrary _glfw</definition>
        <argsstring></argsstring>
        <name>_glfw</name>
        <initializer>= { <ref refid="imgui_2examples_2libs_2glfw_2include_2_g_l_f_w_2glfw3_8h_1ac877fe3b627d21ef3a0a23e0a73ba8c5" kindref="member">GLFW_FALSE</ref> }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/init.c" line="46" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/init.c" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="init_8c_1aa79263c10300146f12fdcddd84f35b78" prot="public" static="yes" mutable="no">
        <type><ref refid="struct___g_l_f_werror" kindref="compound">_GLFWerror</ref></type>
        <definition>_GLFWerror _glfwMainThreadError</definition>
        <argsstring></argsstring>
        <name>_glfwMainThreadError</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/init.c" line="51" column="19" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/init.c" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="init_8c_1a4521bff42f7c8fe445d789256ccbe81a" prot="public" static="yes" mutable="no">
        <type><ref refid="group__init_1gaa684e3f8b44b6a35000119d524d49e6d" kindref="member">GLFWerrorfun</ref></type>
        <definition>GLFWerrorfun _glfwErrorCallback</definition>
        <argsstring></argsstring>
        <name>_glfwErrorCallback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/init.c" line="52" column="21" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/init.c" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="init_8c_1a417aeddbafd198524af030c20ec5c2e6" prot="public" static="yes" mutable="no">
        <type><ref refid="struct___g_l_f_winitconfig" kindref="compound">_GLFWinitconfig</ref></type>
        <definition>_GLFWinitconfig _glfwInitHints</definition>
        <argsstring></argsstring>
        <name>_glfwInitHints</name>
        <initializer>=
{
    <ref refid="imgui_2examples_2libs_2glfw_2include_2_g_l_f_w_2glfw3_8h_1a2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref>,      
    GLFW_ANGLE_PLATFORM_TYPE_NONE, 
    {
        <ref refid="imgui_2examples_2libs_2glfw_2include_2_g_l_f_w_2glfw3_8h_1a2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref>,  
        <ref refid="imgui_2examples_2libs_2glfw_2include_2_g_l_f_w_2glfw3_8h_1a2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref>   
    }
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/init.c" line="53" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/init.c" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="init_8c_1ae5a773506a43a9bc54bce503f234c209" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void terminate</definition>
        <argsstring>(void)</argsstring>
        <name>terminate</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/init.c" line="65" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/init.c" bodystart="65" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="init_8c_1af725e1f466a710a1fc590ff3726f1151" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * _glfw_strdup</definition>
        <argsstring>(const char *source)</argsstring>
        <name>_glfw_strdup</name>
        <param>
          <type>const char *</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/init.c" line="118" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/init.c" bodystart="118" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="init_8c_1af27e3c452fbb2a7133339f77b72fcf37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float _glfw_fminf</definition>
        <argsstring>(float a, float b)</argsstring>
        <name>_glfw_fminf</name>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/init.c" line="126" column="7" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/init.c" bodystart="126" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="init_8c_1a159e9723ec02405ea951cea91b1cff30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float _glfw_fmaxf</definition>
        <argsstring>(float a, float b)</argsstring>
        <name>_glfw_fmaxf</name>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/init.c" line="138" column="7" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/init.c" bodystart="138" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="init_8c_1a3287b282ec57a4a89127ae51f49f10f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _glfwInputError</definition>
        <argsstring>(int code, const char *format,...)</argsstring>
        <name>_glfwInputError</name>
        <param>
          <type>int</type>
          <declname>code</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/init.c" line="157" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/init.c" bodystart="157" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="group__init_1gab41771f0215a2e0afb4cf1cf98082d40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI int</type>
        <definition>GLFWAPI int glfwInit</definition>
        <argsstring>(void)</argsstring>
        <name>glfwInit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initializes the GLFW library. </para>
        </briefdescription>
        <detaileddescription>
<para>This function initializes the GLFW library. Before most GLFW functions can be used, GLFW must be initialized, and before an application terminates GLFW should be terminated in order to free any resources allocated during or after initialization.</para>
<para>If this function fails, it calls <ref refid="group__init_1gafd90e6fd4819ea9e22e5e739519a6504" kindref="member">glfwTerminate</ref> before returning. If it succeeds, you should call <ref refid="group__init_1gafd90e6fd4819ea9e22e5e739519a6504" kindref="member">glfwTerminate</ref> before the application exits.</para>
<para>Additional calls to this function after successful initialization but before termination will return <computeroutput>GLFW_TRUE</computeroutput> immediately.</para>
<para><simplesect kind="return"><para><computeroutput>GLFW_TRUE</computeroutput> if successful, or <computeroutput>GLFW_FALSE</computeroutput> if an <ref refid="intro_guide_1error_handling" kindref="member">error</ref> occurred.</para>
</simplesect>
@errors Possible errors include <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para><simplesect kind="remark"><para>@macos This function will change the current directory of the application to the <computeroutput>Contents/Resources</computeroutput> subdirectory of the application&apos;s bundle, if present. This can be disabled with the <ref refid="group__init_1gab937983147a3158d45f88fad7129d9f2" kindref="member">GLFW_COCOA_CHDIR_RESOURCES</ref> init hint.</para>
</simplesect>
<simplesect kind="remark"><para>@macos This function will create the main menu and dock icon for the application. If GLFW finds a <computeroutput>MainMenu.nib</computeroutput> it is loaded and assumed to contain a menu bar. Otherwise a minimal menu bar is created manually with common commands like Hide, Quit and About. The About entry opens a minimal about dialog with information from the application&apos;s bundle. The menu bar and dock icon can be disabled entirely with the <ref refid="group__init_1ga71e0b4ce2f2696a84a9b8c5e12dc70cf" kindref="member">GLFW_COCOA_MENUBAR</ref> init hint.</para>
</simplesect>
<simplesect kind="remark"><para>@x11 This function will set the <computeroutput>LC_CTYPE</computeroutput> category of the application locale according to the current environment if that category is still &quot;C&quot;. This is because the &quot;C&quot; locale breaks Unicode text input.</para>
</simplesect>
@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="intro_guide_1intro_init" kindref="member">Initialization and termination</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__init_1gafd90e6fd4819ea9e22e5e739519a6504" kindref="member">glfwTerminate</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 1.0.</para>
</simplesect>
This function initializes the GLFW library. Before most GLFW functions can be used, GLFW must be initialized, and before an application terminates GLFW should be terminated in order to free any resources allocated during or after initialization.</para>
<para>If this function fails, it calls <ref refid="group__init_1gafd90e6fd4819ea9e22e5e739519a6504" kindref="member">glfwTerminate</ref> before returning. If it succeeds, you should call <ref refid="group__init_1gafd90e6fd4819ea9e22e5e739519a6504" kindref="member">glfwTerminate</ref> before the application exits.</para>
<para>Additional calls to this function after successful initialization but before termination will return <computeroutput>GLFW_TRUE</computeroutput> immediately.</para>
<para><simplesect kind="return"><para><computeroutput>GLFW_TRUE</computeroutput> if successful, or <computeroutput>GLFW_FALSE</computeroutput> if an <ref refid="intro_guide_1error_handling" kindref="member">error</ref> occurred.</para>
</simplesect>
@errors Possible errors include <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para><simplesect kind="remark"><para>@osx This function will change the current directory of the application to the <computeroutput>Contents/Resources</computeroutput> subdirectory of the application&apos;s bundle, if present. This can be disabled with a compile-time option.</para>
</simplesect>
@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="intro_guide_1intro_init" kindref="member">Initialization and termination</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__init_1gafd90e6fd4819ea9e22e5e739519a6504" kindref="member">glfwTerminate</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 1.0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/init.c" line="232" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/init.c" bodystart="232" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="group__init_1gafd90e6fd4819ea9e22e5e739519a6504" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI void</type>
        <definition>GLFWAPI void glfwTerminate</definition>
        <argsstring>(void)</argsstring>
        <name>glfwTerminate</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Terminates the GLFW library. </para>
        </briefdescription>
        <detaileddescription>
<para>This function destroys all remaining windows and cursors, restores any modified gamma ramps and frees any other allocated resources. Once this function is called, you must again call <ref refid="group__init_1gab41771f0215a2e0afb4cf1cf98082d40" kindref="member">glfwInit</ref> successfully before you will be able to use most GLFW functions.</para>
<para>If GLFW has been successfully initialized, this function should be called before the application exits. If initialization fails, there is no need to call this function, as it is called by <ref refid="group__init_1gab41771f0215a2e0afb4cf1cf98082d40" kindref="member">glfwInit</ref> before it returns failure.</para>
<para>This function has no effect if GLFW is not initialized.</para>
<para>@errors Possible errors include <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para><simplesect kind="remark"><para>This function may be called before <ref refid="group__init_1gab41771f0215a2e0afb4cf1cf98082d40" kindref="member">glfwInit</ref>.</para>
</simplesect>
<simplesect kind="warning"><para>The contexts of any remaining windows must not be current on any other thread when this function is called.</para>
</simplesect>
@reentrancy This function must not be called from a callback.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="intro_guide_1intro_init" kindref="member">Initialization and termination</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__init_1gab41771f0215a2e0afb4cf1cf98082d40" kindref="member">glfwInit</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 1.0.</para>
</simplesect>
This function destroys all remaining windows and cursors, restores any modified gamma ramps and frees any other allocated resources. Once this function is called, you must again call <ref refid="group__init_1gab41771f0215a2e0afb4cf1cf98082d40" kindref="member">glfwInit</ref> successfully before you will be able to use most GLFW functions.</para>
<para>If GLFW has been successfully initialized, this function should be called before the application exits. If initialization fails, there is no need to call this function, as it is called by <ref refid="group__init_1gab41771f0215a2e0afb4cf1cf98082d40" kindref="member">glfwInit</ref> before it returns failure.</para>
<para>@errors Possible errors include <ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>.</para>
<para><simplesect kind="remark"><para>This function may be called before <ref refid="group__init_1gab41771f0215a2e0afb4cf1cf98082d40" kindref="member">glfwInit</ref>.</para>
</simplesect>
<simplesect kind="warning"><para>The contexts of any remaining windows must not be current on any other thread when this function is called.</para>
</simplesect>
@reentrancy This function must not be called from a callback.</para>
<para>@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="intro_guide_1intro_init" kindref="member">Initialization and termination</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__init_1gab41771f0215a2e0afb4cf1cf98082d40" kindref="member">glfwInit</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 1.0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/init.c" line="277" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/init.c" bodystart="277" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="group__init_1gac85e41aab1c2bd6fc740f4377d9e7e9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI void</type>
        <definition>GLFWAPI void glfwInitHint</definition>
        <argsstring>(int hint, int value)</argsstring>
        <name>glfwInitHint</name>
        <param>
          <type>int</type>
          <declname>hint</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the specified init hint to the desired value. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets hints for the next initialization of GLFW.</para>
<para>The values you set hints to are never reset by GLFW, but they only take effect during initialization. Once GLFW has been initialized, any values you set will be ignored until the library is terminated and initialized again.</para>
<para>Some hints are platform specific. These may be set on any platform but they will only affect their specific platform. Other platforms will ignore them. Setting these hints requires no platform specific headers or functions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">hint</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="intro_guide_1init_hints" kindref="member">init hint</ref> to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>The new value of the init hint.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors Possible errors include <ref refid="group__errors_1ga76f6bb9c4eea73db675f096b404593ce" kindref="member">GLFW_INVALID_ENUM</ref> and <ref refid="group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687" kindref="member">GLFW_INVALID_VALUE</ref>.</para>
<para><simplesect kind="remark"><para>This function may be called before <ref refid="group__init_1gab41771f0215a2e0afb4cf1cf98082d40" kindref="member">glfwInit</ref>.</para>
</simplesect>
@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para>init_hints </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__init_1gab41771f0215a2e0afb4cf1cf98082d40" kindref="member">glfwInit</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.3. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/init.c" line="285" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/init.c" bodystart="285" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="group__init_1ga2402c7824ac0194c13722790ff9559ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI void</type>
        <definition>GLFWAPI void glfwGetVersion</definition>
        <argsstring>(int *major, int *minor, int *rev)</argsstring>
        <name>glfwGetVersion</name>
        <param>
          <type>int *</type>
          <declname>major</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>minor</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>rev</declname>
        </param>
        <briefdescription>
<para>Retrieves the version of the GLFW library. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the major, minor and revision numbers of the GLFW library. It is intended for when you are using GLFW as a shared library and want to ensure that you are using the minimum required version.</para>
<para>Any or all of the version arguments may be <computeroutput>NULL</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">major</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the major version number, or <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">minor</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the minor version number, or <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">rev</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the revision number, or <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors None.</para>
<para><simplesect kind="remark"><para>This function may be called before <ref refid="group__init_1gab41771f0215a2e0afb4cf1cf98082d40" kindref="member">glfwInit</ref>.</para>
</simplesect>
@thread_safety This function may be called from any thread.</para>
<para><simplesect kind="see"><para><ref refid="intro_guide_1intro_version" kindref="member">Version management</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__init_1gae5952184a0db36e24d1de7805b8b0945" kindref="member">glfwGetVersionString</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 1.0.</para>
</simplesect>
This function retrieves the major, minor and revision numbers of the GLFW library. It is intended for when you are using GLFW as a shared library and want to ensure that you are using the minimum required version.</para>
<para>Any or all of the version arguments may be <computeroutput>NULL</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">major</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the major version number, or <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">minor</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the minor version number, or <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">rev</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the revision number, or <computeroutput>NULL</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@errors None.</para>
<para><simplesect kind="remark"><para>This function may be called before <ref refid="group__init_1gab41771f0215a2e0afb4cf1cf98082d40" kindref="member">glfwInit</ref>.</para>
</simplesect>
@thread_safety This function may be called from any thread.</para>
<para><simplesect kind="see"><para><ref refid="intro_guide_1intro_version" kindref="member">Version management</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__init_1gae5952184a0db36e24d1de7805b8b0945" kindref="member">glfwGetVersionString</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 1.0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/init.c" line="307" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/init.c" bodystart="307" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="group__init_1gae5952184a0db36e24d1de7805b8b0945" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI const char *</type>
        <definition>GLFWAPI const char * glfwGetVersionString</definition>
        <argsstring>(void)</argsstring>
        <name>glfwGetVersionString</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns a string describing the compile-time configuration. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns the compile-time generated <ref refid="intro_guide_1intro_version_string" kindref="member">version string</ref> of the GLFW library binary. It describes the version, platform, compiler and any platform-specific compile-time options. It should not be confused with the OpenGL or OpenGL ES version string, queried with <computeroutput>glGetString</computeroutput>.</para>
<para><bold>Do not use the version string</bold> to parse the GLFW library version. The <ref refid="group__init_1ga2402c7824ac0194c13722790ff9559ff" kindref="member">glfwGetVersion</ref> function provides the version of the running library binary in numerical format.</para>
<para><simplesect kind="return"><para>The ASCII encoded GLFW version string.</para>
</simplesect>
@errors None.</para>
<para><simplesect kind="remark"><para>This function may be called before <ref refid="group__init_1gab41771f0215a2e0afb4cf1cf98082d40" kindref="member">glfwInit</ref>.</para>
</simplesect>
@pointer_lifetime The returned string is static and compile-time generated.</para>
<para>@thread_safety This function may be called from any thread.</para>
<para><simplesect kind="see"><para><ref refid="intro_guide_1intro_version" kindref="member">Version management</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__init_1ga2402c7824ac0194c13722790ff9559ff" kindref="member">glfwGetVersion</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0.</para>
</simplesect>
This function returns the compile-time generated <ref refid="intro_guide_1intro_version_string" kindref="member">version string</ref> of the GLFW library binary. It describes the version, platform, compiler and any platform-specific compile-time options. It should not be confused with the OpenGL or OpenGL ES version string, queried with <computeroutput>glGetString</computeroutput>.</para>
<para><bold>Do not use the version string</bold> to parse the GLFW library version. The <ref refid="group__init_1ga2402c7824ac0194c13722790ff9559ff" kindref="member">glfwGetVersion</ref> function provides the version of the running library binary in numerical format.</para>
<para><simplesect kind="return"><para>The ASCII encoded GLFW version string.</para>
</simplesect>
@errors None.</para>
<para><simplesect kind="remark"><para>This function may be called before <ref refid="group__init_1gab41771f0215a2e0afb4cf1cf98082d40" kindref="member">glfwInit</ref>.</para>
</simplesect>
@pointer_lifetime The returned string is static and compile-time generated.</para>
<para>@thread_safety This function may be called from any thread.</para>
<para><simplesect kind="see"><para><ref refid="intro_guide_1intro_version" kindref="member">Version management</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__init_1ga2402c7824ac0194c13722790ff9559ff" kindref="member">glfwGetVersion</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/init.c" line="317" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/init.c" bodystart="317" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="group__init_1gaee7bac4c7e1b2769207747c1b5ae2f9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI int</type>
        <definition>GLFWAPI int glfwGetError</definition>
        <argsstring>(const char **description)</argsstring>
        <name>glfwGetError</name>
        <param>
          <type>const char **</type>
          <declname>description</declname>
        </param>
        <briefdescription>
<para>Returns and clears the last error for the calling thread. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns and clears the <ref refid="group__errors" kindref="compound">error code</ref> of the last error that occurred on the calling thread, and optionally a UTF-8 encoded human-readable description of it. If no error has occurred since the last call, it returns <ref refid="group__errors_1gafa30deee5db4d69c4c93d116ed87dbf4" kindref="member">GLFW_NO_ERROR</ref> (zero) and the description pointer is set to <computeroutput>NULL</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">description</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to store the error description pointer, or <computeroutput>NULL</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The last error code for the calling thread, or <ref refid="group__errors_1gafa30deee5db4d69c4c93d116ed87dbf4" kindref="member">GLFW_NO_ERROR</ref> (zero).</para>
</simplesect>
@errors None.</para>
<para>@pointer_lifetime The returned string is allocated and freed by GLFW. You should not free it yourself. It is guaranteed to be valid only until the next error occurs or the library is terminated.</para>
<para><simplesect kind="remark"><para>This function may be called before <ref refid="group__init_1gab41771f0215a2e0afb4cf1cf98082d40" kindref="member">glfwInit</ref>.</para>
</simplesect>
@thread_safety This function may be called from any thread.</para>
<para><simplesect kind="see"><para><ref refid="intro_guide_1error_handling" kindref="member">Error handling</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__init_1ga746e2757d069eaea423349aca6ae097a" kindref="member">glfwSetErrorCallback</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.3. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/init.c" line="322" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/init.c" bodystart="322" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="group__init_1ga746e2757d069eaea423349aca6ae097a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWAPI <ref refid="group__init_1gaa684e3f8b44b6a35000119d524d49e6d" kindref="member">GLFWerrorfun</ref></type>
        <definition>GLFWAPI GLFWerrorfun glfwSetErrorCallback</definition>
        <argsstring>(GLFWerrorfun cbfun)</argsstring>
        <name>glfwSetErrorCallback</name>
        <param>
          <type><ref refid="group__init_1gaa684e3f8b44b6a35000119d524d49e6d" kindref="member">GLFWerrorfun</ref></type>
          <declname>callback</declname>
          <defname>cbfun</defname>
        </param>
        <briefdescription>
<para>Sets the error callback. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets the error callback, which is called with an error code and a human-readable description each time a GLFW error occurs.</para>
<para>The error code is set before the callback is called. Calling <ref refid="group__init_1gaee7bac4c7e1b2769207747c1b5ae2f9e" kindref="member">glfwGetError</ref> from the error callback will return the same value as the error code argument.</para>
<para>The error callback is called on the thread where the error occurred. If you are using GLFW from multiple threads, your error callback needs to be written accordingly.</para>
<para>Because the description string may have been generated specifically for that error, it is not guaranteed to be valid after the callback has returned. If you wish to use it after the callback returns, you need to make a copy.</para>
<para>Once set, the error callback remains set even after the library has been terminated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">callback</parametername>
</parameternamelist>
<parameterdescription>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set.</para>
</simplesect>
@callback_signature <programlisting><codeline><highlight class="normal">void<sp/>callback_name(int<sp/>error_code,<sp/>const<sp/>char*<sp/>description)</highlight></codeline>
</programlisting> For more information about the callback parameters, see the <ref refid="group__init_1gaa684e3f8b44b6a35000119d524d49e6d" kindref="member">callback pointer type</ref>.</para>
<para>@errors None.</para>
<para><simplesect kind="remark"><para>This function may be called before <ref refid="group__init_1gab41771f0215a2e0afb4cf1cf98082d40" kindref="member">glfwInit</ref>.</para>
</simplesect>
@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="intro_guide_1error_handling" kindref="member">Error handling</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__init_1gaee7bac4c7e1b2769207747c1b5ae2f9e" kindref="member">glfwGetError</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0.</para>
</simplesect>
This function sets the error callback, which is called with an error code and a human-readable description each time a GLFW error occurs.</para>
<para>The error callback is called on the thread where the error occurred. If you are using GLFW from multiple threads, your error callback needs to be written accordingly.</para>
<para>Because the description string may have been generated specifically for that error, it is not guaranteed to be valid after the callback has returned. If you wish to use it after the callback returns, you need to make a copy.</para>
<para>Once set, the error callback remains set even after the library has been terminated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cbfun</parametername>
</parameternamelist>
<parameterdescription>
<para>The new callback, or <computeroutput>NULL</computeroutput> to remove the currently set callback. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The previously set callback, or <computeroutput>NULL</computeroutput> if no callback was set.</para>
</simplesect>
@errors None.</para>
<para><simplesect kind="remark"><para>This function may be called before <ref refid="group__init_1gab41771f0215a2e0afb4cf1cf98082d40" kindref="member">glfwInit</ref>.</para>
</simplesect>
@thread_safety This function must only be called from the main thread.</para>
<para><simplesect kind="see"><para><ref refid="intro_guide_1error_handling" kindref="member">Error handling</ref></para>
</simplesect>
<simplesect kind="since"><para>Added in version 3.0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/init.c" line="346" column="22" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/init.c" bodystart="346" bodyend="350"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GLFW<sp/>3.4<sp/>-<sp/>www.glfw.org</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2002-2006<sp/>Marcus<sp/>Geelnard</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2006-2018<sp/>Camilla<sp/>Löwy<sp/>&lt;elmindreda@glfw.org&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>software<sp/>is<sp/>provided<sp/>&apos;as-is&apos;,<sp/>without<sp/>any<sp/>express<sp/>or<sp/>implied</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>warranty.<sp/>In<sp/>no<sp/>event<sp/>will<sp/>the<sp/>authors<sp/>be<sp/>held<sp/>liable<sp/>for<sp/>any<sp/>damages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>arising<sp/>from<sp/>the<sp/>use<sp/>of<sp/>this<sp/>software.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Permission<sp/>is<sp/>granted<sp/>to<sp/>anyone<sp/>to<sp/>use<sp/>this<sp/>software<sp/>for<sp/>any<sp/>purpose,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>including<sp/>commercial<sp/>applications,<sp/>and<sp/>to<sp/>alter<sp/>it<sp/>and<sp/>redistribute<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>freely,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>restrictions:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>1.<sp/>The<sp/>origin<sp/>of<sp/>this<sp/>software<sp/>must<sp/>not<sp/>be<sp/>misrepresented;<sp/>you<sp/>must<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>claim<sp/>that<sp/>you<sp/>wrote<sp/>the<sp/>original<sp/>software.<sp/>If<sp/>you<sp/>use<sp/>this<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>in<sp/>a<sp/>product,<sp/>an<sp/>acknowledgment<sp/>in<sp/>the<sp/>product<sp/>documentation<sp/>would</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>be<sp/>appreciated<sp/>but<sp/>is<sp/>not<sp/>required.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2.<sp/>Altered<sp/>source<sp/>versions<sp/>must<sp/>be<sp/>plainly<sp/>marked<sp/>as<sp/>such,<sp/>and<sp/>must<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>be<sp/>misrepresented<sp/>as<sp/>being<sp/>the<sp/>original<sp/>software.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>3.<sp/>This<sp/>notice<sp/>may<sp/>not<sp/>be<sp/>removed<sp/>or<sp/>altered<sp/>from<sp/>any<sp/>source</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Please<sp/>use<sp/>C89<sp/>style<sp/>variable<sp/>declarations<sp/>in<sp/>this<sp/>file<sp/>because<sp/>VS<sp/>2010</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;internal.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mappings.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>global<sp/>variables<sp/>below<sp/>comprise<sp/>all<sp/>mutable<sp/>global<sp/>data<sp/>in<sp/>GLFW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Any<sp/>other<sp/>global<sp/>variable<sp/>is<sp/>a<sp/>bug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Global<sp/>state<sp/>shared<sp/>between<sp/>compilation<sp/>units<sp/>of<sp/>GLFW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><ref refid="struct___g_l_f_wlibrary" kindref="compound">_GLFWlibrary</ref><sp/>_glfw<sp/>=<sp/>{<sp/><ref refid="group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5" kindref="member">GLFW_FALSE</ref><sp/>};</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>are<sp/>outside<sp/>of<sp/>_glfw<sp/>so<sp/>they<sp/>can<sp/>be<sp/>used<sp/>before<sp/>initialization<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/>after<sp/>termination</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct___g_l_f_werror" kindref="compound">_GLFWerror</ref><sp/>_glfwMainThreadError;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group__init_1gaa684e3f8b44b6a35000119d524d49e6d" kindref="member">GLFWerrorfun</ref><sp/>_glfwErrorCallback;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct___g_l_f_winitconfig" kindref="compound">_GLFWinitconfig</ref><sp/>_glfwInitHints<sp/>=</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hat<sp/>buttons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>GLFW_ANGLE_PLATFORM_TYPE_NONE,<sp/></highlight><highlight class="comment">//<sp/>ANGLE<sp/>backend</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref>,<sp/><sp/></highlight><highlight class="comment">//<sp/>macOS<sp/>menu<sp/>bar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>macOS<sp/>bundle<sp/>chdir</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal">};</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Terminate<sp/>the<sp/>library</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>terminate(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;_glfw.callbacks,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(_glfw.callbacks));</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(_glfw.windowListHead)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__window_1ga806747476b7247d292be3711c323ea10" kindref="member">glfwDestroyWindow</ref>((<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*)<sp/>_glfw.windowListHead);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(_glfw.cursorListHead)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__input_1ga27556b7122117bc1bbb4bb3cc003ea43" kindref="member">glfwDestroyCursor</ref>((<ref refid="group__input_1ga89261ae18c75e863aaf2656ecdd238f4" kindref="member">GLFWcursor</ref>*)<sp/>_glfw.cursorListHead);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/><sp/>i<sp/>&lt;<sp/>_glfw.monitorCount;<sp/><sp/>i++)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_wmonitor" kindref="compound">_GLFWmonitor</ref>*<sp/>monitor<sp/>=<sp/>_glfw.monitors[i];</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(monitor-&gt;originalRamp.<ref refid="struct_g_l_f_wgammaramp_1ad620e1cffbff9a32c51bca46301b59a5" kindref="member">size</ref>)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfwPlatformSetGammaRamp(monitor,<sp/>&amp;monitor-&gt;originalRamp);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfwFreeMonitor(monitor);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>free(_glfw.monitors);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfw.monitors<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfw.monitorCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>free(_glfw.mappings);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfw.mappings<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfw.mappingCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfwTerminateVulkan();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfwPlatformTerminateJoysticks();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfwPlatformTerminate();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfw.initialized<sp/>=<sp/><ref refid="group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5" kindref="member">GLFW_FALSE</ref>;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(_glfw.errorListHead)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_werror" kindref="compound">_GLFWerror</ref>*<sp/>error<sp/>=<sp/>_glfw.errorListHead;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.errorListHead<sp/>=<sp/>error-&gt;next;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(error);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfwPlatformDestroyTls(&amp;_glfw.contextSlot);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfwPlatformDestroyTls(&amp;_glfw.errorSlot);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfwPlatformDestroyMutex(&amp;_glfw.errorLock);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;_glfw,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(_glfw));</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>_glfw_strdup(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>source)</highlight></codeline>
<codeline lineno="119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>strlen(source);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>calloc(length<sp/>+<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(<ref refid="structresult" kindref="compound">result</ref>,<sp/>source);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>_glfw_fminf(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>!=<sp/>a)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b<sp/>!=<sp/>b)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>&lt;<sp/>b)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b;</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>_glfw_fmaxf(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="139"><highlight class="normal">{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>!=<sp/>a)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b<sp/>!=<sp/>b)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>&gt;<sp/>b)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b;</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Notifies<sp/>shared<sp/>code<sp/>of<sp/>an<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_glfwInputError(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>format,<sp/>...)</highlight></codeline>
<codeline lineno="158"><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_werror" kindref="compound">_GLFWerror</ref>*<sp/>error;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>description[_GLFW_MESSAGE_SIZE];</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(format)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va_list<sp/>vl;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va_start(vl,<sp/>format);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vsnprintf(description,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(description),<sp/>format,<sp/>vl);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va_end(vl);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>description[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(description)<sp/>-<sp/>1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/><ref refid="group__errors_1ga2374ee02c177f12e1fa76ff3ed15e14a" kindref="member">GLFW_NOT_INITIALIZED</ref>)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(description,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>GLFW<sp/>library<sp/>is<sp/>not<sp/>initialized&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/><ref refid="group__errors_1gaa8290386e9528ccb9e42a3a4e16fc0d0" kindref="member">GLFW_NO_CURRENT_CONTEXT</ref>)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(description,<sp/></highlight><highlight class="stringliteral">&quot;There<sp/>is<sp/>no<sp/>current<sp/>context&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/><ref refid="group__errors_1ga76f6bb9c4eea73db675f096b404593ce" kindref="member">GLFW_INVALID_ENUM</ref>)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(description,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>argument<sp/>for<sp/>enum<sp/>parameter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/><ref refid="group__errors_1gaaf2ef9aa8202c2b82ac2d921e554c687" kindref="member">GLFW_INVALID_VALUE</ref>)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(description,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>value<sp/>for<sp/>parameter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/><ref refid="group__errors_1ga9023953a2bcb98c2906afd071d21ee7f" kindref="member">GLFW_OUT_OF_MEMORY</ref>)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(description,<sp/></highlight><highlight class="stringliteral">&quot;Out<sp/>of<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/><ref refid="group__errors_1ga56882b290db23261cc6c053c40c2d08e" kindref="member">GLFW_API_UNAVAILABLE</ref>)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(description,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>requested<sp/>API<sp/>is<sp/>unavailable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/><ref refid="group__errors_1gad16c5565b4a69f9c2a9ac2c0dbc89462" kindref="member">GLFW_VERSION_UNAVAILABLE</ref>)</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(description,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>requested<sp/>API<sp/>version<sp/>is<sp/>unavailable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/><ref refid="group__errors_1gad44162d78100ea5e87cdd38426b8c7a1" kindref="member">GLFW_PLATFORM_ERROR</ref>)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(description,<sp/></highlight><highlight class="stringliteral">&quot;A<sp/>platform-specific<sp/>error<sp/>occurred&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/><ref refid="group__errors_1ga196e125ef261d94184e2b55c05762f14" kindref="member">GLFW_FORMAT_UNAVAILABLE</ref>)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(description,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>requested<sp/>format<sp/>is<sp/>unavailable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/><ref refid="group__errors_1gacff24d2757da752ae4c80bf452356487" kindref="member">GLFW_NO_WINDOW_CONTEXT</ref>)</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(description,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>specified<sp/>window<sp/>has<sp/>no<sp/>context&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/><ref refid="group__errors_1ga09d6943923a70ddef3a085f5baee786c" kindref="member">GLFW_CURSOR_UNAVAILABLE</ref>)</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(description,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>specified<sp/>cursor<sp/>Shape<sp/>is<sp/>unavailable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/><ref refid="group__errors_1ga526fba20a01504a8086c763b6ca53ce5" kindref="member">GLFW_FEATURE_UNAVAILABLE</ref>)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(description,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>requested<sp/>feature<sp/>cannot<sp/>be<sp/>implemented<sp/>for<sp/>this<sp/>platform&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/><ref refid="group__errors_1ga5dda77e023e83151e8bd55a6758f946a" kindref="member">GLFW_FEATURE_UNIMPLEMENTED</ref>)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(description,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>requested<sp/>feature<sp/>has<sp/>not<sp/>yet<sp/>been<sp/>implemented<sp/>for<sp/>this<sp/>platform&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(description,<sp/></highlight><highlight class="stringliteral">&quot;ERROR:<sp/>UNKNOWN<sp/>GLFW<sp/>ERROR&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_glfw.initialized)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>_glfwPlatformGetTls(&amp;_glfw.errorSlot);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!error)</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>calloc(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct___g_l_f_werror" kindref="compound">_GLFWerror</ref>));</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfwPlatformSetTls(&amp;_glfw.errorSlot,<sp/>error);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfwPlatformLockMutex(&amp;_glfw.errorLock);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error-&gt;next<sp/>=<sp/>_glfw.errorListHead;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfw.errorListHead<sp/>=<sp/>error;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfwPlatformUnlockMutex(&amp;_glfw.errorLock);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>&amp;_glfwMainThreadError;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>error-&gt;code<sp/>=<sp/>code;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(error-&gt;description,<sp/>description);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_glfwErrorCallback)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfwErrorCallback(code,<sp/>description);</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="group__init_1gab41771f0215a2e0afb4cf1cf98082d40" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__init_1gab41771f0215a2e0afb4cf1cf98082d40" kindref="member">glfwInit</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="233"><highlight class="normal">{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_glfw.initialized)</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref>;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;_glfw,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(_glfw));</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfw.hints.init<sp/>=<sp/>_glfwInitHints;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_glfwPlatformInit())</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>terminate();</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5" kindref="member">GLFW_FALSE</ref>;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_glfwPlatformCreateMutex(&amp;_glfw.errorLock)<sp/>||</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!_glfwPlatformCreateTls(&amp;_glfw.errorSlot)<sp/>||</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!_glfwPlatformCreateTls(&amp;_glfw.contextSlot))</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>terminate();</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5" kindref="member">GLFW_FALSE</ref>;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfwPlatformSetTls(&amp;_glfw.errorSlot,<sp/>&amp;_glfwMainThreadError);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfw.initialized<sp/>=<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref>;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfw.timer.offset<sp/>=<sp/>_glfwPlatformGetTimerValue();</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__window_1ga8050ddceed9dc6bd9d3aa35666195cd4" kindref="member">glfwDefaultWindowHints</ref>();</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/><sp/>_glfwDefaultMappings[i];<sp/><sp/>i++)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__input_1ga276a2aec236a671a99f6f0a9be7fa3fc" kindref="member">glfwUpdateGamepadMappings</ref>(_glfwDefaultMappings[i]))</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>terminate();</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5" kindref="member">GLFW_FALSE</ref>;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref>;</highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277" refid="group__init_1gafd90e6fd4819ea9e22e5e739519a6504" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__init_1gafd90e6fd4819ea9e22e5e739519a6504" kindref="member">glfwTerminate</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="278"><highlight class="normal">{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_glfw.initialized)</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>terminate();</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="group__init_1gac85e41aab1c2bd6fc740f4377d9e7e9f" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__init_1gac85e41aab1c2bd6fc740f4377d9e7e9f" kindref="member">glfwInitHint</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hint,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>)</highlight></codeline>
<codeline lineno="286"><highlight class="normal">{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(hint)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__init_1gab9c0534709fda03ec8959201da3a9a18" kindref="member">GLFW_JOYSTICK_HAT_BUTTONS</ref>:</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfwInitHints.hatButtons<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__init_1gaec269b24cf549ab46292c0125d8bbdce" kindref="member">GLFW_ANGLE_PLATFORM_TYPE</ref>:</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfwInitHints.angleType<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__init_1gab937983147a3158d45f88fad7129d9f2" kindref="member">GLFW_COCOA_CHDIR_RESOURCES</ref>:</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfwInitHints.ns.chdir<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__init_1ga71e0b4ce2f2696a84a9b8c5e12dc70cf" kindref="member">GLFW_COCOA_MENUBAR</ref>:</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glfwInitHints.ns.menubar<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>_glfwInputError(<ref refid="group__errors_1ga76f6bb9c4eea73db675f096b404593ce" kindref="member">GLFW_INVALID_ENUM</ref>,</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>init<sp/>hint<sp/>0x%08X&quot;</highlight><highlight class="normal">,<sp/>hint);</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307" refid="group__init_1ga2402c7824ac0194c13722790ff9559ff" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__init_1ga2402c7824ac0194c13722790ff9559ff" kindref="member">glfwGetVersion</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>major,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>minor,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>rev)</highlight></codeline>
<codeline lineno="308"><highlight class="normal">{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(major<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*major<sp/>=<sp/><ref refid="group__init_1ga6337d9ea43b22fc529b2bba066b4a576" kindref="member">GLFW_VERSION_MAJOR</ref>;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(minor<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*minor<sp/>=<sp/><ref refid="group__init_1gaf80d40f0aea7088ff337606e9c48f7a3" kindref="member">GLFW_VERSION_MINOR</ref>;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rev<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*rev<sp/>=<sp/><ref refid="group__init_1gab72ae2e2035d9ea461abc3495eac0502" kindref="member">GLFW_VERSION_REVISION</ref>;</highlight></codeline>
<codeline lineno="315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317" refid="group__init_1gae5952184a0db36e24d1de7805b8b0945" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="group__init_1gae5952184a0db36e24d1de7805b8b0945" kindref="member">glfwGetVersionString</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="318"><highlight class="normal">{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_glfwPlatformGetVersionString();</highlight></codeline>
<codeline lineno="320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322" refid="group__init_1gaee7bac4c7e1b2769207747c1b5ae2f9e" refkind="member"><highlight class="normal">GLFWAPI<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__init_1gaee7bac4c7e1b2769207747c1b5ae2f9e" kindref="member">glfwGetError</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>description)</highlight></codeline>
<codeline lineno="323"><highlight class="normal">{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct___g_l_f_werror" kindref="compound">_GLFWerror</ref>*<sp/>error;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code<sp/>=<sp/><ref refid="group__errors_1gafa30deee5db4d69c4c93d116ed87dbf4" kindref="member">GLFW_NO_ERROR</ref>;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(description)</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*description<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_glfw.initialized)</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>_glfwPlatformGetTls(&amp;_glfw.errorSlot);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>&amp;_glfwMainThreadError;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error)</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code<sp/>=<sp/>error-&gt;code;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error-&gt;code<sp/>=<sp/><ref refid="group__errors_1gafa30deee5db4d69c4c93d116ed87dbf4" kindref="member">GLFW_NO_ERROR</ref>;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(description<sp/>&amp;&amp;<sp/>code)</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*description<sp/>=<sp/>error-&gt;description;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>code;</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346" refid="group__init_1ga746e2757d069eaea423349aca6ae097a" refkind="member"><highlight class="normal">GLFWAPI<sp/><ref refid="group__init_1gaa684e3f8b44b6a35000119d524d49e6d" kindref="member">GLFWerrorfun</ref><sp/><ref refid="group__init_1ga746e2757d069eaea423349aca6ae097a" kindref="member">glfwSetErrorCallback</ref>(<ref refid="group__init_1gaa684e3f8b44b6a35000119d524d49e6d" kindref="member">GLFWerrorfun</ref><sp/>cbfun)</highlight></codeline>
<codeline lineno="347"><highlight class="normal">{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>_GLFW_SWAP_POINTERS(_glfwErrorCallback,<sp/>cbfun);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cbfun;</highlight></codeline>
<codeline lineno="350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/init.c"/>
  </compounddef>
</doxygen>
