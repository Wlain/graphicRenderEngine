<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="imgui__impl__metal_8mm" kind="file" language="C++">
    <compoundname>imgui_impl_metal.mm</compoundname>
    <includes refid="imgui_8h" local="yes">imgui.h</includes>
    <includes refid="imgui__impl__metal_8h" local="yes">imgui_impl_metal.h</includes>
    <includes local="no">Metal/Metal.h</includes>
    <includes local="no">simd/simd.h</includes>
    <incdepgraph>
      <node id="9">
        <label>imgui_impl_metal.h</label>
        <link refid="imgui__impl__metal_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_metal.mm</label>
        <link refid="imgui__impl__metal_8mm"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>imconfig.h</label>
        <link refid="imconfig_8h_source"/>
      </node>
      <node id="2">
        <label>imgui.h</label>
        <link refid="imgui_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>Metal/Metal.h</label>
      </node>
      <node id="8">
        <label>assert.h</label>
      </node>
      <node id="4">
        <label>float.h</label>
      </node>
      <node id="11">
        <label>simd/simd.h</label>
      </node>
      <node id="5">
        <label>stdarg.h</label>
      </node>
      <node id="6">
        <label>stddef.h</label>
      </node>
      <node id="7">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="interface_metal_buffer" prot="public">MetalBuffer</innerclass>
    <innerclass refid="interface_framebuffer_descriptor" prot="public">FramebufferDescriptor</innerclass>
    <innerclass refid="interface_metal_context" prot="public">MetalContext</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="imgui__impl__metal_8mm_1acf1682d02ae7fbc6d8d3771b61d3c472" prot="public" static="yes" mutable="no">
        <type><ref refid="interface_metal_context" kindref="compound">MetalContext</ref> *</type>
        <definition>MetalContext* g_sharedMetalContext</definition>
        <argsstring></argsstring>
        <name>g_sharedMetalContext</name>
        <initializer>= nil</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_metal.mm" line="82" column="21" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_metal.mm" bodystart="82" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="imgui__impl__metal_8mm_1a5a4f95ae7ba6c5f4e051ac5fd66cc12a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ImGui_ImplMetal_Init</definition>
        <argsstring>(id&lt; MTLDevice &gt; device)</argsstring>
        <name>ImGui_ImplMetal_Init</name>
        <param>
          <type>id&lt; MTLDevice &gt;</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_metal.mm" line="122" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_metal.mm" bodystart="122" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__metal_8mm_1a3b7e2ce3843a8e53c6ea3cc0b956d29f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImGui_ImplMetal_Shutdown</definition>
        <argsstring>()</argsstring>
        <name>ImGui_ImplMetal_Shutdown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_metal.mm" line="138" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_metal.mm" bodystart="138" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__metal_8mm_1a6671732c2560be3773ff20ff58297aff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImGui_ImplMetal_NewFrame</definition>
        <argsstring>(MTLRenderPassDescriptor *renderPassDescriptor)</argsstring>
        <name>ImGui_ImplMetal_NewFrame</name>
        <param>
          <type>MTLRenderPassDescriptor *</type>
          <declname>renderPassDescriptor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_metal.mm" line="143" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_metal.mm" bodystart="143" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__metal_8mm_1ae030503cab1bfa329832da66deab3f5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImGui_ImplMetal_RenderDrawData</definition>
        <argsstring>(ImDrawData *draw_data, id&lt; MTLCommandBuffer &gt; commandBuffer, id&lt; MTLRenderCommandEncoder &gt; commandEncoder)</argsstring>
        <name>ImGui_ImplMetal_RenderDrawData</name>
        <param>
          <type><ref refid="struct_im_draw_data" kindref="compound">ImDrawData</ref> *</type>
          <declname>draw_data</declname>
        </param>
        <param>
          <type>id&lt; MTLCommandBuffer &gt;</type>
          <declname>commandBuffer</declname>
        </param>
        <param>
          <type>id&lt; MTLRenderCommandEncoder &gt;</type>
          <declname>commandEncoder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_metal.mm" line="151" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_metal.mm" bodystart="151" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__metal_8mm_1a9026e9e0b9443e7b811df9191805d362" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ImGui_ImplMetal_CreateFontsTexture</definition>
        <argsstring>(id&lt; MTLDevice &gt; device)</argsstring>
        <name>ImGui_ImplMetal_CreateFontsTexture</name>
        <param>
          <type>id&lt; MTLDevice &gt;</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_metal.mm" line="156" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_metal.mm" bodystart="156" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__metal_8mm_1a0650a79d01cb676f97c55fdb0611c398" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImGui_ImplMetal_DestroyFontsTexture</definition>
        <argsstring>()</argsstring>
        <name>ImGui_ImplMetal_DestroyFontsTexture</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_metal.mm" line="166" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_metal.mm" bodystart="166" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__metal_8mm_1a6c259b636759ed64114e4c414463557b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ImGui_ImplMetal_CreateDeviceObjects</definition>
        <argsstring>(id&lt; MTLDevice &gt; device)</argsstring>
        <name>ImGui_ImplMetal_CreateDeviceObjects</name>
        <param>
          <type>id&lt; MTLDevice &gt;</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_metal.mm" line="173" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_metal.mm" bodystart="173" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__metal_8mm_1ada447693098dd0c55a2c00f0676f4749" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImGui_ImplMetal_DestroyDeviceObjects</definition>
        <argsstring>()</argsstring>
        <name>ImGui_ImplMetal_DestroyDeviceObjects</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_metal.mm" line="182" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_metal.mm" bodystart="182" bodyend="186"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>dear<sp/>imgui:<sp/>Renderer<sp/>Backend<sp/>for<sp/>Metal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>needs<sp/>to<sp/>be<sp/>used<sp/>along<sp/>with<sp/>a<sp/>Platform<sp/>Backend<sp/>(e.g.<sp/>OSX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implemented<sp/>features:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>[X]<sp/>Renderer:<sp/>User<sp/>texture<sp/>binding.<sp/>Use<sp/>&apos;MTLTexture&apos;<sp/>as<sp/>ImTextureID.<sp/>Read<sp/>the<sp/>FAQ<sp/>about<sp/>ImTextureID!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>[X]<sp/>Renderer:<sp/>Support<sp/>for<sp/>large<sp/>meshes<sp/>(64k+<sp/>vertices)<sp/>with<sp/>16-bit<sp/>indices.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Missing<sp/>features:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>[<sp/>]<sp/>Renderer:<sp/>Multi-viewport<sp/>/<sp/>platform<sp/>windows.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>can<sp/>use<sp/>unmodified<sp/>imgui_impl_*<sp/>files<sp/>in<sp/>your<sp/>project.<sp/>See<sp/>examples/<sp/>folder<sp/>for<sp/>examples<sp/>of<sp/>using<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prefer<sp/>including<sp/>the<sp/>entire<sp/>imgui/<sp/>repository<sp/>into<sp/>your<sp/>project<sp/>(either<sp/>as<sp/>a<sp/>copy<sp/>or<sp/>as<sp/>a<sp/>submodule),<sp/>and<sp/>only<sp/>build<sp/>the<sp/>backends<sp/>you<sp/>need.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>you<sp/>are<sp/>new<sp/>to<sp/>Dear<sp/>ImGui,<sp/>read<sp/>documentation<sp/>from<sp/>the<sp/>docs/<sp/>folder<sp/>+<sp/>read<sp/>the<sp/>top<sp/>of<sp/>imgui.cpp.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Read<sp/>online:<sp/>https://github.com/ocornut/imgui/tree/master/docs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CHANGELOG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(minor<sp/>and<sp/>older<sp/>changes<sp/>stripped<sp/>away,<sp/>please<sp/>see<sp/>git<sp/>history<sp/>for<sp/>details)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2022-01-03:<sp/>Metal:<sp/>Ignore<sp/>ImDrawCmd<sp/>where<sp/>ElemCount<sp/>==<sp/>0<sp/>(very<sp/>rare<sp/>but<sp/>can<sp/>technically<sp/>be<sp/>manufactured<sp/>by<sp/>user<sp/>code).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2021-12-30:<sp/>Metal:<sp/>Added<sp/>Metal<sp/>C++<sp/>support.<sp/>Enable<sp/>with<sp/>&apos;#define<sp/>IMGUI_IMPL_METAL_CPP&apos;<sp/>in<sp/>your<sp/>imconfig.h<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2021-08-24:<sp/>Metal:<sp/>Fixed<sp/>a<sp/>crash<sp/>when<sp/>clipping<sp/>rect<sp/>larger<sp/>than<sp/>framebuffer<sp/>is<sp/>submitted.<sp/>(#4464)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2021-05-19:<sp/>Metal:<sp/>Replaced<sp/>direct<sp/>access<sp/>to<sp/>ImDrawCmd::TextureId<sp/>with<sp/>a<sp/>call<sp/>to<sp/>ImDrawCmd::GetTexID().<sp/>(will<sp/>become<sp/>a<sp/>requirement)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2021-02-18:<sp/>Metal:<sp/>Change<sp/>blending<sp/>equation<sp/>to<sp/>preserve<sp/>alpha<sp/>in<sp/>output<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2021-01-25:<sp/>Metal:<sp/>Fixed<sp/>texture<sp/>storage<sp/>mode<sp/>when<sp/>building<sp/>on<sp/>Mac<sp/>Catalyst.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2019-05-29:<sp/>Metal:<sp/>Added<sp/>support<sp/>for<sp/>large<sp/>mesh<sp/>(64K+<sp/>vertices),<sp/>enable<sp/>ImGuiBackendFlags_RendererHasVtxOffset<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2019-04-30:<sp/>Metal:<sp/>Added<sp/>support<sp/>for<sp/>special<sp/>ImDrawCallback_ResetRenderState<sp/>callback<sp/>to<sp/>reset<sp/>render<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2019-02-11:<sp/>Metal:<sp/>Projecting<sp/>clipping<sp/>rectangles<sp/>correctly<sp/>using<sp/>draw_data-&gt;FramebufferScale<sp/>to<sp/>allow<sp/>multi-viewports<sp/>for<sp/>retina<sp/>display.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2018-11-30:<sp/>Misc:<sp/>Setting<sp/>up<sp/>io.BackendRendererName<sp/>so<sp/>it<sp/>can<sp/>be<sp/>displayed<sp/>in<sp/>the<sp/>About<sp/>Window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2018-07-05:<sp/>Metal:<sp/>Added<sp/>new<sp/>Metal<sp/>backend<sp/>implementation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;imgui.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;imgui_impl_metal.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#import<sp/>&lt;Metal/Metal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#import<sp/>&lt;QuartzCore/CAMetalLayer.h&gt;<sp/>//<sp/>Not<sp/>supported<sp/>in<sp/>XCode<sp/>9.2.<sp/>Maybe<sp/>a<sp/>macro<sp/>to<sp/>detect<sp/>the<sp/>SDK<sp/>version<sp/>can<sp/>be<sp/>used<sp/>(something<sp/>like<sp/>#if<sp/>MACOS_SDK<sp/>&gt;=<sp/>10.13<sp/>...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#import<sp/>&lt;simd/simd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>mark<sp/>-<sp/>Support<sp/>classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>wrapper<sp/>around<sp/>a<sp/>MTLBuffer<sp/>object<sp/>that<sp/>knows<sp/>the<sp/>last<sp/>time<sp/>it<sp/>was<sp/>reused</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="interface_metal_buffer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">@interface<sp/></highlight><highlight class="normal"><ref refid="interface_metal_buffer" kindref="compound">MetalBuffer</ref><sp/>:<sp/>NSObject</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">@property</highlight><highlight class="normal"><sp/>(nonatomic,<sp/>strong)<sp/>id&lt;MTLBuffer&gt;<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">@property</highlight><highlight class="normal"><sp/>(nonatomic,<sp/>assign)<sp/>NSTimeInterval<sp/>lastReuseTime;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">-<sp/>(instancetype)initWithBuffer:(id&lt;MTLBuffer&gt;)<ref refid="classbuffer" kindref="compound">buffer</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">@end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>object<sp/>that<sp/>encapsulates<sp/>the<sp/>data<sp/>necessary<sp/>to<sp/>uniquely<sp/>identify<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/>render<sp/>pipeline<sp/>state.<sp/>These<sp/>are<sp/>used<sp/>as<sp/>cache<sp/>keys.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="interface_framebuffer_descriptor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">@interface<sp/></highlight><highlight class="normal"><ref refid="interface_framebuffer_descriptor" kindref="compound">FramebufferDescriptor</ref><sp/>:<sp/>NSObject&lt;NSCopying&gt;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">@property</highlight><highlight class="normal"><sp/>(nonatomic,<sp/>assign)<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>sampleCount;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">@property</highlight><highlight class="normal"><sp/>(nonatomic,<sp/>assign)<sp/>MTLPixelFormat<sp/>colorPixelFormat;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">@property</highlight><highlight class="normal"><sp/>(nonatomic,<sp/>assign)<sp/>MTLPixelFormat<sp/>depthPixelFormat;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">@property</highlight><highlight class="normal"><sp/>(nonatomic,<sp/>assign)<sp/>MTLPixelFormat<sp/>stencilPixelFormat;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">-<sp/>(instancetype)initWithRenderPassDescriptor:(MTLRenderPassDescriptor<sp/>*)renderPassDescriptor;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">@end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>singleton<sp/>that<sp/>stores<sp/>long-lived<sp/>objects<sp/>that<sp/>are<sp/>needed<sp/>by<sp/>the<sp/>Metal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/>renderer<sp/>backend.<sp/>Stores<sp/>the<sp/>render<sp/>pipeline<sp/>state<sp/>cache<sp/>and<sp/>the<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>font<sp/>texture,<sp/>and<sp/>manages<sp/>the<sp/>reusable<sp/>buffer<sp/>cache.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="interface_metal_context" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">@interface<sp/></highlight><highlight class="normal"><ref refid="interface_metal_context" kindref="compound">MetalContext</ref><sp/>:<sp/>NSObject</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">@property</highlight><highlight class="normal"><sp/>(nonatomic,<sp/>strong)<sp/>id&lt;MTLDepthStencilState&gt;<sp/>depthStencilState;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">@property</highlight><highlight class="normal"><sp/>(nonatomic,<sp/>strong)<sp/><ref refid="interface_framebuffer_descriptor" kindref="compound">FramebufferDescriptor</ref><sp/>*framebufferDescriptor;<sp/></highlight><highlight class="comment">//<sp/>framebuffer<sp/>descriptor<sp/>for<sp/>current<sp/>frame;<sp/>transient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">@property</highlight><highlight class="normal"><sp/>(nonatomic,<sp/>strong)<sp/>NSMutableDictionary<sp/>*renderPipelineStateCache;<sp/></highlight><highlight class="comment">//<sp/>pipeline<sp/>cache;<sp/>keyed<sp/>on<sp/>framebuffer<sp/>descriptors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">@property</highlight><highlight class="normal"><sp/>(nonatomic,<sp/>strong,<sp/>nullable)<sp/>id&lt;MTLTexture&gt;<sp/>fontTexture;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">@property</highlight><highlight class="normal"><sp/>(nonatomic,<sp/>strong)<sp/>NSMutableArray&lt;MetalBuffer<sp/>*&gt;<sp/>*bufferCache;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">@property</highlight><highlight class="normal"><sp/>(nonatomic,<sp/>assign)<sp/>NSTimeInterval<sp/>lastBufferCachePurge;</highlight></codeline>
<codeline lineno="65"><highlight class="normal">-<sp/>(void)makeDeviceObjectsWithDevice:(id&lt;MTLDevice&gt;)device;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">-<sp/>(void)makeFontTextureWithDevice:(id&lt;MTLDevice&gt;)device;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">-<sp/>(<ref refid="interface_metal_buffer" kindref="compound">MetalBuffer</ref><sp/>*)dequeueReusableBufferOfLength:(NSUInteger)length<sp/>device:(id&lt;MTLDevice&gt;)device;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">-<sp/>(void)enqueueReusableBuffer:(<ref refid="interface_metal_buffer" kindref="compound">MetalBuffer</ref><sp/>*)<ref refid="classbuffer" kindref="compound">buffer</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal">-<sp/>(id&lt;MTLRenderPipelineState&gt;)renderPipelineStateForFrameAndDevice:(id&lt;MTLDevice&gt;)device;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">-<sp/>(void)emptyRenderPipelineStateCache;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">-<sp/>(void)setupRenderState:(<ref refid="struct_im_draw_data" kindref="compound">ImDrawData</ref><sp/>*)drawData</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandBuffer:(id&lt;MTLCommandBuffer&gt;)commandBuffer</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandEncoder:(id&lt;MTLRenderCommandEncoder&gt;)commandEncoder</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>renderPipelineState:(id&lt;MTLRenderPipelineState&gt;)renderPipelineState</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertexBuffer:(<ref refid="interface_metal_buffer" kindref="compound">MetalBuffer</ref><sp/>*)vertexBuffer</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertexBufferOffset:(size_t)vertexBufferOffset;</highlight></codeline>
<codeline lineno="77"><highlight class="normal">-<sp/>(void)renderDrawData:(<ref refid="struct_im_draw_data" kindref="compound">ImDrawData</ref><sp/>*)drawData</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandBuffer:(id&lt;MTLCommandBuffer&gt;)commandBuffer</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandEncoder:(id&lt;MTLRenderCommandEncoder&gt;)commandEncoder;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">@end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="interface_metal_context" kindref="compound">MetalContext</ref><sp/>*g_sharedMetalContext<sp/>=<sp/>nil;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>IMGUI_IMPL_METAL_CPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>mark<sp/>-<sp/>Dear<sp/>ImGui<sp/>Metal<sp/>C++<sp/>Backend<sp/>API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ImGui_ImplMetal_Init(MTL::Device*<sp/>device)</highlight></codeline>
<codeline lineno="89"><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ImGui_ImplMetal_Init((id&lt;MTLDevice&gt;)(device));</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplMetal_NewFrame(MTL::RenderPassDescriptor*<sp/>renderPassDescriptor)</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplMetal_NewFrame((MTLRenderPassDescriptor*)(renderPassDescriptor));</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplMetal_RenderDrawData(<ref refid="struct_im_draw_data" kindref="compound">ImDrawData</ref>*<sp/>draw_data,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MTL::CommandBuffer*<sp/>commandBuffer,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MTL::RenderCommandEncoder*<sp/>commandEncoder)</highlight></codeline>
<codeline lineno="101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplMetal_RenderDrawData(draw_data,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(id&lt;MTLCommandBuffer&gt;)(commandBuffer),</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(id&lt;MTLRenderCommandEncoder&gt;)(commandEncoder));</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ImGui_ImplMetal_CreateFontsTexture(MTL::Device*<sp/>device)</highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ImGui_ImplMetal_CreateFontsTexture((id&lt;MTLDevice&gt;)(device));</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ImGui_ImplMetal_CreateDeviceObjects(MTL::Device*<sp/>device)</highlight></codeline>
<codeline lineno="114"><highlight class="normal">{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ImGui_ImplMetal_CreateDeviceObjects((id&lt;MTLDevice&gt;)(device));</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>#ifdef<sp/>IMGUI_IMPL_METAL_CPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>mark<sp/>-<sp/>Dear<sp/>ImGui<sp/>Metal<sp/>Backend<sp/>API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ImGui_ImplMetal_Init(id&lt;MTLDevice&gt;<sp/>device)</highlight></codeline>
<codeline lineno="123"><highlight class="normal">{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui_i_o" kindref="compound">ImGuiIO</ref>&amp;<sp/>io<sp/>=<sp/>ImGui::GetIO();</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>io.BackendRendererName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;imgui_impl_metal&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>io.BackendFlags<sp/>|=<sp/>ImGuiBackendFlags_RendererHasVtxOffset;<sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>honor<sp/>the<sp/>ImDrawCmd::VtxOffset<sp/>field,<sp/>allowing<sp/>for<sp/>large<sp/>meshes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>dispatch_once_t<sp/>onceToken;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>dispatch_once(&amp;onceToken,<sp/>^{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_sharedMetalContext<sp/>=<sp/>[[<ref refid="interface_metal_context" kindref="compound">MetalContext</ref><sp/>alloc]<sp/>init];</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplMetal_CreateDeviceObjects(device);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplMetal_Shutdown()</highlight></codeline>
<codeline lineno="139"><highlight class="normal">{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplMetal_DestroyDeviceObjects();</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplMetal_NewFrame(MTLRenderPassDescriptor<sp/>*renderPassDescriptor)</highlight></codeline>
<codeline lineno="144"><highlight class="normal">{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_ASSERT(g_sharedMetalContext<sp/>!=<sp/>nil<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>Metal<sp/>context.<sp/>Did<sp/>you<sp/>call<sp/>ImGui_ImplMetal_Init()<sp/>?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>g_sharedMetalContext.framebufferDescriptor<sp/>=<sp/>[[<ref refid="interface_framebuffer_descriptor" kindref="compound">FramebufferDescriptor</ref><sp/>alloc]<sp/>initWithRenderPassDescriptor:renderPassDescriptor];</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Metal<sp/>Render<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplMetal_RenderDrawData(<ref refid="struct_im_draw_data" kindref="compound">ImDrawData</ref>*<sp/>draw_data,<sp/>id&lt;MTLCommandBuffer&gt;<sp/>commandBuffer,<sp/>id&lt;MTLRenderCommandEncoder&gt;<sp/>commandEncoder)</highlight></codeline>
<codeline lineno="152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>[g_sharedMetalContext<sp/>renderDrawData:draw_data<sp/>commandBuffer:commandBuffer<sp/>commandEncoder:commandEncoder];</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ImGui_ImplMetal_CreateFontsTexture(id&lt;MTLDevice&gt;<sp/>device)</highlight></codeline>
<codeline lineno="157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>[g_sharedMetalContext<sp/>makeFontTextureWithDevice:device];</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui_i_o" kindref="compound">ImGuiIO</ref>&amp;<sp/>io<sp/>=<sp/>ImGui::GetIO();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>io.Fonts-&gt;SetTexID((__bridge<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)g_sharedMetalContext.fontTexture);<sp/></highlight><highlight class="comment">//<sp/>ImTextureID<sp/>==<sp/>void*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(g_sharedMetalContext.fontTexture<sp/>!=<sp/>nil);</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplMetal_DestroyFontsTexture()</highlight></codeline>
<codeline lineno="167"><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui_i_o" kindref="compound">ImGuiIO</ref>&amp;<sp/>io<sp/>=<sp/>ImGui::GetIO();</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>g_sharedMetalContext.fontTexture<sp/>=<sp/>nil;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>io.Fonts-&gt;SetTexID(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ImGui_ImplMetal_CreateDeviceObjects(id&lt;MTLDevice&gt;<sp/>device)</highlight></codeline>
<codeline lineno="174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>[g_sharedMetalContext<sp/>makeDeviceObjectsWithDevice:device];</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplMetal_CreateFontsTexture(device);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplMetal_DestroyDeviceObjects()</highlight></codeline>
<codeline lineno="183"><highlight class="normal">{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplMetal_DestroyFontsTexture();</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>[g_sharedMetalContext<sp/>emptyRenderPipelineStateCache];</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>mark<sp/>-<sp/>MetalBuffer<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keyword">@implementation<sp/></highlight><highlight class="normal"><ref refid="interface_metal_buffer" kindref="compound">MetalBuffer</ref></highlight></codeline>
<codeline lineno="191"><highlight class="normal">-<sp/>(instancetype)initWithBuffer:(id&lt;MTLBuffer&gt;)<ref refid="classbuffer" kindref="compound">buffer</ref></highlight></codeline>
<codeline lineno="192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=<sp/>[super<sp/>init]))</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_buffer<sp/>=<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lastReuseTime<sp/>=<sp/>[NSDate<sp/>date].timeIntervalSince1970;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keyword">@end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>mark<sp/>-<sp/>FramebufferDescriptor<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keyword">@implementation<sp/></highlight><highlight class="normal"><ref refid="interface_framebuffer_descriptor" kindref="compound">FramebufferDescriptor</ref></highlight></codeline>
<codeline lineno="205"><highlight class="normal">-<sp/>(instancetype)initWithRenderPassDescriptor:(MTLRenderPassDescriptor<sp/>*)renderPassDescriptor</highlight></codeline>
<codeline lineno="206"><highlight class="normal">{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=<sp/>[super<sp/>init]))</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_sampleCount<sp/>=<sp/>renderPassDescriptor.colorAttachments[0].texture.sampleCount;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_colorPixelFormat<sp/>=<sp/>renderPassDescriptor.colorAttachments[0].texture.pixelFormat;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_depthPixelFormat<sp/>=<sp/>renderPassDescriptor.depthAttachment.texture.pixelFormat;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_stencilPixelFormat<sp/>=<sp/>renderPassDescriptor.stencilAttachment.texture.pixelFormat;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal">-<sp/>(nonnull<sp/>id)copyWithZone:(nullable<sp/>NSZone<sp/>*)zone</highlight></codeline>
<codeline lineno="218"><highlight class="normal">{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interface_framebuffer_descriptor" kindref="compound">FramebufferDescriptor</ref><sp/>*copy<sp/>=<sp/>[[<ref refid="interface_framebuffer_descriptor" kindref="compound">FramebufferDescriptor</ref><sp/>allocWithZone:zone]<sp/>init];</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>copy.sampleCount<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.sampleCount;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>copy.colorPixelFormat<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.colorPixelFormat;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>copy.depthPixelFormat<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.depthPixelFormat;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>copy.stencilPixelFormat<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.stencilPixelFormat;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>copy;</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal">-<sp/>(NSUInteger)hash</highlight></codeline>
<codeline lineno="228"><highlight class="normal">{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>NSUInteger<sp/>sc<sp/>=<sp/>_sampleCount<sp/>&amp;<sp/>0x3;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>NSUInteger<sp/>cf<sp/>=<sp/>_colorPixelFormat<sp/>&amp;<sp/>0x3FF;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>NSUInteger<sp/>df<sp/>=<sp/>_depthPixelFormat<sp/>&amp;<sp/>0x3FF;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>NSUInteger<sp/>sf<sp/>=<sp/>_stencilPixelFormat<sp/>&amp;<sp/>0x3FF;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>NSUInteger<sp/>hash<sp/>=<sp/>(sf<sp/>&lt;&lt;<sp/>22)<sp/>|<sp/>(df<sp/>&lt;&lt;<sp/>12)<sp/>|<sp/>(cf<sp/>&lt;&lt;<sp/>2)<sp/>|<sp/>sc;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hash;</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal">-<sp/>(BOOL)isEqual:(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal">{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interface_framebuffer_descriptor" kindref="compound">FramebufferDescriptor</ref><sp/>*other<sp/>=<sp/>object;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(![other<sp/>isKindOfClass:[<ref refid="interface_framebuffer_descriptor" kindref="compound">FramebufferDescriptor</ref><sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">]])</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NO;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>other.sampleCount<sp/>==<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.sampleCount<sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>other.colorPixelFormat<sp/><sp/><sp/>==<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.colorPixelFormat<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>other.depthPixelFormat<sp/><sp/><sp/>==<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.depthPixelFormat<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>other.stencilPixelFormat<sp/>==<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.stencilPixelFormat;</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="keyword">@end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>mark<sp/>-<sp/>MetalContext<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keyword">@implementation<sp/></highlight><highlight class="normal"><ref refid="interface_metal_context" kindref="compound">MetalContext</ref></highlight></codeline>
<codeline lineno="253"><highlight class="normal">-<sp/>(instancetype)init<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=<sp/>[super<sp/>init]))</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_renderPipelineStateCache<sp/>=<sp/>[NSMutableDictionary<sp/>dictionary];</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_bufferCache<sp/>=<sp/>[NSMutableArray<sp/>array];</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lastBufferCachePurge<sp/>=<sp/>[NSDate<sp/>date].timeIntervalSince1970;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal">-<sp/>(void)makeDeviceObjectsWithDevice:(id&lt;MTLDevice&gt;)device</highlight></codeline>
<codeline lineno="264"><highlight class="normal">{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>MTLDepthStencilDescriptor<sp/>*depthStencilDescriptor<sp/>=<sp/>[[MTLDepthStencilDescriptor<sp/>alloc]<sp/>init];</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>depthStencilDescriptor.depthWriteEnabled<sp/>=<sp/>NO;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>depthStencilDescriptor.depthCompareFunction<sp/>=<sp/>MTLCompareFunctionAlways;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.depthStencilState<sp/>=<sp/>[device<sp/>newDepthStencilStateWithDescriptor:depthStencilDescriptor];</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>are<sp/>retrieving<sp/>and<sp/>uploading<sp/>the<sp/>font<sp/>atlas<sp/>as<sp/>a<sp/>4-channels<sp/>RGBA<sp/>texture<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>theory<sp/>we<sp/>could<sp/>call<sp/>GetTexDataAsAlpha8()<sp/>and<sp/>upload<sp/>a<sp/>1-channel<sp/>texture<sp/>to<sp/>save<sp/>on<sp/>memory<sp/>access<sp/>bandwidth.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="comment">//<sp/>However,<sp/>using<sp/>a<sp/>shader<sp/>designed<sp/>for<sp/>1-channel<sp/>texture<sp/>would<sp/>make<sp/>it<sp/>less<sp/>obvious<sp/>to<sp/>use<sp/>the<sp/>ImTextureID<sp/>facility<sp/>to<sp/>render<sp/>users<sp/>own<sp/>textures.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>can<sp/>make<sp/>that<sp/>change<sp/>in<sp/>your<sp/>implementation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal">-<sp/>(void)makeFontTextureWithDevice:(id&lt;MTLDevice&gt;)device</highlight></codeline>
<codeline lineno="276"><highlight class="normal">{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui_i_o" kindref="compound">ImGuiIO</ref><sp/>&amp;io<sp/>=<sp/>ImGui::GetIO();</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pixels;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/>height;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>io.Fonts-&gt;GetTexDataAsRGBA32(&amp;pixels,<sp/>&amp;width,<sp/>&amp;height);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>MTLTextureDescriptor<sp/>*textureDescriptor<sp/>=<sp/>[MTLTextureDescriptor<sp/>texture2DDescriptorWithPixelFormat:MTLPixelFormatRGBA8Unorm</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width:(NSUInteger)width</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>height:(NSUInteger)height</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mipmapped:NO];</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>textureDescriptor.usage<sp/>=<sp/>MTLTextureUsageShaderRead;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TARGET_OS_OSX<sp/>||<sp/>TARGET_OS_MACCATALYST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>textureDescriptor.storageMode<sp/>=<sp/>MTLStorageModeManaged;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>textureDescriptor.storageMode<sp/>=<sp/>MTLStorageModeShared;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>id<sp/>&lt;MTLTexture&gt;<sp/>texture<sp/>=<sp/>[device<sp/>newTextureWithDescriptor:textureDescriptor];</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>[texture<sp/>replaceRegion:MTLRegionMake2D(0,<sp/>0,<sp/>(NSUInteger)width,<sp/>(NSUInteger)height)<sp/>mipmapLevel:0<sp/>withBytes:pixels<sp/>bytesPerRow:(NSUInteger)width<sp/>*<sp/>4];</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.fontTexture<sp/>=<sp/>texture;</highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal">-<sp/>(<ref refid="interface_metal_buffer" kindref="compound">MetalBuffer</ref><sp/>*)dequeueReusableBufferOfLength:(NSUInteger)length<sp/>device:(id&lt;MTLDevice&gt;)device</highlight></codeline>
<codeline lineno="297"><highlight class="normal">{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>NSTimeInterval<sp/>now<sp/>=<sp/>[NSDate<sp/>date].timeIntervalSince1970;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Purge<sp/>old<sp/>buffers<sp/>that<sp/>haven&apos;t<sp/>been<sp/>useful<sp/>for<sp/>a<sp/>while</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(now<sp/>-<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.lastBufferCachePurge<sp/>&gt;<sp/>1.0)</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NSMutableArray<sp/>*survivors<sp/>=<sp/>[NSMutableArray<sp/>array];</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="interface_metal_buffer" kindref="compound">MetalBuffer</ref><sp/>*candidate<sp/>in<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.bufferCache)</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(candidate.lastReuseTime<sp/>&gt;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.lastBufferCachePurge)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[survivors<sp/>addObject:candidate];</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.bufferCache<sp/>=<sp/>[survivors<sp/>mutableCopy];</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.lastBufferCachePurge<sp/>=<sp/>now;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>if<sp/>we<sp/>have<sp/>a<sp/>buffer<sp/>we<sp/>can<sp/>reuse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interface_metal_buffer" kindref="compound">MetalBuffer</ref><sp/>*bestCandidate<sp/>=<sp/>nil;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="interface_metal_buffer" kindref="compound">MetalBuffer</ref><sp/>*candidate<sp/>in<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.bufferCache)</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(candidate.buffer.length<sp/>&gt;=<sp/>length<sp/>&amp;&amp;<sp/>(bestCandidate<sp/>==<sp/>nil<sp/>||<sp/>bestCandidate.lastReuseTime<sp/>&gt;<sp/>candidate.lastReuseTime))</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestCandidate<sp/>=<sp/>candidate;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bestCandidate<sp/>!=<sp/>nil)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal">.bufferCache<sp/>removeObject:bestCandidate];</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestCandidate.lastReuseTime<sp/>=<sp/>now;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bestCandidate;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>luck;<sp/>make<sp/>a<sp/>new<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>id&lt;MTLBuffer&gt;<sp/>backing<sp/>=<sp/>[device<sp/>newBufferWithLength:length<sp/>options:MTLResourceStorageModeShared];</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[[<ref refid="interface_metal_buffer" kindref="compound">MetalBuffer</ref><sp/>alloc]<sp/>initWithBuffer:backing];</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal">-<sp/>(void)enqueueReusableBuffer:(<ref refid="interface_metal_buffer" kindref="compound">MetalBuffer</ref><sp/>*)<ref refid="classbuffer" kindref="compound">buffer</ref></highlight></codeline>
<codeline lineno="334"><highlight class="normal">{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal">.bufferCache<sp/>addObject:buffer];</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal">-<sp/>(_Nullable<sp/>id&lt;MTLRenderPipelineState&gt;)renderPipelineStateForFrameAndDevice:(id&lt;MTLDevice&gt;)device</highlight></codeline>
<codeline lineno="339"><highlight class="normal">{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>to<sp/>retrieve<sp/>a<sp/>render<sp/>pipeline<sp/>state<sp/>that<sp/>is<sp/>compatible<sp/>with<sp/>the<sp/>framebuffer<sp/>config<sp/>for<sp/>this<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>hit<sp/>rate<sp/>for<sp/>this<sp/>cache<sp/>should<sp/>be<sp/>very<sp/>near<sp/>100%.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>id&lt;MTLRenderPipelineState&gt;<sp/>renderPipelineState<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.renderPipelineStateCache[</highlight><highlight class="keyword">self</highlight><highlight class="normal">.framebufferDescriptor];</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(renderPipelineState<sp/>==<sp/>nil)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>luck;<sp/>make<sp/>a<sp/>new<sp/>render<sp/>pipeline<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>renderPipelineState<sp/>=<sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>_renderPipelineStateForFramebufferDescriptor:self.framebufferDescriptor<sp/>device:device];</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cache<sp/>render<sp/>pipeline<sp/>state<sp/>for<sp/>later<sp/>reuse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.renderPipelineStateCache[</highlight><highlight class="keyword">self</highlight><highlight class="normal">.framebufferDescriptor]<sp/>=<sp/>renderPipelineState;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>renderPipelineState;</highlight></codeline>
<codeline lineno="353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal">-<sp/>(id&lt;MTLRenderPipelineState&gt;)_renderPipelineStateForFramebufferDescriptor:(<ref refid="interface_framebuffer_descriptor" kindref="compound">FramebufferDescriptor</ref><sp/>*)descriptor<sp/>device:(id&lt;MTLDevice&gt;)device</highlight></codeline>
<codeline lineno="356"><highlight class="normal">{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>NSError<sp/>*error<sp/>=<sp/>nil;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>NSString<sp/>*shaderSource<sp/>=<sp/></highlight><highlight class="stringliteral">@&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;#include<sp/>&lt;metal_stdlib&gt;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;using<sp/>namespace<sp/>metal;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;struct<sp/>Uniforms<sp/>{\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>float4x4<sp/>projectionMatrix;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;};\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;struct<sp/>VertexIn<sp/>{\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>float2<sp/>position<sp/><sp/>[[attribute(0)]];\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>float2<sp/>texCoords<sp/>[[attribute(1)]];\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>uchar4<sp/>color<sp/><sp/><sp/><sp/><sp/>[[attribute(2)]];\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;};\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;struct<sp/>VertexOut<sp/>{\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>float4<sp/>position<sp/>[[position]];\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>float2<sp/>texCoords;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>float4<sp/>color;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;};\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;vertex<sp/>VertexOut<sp/>vertex_main(VertexIn<sp/>in<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[[stage_in]],\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constant<sp/>Uniforms<sp/>&amp;uniforms<sp/>[[buffer(1)]])<sp/>{\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>VertexOut<sp/>out;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>out.position<sp/>=<sp/>uniforms.projectionMatrix<sp/>*<sp/>float4(in.position,<sp/>0,<sp/>1);\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>out.texCoords<sp/>=<sp/>in.texCoords;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>out.color<sp/>=<sp/>float4(in.color)<sp/>/<sp/>float4(255.0);\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>return<sp/>out;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;}\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;fragment<sp/>half4<sp/>fragment_main(VertexOut<sp/>in<sp/>[[stage_in]],\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>texture2d&lt;half,<sp/>access::sample&gt;<sp/>texture<sp/>[[texture(0)]])<sp/>{\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>constexpr<sp/>sampler<sp/>linearSampler(coord::normalized,<sp/>min_filter::linear,<sp/>mag_filter::linear,<sp/>mip_filter::linear);\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>half4<sp/>texColor<sp/>=<sp/>texture.sample(linearSampler,<sp/>in.texCoords);\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>return<sp/>half4(in.color)<sp/>*<sp/>texColor;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;}\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>id&lt;MTLLibrary&gt;<sp/>library<sp/>=<sp/>[device<sp/>newLibraryWithSource:shaderSource<sp/>options:nil<sp/>error:&amp;error];</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(library<sp/>==<sp/>nil)</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NSLog(</highlight><highlight class="stringliteral">@&quot;Error:<sp/>failed<sp/>to<sp/>create<sp/>Metal<sp/>library:<sp/>%@&quot;</highlight><highlight class="normal">,<sp/>error);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nil;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>id&lt;MTLFunction&gt;<sp/>vertexFunction<sp/>=<sp/>[library<sp/>newFunctionWithName:@&quot;vertex_main&quot;];</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>id&lt;MTLFunction&gt;<sp/>fragmentFunction<sp/>=<sp/>[library<sp/>newFunctionWithName:@&quot;fragment_main&quot;];</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vertexFunction<sp/>==<sp/>nil<sp/>||<sp/>fragmentFunction<sp/>==<sp/>nil)</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NSLog(</highlight><highlight class="stringliteral">@&quot;Error:<sp/>failed<sp/>to<sp/>find<sp/>Metal<sp/>shader<sp/>functions<sp/>in<sp/>library:<sp/>%@&quot;</highlight><highlight class="normal">,<sp/>error);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nil;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>MTLVertexDescriptor<sp/>*vertexDescriptor<sp/>=<sp/>[MTLVertexDescriptor<sp/>vertexDescriptor];</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>vertexDescriptor.attributes[0].offset<sp/>=<sp/>IM_OFFSETOF(<ref refid="struct_im_draw_vert" kindref="compound">ImDrawVert</ref>,<sp/>pos);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>vertexDescriptor.attributes[0].format<sp/>=<sp/>MTLVertexFormatFloat2;<sp/></highlight><highlight class="comment">//<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>vertexDescriptor.attributes[0].bufferIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>vertexDescriptor.attributes[1].offset<sp/>=<sp/>IM_OFFSETOF(<ref refid="struct_im_draw_vert" kindref="compound">ImDrawVert</ref>,<sp/>uv);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>vertexDescriptor.attributes[1].format<sp/>=<sp/>MTLVertexFormatFloat2;<sp/></highlight><highlight class="comment">//<sp/>texCoords</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>vertexDescriptor.attributes[1].bufferIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>vertexDescriptor.attributes[2].offset<sp/>=<sp/>IM_OFFSETOF(<ref refid="struct_im_draw_vert" kindref="compound">ImDrawVert</ref>,<sp/>col);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>vertexDescriptor.attributes[2].format<sp/>=<sp/>MTLVertexFormatUChar4;<sp/></highlight><highlight class="comment">//<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>vertexDescriptor.attributes[2].bufferIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>vertexDescriptor.layouts[0].stepRate<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>vertexDescriptor.layouts[0].stepFunction<sp/>=<sp/>MTLVertexStepFunctionPerVertex;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>vertexDescriptor.layouts[0].stride<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_im_draw_vert" kindref="compound">ImDrawVert</ref>);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>MTLRenderPipelineDescriptor<sp/>*pipelineDescriptor<sp/>=<sp/>[[MTLRenderPipelineDescriptor<sp/>alloc]<sp/>init];</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineDescriptor.vertexFunction<sp/>=<sp/>vertexFunction;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineDescriptor.fragmentFunction<sp/>=<sp/>fragmentFunction;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineDescriptor.vertexDescriptor<sp/>=<sp/>vertexDescriptor;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineDescriptor.sampleCount<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.framebufferDescriptor.sampleCount;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineDescriptor.colorAttachments[0].pixelFormat<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.framebufferDescriptor.colorPixelFormat;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineDescriptor.colorAttachments[0].blendingEnabled<sp/>=<sp/>YES;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineDescriptor.colorAttachments[0].rgbBlendOperation<sp/>=<sp/>MTLBlendOperationAdd;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineDescriptor.colorAttachments[0].sourceRGBBlendFactor<sp/>=<sp/>MTLBlendFactorSourceAlpha;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineDescriptor.colorAttachments[0].destinationRGBBlendFactor<sp/>=<sp/>MTLBlendFactorOneMinusSourceAlpha;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineDescriptor.colorAttachments[0].alphaBlendOperation<sp/>=<sp/>MTLBlendOperationAdd;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineDescriptor.colorAttachments[0].sourceAlphaBlendFactor<sp/>=<sp/>MTLBlendFactorOne;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineDescriptor.colorAttachments[0].destinationAlphaBlendFactor<sp/>=<sp/>MTLBlendFactorOneMinusSourceAlpha;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineDescriptor.depthAttachmentPixelFormat<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.framebufferDescriptor.depthPixelFormat;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineDescriptor.stencilAttachmentPixelFormat<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.framebufferDescriptor.stencilPixelFormat;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>id&lt;MTLRenderPipelineState&gt;<sp/>renderPipelineState<sp/>=<sp/>[device<sp/>newRenderPipelineStateWithDescriptor:pipelineDescriptor<sp/>error:&amp;error];</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error<sp/>!=<sp/>nil)</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NSLog(</highlight><highlight class="stringliteral">@&quot;Error:<sp/>failed<sp/>to<sp/>create<sp/>Metal<sp/>pipeline<sp/>state:<sp/>%@&quot;</highlight><highlight class="normal">,<sp/>error);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>renderPipelineState;</highlight></codeline>
<codeline lineno="448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal">-<sp/>(void)emptyRenderPipelineStateCache</highlight></codeline>
<codeline lineno="451"><highlight class="normal">{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal">.renderPipelineStateCache<sp/>removeAllObjects];</highlight></codeline>
<codeline lineno="453"><highlight class="normal">}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal">-<sp/>(void)setupRenderState:(<ref refid="struct_im_draw_data" kindref="compound">ImDrawData</ref><sp/>*)drawData</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandBuffer:(id&lt;MTLCommandBuffer&gt;)commandBuffer</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandEncoder:(id&lt;MTLRenderCommandEncoder&gt;)commandEncoder</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>renderPipelineState:(id&lt;MTLRenderPipelineState&gt;)renderPipelineState</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertexBuffer:(<ref refid="interface_metal_buffer" kindref="compound">MetalBuffer</ref><sp/>*)vertexBuffer</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertexBufferOffset:(size_t)vertexBufferOffset</highlight></codeline>
<codeline lineno="461"><highlight class="normal">{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>[commandEncoder<sp/>setCullMode:MTLCullModeNone];</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>[commandEncoder<sp/>setDepthStencilState:g_sharedMetalContext.depthStencilState];</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>viewport,<sp/>orthographic<sp/>projection<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Our<sp/>visible<sp/>imgui<sp/>space<sp/>lies<sp/>from<sp/>draw_data-&gt;DisplayPos<sp/>(top<sp/>left)<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>draw_data-&gt;DisplayPos+data_data-&gt;DisplaySize<sp/>(bottom<sp/>right).<sp/>DisplayMin<sp/>is<sp/>typically<sp/>(0,0)<sp/>for<sp/>single<sp/>viewport<sp/>apps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>MTLViewport<sp/>viewport<sp/>=</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.originX<sp/>=<sp/>0.0,</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.originY<sp/>=<sp/>0.0,</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.width<sp/>=<sp/>(double)(drawData-&gt;DisplaySize.x<sp/>*<sp/>drawData-&gt;FramebufferScale.x),</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.height<sp/>=<sp/>(double)(drawData-&gt;DisplaySize.y<sp/>*<sp/>drawData-&gt;FramebufferScale.y),</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.znear<sp/>=<sp/>0.0,</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.zfar<sp/>=<sp/>1.0</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>[commandEncoder<sp/>setViewport:viewport];</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>L<sp/>=<sp/>drawData-&gt;DisplayPos.x;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>R<sp/>=<sp/>drawData-&gt;DisplayPos.x<sp/>+<sp/>drawData-&gt;DisplaySize.x;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>drawData-&gt;DisplayPos.y;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>B<sp/>=<sp/>drawData-&gt;DisplayPos.y<sp/>+<sp/>drawData-&gt;DisplaySize.y;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>(float)viewport.znear;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>F<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)viewport.zfar;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ortho_projection[4][4]<sp/>=</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>2.0f/(R-L),<sp/><sp/><sp/>0.0f,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0f,<sp/><sp/><sp/>0.0f<sp/>},</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0.0f,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.0f/(T-B),<sp/><sp/><sp/><sp/><sp/>0.0f,<sp/><sp/><sp/>0.0f<sp/>},</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0.0f,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0f,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1/(F-N),<sp/><sp/><sp/>0.0f<sp/>},</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>(R+L)/(L-R),<sp/><sp/>(T+B)/(B-T),<sp/>N/(F-N),<sp/><sp/><sp/>1.0f<sp/>},</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>[commandEncoder<sp/>setVertexBytes:&amp;ortho_projection<sp/>length:sizeof(ortho_projection)<sp/>atIndex:1];</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>[commandEncoder<sp/>setRenderPipelineState:renderPipelineState];</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>[commandEncoder<sp/>setVertexBuffer:vertexBuffer.buffer<sp/>offset:0<sp/>atIndex:0];</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>[commandEncoder<sp/>setVertexBufferOffset:vertexBufferOffset<sp/>atIndex:0];</highlight></codeline>
<codeline lineno="498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal">-<sp/>(void)renderDrawData:(<ref refid="struct_im_draw_data" kindref="compound">ImDrawData</ref><sp/>*)drawData</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandBuffer:(id&lt;MTLCommandBuffer&gt;)commandBuffer</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commandEncoder:(id&lt;MTLRenderCommandEncoder&gt;)commandEncoder</highlight></codeline>
<codeline lineno="503"><highlight class="normal">{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>rendering<sp/>when<sp/>minimized,<sp/>scale<sp/>coordinates<sp/>for<sp/>retina<sp/>displays<sp/>(screen<sp/>coordinates<sp/>!=<sp/>framebuffer<sp/>coordinates)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fb_width<sp/>=<sp/>(int)(drawData-&gt;DisplaySize.x<sp/>*<sp/>drawData-&gt;FramebufferScale.x);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fb_height<sp/>=<sp/>(int)(drawData-&gt;DisplaySize.y<sp/>*<sp/>drawData-&gt;FramebufferScale.y);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fb_width<sp/>&lt;=<sp/>0<sp/>||<sp/>fb_height<sp/>&lt;=<sp/>0<sp/>||<sp/>drawData-&gt;CmdListsCount<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>id&lt;MTLRenderPipelineState&gt;<sp/>renderPipelineState<sp/>=<sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>renderPipelineStateForFrameAndDevice:commandBuffer.device];</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>vertexBufferLength<sp/>=<sp/>(size_t)drawData-&gt;TotalVtxCount<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_im_draw_vert" kindref="compound">ImDrawVert</ref>);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>indexBufferLength<sp/>=<sp/>(size_t)drawData-&gt;TotalIdxCount<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ImDrawIdx);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interface_metal_buffer" kindref="compound">MetalBuffer</ref>*<sp/>vertexBuffer<sp/>=<sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>dequeueReusableBufferOfLength:vertexBufferLength<sp/>device:commandBuffer.device];</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="interface_metal_buffer" kindref="compound">MetalBuffer</ref>*<sp/>indexBuffer<sp/>=<sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>dequeueReusableBufferOfLength:indexBufferLength<sp/>device:commandBuffer.device];</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>setupRenderState:drawData<sp/>commandBuffer:commandBuffer<sp/>commandEncoder:commandEncoder<sp/>renderPipelineState:renderPipelineState<sp/>vertexBuffer:vertexBuffer<sp/>vertexBufferOffset:0];</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Will<sp/>project<sp/>scissor/clipping<sp/>rectangles<sp/>into<sp/>framebuffer<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_vec2" kindref="compound">ImVec2</ref><sp/>clip_off<sp/>=<sp/>drawData-&gt;DisplayPos;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(0,0)<sp/>unless<sp/>using<sp/>multi-viewports</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_vec2" kindref="compound">ImVec2</ref><sp/>clip_scale<sp/>=<sp/>drawData-&gt;FramebufferScale;<sp/></highlight><highlight class="comment">//<sp/>(1,1)<sp/>unless<sp/>using<sp/>retina<sp/>display<sp/>which<sp/>are<sp/>often<sp/>(2,2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Render<sp/>command<sp/>lists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>vertexBufferOffset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>indexBufferOffset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>drawData-&gt;CmdListsCount;<sp/>n++)</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_im_draw_list" kindref="compound">ImDrawList</ref>*<sp/>cmd_list<sp/>=<sp/>drawData-&gt;CmdLists[n];</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)vertexBuffer.buffer.contents<sp/>+<sp/>vertexBufferOffset,<sp/>cmd_list-&gt;VtxBuffer.Data,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)cmd_list-&gt;VtxBuffer.Size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_im_draw_vert" kindref="compound">ImDrawVert</ref>));</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)indexBuffer.buffer.contents<sp/>+<sp/>indexBufferOffset,<sp/>cmd_list-&gt;IdxBuffer.Data,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)cmd_list-&gt;IdxBuffer.Size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ImDrawIdx));</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmd_i<sp/>=<sp/>0;<sp/>cmd_i<sp/>&lt;<sp/>cmd_list-&gt;CmdBuffer.Size;<sp/>cmd_i++)</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_im_draw_cmd" kindref="compound">ImDrawCmd</ref>*<sp/>pcmd<sp/>=<sp/>&amp;cmd_list-&gt;CmdBuffer[cmd_i];</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pcmd-&gt;UserCallback)</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>User<sp/>callback,<sp/>registered<sp/>via<sp/>ImDrawList::AddCallback()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(ImDrawCallback_ResetRenderState<sp/>is<sp/>a<sp/>special<sp/>callback<sp/>value<sp/>used<sp/>by<sp/>the<sp/>user<sp/>to<sp/>request<sp/>the<sp/>renderer<sp/>to<sp/>reset<sp/>render<sp/>state.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pcmd-&gt;UserCallback<sp/>==<sp/>ImDrawCallback_ResetRenderState)</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>setupRenderState:drawData<sp/>commandBuffer:commandBuffer<sp/>commandEncoder:commandEncoder<sp/>renderPipelineState:renderPipelineState<sp/>vertexBuffer:vertexBuffer<sp/>vertexBufferOffset:vertexBufferOffset];</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcmd-&gt;UserCallback(cmd_list,<sp/>pcmd);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Project<sp/>scissor/clipping<sp/>rectangles<sp/>into<sp/>framebuffer<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_im_vec2" kindref="compound">ImVec2</ref><sp/>clip_min((pcmd-&gt;ClipRect.x<sp/>-<sp/>clip_off.x)<sp/>*<sp/>clip_scale.x,<sp/>(pcmd-&gt;ClipRect.y<sp/>-<sp/>clip_off.y)<sp/>*<sp/>clip_scale.y);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_im_vec2" kindref="compound">ImVec2</ref><sp/>clip_max((pcmd-&gt;ClipRect.z<sp/>-<sp/>clip_off.x)<sp/>*<sp/>clip_scale.x,<sp/>(pcmd-&gt;ClipRect.w<sp/>-<sp/>clip_off.y)<sp/>*<sp/>clip_scale.y);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clamp<sp/>to<sp/>viewport<sp/>as<sp/>setScissorRect()<sp/>won&apos;t<sp/>accept<sp/>values<sp/>that<sp/>are<sp/>off<sp/>bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clip_min.x<sp/>&lt;<sp/>0.0f)<sp/>{<sp/>clip_min.x<sp/>=<sp/>0.0f;<sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clip_min.y<sp/>&lt;<sp/>0.0f)<sp/>{<sp/>clip_min.y<sp/>=<sp/>0.0f;<sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clip_max.x<sp/>&gt;<sp/>fb_width)<sp/>{<sp/>clip_max.x<sp/>=<sp/>(float)fb_width;<sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clip_max.y<sp/>&gt;<sp/>fb_height)<sp/>{<sp/>clip_max.y<sp/>=<sp/>(float)fb_height;<sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clip_max.x<sp/>&lt;=<sp/>clip_min.x<sp/>||<sp/>clip_max.y<sp/>&lt;=<sp/>clip_min.y)</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pcmd-&gt;ElemCount<sp/>==<sp/>0)<sp/></highlight><highlight class="comment">//<sp/>drawIndexedPrimitives()<sp/>validation<sp/>doesn&apos;t<sp/>accept<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>scissor/clipping<sp/>rectangle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MTLScissorRect<sp/>scissorRect<sp/>=</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.x<sp/>=<sp/>NSUInteger(clip_min.x),</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.y<sp/>=<sp/>NSUInteger(clip_min.y),</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.width<sp/>=<sp/>NSUInteger(clip_max.x<sp/>-<sp/>clip_min.x),</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.height<sp/>=<sp/>NSUInteger(clip_max.y<sp/>-<sp/>clip_min.y)</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[commandEncoder<sp/>setScissorRect:scissorRect];</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bind<sp/>texture,<sp/>Draw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ImTextureID<sp/>tex_id<sp/>=<sp/>pcmd-&gt;GetTexID())</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[commandEncoder<sp/>setFragmentTexture:(__bridge<sp/>id&lt;MTLTexture&gt;)(tex_id)<sp/>atIndex:0];</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[commandEncoder<sp/>setVertexBufferOffset:(vertexBufferOffset<sp/>+<sp/>pcmd-&gt;VtxOffset<sp/>*<sp/>sizeof(ImDrawVert))<sp/>atIndex:0];</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[commandEncoder<sp/>drawIndexedPrimitives:MTLPrimitiveTypeTriangle</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexCount:pcmd-&gt;ElemCount</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexType:sizeof(ImDrawIdx)<sp/>==<sp/>2<sp/>?<sp/>MTLIndexTypeUInt16<sp/>:<sp/>MTLIndexTypeUInt32</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexBuffer:indexBuffer.buffer</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexBufferOffset:indexBufferOffset<sp/>+<sp/>pcmd-&gt;IdxOffset<sp/>*<sp/>sizeof(ImDrawIdx)];</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertexBufferOffset<sp/>+=<sp/>(size_t)cmd_list-&gt;VtxBuffer.Size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_im_draw_vert" kindref="compound">ImDrawVert</ref>);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexBufferOffset<sp/>+=<sp/>(size_t)cmd_list-&gt;IdxBuffer.Size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ImDrawIdx);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>__weak<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>weakSelf<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>[commandBuffer<sp/>addCompletedHandler:^(id&lt;MTLCommandBuffer&gt;)</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dispatch_async(dispatch_get_main_queue(),<sp/>^{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[weakSelf<sp/>enqueueReusableBuffer:vertexBuffer];</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[weakSelf<sp/>enqueueReusableBuffer:indexBuffer];</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>}];</highlight></codeline>
<codeline lineno="596"><highlight class="normal">}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="keyword">@end</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_metal.mm"/>
  </compounddef>
</doxygen>
