<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="glew__init__gl_8c" kind="file" language="C++">
    <compoundname>glew_init_gl.c</compoundname>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="glew__init__gl_8c_1a4bfb309b47f54ef7e3b1bf61b7f2a8f7" prot="public" static="no">
        <type>const GLubyte *(GLAPIENTRY *</type>
        <definition>typedef const GLubyte *(GLAPIENTRY * PFNGLGETSTRINGPROC) (GLenum name)</definition>
        <argsstring>)(GLenum name)</argsstring>
        <name>PFNGLGETSTRINGPROC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glew/auto/src/glew_init_gl.c" line="73" column="15" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glew/auto/src/glew_init_gl.c" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="glew__init__gl_8c_1a477be1d36f4d291a938f8530f0667bd6" prot="public" static="no">
        <type>void(GLAPIENTRY *</type>
        <definition>typedef void(GLAPIENTRY * PFNGLGETINTEGERVPROC) (GLenum pname, GLint *params)</definition>
        <argsstring>)(GLenum pname, GLint *params)</argsstring>
        <name>PFNGLGETINTEGERVPROC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glew/auto/src/glew_init_gl.c" line="74" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glew/auto/src/glew_init_gl.c" bodystart="74" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="glew__init__gl_8c_1af4b03656bb0dd4cc8c0c297a7e1ba372" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int _glewExtensionCompare</definition>
        <argsstring>(const char *s1, const char *s2)</argsstring>
        <name>_glewExtensionCompare</name>
        <param>
          <type>const char *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glew/auto/src/glew_init_gl.c" line="3" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glew/auto/src/glew_init_gl.c" bodystart="3" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="glew__init__gl_8c_1ac9b8831ae585e2e95f260af2933f1a9b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ptrdiff_t</type>
        <definition>static ptrdiff_t _glewBsearchExtension</definition>
        <argsstring>(const char *name)</argsstring>
        <name>_glewBsearchExtension</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glew/auto/src/glew_init_gl.c" line="18" column="18" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glew/auto/src/glew_init_gl.c" bodystart="18" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="glew__init__gl_8c_1ac1f3a9ec3255ba673d56de7fd65aa849" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLboolean *</type>
        <definition>static GLboolean * _glewGetExtensionString</definition>
        <argsstring>(const char *name)</argsstring>
        <name>_glewGetExtensionString</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glew/auto/src/glew_init_gl.c" line="33" column="18" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glew/auto/src/glew_init_gl.c" bodystart="33" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="glew__init__gl_8c_1a4e3a65ca28f53ee4f57d9fa6ff227f0c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLboolean *</type>
        <definition>static GLboolean * _glewGetExtensionEnable</definition>
        <argsstring>(const char *name)</argsstring>
        <name>_glewGetExtensionEnable</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glew/auto/src/glew_init_gl.c" line="40" column="18" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glew/auto/src/glew_init_gl.c" bodystart="40" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="glew__init__gl_8c_1a386c2124168dde7fb04fcf524ca7ffdd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char * _glewNextSpace</definition>
        <argsstring>(const char *i)</argsstring>
        <name>_glewNextSpace</name>
        <param>
          <type>const char *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glew/auto/src/glew_init_gl.c" line="47" column="19" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glew/auto/src/glew_init_gl.c" bodystart="47" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="glew__init__gl_8c_1a83886b63528afd50e4bc13dc0d80d8ec" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char * _glewNextNonSpace</definition>
        <argsstring>(const char *i)</argsstring>
        <name>_glewNextNonSpace</name>
        <param>
          <type>const char *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glew/auto/src/glew_init_gl.c" line="55" column="19" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glew/auto/src/glew_init_gl.c" bodystart="55" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="glew__init__gl_8c_1af76ebb3d845b7fb4afdfa064e06a480d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLboolean GLEWAPIENTRY</type>
        <definition>GLboolean GLEWAPIENTRY glewGetExtension</definition>
        <argsstring>(const char *name)</argsstring>
        <name>glewGetExtension</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glew/auto/src/glew_init_gl.c" line="63" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glew/auto/src/glew_init_gl.c" bodystart="63" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="glew__init__gl_8c_1a6135b8e5b8d8808ee004698f058b0f58" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLenum GLEWAPIENTRY</type>
        <definition>static GLenum GLEWAPIENTRY glewContextInit</definition>
        <argsstring>()</argsstring>
        <name>glewContextInit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glew/auto/src/glew_init_gl.c" line="76" column="28" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glew/auto/src/glew_init_gl.c" bodystart="76" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_glewExtensionCompare(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s2)</highlight></codeline>
<codeline lineno="4"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>http://www.chanduthedev.com/2012/07/strcmp-implementation-in-c.html<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*s1<sp/>||<sp/>*s2)</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s1<sp/>&gt;<sp/>*s2)</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s1<sp/>&lt;<sp/>*s2)</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s1++;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s2++;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="16"><highlight class="normal">}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ptrdiff_t<sp/>_glewBsearchExtension(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name)</highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>ptrdiff_t<sp/>lo<sp/>=<sp/>0,<sp/>hi<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(_glewExtensionLookup)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>-<sp/>2;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(lo<sp/>&lt;=<sp/>hi)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>ptrdiff_t<sp/>mid<sp/>=<sp/>(lo<sp/>+<sp/>hi)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmp<sp/>=<sp/>_glewExtensionCompare(name,<sp/>_glewExtensionLookup[mid]);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp<sp/>&lt;<sp/>0)<sp/>hi<sp/>=<sp/>mid<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp<sp/>&gt;<sp/>0)<sp/>lo<sp/>=<sp/>mid<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mid;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GLboolean<sp/>*_glewGetExtensionString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>ptrdiff_t<sp/>n<sp/>=<sp/>_glewBsearchExtension(name);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;_glewExtensionString[n];</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GLboolean<sp/>*_glewGetExtensionEnable(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>ptrdiff_t<sp/>n<sp/>=<sp/>_glewBsearchExtension(name);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_glewExtensionEnabled[n];</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_glewNextSpace(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*i)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*j<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*j!=</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>*j)<sp/>++j;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*_glewNextNonSpace(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*i)</highlight></codeline>
<codeline lineno="56"><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*j<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*j==</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>++j;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">GLboolean<sp/>GLEWAPIENTRY<sp/>glewGetExtension<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name)</highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>GLboolean<sp/>*enable<sp/>=<sp/>_glewGetExtensionString(name);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enable)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*enable;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GL_FALSE;</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLubyte*<sp/>(GLAPIENTRY<sp/>*<sp/>PFNGLGETSTRINGPROC)<sp/>(GLenum<sp/>name);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(GLAPIENTRY<sp/>*<sp/>PFNGLGETINTEGERVPROC)<sp/>(GLenum<sp/>pname,<sp/>GLint<sp/>*params);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GLenum<sp/>GLEWAPIENTRY<sp/>glewContextInit<sp/>()</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>PFNGLGETSTRINGPROC<sp/>getString;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLubyte*<sp/>s;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>GLuint<sp/>dot;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>GLint<sp/>major,<sp/>minor;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>getString<sp/>=<sp/>glGetString;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>getString<sp/>=<sp/>(PFNGLGETSTRINGPROC)<sp/>glewGetProcAddress((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLubyte*)</highlight><highlight class="stringliteral">&quot;glGetString&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!getString)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GLEW_ERROR_NO_GL_VERSION;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>query<sp/>opengl<sp/>version<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>s<sp/>=<sp/>getString(GL_VERSION);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>dot<sp/>=<sp/>_glewStrCLen(s,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dot<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GLEW_ERROR_NO_GL_VERSION;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>major<sp/>=<sp/>s[dot-1]-</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>minor<sp/>=<sp/>s[dot+1]-</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(minor<sp/>&lt;<sp/>0<sp/>||<sp/>minor<sp/>&gt;<sp/>9)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>minor<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(major&lt;0<sp/>||<sp/>major&gt;9)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GLEW_ERROR_NO_GL_VERSION;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(major<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>minor<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GLEW_ERROR_GL_VERSION_10_ONLY;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>GLEW_VERSION_4_6<sp/><sp/><sp/>=<sp/>(<sp/>major<sp/>&gt;<sp/>4<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(<sp/>major<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>minor<sp/>&gt;=<sp/>6<sp/>)<sp/>?<sp/>GL_TRUE<sp/>:<sp/>GL_FALSE;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>GLEW_VERSION_4_5<sp/><sp/><sp/>=<sp/>GLEW_VERSION_4_6<sp/><sp/><sp/>==<sp/>GL_TRUE<sp/>||<sp/>(<sp/>major<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>minor<sp/>&gt;=<sp/>5<sp/>)<sp/>?<sp/>GL_TRUE<sp/>:<sp/>GL_FALSE;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>GLEW_VERSION_4_4<sp/><sp/><sp/>=<sp/>GLEW_VERSION_4_5<sp/><sp/><sp/>==<sp/>GL_TRUE<sp/>||<sp/>(<sp/>major<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>minor<sp/>&gt;=<sp/>4<sp/>)<sp/>?<sp/>GL_TRUE<sp/>:<sp/>GL_FALSE;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>GLEW_VERSION_4_3<sp/><sp/><sp/>=<sp/>GLEW_VERSION_4_4<sp/><sp/><sp/>==<sp/>GL_TRUE<sp/>||<sp/>(<sp/>major<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>minor<sp/>&gt;=<sp/>3<sp/>)<sp/>?<sp/>GL_TRUE<sp/>:<sp/>GL_FALSE;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>GLEW_VERSION_4_2<sp/><sp/><sp/>=<sp/>GLEW_VERSION_4_3<sp/><sp/><sp/>==<sp/>GL_TRUE<sp/>||<sp/>(<sp/>major<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>minor<sp/>&gt;=<sp/>2<sp/>)<sp/>?<sp/>GL_TRUE<sp/>:<sp/>GL_FALSE;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>GLEW_VERSION_4_1<sp/><sp/><sp/>=<sp/>GLEW_VERSION_4_2<sp/><sp/><sp/>==<sp/>GL_TRUE<sp/>||<sp/>(<sp/>major<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>minor<sp/>&gt;=<sp/>1<sp/>)<sp/>?<sp/>GL_TRUE<sp/>:<sp/>GL_FALSE;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>GLEW_VERSION_4_0<sp/><sp/><sp/>=<sp/>GLEW_VERSION_4_1<sp/><sp/><sp/>==<sp/>GL_TRUE<sp/>||<sp/>(<sp/>major<sp/>==<sp/>4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>?<sp/>GL_TRUE<sp/>:<sp/>GL_FALSE;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>GLEW_VERSION_3_3<sp/><sp/><sp/>=<sp/>GLEW_VERSION_4_0<sp/><sp/><sp/>==<sp/>GL_TRUE<sp/>||<sp/>(<sp/>major<sp/>==<sp/>3<sp/>&amp;&amp;<sp/>minor<sp/>&gt;=<sp/>3<sp/>)<sp/>?<sp/>GL_TRUE<sp/>:<sp/>GL_FALSE;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>GLEW_VERSION_3_2<sp/><sp/><sp/>=<sp/>GLEW_VERSION_3_3<sp/><sp/><sp/>==<sp/>GL_TRUE<sp/>||<sp/>(<sp/>major<sp/>==<sp/>3<sp/>&amp;&amp;<sp/>minor<sp/>&gt;=<sp/>2<sp/>)<sp/>?<sp/>GL_TRUE<sp/>:<sp/>GL_FALSE;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>GLEW_VERSION_3_1<sp/><sp/><sp/>=<sp/>GLEW_VERSION_3_2<sp/><sp/><sp/>==<sp/>GL_TRUE<sp/>||<sp/>(<sp/>major<sp/>==<sp/>3<sp/>&amp;&amp;<sp/>minor<sp/>&gt;=<sp/>1<sp/>)<sp/>?<sp/>GL_TRUE<sp/>:<sp/>GL_FALSE;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>GLEW_VERSION_3_0<sp/><sp/><sp/>=<sp/>GLEW_VERSION_3_1<sp/><sp/><sp/>==<sp/>GL_TRUE<sp/>||<sp/>(<sp/>major<sp/>==<sp/>3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>?<sp/>GL_TRUE<sp/>:<sp/>GL_FALSE;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>GLEW_VERSION_2_1<sp/><sp/><sp/>=<sp/>GLEW_VERSION_3_0<sp/><sp/><sp/>==<sp/>GL_TRUE<sp/>||<sp/>(<sp/>major<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>minor<sp/>&gt;=<sp/>1<sp/>)<sp/>?<sp/>GL_TRUE<sp/>:<sp/>GL_FALSE;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>GLEW_VERSION_2_0<sp/><sp/><sp/>=<sp/>GLEW_VERSION_2_1<sp/><sp/><sp/>==<sp/>GL_TRUE<sp/>||<sp/>(<sp/>major<sp/>==<sp/>2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>?<sp/>GL_TRUE<sp/>:<sp/>GL_FALSE;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>GLEW_VERSION_1_5<sp/><sp/><sp/>=<sp/>GLEW_VERSION_2_0<sp/><sp/><sp/>==<sp/>GL_TRUE<sp/>||<sp/>(<sp/>major<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>minor<sp/>&gt;=<sp/>5<sp/>)<sp/>?<sp/>GL_TRUE<sp/>:<sp/>GL_FALSE;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>GLEW_VERSION_1_4<sp/><sp/><sp/>=<sp/>GLEW_VERSION_1_5<sp/><sp/><sp/>==<sp/>GL_TRUE<sp/>||<sp/>(<sp/>major<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>minor<sp/>&gt;=<sp/>4<sp/>)<sp/>?<sp/>GL_TRUE<sp/>:<sp/>GL_FALSE;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>GLEW_VERSION_1_3<sp/><sp/><sp/>=<sp/>GLEW_VERSION_1_4<sp/><sp/><sp/>==<sp/>GL_TRUE<sp/>||<sp/>(<sp/>major<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>minor<sp/>&gt;=<sp/>3<sp/>)<sp/>?<sp/>GL_TRUE<sp/>:<sp/>GL_FALSE;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>GLEW_VERSION_1_2_1<sp/>=<sp/>GLEW_VERSION_1_3<sp/><sp/><sp/>==<sp/>GL_TRUE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>GL_TRUE<sp/>:<sp/>GL_FALSE;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>GLEW_VERSION_1_2<sp/><sp/><sp/>=<sp/>GLEW_VERSION_1_2_1<sp/>==<sp/>GL_TRUE<sp/>||<sp/>(<sp/>major<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>minor<sp/>&gt;=<sp/>2<sp/>)<sp/>?<sp/>GL_TRUE<sp/>:<sp/>GL_FALSE;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>GLEW_VERSION_1_1<sp/><sp/><sp/>=<sp/>GLEW_VERSION_1_2<sp/><sp/><sp/>==<sp/>GL_TRUE<sp/>||<sp/>(<sp/>major<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>minor<sp/>&gt;=<sp/>1<sp/>)<sp/>?<sp/>GL_TRUE<sp/>:<sp/>GL_FALSE;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(_glewExtensionString)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(_glewExtensionString[0]);<sp/>++i)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_glewExtensionString[i]<sp/>=<sp/>GL_FALSE;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GLEW_VERSION_3_0)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>GLint<sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>GLint<sp/>i;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>PFNGLGETINTEGERVPROC<sp/>getIntegerv;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>PFNGLGETSTRINGIPROC<sp/>getStringi;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ext;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>GLboolean<sp/>*enable;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>getIntegerv<sp/>=<sp/>glGetIntegerv;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>getIntegerv<sp/>=<sp/>(PFNGLGETINTEGERVPROC)<sp/>glewGetProcAddress((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLubyte*)</highlight><highlight class="stringliteral">&quot;glGetIntegerv&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getIntegerv)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>getIntegerv(GL_NUM_EXTENSIONS,<sp/>&amp;n);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>glGetStringi<sp/>is<sp/>OpenGL<sp/>3.0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>getStringi<sp/>=<sp/>(PFNGLGETSTRINGIPROC)<sp/>glewGetProcAddress((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLubyte*)</highlight><highlight class="stringliteral">&quot;glGetStringi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getStringi)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i&lt;n;<sp/>++i)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ext<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>getStringi(GL_EXTENSIONS,<sp/>i);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Based<sp/>on<sp/>extension<sp/>string(s),<sp/>glewGetExtension<sp/>purposes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable<sp/>=<sp/>_glewGetExtensionString(ext);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enable)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*enable<sp/>=<sp/>GL_TRUE;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Based<sp/>on<sp/>extension<sp/>string(s),<sp/>experimental<sp/>mode,<sp/>glewIsSupported<sp/>purposes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable<sp/>=<sp/>_glewGetExtensionEnable(ext);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enable)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*enable<sp/>=<sp/>GL_TRUE;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*extensions;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*end;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*i;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*j;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ext[128];</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>GLboolean<sp/>*enable;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>extensions<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>getString(GL_EXTENSIONS);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(extensions)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>extensions<sp/>+<sp/>_glewStrLen((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLubyte<sp/>*)<sp/>extensions);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=extensions;<sp/>i&lt;end;<sp/>i<sp/>=<sp/>j<sp/>+<sp/>1)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>_glewNextNonSpace(i);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>_glewNextSpace(i);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>extension<sp/>into<sp/>NUL<sp/>terminated<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j-i<sp/>&gt;=<sp/>(ptrdiff_t)<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ext))</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_glewStrCopy(ext,<sp/>i,<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Based<sp/>on<sp/>extension<sp/>string(s),<sp/>glewGetExtension<sp/>purposes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable<sp/>=<sp/>_glewGetExtensionString(ext);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enable)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*enable<sp/>=<sp/>GL_TRUE;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Based<sp/>on<sp/>extension<sp/>string(s),<sp/>experimental<sp/>mode,<sp/>glewIsSupported<sp/>purposes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable<sp/>=<sp/>_glewGetExtensionEnable(ext);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enable)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*enable<sp/>=<sp/>GL_TRUE;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glew/auto/src/glew_init_gl.c"/>
  </compounddef>
</doxygen>
