<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="spdlog_2_r_e_a_d_m_e_8md" kind="file" language="Markdown">
    <compoundname>README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>spdlog</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Very<sp/>fast,<sp/>header-only/compiled,<sp/>C++<sp/>logging<sp/>library.<sp/>[![Build<sp/>Status](https://app.travis-ci.com/gabime/spdlog.svg?branch=v1.x)](https://app.travis-ci.com/gabime/spdlog)&amp;nbsp;<sp/>[![Build<sp/>status](https://ci.appveyor.com/api/projects/status/d2jnxclg20vd0o50?svg=true&amp;branch=v1.x)](https://ci.appveyor.com/project/gabime/spdlog)<sp/>[![Release](https://img.shields.io/github/release/gabime/spdlog.svg)](https://github.com/gabime/spdlog/releases/latest)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Install<sp/></highlight></codeline>
<codeline><highlight class="normal">####<sp/>Header<sp/>only<sp/>version</highlight></codeline>
<codeline><highlight class="normal">Copy<sp/>the<sp/>include<sp/>[folder](https://github.com/gabime/spdlog/tree/v1.x/include/spdlog)<sp/>to<sp/>your<sp/>build<sp/>tree<sp/>and<sp/>use<sp/>a<sp/>C++11<sp/>compiler.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Static<sp/>lib<sp/>version<sp/>(recommended<sp/>-<sp/>much<sp/>faster<sp/>compile<sp/>times)</highlight></codeline>
<codeline><highlight class="normal">```console</highlight></codeline>
<codeline><highlight class="normal">$<sp/>git<sp/>clone<sp/>https://github.com/gabime/spdlog.git</highlight></codeline>
<codeline><highlight class="normal">$<sp/>cd<sp/>spdlog<sp/>&amp;&amp;<sp/>mkdir<sp/>build<sp/>&amp;&amp;<sp/>cd<sp/>build</highlight></codeline>
<codeline><highlight class="normal">$<sp/>cmake<sp/>..<sp/>&amp;&amp;<sp/>make<sp/>-j</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>see<sp/>example<sp/>[CMakeLists.txt](https://github.com/gabime/spdlog/blob/v1.x/example/CMakeLists.txt)<sp/>on<sp/>how<sp/>to<sp/>use.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Platforms</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Linux,<sp/>FreeBSD,<sp/>OpenBSD,<sp/>Solaris,<sp/>AIX</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Windows<sp/>(msvc<sp/>2013+,<sp/>cygwin)</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>macOS<sp/>(clang<sp/>3.5+)</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Android</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Package<sp/>managers:</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Debian:<sp/>`sudo<sp/>apt<sp/>install<sp/>libspdlog-dev`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Homebrew:<sp/>`brew<sp/>install<sp/>spdlog`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>MacPorts:<sp/>`sudo<sp/>port<sp/>install<sp/>spdlog`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>FreeBSD:<sp/><sp/>`pkg<sp/>install<sp/>spdlog`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Fedora:<sp/>`dnf<sp/>install<sp/>spdlog`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Gentoo:<sp/>`emerge<sp/>dev-libs/spdlog`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Arch<sp/>Linux:<sp/>`pacman<sp/>-S<sp/>spdlog`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>vcpkg:<sp/>`vcpkg<sp/>install<sp/>spdlog`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>conan:<sp/>`spdlog/[&gt;=1.4.1]`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>conda:<sp/>`conda<sp/>install<sp/>-c<sp/>conda-forge<sp/>spdlog`</highlight></codeline>
<codeline><highlight class="normal">*<sp/>build2:<sp/>```depends:<sp/>spdlog<sp/>^1.8.2```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Features</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Very<sp/>fast<sp/>(see<sp/>[benchmarks](#benchmarks)<sp/>below).</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Headers<sp/>only<sp/>or<sp/>compiled</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Feature<sp/>rich<sp/>formatting,<sp/>using<sp/>the<sp/>excellent<sp/>[fmt](https://github.com/fmtlib/fmt)<sp/>library.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Asynchronous<sp/>mode<sp/>(optional)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>[Custom](https://github.com/gabime/spdlog/wiki/3.-Custom-formatting)<sp/>formatting.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Multi/Single<sp/>threaded<sp/>loggers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Various<sp/>log<sp/>targets:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*<sp/>Rotating<sp/>log<sp/>files.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*<sp/>Daily<sp/>log<sp/>files.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*<sp/>Console<sp/>logging<sp/>(colors<sp/>supported).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*<sp/>syslog.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*<sp/>Windows<sp/>event<sp/>log.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*<sp/>Windows<sp/>debugger<sp/>(```OutputDebugString(..)```).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*<sp/>Easily<sp/>[extendable](https://github.com/gabime/spdlog/wiki/4.-Sinks#implementing-your-own-sink)<sp/>with<sp/>custom<sp/>log<sp/>targets.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Log<sp/>filtering<sp/>-<sp/>log<sp/>levels<sp/>can<sp/>be<sp/>modified<sp/>in<sp/>runtime<sp/>as<sp/>well<sp/>as<sp/>in<sp/>compile<sp/>time.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Support<sp/>for<sp/>loading<sp/>log<sp/>levels<sp/>from<sp/>argv<sp/>or<sp/>from<sp/>environment<sp/>var.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>[Backtrace](#backtrace-support)<sp/>support<sp/>-<sp/>store<sp/>debug<sp/>messages<sp/>in<sp/>a<sp/>ring<sp/>buffer<sp/>and<sp/>display<sp/>later<sp/>on<sp/>demand.</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal">##<sp/>Usage<sp/>samples</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Basic<sp/>usage</highlight></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;spdlog/spdlog.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int<sp/>main()<sp/></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::info(&quot;Welcome<sp/>to<sp/>spdlog!&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::error(&quot;Some<sp/>error<sp/>message<sp/>with<sp/>arg:<sp/>{}&quot;,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::warn(&quot;Easy<sp/>padding<sp/>in<sp/>numbers<sp/>like<sp/>{:08d}&quot;,<sp/>12);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::critical(&quot;Support<sp/>for<sp/>int:<sp/>{0:d};<sp/><sp/>hex:<sp/>{0:x};<sp/><sp/>oct:<sp/>{0:o};<sp/>bin:<sp/>{0:b}&quot;,<sp/>42);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::info(&quot;Support<sp/>for<sp/>floats<sp/>{:03.2f}&quot;,<sp/>1.23456);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::info(&quot;Positional<sp/>args<sp/>are<sp/>{1}<sp/>{0}..&quot;,<sp/>&quot;too&quot;,<sp/>&quot;supported&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::info(&quot;{:&lt;30}&quot;,<sp/>&quot;left<sp/>aligned&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::set_level(spdlog::level::debug);<sp/>//<sp/>Set<sp/>global<sp/>log<sp/>level<sp/>to<sp/>debug</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::debug(&quot;This<sp/>message<sp/>should<sp/>be<sp/>displayed..&quot;);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>change<sp/>log<sp/>pattern</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::set_pattern(&quot;[%H:%M:%S<sp/>%z]<sp/>[%n]<sp/>[%^---%L---%$]<sp/>[thread<sp/>%t]<sp/>%v&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Compile<sp/>time<sp/>log<sp/>levels</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>define<sp/>SPDLOG_ACTIVE_LEVEL<sp/>to<sp/>desired<sp/>level</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SPDLOG_TRACE(&quot;Some<sp/>trace<sp/>message<sp/>with<sp/>param<sp/>{}&quot;,<sp/>42);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SPDLOG_DEBUG(&quot;Some<sp/>debug<sp/>message&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline><highlight class="normal">####<sp/>Create<sp/>stdout/stderr<sp/>logger<sp/>object</highlight></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;spdlog/spdlog.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;spdlog/sinks/stdout_color_sinks.h&quot;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>stdout_example()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>create<sp/>color<sp/>multi<sp/>threaded<sp/>logger</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>console<sp/>=<sp/>spdlog::stdout_color_mt(&quot;console&quot;);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>err_logger<sp/>=<sp/>spdlog::stderr_color_mt(&quot;stderr&quot;);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::get(&quot;console&quot;)-&gt;info(&quot;loggers<sp/>can<sp/>be<sp/>retrieved<sp/>from<sp/>a<sp/>global<sp/>registry<sp/>using<sp/>the<sp/>spdlog::get(logger_name)&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline><highlight class="normal">####<sp/>Basic<sp/>file<sp/>logger</highlight></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;spdlog/sinks/basic_file_sink.h&quot;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>basic_logfile_example()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>try<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>logger<sp/>=<sp/>spdlog::basic_logger_mt(&quot;basic_logger&quot;,<sp/>&quot;logs/basic-log.txt&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>catch<sp/>(const<sp/>spdlog::spdlog_ex<sp/>&amp;ex)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Log<sp/>init<sp/>failed:<sp/>&quot;<sp/>&lt;&lt;<sp/>ex.what()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline><highlight class="normal">####<sp/>Rotating<sp/>files</highlight></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;spdlog/sinks/rotating_file_sink.h&quot;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>rotating_example()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Create<sp/>a<sp/>file<sp/>rotating<sp/>logger<sp/>with<sp/>5mb<sp/>size<sp/>max<sp/>and<sp/>3<sp/>rotated<sp/>files</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>max_size<sp/>=<sp/>1048576<sp/>*<sp/>5;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>max_files<sp/>=<sp/>3;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>logger<sp/>=<sp/>spdlog::rotating_logger_mt(&quot;some_logger_name&quot;,<sp/>&quot;logs/rotating.txt&quot;,<sp/>max_size,<sp/>max_files);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline><highlight class="normal">####<sp/>Daily<sp/>files</highlight></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;spdlog/sinks/daily_file_sink.h&quot;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>daily_example()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Create<sp/>a<sp/>daily<sp/>logger<sp/>-<sp/>a<sp/>new<sp/>file<sp/>is<sp/>created<sp/>every<sp/>day<sp/>on<sp/>2:30am</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>logger<sp/>=<sp/>spdlog::daily_logger_mt(&quot;daily_logger&quot;,<sp/>&quot;logs/daily.txt&quot;,<sp/>2,<sp/>30);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline><highlight class="normal">####<sp/>Backtrace<sp/>support</highlight></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Debug<sp/>messages<sp/>can<sp/>be<sp/>stored<sp/>in<sp/>a<sp/>ring<sp/>buffer<sp/>instead<sp/>of<sp/>being<sp/>logged<sp/>immediately.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>This<sp/>is<sp/>useful<sp/>in<sp/>order<sp/>to<sp/>display<sp/>debug<sp/>logs<sp/>only<sp/>when<sp/>really<sp/>needed<sp/>(e.g.<sp/>when<sp/>error<sp/>happens).</highlight></codeline>
<codeline><highlight class="normal">//<sp/>When<sp/>needed,<sp/>call<sp/>dump_backtrace()<sp/>to<sp/>see<sp/>them.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">spdlog::enable_backtrace(32);<sp/>//<sp/>Store<sp/>the<sp/>latest<sp/>32<sp/>messages<sp/>in<sp/>a<sp/>buffer.<sp/>Older<sp/>messages<sp/>will<sp/>be<sp/>dropped.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>or<sp/>my_logger-&gt;enable_backtrace(32)..</highlight></codeline>
<codeline><highlight class="normal">for(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>100;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>spdlog::debug(&quot;Backtrace<sp/>message<sp/>{}&quot;,<sp/>i);<sp/>//<sp/>not<sp/>logged<sp/>yet..</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">//<sp/>e.g.<sp/>if<sp/>some<sp/>error<sp/>happened:</highlight></codeline>
<codeline><highlight class="normal">spdlog::dump_backtrace();<sp/>//<sp/>log<sp/>them<sp/>now!<sp/>show<sp/>the<sp/>last<sp/>32<sp/>messages</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>or<sp/>my_logger-&gt;dump_backtrace(32)..</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline><highlight class="normal">####<sp/>Periodic<sp/>flush</highlight></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">//<sp/>periodically<sp/>flush<sp/>all<sp/>*registered*<sp/>loggers<sp/>every<sp/>3<sp/>seconds:</highlight></codeline>
<codeline><highlight class="normal">//<sp/>warning:<sp/>only<sp/>use<sp/>if<sp/>all<sp/>your<sp/>loggers<sp/>are<sp/>thread<sp/>safe<sp/>(&quot;_mt&quot;<sp/>loggers)</highlight></codeline>
<codeline><highlight class="normal">spdlog::flush_every(std::chrono::seconds(3));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline><highlight class="normal">####<sp/>Stopwatch</highlight></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Stopwatch<sp/>support<sp/>for<sp/>spdlog</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;spdlog/stopwatch.h&quot;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>stopwatch_example()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::stopwatch<sp/>sw;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::debug(&quot;Elapsed<sp/>{}&quot;,<sp/>sw);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::debug(&quot;Elapsed<sp/>{:.3}&quot;,<sp/>sw);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline><highlight class="normal">####<sp/>Log<sp/>binary<sp/>data<sp/>in<sp/>hex</highlight></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">//<sp/>many<sp/>types<sp/>of<sp/>std::container&lt;char&gt;<sp/>types<sp/>can<sp/>be<sp/>used.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>ranges<sp/>are<sp/>supported<sp/>too.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>format<sp/>flags:</highlight></codeline>
<codeline><highlight class="normal">//<sp/>{:X}<sp/>-<sp/>print<sp/>in<sp/>uppercase.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>{:s}<sp/>-<sp/>don&apos;t<sp/>separate<sp/>each<sp/>byte<sp/>with<sp/>space.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>{:p}<sp/>-<sp/>don&apos;t<sp/>print<sp/>the<sp/>position<sp/>on<sp/>each<sp/>line<sp/>start.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>{:n}<sp/>-<sp/>don&apos;t<sp/>split<sp/>the<sp/>output<sp/>to<sp/>lines.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>{:a}<sp/>-<sp/>show<sp/>ASCII<sp/>if<sp/>:n<sp/>is<sp/>not<sp/>set.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;spdlog/fmt/bin_to_hex.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>binary_example()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>console<sp/>=<sp/>spdlog::get(&quot;console&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;char,<sp/>80&gt;<sp/>buf;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>console-&gt;info(&quot;Binary<sp/>example:<sp/>{}&quot;,<sp/>spdlog::to_hex(buf));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>console-&gt;info(&quot;Another<sp/>binary<sp/>example:{:n}&quot;,<sp/>spdlog::to_hex(std::begin(buf),<sp/>std::begin(buf)<sp/>+<sp/>10));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>more<sp/>examples:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>logger-&gt;info(&quot;uppercase:<sp/>{:X}&quot;,<sp/>spdlog::to_hex(buf));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>logger-&gt;info(&quot;uppercase,<sp/>no<sp/>delimiters:<sp/>{:Xs}&quot;,<sp/>spdlog::to_hex(buf));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>logger-&gt;info(&quot;uppercase,<sp/>no<sp/>delimiters,<sp/>no<sp/>position<sp/>info:<sp/>{:Xsp}&quot;,<sp/>spdlog::to_hex(buf));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline><highlight class="normal">####<sp/>Logger<sp/>with<sp/>multi<sp/>sinks<sp/>-<sp/>each<sp/>with<sp/>different<sp/>format<sp/>and<sp/>log<sp/>level</highlight></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>create<sp/>logger<sp/>with<sp/>2<sp/>targets<sp/>with<sp/>different<sp/>log<sp/>levels<sp/>and<sp/>formats.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>the<sp/>console<sp/>will<sp/>show<sp/>only<sp/>warnings<sp/>or<sp/>errors,<sp/>while<sp/>the<sp/>file<sp/>will<sp/>log<sp/>all.</highlight></codeline>
<codeline><highlight class="normal">void<sp/>multi_sink_example()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>console_sink<sp/>=<sp/>std::make_shared&lt;spdlog::sinks::stdout_color_sink_mt&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>console_sink-&gt;set_level(spdlog::level::warn);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>console_sink-&gt;set_pattern(&quot;[multi_sink_example]<sp/>[%^%l%$]<sp/>%v&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>file_sink<sp/>=<sp/>std::make_shared&lt;spdlog::sinks::basic_file_sink_mt&gt;(&quot;logs/multisink.txt&quot;,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>file_sink-&gt;set_level(spdlog::level::trace);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::logger<sp/>logger(&quot;multi_sink&quot;,<sp/>{console_sink,<sp/>file_sink});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>logger.set_level(spdlog::level::debug);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>logger.warn(&quot;this<sp/>should<sp/>appear<sp/>in<sp/>both<sp/>console<sp/>and<sp/>file&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>logger.info(&quot;this<sp/>message<sp/>should<sp/>not<sp/>appear<sp/>in<sp/>the<sp/>console,<sp/>only<sp/>in<sp/>the<sp/>file&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline><highlight class="normal">####<sp/>Asynchronous<sp/>logging</highlight></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;spdlog/async.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;spdlog/sinks/basic_file_sink.h&quot;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>async_example()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>default<sp/>thread<sp/>pool<sp/>settings<sp/>can<sp/>be<sp/>modified<sp/>*before*<sp/>creating<sp/>the<sp/>async<sp/>logger:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>spdlog::init_thread_pool(8192,<sp/>1);<sp/>//<sp/>queue<sp/>with<sp/>8k<sp/>items<sp/>and<sp/>1<sp/>backing<sp/>thread.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>async_file<sp/>=<sp/>spdlog::basic_logger_mt&lt;spdlog::async_factory&gt;(&quot;async_file_logger&quot;,<sp/>&quot;logs/async_log.txt&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>alternatively:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>auto<sp/>async_file<sp/>=<sp/>spdlog::create_async&lt;spdlog::sinks::basic_file_sink_mt&gt;(&quot;async_file_logger&quot;,<sp/>&quot;logs/async_log.txt&quot;);<sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline><highlight class="normal">####<sp/>Asynchronous<sp/>logger<sp/>with<sp/>multi<sp/>sinks<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;spdlog/sinks/stdout_color_sinks.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;spdlog/sinks/rotating_file_sink.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>multi_sink_example2()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::init_thread_pool(8192,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>stdout_sink<sp/>=<sp/>std::make_shared&lt;spdlog::sinks::stdout_color_sink_mt<sp/>&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>rotating_sink<sp/>=<sp/>std::make_shared&lt;spdlog::sinks::rotating_file_sink_mt&gt;(&quot;mylog.txt&quot;,<sp/>1024*1024*10,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;spdlog::sink_ptr&gt;<sp/>sinks<sp/>{stdout_sink,<sp/>rotating_sink};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>logger<sp/>=<sp/>std::make_shared&lt;spdlog::async_logger&gt;(&quot;loggername&quot;,<sp/>sinks.begin(),<sp/>sinks.end(),<sp/>spdlog::thread_pool(),<sp/>spdlog::async_overflow_policy::block);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::register_logger(logger);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline><highlight class="normal">####<sp/>User<sp/>defined<sp/>types</highlight></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">//<sp/>user<sp/>defined<sp/>types<sp/>logging<sp/>by<sp/>implementing<sp/>operator&lt;&lt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;spdlog/fmt/ostr.h&quot;<sp/>//<sp/>must<sp/>be<sp/>included</highlight></codeline>
<codeline><highlight class="normal">struct<sp/>my_type</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>OStream&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>friend<sp/>OStream<sp/>&amp;operator&lt;&lt;(OStream<sp/>&amp;os,<sp/>const<sp/>my_type<sp/>&amp;c)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>os<sp/>&lt;&lt;<sp/>&quot;[my_type<sp/>i=&quot;<sp/>&lt;&lt;<sp/>c.i<sp/>&lt;&lt;<sp/>&quot;]&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>user_defined_example()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::get(&quot;console&quot;)-&gt;info(&quot;user<sp/>defined<sp/>type:<sp/>{}&quot;,<sp/>my_type{14});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline><highlight class="normal">####<sp/>User<sp/>defined<sp/>flags<sp/>in<sp/>the<sp/>log<sp/>pattern</highlight></codeline>
<codeline><highlight class="normal">```c++<sp/></highlight></codeline>
<codeline><highlight class="normal">//<sp/>Log<sp/>patterns<sp/>can<sp/>contain<sp/>custom<sp/>flags.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>the<sp/>following<sp/>example<sp/>will<sp/>add<sp/>new<sp/>flag<sp/>&apos;%*&apos;<sp/>-<sp/>which<sp/>will<sp/>be<sp/>bound<sp/>to<sp/>a<sp/>&lt;my_formatter_flag&gt;<sp/>instance.</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;spdlog/pattern_formatter.h&quot;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>my_formatter_flag<sp/>:<sp/>public<sp/>spdlog::custom_flag_formatter</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal">public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>format(const<sp/>spdlog::details::log_msg<sp/>&amp;,<sp/>const<sp/>std::tm<sp/>&amp;,<sp/>spdlog::memory_buf_t<sp/>&amp;dest)<sp/>override</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>some_txt<sp/>=<sp/>&quot;custom-flag&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest.append(some_txt.data(),<sp/>some_txt.data()<sp/>+<sp/>some_txt.size());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;custom_flag_formatter&gt;<sp/>clone()<sp/>const<sp/>override</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>spdlog::details::make_unique&lt;my_formatter_flag&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>custom_flags_example()</highlight></codeline>
<codeline><highlight class="normal">{<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>formatter<sp/>=<sp/>std::make_unique&lt;spdlog::pattern_formatter&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>formatter-&gt;add_flag&lt;my_formatter_flag&gt;(&apos;*&apos;).set_pattern(&quot;[%n]<sp/>[%*]<sp/>[%^%l%$]<sp/>%v&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::set_formatter(std::move(formatter));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline><highlight class="normal">####<sp/>Custom<sp/>error<sp/>handler</highlight></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">void<sp/>err_handler_example()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>can<sp/>be<sp/>set<sp/>globally<sp/>or<sp/>per<sp/>logger(logger-&gt;set_error_handler(..))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::set_error_handler([](const<sp/>std::string<sp/>&amp;msg)<sp/>{<sp/>spdlog::get(&quot;console&quot;)-&gt;error(&quot;***<sp/>LOGGER<sp/>ERROR<sp/>***:<sp/>{}&quot;,<sp/>msg);<sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::get(&quot;console&quot;)-&gt;info(&quot;some<sp/>invalid<sp/>message<sp/>to<sp/>trigger<sp/>an<sp/>error<sp/>{}{}{}{}&quot;,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline><highlight class="normal">####<sp/>syslog<sp/></highlight></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;spdlog/sinks/syslog_sink.h&quot;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>syslog_example()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>ident<sp/>=<sp/>&quot;spdlog-example&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>syslog_logger<sp/>=<sp/>spdlog::syslog_logger_mt(&quot;syslog&quot;,<sp/>ident,<sp/>LOG_PID);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>syslog_logger-&gt;warn(&quot;This<sp/>is<sp/>warning<sp/>that<sp/>will<sp/>end<sp/>up<sp/>in<sp/>syslog.&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline><highlight class="normal">####<sp/>Android<sp/>example<sp/></highlight></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;spdlog/sinks/android_sink.h&quot;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>android_example()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>tag<sp/>=<sp/>&quot;spdlog-android&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>android_logger<sp/>=<sp/>spdlog::android_logger_mt(&quot;android&quot;,<sp/>tag);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>android_logger-&gt;critical(&quot;Use<sp/>\&quot;adb<sp/>shell<sp/>logcat\&quot;<sp/>to<sp/>view<sp/>this<sp/>message.&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline><highlight class="normal">####<sp/>Load<sp/>log<sp/>levels<sp/>from<sp/>env<sp/>variable<sp/>or<sp/>from<sp/>argv</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;spdlog/cfg/env.h&quot;</highlight></codeline>
<codeline><highlight class="normal">int<sp/>main<sp/>(int<sp/>argc,<sp/>char<sp/>*argv[])</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::cfg::load_env_levels();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>or<sp/>from<sp/>command<sp/>line:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>./example<sp/>SPDLOG_LEVEL=info,mylogger=trace</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>#include<sp/>&quot;spdlog/cfg/argv.h&quot;<sp/>//<sp/>for<sp/>loading<sp/>levels<sp/>from<sp/>argv</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>spdlog::cfg::load_argv_levels(argc,<sp/>argv);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">So<sp/>then<sp/>you<sp/>can:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```console</highlight></codeline>
<codeline><highlight class="normal">$<sp/>export<sp/>SPDLOG_LEVEL=info,mylogger=trace</highlight></codeline>
<codeline><highlight class="normal">$<sp/>./example</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline><highlight class="normal">####<sp/>Log<sp/>file<sp/>open/close<sp/>event<sp/>handlers</highlight></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">//<sp/>You<sp/>can<sp/>get<sp/>callbacks<sp/>from<sp/>spdlog<sp/>before/after<sp/>log<sp/>file<sp/>has<sp/>been<sp/>opened<sp/>or<sp/>closed.<sp/></highlight></codeline>
<codeline><highlight class="normal">//<sp/>This<sp/>is<sp/>useful<sp/>for<sp/>cleanup<sp/>procedures<sp/>or<sp/>for<sp/>adding<sp/>someting<sp/>the<sp/>start/end<sp/>of<sp/>the<sp/>log<sp/>files.</highlight></codeline>
<codeline><highlight class="normal">void<sp/>file_events_example()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>pass<sp/>the<sp/>spdlog::file_event_handlers<sp/>to<sp/>file<sp/>sinks<sp/>for<sp/>open/close<sp/>log<sp/>file<sp/>notifications</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::file_event_handlers<sp/>handlers;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>handlers.before_open<sp/>=<sp/>[](spdlog::filename_t<sp/>filename)<sp/>{<sp/>spdlog::info(&quot;Before<sp/>opening<sp/>{}&quot;,<sp/>filename);<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>handlers.after_open<sp/>=<sp/>[](spdlog::filename_t<sp/>filename,<sp/>std::FILE<sp/>*fstream)<sp/>{<sp/>fputs(&quot;After<sp/>opening\n&quot;,<sp/>fstream);<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>handlers.before_close<sp/>=<sp/>[](spdlog::filename_t<sp/>filename,<sp/>std::FILE<sp/>*fstream)<sp/>{<sp/>fputs(&quot;Before<sp/>closing\n&quot;,<sp/>fstream);<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>handlers.after_close<sp/>=<sp/>[](spdlog::filename_t<sp/>filename)<sp/>{<sp/>spdlog::info(&quot;After<sp/>closing<sp/>{}&quot;,<sp/>filename);<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>my_logger<sp/>=<sp/>spdlog::basic_logger_st(&quot;some_logger&quot;,<sp/>&quot;logs/events-sample.txt&quot;,<sp/>true,<sp/>handlers);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline><highlight class="normal">####<sp/>Replace<sp/>the<sp/>Default<sp/>Logger</highlight></codeline>
<codeline><highlight class="normal">```c++</highlight></codeline>
<codeline><highlight class="normal">void<sp/>replace_default_logger_example()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>new_logger<sp/>=<sp/>spdlog::basic_logger_mt(&quot;new_default_logger&quot;,<sp/>&quot;logs/new-default-log.txt&quot;,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::set_default_logger(new_logger);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::info(&quot;new<sp/>logger<sp/>log<sp/>message&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline><highlight class="normal">##<sp/>Benchmarks</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Below<sp/>are<sp/>some<sp/>[benchmarks](https://github.com/gabime/spdlog/blob/v1.x/bench/bench.cpp)<sp/>done<sp/>in<sp/>Ubuntu<sp/>64<sp/>bit,<sp/>Intel<sp/>i7-4770<sp/>CPU<sp/>@<sp/>3.40GHz</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Synchronous<sp/>mode</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>**************************************************************</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>Single<sp/>thread,<sp/>1,000,000<sp/>iterations</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>**************************************************************</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>basic_st<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Elapsed:<sp/>0.17<sp/>secs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5,777,626/sec</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>rotating_st<sp/><sp/><sp/><sp/><sp/><sp/>Elapsed:<sp/>0.18<sp/>secs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5,475,894/sec</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>daily_st<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Elapsed:<sp/>0.20<sp/>secs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5,062,659/sec</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>empty_logger<sp/><sp/><sp/><sp/><sp/>Elapsed:<sp/>0.07<sp/>secs<sp/><sp/><sp/><sp/><sp/><sp/><sp/>14,127,300/sec</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>**************************************************************</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>C-string<sp/>(400<sp/>bytes).<sp/>Single<sp/>thread,<sp/>1,000,000<sp/>iterations</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>**************************************************************</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>basic_st<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Elapsed:<sp/>0.41<sp/>secs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2,412,483/sec</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>rotating_st<sp/><sp/><sp/><sp/><sp/><sp/>Elapsed:<sp/>0.72<sp/>secs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,389,196/sec</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>daily_st<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Elapsed:<sp/>0.42<sp/>secs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2,393,298/sec</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>null_st<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Elapsed:<sp/>0.04<sp/>secs<sp/><sp/><sp/><sp/><sp/><sp/><sp/>27,446,957/sec</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>**************************************************************</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>10<sp/>threads,<sp/>competing<sp/>over<sp/>the<sp/>same<sp/>logger<sp/>object,<sp/>1,000,000<sp/>iterations</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>**************************************************************</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>basic_mt<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Elapsed:<sp/>0.60<sp/>secs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,659,613/sec</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>rotating_mt<sp/><sp/><sp/><sp/><sp/><sp/>Elapsed:<sp/>0.62<sp/>secs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,612,493/sec</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>daily_mt<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Elapsed:<sp/>0.61<sp/>secs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,638,305/sec</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>null_mt<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Elapsed:<sp/>0.16<sp/>secs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>6,272,758/sec</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">####<sp/>Asynchronous<sp/>mode</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>-------------------------------------------------</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>Messages<sp/><sp/><sp/><sp/><sp/>:<sp/>1,000,000</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>Threads<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>10</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>Queue<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>8,192<sp/>slots</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>Queue<sp/>memory<sp/>:<sp/>8,192<sp/>x<sp/>272<sp/>=<sp/>2,176<sp/>KB<sp/></highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>-------------------------------------------------</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/></highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>*********************************</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>Queue<sp/>Overflow<sp/>Policy:<sp/>block</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>*********************************</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>Elapsed:<sp/>1.70784<sp/>secs<sp/><sp/><sp/><sp/><sp/>585,535/sec</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>Elapsed:<sp/>1.69805<sp/>secs<sp/><sp/><sp/><sp/><sp/>588,910/sec</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>Elapsed:<sp/>1.7026<sp/>secs<sp/><sp/><sp/><sp/><sp/><sp/>587,337/sec</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/></highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>*********************************</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>Queue<sp/>Overflow<sp/>Policy:<sp/>overrun</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>*********************************</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>Elapsed:<sp/>0.372816<sp/>secs<sp/><sp/><sp/><sp/>2,682,285/sec</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>Elapsed:<sp/>0.379758<sp/>secs<sp/><sp/><sp/><sp/>2,633,255/sec</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>Elapsed:<sp/>0.373532<sp/>secs<sp/><sp/><sp/><sp/>2,677,147/sec</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Documentation</highlight></codeline>
<codeline><highlight class="normal">Documentation<sp/>can<sp/>be<sp/>found<sp/>in<sp/>the<sp/>[wiki](https://github.com/gabime/spdlog/wiki/1.-QuickStart)<sp/>pages.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Thanks<sp/>to<sp/>[JetBrains](https://www.jetbrains.com/?from=spdlog)<sp/>for<sp/>donating<sp/>product<sp/>licenses<sp/>to<sp/>help<sp/>develop<sp/>**spdlog**<sp/>&lt;a<sp/>href=&quot;https://www.jetbrains.com/?from=spdlog&quot;&gt;&lt;img<sp/>src=&quot;logos/jetbrains-variant-4.svg&quot;<sp/>width=&quot;94&quot;<sp/>align=&quot;center&quot;<sp/>/&gt;&lt;/a&gt;</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/README.md"/>
  </compounddef>
</doxygen>
