<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="stb__image_8c" kind="file" language="C++">
    <compoundname>stb_image.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">memory.h</includes>
    <includes local="no">assert.h</includes>
    <includes local="no">stdarg.h</includes>
    <includes local="no">stddef.h</includes>
    <includes refid="stdint_8h" local="no">stdint.h</includes>
    <incdepgraph>
      <node id="10">
        <label>stdint.h</label>
        <link refid="stdint_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c</label>
        <link refid="stb__image_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>assert.h</label>
      </node>
      <node id="11">
        <label>limits.h</label>
      </node>
      <node id="3">
        <label>math.h</label>
      </node>
      <node id="6">
        <label>memory.h</label>
      </node>
      <node id="8">
        <label>stdarg.h</label>
      </node>
      <node id="9">
        <label>stddef.h</label>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
      <node id="5">
        <label>stdlib.h</label>
      </node>
      <node id="4">
        <label>string.h</label>
      </node>
      <node id="12">
        <label>wchar.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structstbi__io__callbacks" prot="public">stbi_io_callbacks</innerclass>
    <innerclass refid="structstbi" prot="public">stbi</innerclass>
    <innerclass refid="structhuffman" prot="public">huffman</innerclass>
    <innerclass refid="structjpeg" prot="public">jpeg</innerclass>
    <innerclass refid="structstbi__resample" prot="public">stbi_resample</innerclass>
    <innerclass refid="structzhuffman" prot="public">zhuffman</innerclass>
    <innerclass refid="structzbuf" prot="public">zbuf</innerclass>
    <innerclass refid="structchunk" prot="public">chunk</innerclass>
    <innerclass refid="structpng" prot="public">png</innerclass>
    <innerclass refid="structpic__packet__t" prot="public">pic_packet_t</innerclass>
    <innerclass refid="structstbi__gif__lzw__struct" prot="public">stbi_gif_lzw_struct</innerclass>
    <innerclass refid="structstbi__gif__struct" prot="public">stbi_gif_struct</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="stb__image_8c_1a065480d61391686cb4ea8a995b94f84a" prot="public" static="no">
        <name>STBI_INCLUDE_STB_IMAGE_H</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="68" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__image_8c_1aed6cd14a3bf678808c4c179e808866aa" prot="public" static="no">
        <name>STBI_VERSION</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="200" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__image_8c_1a952111e72ed4262552e413e5938089b8" prot="public" static="no">
        <name>stbi_inline</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="359" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__image_8c_1a3970ebac9a09e8116fa5855b334ca6ab" prot="public" static="no">
        <name>STBI_NOTUSED</name>
        <param><defname>v</defname></param>
        <initializer>(void)sizeof(v)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="387" column="10" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="387" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__image_8c_1a9fbddf96684d05016c5c72fc7d54f076" prot="public" static="no">
        <name>stbi_lrot</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>(((x) &lt;&lt; (y)) | ((x) &gt;&gt; (32 - (y))))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="397" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="397" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__image_8c_1a43133ab631c96e9096c7f34895c05ccc" prot="public" static="no">
        <name>e</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>e(x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="533" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="533" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__image_8c_1a6d4ec1e550488376c800b0fd015b61cb" prot="public" static="no">
        <name>epf</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>((float *) (e(x,y)?NULL:NULL))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="536" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="536" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__image_8c_1a561c4b95e46ce2bbb293646527b41b5c" prot="public" static="no">
        <name>epuc</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>((unsigned char *) (e(x,y)?NULL:NULL))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="537" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="537" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__image_8c_1adb2d77dae99f6d33dd9be33305186925" prot="public" static="no">
        <name>COMBO</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>((a)*8+(b))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="875" column="15"/>
      </memberdef>
      <memberdef kind="define" id="stb__image_8c_1a313e27a7a8b70c45c2a0b450454b880c" prot="public" static="no">
        <name>CASE</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>case COMBO(a,b): for(i=x-1; i &gt;= 0; --i, src += a, dest += b)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="876" column="15"/>
      </memberdef>
      <memberdef kind="define" id="stb__image_8c_1ab57b5a4c33f7a407498f93c6c3eb213b" prot="public" static="no">
        <name>float2int</name>
        <param><defname>x</defname></param>
        <initializer>((int) (x))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="919" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="919" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__image_8c_1add78822c51f4692289f2ce174bdf82b0" prot="public" static="no">
        <name>FAST_BITS</name>
        <initializer>9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="974" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="974" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__image_8c_1a9717131be1639d94ecfdc4792f6c2b3e" prot="public" static="no">
        <name>f2f</name>
        <param><defname>x</defname></param>
        <initializer>(int) (((x) * 4096 + 0.5))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1227" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__image_8c_1a375f901f1eb889847110ecafc6e9ea01" prot="public" static="no">
        <name>fsh</name>
        <param><defname>x</defname></param>
        <initializer>((x) &lt;&lt; 12)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1228" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__image_8c_1a53f514da1aad41b798186341dcca9d1e" prot="public" static="no">
        <name>IDCT_1D</name>
        <param><defname>s0</defname></param>
        <param><defname>s1</defname></param>
        <param><defname>s2</defname></param>
        <param><defname>s3</defname></param>
        <param><defname>s4</defname></param>
        <param><defname>s5</defname></param>
        <param><defname>s6</defname></param>
        <param><defname>s7</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1231" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__image_8c_1ab01514a0a369dc40bb53e2855521694a" prot="public" static="no">
        <name>MARKER_none</name>
        <initializer>0xff</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1345" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1345" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__image_8c_1a3743ff2eb7667f3a1a2cb411ad8203ec" prot="public" static="no">
        <name>RESTART</name>
        <param><defname>x</defname></param>
        <initializer>((x) &gt;= 0xd0 &amp;&amp; (x) &lt;= 0xd7)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1362" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__image_8c_1a5f0e72d88591aa28aa05cf900c6b2073" prot="public" static="no">
        <name>DNL</name>
        <param><defname>x</defname></param>
        <initializer>((x) == 0xdc)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1617" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1617" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__image_8c_1a96e825d5dcf3bf3f26b073c77032b96d" prot="public" static="no">
        <name>SOI</name>
        <param><defname>x</defname></param>
        <initializer>((x) == 0xd8)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1618" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1618" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__image_8c_1a7c42f53f185ee25bf95cd27297893c1f" prot="public" static="no">
        <name>EOI</name>
        <param><defname>x</defname></param>
        <initializer>((x) == 0xd9)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1619" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1619" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__image_8c_1a9f337463bc4bedeb9bc3e51db0ba0a56" prot="public" static="no">
        <name>SOF</name>
        <param><defname>x</defname></param>
        <initializer>((x) == 0xc0 || (x) == 0xc1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1620" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1620" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__image_8c_1acd317d0705293360e6837fc308e2752c" prot="public" static="no">
        <name>SOS</name>
        <param><defname>x</defname></param>
        <initializer>((x) == 0xda)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1621" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1621" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__image_8c_1ad4d47775eeedafd3d0baf604e928926e" prot="public" static="no">
        <name>div4</name>
        <param><defname>x</defname></param>
        <initializer>((stbi__uint8) ((x) &gt;&gt; 2))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1680" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1680" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__image_8c_1a7bca20397b32c16a40c69145763bb028" prot="public" static="no">
        <name>div16</name>
        <param><defname>x</defname></param>
        <initializer>((stbi__uint8) ((x) &gt;&gt; 4))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1729" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1729" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__image_8c_1a78857167af92ac9e8deb1f7fa7696a60" prot="public" static="no">
        <name>float2fixed</name>
        <param><defname>x</defname></param>
        <initializer>((int) ((x) * 65536 + 0.5))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1766" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1766" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__image_8c_1a37d8564ae0a820fb44b1a751c702e33a" prot="public" static="no">
        <name>ZFAST_BITS</name>
        <initializer>9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1975" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1975" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__image_8c_1a7d437afc1bf1ea5a0a2441f3c0aca1fb" prot="public" static="no">
        <name>ZFAST_MASK</name>
        <initializer>((1 &lt;&lt; ZFAST_BITS) - 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1976" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1976" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__image_8c_1acaff58a0e5160754a6b6afbefff148f9" prot="public" static="no">
        <name>PNG_TYPE</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <param><defname>c</defname></param>
        <param><defname>d</defname></param>
        <initializer>(((a) &lt;&lt; 24) + ((b) &lt;&lt; 16) + ((c) &lt;&lt; 8) + (d))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2418" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2418" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__image_8c_1ae3be5b5378ea8cef95140897f7270a09" prot="public" static="no">
        <name>CASE</name>
        <param><defname>f</defname></param>
        <initializer>             case f:     \
                for (i=x-1; i &gt;= 1; --i, raw+=img_n,cur+=img_n,prior+=img_n) \
                   for (k=0; k &lt; img_n; ++k)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2508" column="18"/>
      </memberdef>
      <memberdef kind="define" id="stb__image_8c_1ae3be5b5378ea8cef95140897f7270a09" prot="public" static="no">
        <name>CASE</name>
        <param><defname>f</defname></param>
        <initializer>             case f:     \
                for (i=x-1; i &gt;= 1; --i, cur[img_n]=255,raw+=img_n,cur+=out_n,prior+=out_n) \
                   for (k=0; k &lt; img_n; ++k)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2524" column="18"/>
      </memberdef>
      <memberdef kind="define" id="stb__image_8c_1a05382fb60839c0f242ac7f9f24d8adf0" prot="public" static="no">
        <name>HDR_BUFLEN</name>
        <initializer>1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="4207" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="4207" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="stb__image_8c_1aa7df87806f64f3b241c8cde9eb57cad5" prot="public" static="no" strong="no">
        <type></type>
        <name>@114</name>
        <enumvalue id="stb__image_8c_1aa7df87806f64f3b241c8cde9eb57cad5a0177ac2c5002f4f251bb766d41752029" prot="public">
          <name>STBI_default</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stb__image_8c_1aa7df87806f64f3b241c8cde9eb57cad5ad1eb95ca1fa7706bf732bf35a0ed40aa" prot="public">
          <name>STBI_grey</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stb__image_8c_1aa7df87806f64f3b241c8cde9eb57cad5af5829d16d4cca6077465c5abd346e2f8" prot="public">
          <name>STBI_grey_alpha</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stb__image_8c_1aa7df87806f64f3b241c8cde9eb57cad5aa59123e5d0af25f9b1539f5cf1facddf" prot="public">
          <name>STBI_rgb</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stb__image_8c_1aa7df87806f64f3b241c8cde9eb57cad5aa7b1af0c9f0310c3ada2aa29a32de293" prot="public">
          <name>STBI_rgb_alpha</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="202" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="203" bodyend="210"/>
      </memberdef>
      <memberdef kind="enum" id="stb__image_8c_1a2f1398dba5e4a5616b83437528bdb28e" prot="public" static="no" strong="no">
        <type></type>
        <name>@115</name>
        <enumvalue id="stb__image_8c_1a2f1398dba5e4a5616b83437528bdb28ea85a0b66d6fdde378fa20b491fdf24f8a" prot="public">
          <name>SCAN_load</name>
          <initializer>=0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stb__image_8c_1a2f1398dba5e4a5616b83437528bdb28eab156e11a1618eb1afb3e1482ff29675e" prot="public">
          <name>SCAN_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stb__image_8c_1a2f1398dba5e4a5616b83437528bdb28ea833170a40f969d501a1697ee49a48bfb" prot="public">
          <name>SCAN_header</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="729" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="730" bodyend="734"/>
      </memberdef>
      <memberdef kind="enum" id="stb__image_8c_1aeac2de18c0ed342a690b3e2ba3c52426" prot="public" static="no" strong="no">
        <type></type>
        <name>@116</name>
        <enumvalue id="stb__image_8c_1aeac2de18c0ed342a690b3e2ba3c52426a16f71f569e3f9321da21f1249e2773fd" prot="public">
          <name>F_none</name>
          <initializer>=0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stb__image_8c_1aeac2de18c0ed342a690b3e2ba3c52426afc14a072a264bba5ec906f64af96faeb" prot="public">
          <name>F_sub</name>
          <initializer>=1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stb__image_8c_1aeac2de18c0ed342a690b3e2ba3c52426aac432bb3d57c85f1f2c82019426cab42" prot="public">
          <name>F_up</name>
          <initializer>=2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stb__image_8c_1aeac2de18c0ed342a690b3e2ba3c52426a4f647a9352589e534a0d8a513d67d28e" prot="public">
          <name>F_avg</name>
          <initializer>=3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stb__image_8c_1aeac2de18c0ed342a690b3e2ba3c52426a048f016fa714cc5e0f6c41e35d10fa6d" prot="public">
          <name>F_paeth</name>
          <initializer>=4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stb__image_8c_1aeac2de18c0ed342a690b3e2ba3c52426a4de5672ef1ab76c920893203b67a6246" prot="public">
          <name>F_avg_first</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stb__image_8c_1aeac2de18c0ed342a690b3e2ba3c52426a7310c91cd24ab3f794937b630faf4afa" prot="public">
          <name>F_paeth_first</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2444" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2444" bodyend="2447"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="stb__image_8c_1a28eb51a1512ce382ee50f20e1d04d50d" prot="public" static="no">
        <type>unsigned char</type>
        <definition>typedef unsigned char stbi_uc</definition>
        <argsstring></argsstring>
        <name>stbi_uc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="212" column="23" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb__image_8c_1a5e7a39bc0f2f7bad5568c1f1c5aaf761" prot="public" static="no">
        <type>uint8_t</type>
        <definition>typedef uint8_t stbi__uint8</definition>
        <argsstring></argsstring>
        <name>stbi__uint8</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="374" column="18" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb__image_8c_1a38c41d822de912df31fb56df26a9cb8c" prot="public" static="no">
        <type>uint16_t</type>
        <definition>typedef uint16_t stbi__uint16</definition>
        <argsstring></argsstring>
        <name>stbi__uint16</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="375" column="18" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="375" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb__image_8c_1ae4cbd54705261d6f2d44b97ca536f14f" prot="public" static="no">
        <type>int16_t</type>
        <definition>typedef int16_t stbi__int16</definition>
        <argsstring></argsstring>
        <name>stbi__int16</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="376" column="18" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="376" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb__image_8c_1a9f4c7fe585bda3cc749e576bcf341d7e" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t stbi__uint32</definition>
        <argsstring></argsstring>
        <name>stbi__uint32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="377" column="18" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="377" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb__image_8c_1aa22ffdc0f962b06610737eaab3ac6b63" prot="public" static="no">
        <type>int32_t</type>
        <definition>typedef int32_t stbi__int32</definition>
        <argsstring></argsstring>
        <name>stbi__int32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="378" column="18" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="378" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb__image_8c_1a88d07433d887bfad2b4b8a302f47f240" prot="public" static="no">
        <type>unsigned char</type>
        <definition>typedef unsigned char validate_uint32[sizeof(stbi__uint32)==4 ? 1 :-1]</definition>
        <argsstring>[sizeof(stbi__uint32)==4 ? 1 :-1]</argsstring>
        <name>validate_uint32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="382" column="23" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="382" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb__image_8c_1afac632f65d3daa108ef4f2dd56fb5be7" prot="public" static="no">
        <type>stbi__uint8</type>
        <definition>typedef stbi__uint8 stbi_dequantize_t</definition>
        <argsstring></argsstring>
        <name>stbi_dequantize_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1271" column="21" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb__image_8c_1a0803db6ef716f99799e426b12f152968" prot="public" static="no">
        <type>stbi__uint8 *(*</type>
        <definition>typedef stbi__uint8 *(* resample_row_func) (stbi__uint8 *out, stbi__uint8 *in0, stbi__uint8 *in1, int w, int hs)</definition>
        <argsstring>)(stbi__uint8 *out, stbi__uint8 *in0, stbi__uint8 *in1, int w, int hs)</argsstring>
        <name>resample_row_func</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1677" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1677" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb__image_8c_1a5d3b24598f39d74a5d892af054523bfa" prot="public" static="no">
        <type>struct <ref refid="structstbi__gif__lzw__struct" kindref="compound">stbi_gif_lzw_struct</ref></type>
        <definition>typedef struct stbi_gif_lzw_struct stbi_gif_lzw</definition>
        <argsstring></argsstring>
        <name>stbi_gif_lzw</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="3850" column="14"/>
      </memberdef>
      <memberdef kind="typedef" id="stb__image_8c_1a594005b9b173118d19cac788ada77df9" prot="public" static="no">
        <type>struct <ref refid="structstbi__gif__struct" kindref="compound">stbi_gif_struct</ref></type>
        <definition>typedef struct stbi_gif_struct stbi_gif</definition>
        <argsstring></argsstring>
        <name>stbi_gif</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="3867" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="stb__image_8c_1ae3951133050828c0ae0b5efb1f71184b" prot="public" static="yes" mutable="no">
        <type><ref refid="structstbi__io__callbacks" kindref="compound">stbi_io_callbacks</ref></type>
        <definition>stbi_io_callbacks stbi_stdio_callbacks</definition>
        <argsstring></argsstring>
        <name>stbi_stdio_callbacks</name>
        <initializer>=
{
   stdio_read,
   stdio_skip,
   stdio_eof,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="462" column="26" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="462" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="stb__image_8c_1ae36f2d4da38cf48880191b3517a92b4b" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* failure_reason</definition>
        <argsstring></argsstring>
        <name>failure_reason</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="511" column="19" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="511" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="stb__image_8c_1abb9a0e42c577e3f87962cd88d21b794b" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float h2l_gamma_i</definition>
        <argsstring></argsstring>
        <name>h2l_gamma_i</name>
        <initializer>=1.0f/2.2f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="713" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="713" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="stb__image_8c_1a484c07f98a2dabab96ea183771278fa8" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float h2l_scale_i</definition>
        <argsstring></argsstring>
        <name>h2l_scale_i</name>
        <initializer>=1.0f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="713" column="26" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="713" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="stb__image_8c_1a50cd6ef02975ae3d9a040811e8dc5627" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float l2h_gamma</definition>
        <argsstring></argsstring>
        <name>l2h_gamma</name>
        <initializer>=2.2f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="714" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="714" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="stb__image_8c_1a2d6e7ea2a06c2378b058e60efc3d258e" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float l2h_scale</definition>
        <argsstring></argsstring>
        <name>l2h_scale</name>
        <initializer>=1.0f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="714" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="714" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="stb__image_8c_1a75d128ef1be85fd031e3e9aa81ba63d1" prot="public" static="yes" mutable="no">
        <type>stbi__uint32</type>
        <definition>stbi__uint32 bmask[17]</definition>
        <argsstring>[17]</argsstring>
        <name>bmask</name>
        <initializer>={0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1085" column="21" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1085" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="stb__image_8c_1a4be01630f6d84a451fc342ea0e7af0f6" prot="public" static="yes" mutable="no">
        <type>stbi__uint8</type>
        <definition>stbi__uint8 dezigzag[64+15]</definition>
        <argsstring>[64+15]</argsstring>
        <name>dezigzag</name>
        <initializer>=
{
    0,  1,  8, 16,  9,  2,  3, 10,
   17, 24, 32, 25, 18, 11,  4,  5,
   12, 19, 26, 33, 40, 48, 41, 34,
   27, 20, 13,  6,  7, 14, 21, 28,
   35, 42, 49, 56, 57, 50, 43, 36,
   29, 22, 15, 23, 30, 37, 44, 51,
   58, 59, 52, 45, 38, 31, 39, 46,
   53, 60, 61, 54, 47, 55, 62, 63,
   
   63, 63, 63, 63, 63, 63, 63, 63,
   63, 63, 63, 63, 63, 63, 63
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1166" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="stb__image_8c_1a345696ff6e63d840fcfd57c2323cbd60" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int length_base[31]</definition>
        <argsstring>[31]</argsstring>
        <name>length_base</name>
        <initializer>= {
   3,4,5,6,7,8,9,10,11,13,
   15,17,19,23,27,31,35,43,51,59,
   67,83,99,115,131,163,195,227,258,0,0 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2141" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="stb__image_8c_1afe48ca04fa824c8e0a1e0588c6ad2ffb" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int length_extra[31]</definition>
        <argsstring>[31]</argsstring>
        <name>length_extra</name>
        <initializer>= 
{ 0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2146" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="stb__image_8c_1ae39498122f87b1bcc066b38e571b72e9" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int dist_base[32]</definition>
        <argsstring>[32]</argsstring>
        <name>dist_base</name>
        <initializer>= { 1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,
257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2149" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="stb__image_8c_1a03056872a5eb8463df887aa7d533675a" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int dist_extra[32]</definition>
        <argsstring>[32]</argsstring>
        <name>dist_extra</name>
        <initializer>=
{ 0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2152" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="stb__image_8c_1ad5ecfa56ca304500a8b008e5c52e4007" prot="public" static="yes" mutable="no">
        <type>stbi__uint8</type>
        <definition>stbi__uint8 default_length[288]</definition>
        <argsstring>[288]</argsstring>
        <name>default_length</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2272" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="stb__image_8c_1a05fc681b3438649f0d444e42e8131827" prot="public" static="yes" mutable="no">
        <type>stbi__uint8</type>
        <definition>stbi__uint8 default_distance[32]</definition>
        <argsstring>[32]</argsstring>
        <name>default_distance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2272" column="35" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="stb__image_8c_1acec14b0fa02632f29efbe91f27ab5281" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int stbi_png_partial</definition>
        <argsstring></argsstring>
        <name>stbi_png_partial</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2284" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="stb__image_8c_1a5d98dd27f716f6a8889a66c7b6d15632" prot="public" static="yes" mutable="no">
        <type>stbi__uint8</type>
        <definition>stbi__uint8 first_row_filter[5]</definition>
        <argsstring>[5]</argsstring>
        <name>first_row_filter</name>
        <initializer>=
{
   F_none, F_sub, F_none, F_avg_first, F_paeth_first
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2449" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2449" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="stb__image_8c_1a1c9b491248c1c06279a227cc8ef7a174" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int stbi_unpremultiply_on_load</definition>
        <argsstring></argsstring>
        <name>stbi_unpremultiply_on_load</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2646" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2646" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="stb__image_8c_1a30a640cf807ddb4f6c6493e5751bf707" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int stbi_de_iphone_flag</definition>
        <argsstring></argsstring>
        <name>stbi_de_iphone_flag</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2647" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2647" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="stb__image_8c_1a2ed09e0346d59f575ebb17e1ed91cd6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi_uc *</type>
        <definition>unsigned char * stbi_load_from_memory</definition>
        <argsstring>(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)</argsstring>
        <name>stbi_load_from_memory</name>
        <param>
          <type>stbi_uc const *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>req_comp</declname>
        </param>
        <briefdescription>
<para>STBI_NO_STDIO. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="596" column="15" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="596" bodyend="601" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="227" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a6e3bfbdf11886669cd2153c1136f29db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi_uc *</type>
        <definition>unsigned char * stbi_load</definition>
        <argsstring>(char const *filename, int *x, int *y, int *comp, int req_comp)</argsstring>
        <name>stbi_load</name>
        <param>
          <type>char const *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>req_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="572" column="15" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="572" bodyend="580" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="230" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a1425e85e77b6ae1e630d9f5c6a764a3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi_uc *</type>
        <definition>unsigned char * stbi_load_from_file</definition>
        <argsstring>(FILE *f, int *x, int *y, int *comp, int req_comp)</argsstring>
        <name>stbi_load_from_file</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>req_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="582" column="15" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="582" bodyend="593" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="231" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a6096435d90834b7645f25ebd727928ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi_uc *</type>
        <definition>unsigned char * stbi_load_from_callbacks</definition>
        <argsstring>(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)</argsstring>
        <name>stbi_load_from_callbacks</name>
        <param>
          <type><ref refid="structstbi__io__callbacks" kindref="compound">stbi_io_callbacks</ref> const *</type>
          <declname>clbk</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>req_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="603" column="15" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="603" bodyend="608" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="242" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1aefa0aac08f604862a1bb8d8401602eca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float *</type>
        <definition>float * stbi_loadf_from_memory</definition>
        <argsstring>(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)</argsstring>
        <name>stbi_loadf_from_memory</name>
        <param>
          <type>stbi_uc const *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>req_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="625" column="7" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="625" bodyend="630" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="245" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a143179f0a8808a0de4eba5cb5da1ec56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float *</type>
        <definition>float * stbi_loadf</definition>
        <argsstring>(char const *filename, int *x, int *y, int *comp, int req_comp)</argsstring>
        <name>stbi_loadf</name>
        <param>
          <type>char const *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>req_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="640" column="7" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="640" bodyend="648" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="248" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a1aeca869b8b68db1a81d6c8a5cc77e2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float *</type>
        <definition>float * stbi_loadf_from_file</definition>
        <argsstring>(FILE *f, int *x, int *y, int *comp, int req_comp)</argsstring>
        <name>stbi_loadf_from_file</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>req_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="650" column="7" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="650" bodyend="655" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="249" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1ad9042d60dee30e533f742067abe29a79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float *</type>
        <definition>float * stbi_loadf_from_callbacks</definition>
        <argsstring>(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)</argsstring>
        <name>stbi_loadf_from_callbacks</name>
        <param>
          <type><ref refid="structstbi__io__callbacks" kindref="compound">stbi_io_callbacks</ref> const *</type>
          <declname>clbk</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>req_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="632" column="7" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="632" bodyend="637" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="252" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a981084e66668ed998832b84dad50bed7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stbi_hdr_to_ldr_gamma</definition>
        <argsstring>(float gamma)</argsstring>
        <name>stbi_hdr_to_ldr_gamma</name>
        <param>
          <type>float</type>
          <declname>gamma</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="716" column="8" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="716" bodyend="716" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="254" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a269aa666e5df1051c04f28479add324e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stbi_hdr_to_ldr_scale</definition>
        <argsstring>(float scale)</argsstring>
        <name>stbi_hdr_to_ldr_scale</name>
        <param>
          <type>float</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="717" column="8" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="717" bodyend="717" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="255" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a392b50c731d9969456006783e2a6f012" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stbi_ldr_to_hdr_gamma</definition>
        <argsstring>(float gamma)</argsstring>
        <name>stbi_ldr_to_hdr_gamma</name>
        <param>
          <type>float</type>
          <declname>gamma</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="719" column="8" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="719" bodyend="719" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="257" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a1457f71183493d5a6100ee6a9785e744" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stbi_ldr_to_hdr_scale</definition>
        <argsstring>(float scale)</argsstring>
        <name>stbi_ldr_to_hdr_scale</name>
        <param>
          <type>float</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="720" column="8" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="720" bodyend="720" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="258" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a894f9f42a78d83fa913bfa6190b5fb8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stbi_is_hdr_from_callbacks</definition>
        <argsstring>(stbi_io_callbacks const *clbk, void *user)</argsstring>
        <name>stbi_is_hdr_from_callbacks</name>
        <param>
          <type><ref refid="structstbi__io__callbacks" kindref="compound">stbi_io_callbacks</ref> const *</type>
          <declname>clbk</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="701" column="17" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="701" bodyend="710" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="262" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1acd0819e90be8de94e8841d7140d4262c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stbi_is_hdr_from_memory</definition>
        <argsstring>(stbi_uc const *buffer, int len)</argsstring>
        <name>stbi_is_hdr_from_memory</name>
        <param>
          <type>stbi_uc const *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="664" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="664" bodyend="675" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="263" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a828738812bd834ea9af464ce9826008a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stbi_is_hdr</definition>
        <argsstring>(char const *filename)</argsstring>
        <name>stbi_is_hdr</name>
        <param>
          <type>char const *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="678" column="17" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="678" bodyend="687" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="265" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a6b45e9af5f0b0f76cc33bcb5b08bb7d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stbi_is_hdr_from_file</definition>
        <argsstring>(FILE *f)</argsstring>
        <name>stbi_is_hdr_from_file</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="689" column="17" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="689" bodyend="698" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="266" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a69d3ed7ef9b520b8a42f75ef479e3ede" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * stbi_failure_reason</definition>
        <argsstring>(void)</argsstring>
        <name>stbi_failure_reason</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="513" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="513" bodyend="516" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="272" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1ad47e820c6695b0cf5cfb63a29f4452d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stbi_image_free</definition>
        <argsstring>(void *retval_from_stbi_load)</argsstring>
        <name>stbi_image_free</name>
        <param>
          <type>void *</type>
          <declname>retval_from_stbi_load</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="539" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="539" bodyend="542" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="275" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a8a876cda0f7ca91dcb0acb0206799ad7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stbi_info_from_memory</definition>
        <argsstring>(stbi_uc const *buffer, int len, int *x, int *y, int *comp)</argsstring>
        <name>stbi_info_from_memory</name>
        <param>
          <type>stbi_uc const *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="4564" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="4564" bodyend="4569" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="278" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1adda3645c29ab5a4cd7762e758687de06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stbi_info_from_callbacks</definition>
        <argsstring>(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp)</argsstring>
        <name>stbi_info_from_callbacks</name>
        <param>
          <type><ref refid="structstbi__io__callbacks" kindref="compound">stbi_io_callbacks</ref> const *</type>
          <declname>clbk</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="4571" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="4571" bodyend="4576" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="279" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1ac94b9565008cb24823826506f9e97def" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stbi_info</definition>
        <argsstring>(char const *filename, int *x, int *y, int *comp)</argsstring>
        <name>stbi_info</name>
        <param>
          <type>char const *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="4542" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="4542" bodyend="4550" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="282" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a5560f2807ab53f12ab062235b14f3a3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stbi_info_from_file</definition>
        <argsstring>(FILE *f, int *x, int *y, int *comp)</argsstring>
        <name>stbi_info_from_file</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="4552" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="4552" bodyend="4561" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="283" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1acce0a2f278f8e003648f9c76c149e42a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stbi_set_unpremultiply_on_load</definition>
        <argsstring>(int flag_true_if_should_unpremultiply)</argsstring>
        <name>stbi_set_unpremultiply_on_load</name>
        <param>
          <type>int</type>
          <declname>flag_true_if_should_unpremultiply</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2649" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2649" bodyend="2652" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="292" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1afbb4acd1b28fb72059bed9e6285a2961" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stbi_convert_iphone_png_to_rgb</definition>
        <argsstring>(int flag_true_if_should_convert)</argsstring>
        <name>stbi_convert_iphone_png_to_rgb</name>
        <param>
          <type>int</type>
          <declname>flag_true_if_should_convert</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2653" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2653" bodyend="2656" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="296" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1ad58a5fbe941f1cc170dba564f6d2bdc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * stbi_zlib_decode_malloc_guesssize</definition>
        <argsstring>(const char *buffer, int len, int initial_size, int *outlen)</argsstring>
        <name>stbi_zlib_decode_malloc_guesssize</name>
        <param>
          <type>const char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>initial_size</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>outlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2326" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2326" bodyend="2340" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="301" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a85453cb86c180f1478d4df4913078800" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * stbi_zlib_decode_malloc_guesssize_headerflag</definition>
        <argsstring>(const char *buffer, int len, int initial_size, int *outlen, int parse_header)</argsstring>
        <name>stbi_zlib_decode_malloc_guesssize_headerflag</name>
        <param>
          <type>const char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>initial_size</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>outlen</declname>
        </param>
        <param>
          <type>int</type>
          <declname>parse_header</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2347" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2347" bodyend="2361" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="302" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a22c3096e4a8005d1376003d62f59351e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * stbi_zlib_decode_malloc</definition>
        <argsstring>(const char *buffer, int len, int *outlen)</argsstring>
        <name>stbi_zlib_decode_malloc</name>
        <param>
          <type>const char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>outlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2342" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2342" bodyend="2345" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="303" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a5bb68fa61fe9bba85a1ed744e33599dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stbi_zlib_decode_buffer</definition>
        <argsstring>(char *obuffer, int olen, const char *ibuffer, int ilen)</argsstring>
        <name>stbi_zlib_decode_buffer</name>
        <param>
          <type>char *</type>
          <declname>obuffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>olen</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>ibuffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ilen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2363" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2363" bodyend="2372" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="304" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a9ac0a7b2514e7b6069bcb79ee21ebc06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * stbi_zlib_decode_noheader_malloc</definition>
        <argsstring>(const char *buffer, int len, int *outlen)</argsstring>
        <name>stbi_zlib_decode_noheader_malloc</name>
        <param>
          <type>const char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>outlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2374" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2374" bodyend="2388" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="306" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1af84d32350b9a983570a9b28204ee62f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stbi_zlib_decode_noheader_buffer</definition>
        <argsstring>(char *obuffer, int olen, const char *ibuffer, int ilen)</argsstring>
        <name>stbi_zlib_decode_noheader_buffer</name>
        <param>
          <type>char *</type>
          <declname>obuffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>olen</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>ibuffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ilen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2390" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2390" bodyend="2399" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="307" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1ace61fc7f5daabdb6dc0d60813346901a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void refill_buffer</definition>
        <argsstring>(stbi *s)</argsstring>
        <name>refill_buffer</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="736" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="736" bodyend="750" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="423" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a0099b5e9d3ed2da492379e882d58989c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void start_mem</definition>
        <argsstring>(stbi *s, stbi__uint8 const *buffer, int len)</argsstring>
        <name>start_mem</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>stbi__uint8 const *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="426" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="426" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a5b1b92f6b086a05bbfd6c0eeef39f51d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void start_callbacks</definition>
        <argsstring>(stbi *s, stbi_io_callbacks *c, void *user)</argsstring>
        <name>start_callbacks</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="structstbi__io__callbacks" kindref="compound">stbi_io_callbacks</ref> *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="435" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="435" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a538e487c494dbbe982b6ea1c31abc322" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int stdio_read</definition>
        <argsstring>(void *user, char *data, int size)</argsstring>
        <name>stdio_read</name>
        <param>
          <type>void *</type>
          <declname>user</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="447" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="447" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a9f44a7e0036c27daa11c823c991bfbaa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void stdio_skip</definition>
        <argsstring>(void *user, int n)</argsstring>
        <name>stdio_skip</name>
        <param>
          <type>void *</type>
          <declname>user</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="452" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="452" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1acb33a7321a4e0ffab469c29ea7c33bc1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int stdio_eof</definition>
        <argsstring>(void *user)</argsstring>
        <name>stdio_eof</name>
        <param>
          <type>void *</type>
          <declname>user</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="457" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="457" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a6bd264fc500207bfd97f7e012d707963" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void start_file</definition>
        <argsstring>(stbi *s, FILE *f)</argsstring>
        <name>start_file</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="469" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="469" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a68ecfb7bf76eae3a09f27ba97ad0d341" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void stbi_rewind</definition>
        <argsstring>(stbi *s)</argsstring>
        <name>stbi_rewind</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="478" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="478" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a29bb9189676787706d5e1065df3707d6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int stbi_jpeg_test</definition>
        <argsstring>(stbi *s)</argsstring>
        <name>stbi_jpeg_test</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1938" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1938" bodyend="1946" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="486" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a7244b21d15ac799cae4e2170ee11640c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi_uc *</type>
        <definition>static unsigned char * stbi_jpeg_load</definition>
        <argsstring>(stbi *s, int *x, int *y, int *comp, int req_comp)</argsstring>
        <name>stbi_jpeg_load</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>req_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1931" column="22" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1931" bodyend="1936" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="487" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a91dde767d9565e997597c56e82d46512" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int stbi_jpeg_info</definition>
        <argsstring>(stbi *s, int *x, int *y, int *comp)</argsstring>
        <name>stbi_jpeg_info</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1960" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1960" bodyend="1965" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="488" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1acf78c20d4f9e2769cb8c8c2f45bfa90d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int stbi_png_test</definition>
        <argsstring>(stbi *s)</argsstring>
        <name>stbi_png_test</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2883" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2883" bodyend="2889" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="489" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a4af88e3e8576861a2dd6b9ba08f3dc92" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi_uc *</type>
        <definition>static unsigned char * stbi_png_load</definition>
        <argsstring>(stbi *s, int *x, int *y, int *comp, int req_comp)</argsstring>
        <name>stbi_png_load</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>req_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2876" column="22" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2876" bodyend="2881" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="490" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a16487b7dc22ebf537a7d5dd90e48b93b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int stbi_png_info</definition>
        <argsstring>(stbi *s, int *x, int *y, int *comp)</argsstring>
        <name>stbi_png_info</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2903" column="17" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2903" bodyend="2908" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="491" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a10d805dbf41ab0ff047a7590235844d9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int stbi_bmp_test</definition>
        <argsstring>(stbi *s)</argsstring>
        <name>stbi_bmp_test</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2926" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2926" bodyend="2931" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="492" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a390f3a6762281663924e20f6bf9593af" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi_uc *</type>
        <definition>static stbi_uc * stbi_bmp_load</definition>
        <argsstring>(stbi *s, int *x, int *y, int *comp, int req_comp)</argsstring>
        <name>stbi_bmp_load</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>req_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="3170" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="3170" bodyend="3173" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="493" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1ac30e22b03c697ac398097c2fe48689fb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int stbi_tga_test</definition>
        <argsstring>(stbi *s)</argsstring>
        <name>stbi_tga_test</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="3241" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="3241" bodyend="3246" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="494" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1ac8ac88fe305817527a47ede0f2d9b3f9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi_uc *</type>
        <definition>static stbi_uc * stbi_tga_load</definition>
        <argsstring>(stbi *s, int *x, int *y, int *comp, int req_comp)</argsstring>
        <name>stbi_tga_load</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>req_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="3442" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="3442" bodyend="3445" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="495" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a9515413610ab84b252f624da3c970339" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stbi_tga_info</definition>
        <argsstring>(stbi *s, int *x, int *y, int *comp)</argsstring>
        <name>stbi_tga_info</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="3216" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="3216" bodyend="3219" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="496" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a82686c4908d658b1d625868842ad7220" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int stbi_psd_test</definition>
        <argsstring>(stbi *s)</argsstring>
        <name>stbi_psd_test</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="3457" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="3457" bodyend="3462" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="497" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a23d42f38eb9233b85a08b7f6a5cb8821" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi_uc *</type>
        <definition>static stbi_uc * stbi_psd_load</definition>
        <argsstring>(stbi *s, int *x, int *y, int *comp, int req_comp)</argsstring>
        <name>stbi_psd_load</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>req_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="3622" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="3622" bodyend="3625" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="498" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a6e9b8b19d7eaf58f83433e821ceedbb2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int stbi_hdr_test</definition>
        <argsstring>(stbi *s)</argsstring>
        <name>stbi_hdr_test</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="4200" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="4200" bodyend="4205" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="500" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a547712ad82d19b3f3c6b0754c3305040" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float *</type>
        <definition>static float * stbi_hdr_load</definition>
        <argsstring>(stbi *s, int *x, int *y, int *comp, int req_comp)</argsstring>
        <name>stbi_hdr_load</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>req_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="4368" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="4368" bodyend="4371" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="501" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1ac857a83ae1a5a40071b5c7720db91ca0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int stbi_pic_test</definition>
        <argsstring>(stbi *s)</argsstring>
        <name>stbi_pic_test</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="3832" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="3832" bodyend="3837" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="503" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1ac6fc33fcc2b1fac5b00b07d117970bee" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi_uc *</type>
        <definition>static stbi_uc * stbi_pic_load</definition>
        <argsstring>(stbi *s, int *x, int *y, int *comp, int req_comp)</argsstring>
        <name>stbi_pic_load</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>req_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="3839" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="3839" bodyend="3842" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="504" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1ac041314f3d57ab296860c1cc16d6a15d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int stbi_gif_test</definition>
        <argsstring>(stbi *s)</argsstring>
        <name>stbi_gif_test</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="3879" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="3879" bodyend="3884" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="505" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1acdc99fa47fdbb310a7e38a47240e19d2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi_uc *</type>
        <definition>static stbi_uc * stbi_gif_load</definition>
        <argsstring>(stbi *s, int *x, int *y, int *comp, int req_comp)</argsstring>
        <name>stbi_gif_load</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>req_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="4165" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="4165" bodyend="4178" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="506" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a1d5c88a7e24375d200bb5c8f19bfb113" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int stbi_gif_info</definition>
        <argsstring>(stbi *s, int *x, int *y, int *comp)</argsstring>
        <name>stbi_gif_info</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="4180" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="4180" bodyend="4183" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="507" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a49216829d54b2a42f60a2996f6783d15" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int e</definition>
        <argsstring>(const char *str)</argsstring>
        <name>e</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="518" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="518" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1ac9d8f33816db2d4d27fe40d39ac6853f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float *</type>
        <definition>static float * ldr_to_hdr</definition>
        <argsstring>(stbi_uc *data, int x, int y, int comp)</argsstring>
        <name>ldr_to_hdr</name>
        <param>
          <type>stbi_uc *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="902" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="902" bodyend="917" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="545" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a3b28dd4bc4e76a022634199129ac61b8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi_uc *</type>
        <definition>static stbi_uc * hdr_to_ldr</definition>
        <argsstring>(float *data, int x, int y, int comp)</argsstring>
        <name>hdr_to_ldr</name>
        <param>
          <type>float *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="920" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="920" bodyend="943" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" declline="546" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1adb5660224374c3fc0fb64391d96e8793" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char *</type>
        <definition>static unsigned char * stbi_load_main</definition>
        <argsstring>(stbi *s, int *x, int *y, int *comp, int req_comp)</argsstring>
        <name>stbi_load_main</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>req_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="549" column="22" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="549" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a555effbeeec3909801a7d6d063b0845d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float *</type>
        <definition>float * stbi_loadf_main</definition>
        <argsstring>(stbi *s, int *x, int *y, int *comp, int req_comp)</argsstring>
        <name>stbi_loadf_main</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>req_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="612" column="7" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="612" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1ae7d89884c32f0eb6edd8e7369031ae13" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi_inline int</type>
        <definition>static stbi_inline int get8</definition>
        <argsstring>(stbi *s)</argsstring>
        <name>get8</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="752" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="752" bodyend="761"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1ab31358888a33f78e7aa94da17114d8ce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi_inline int</type>
        <definition>static stbi_inline int at_eof</definition>
        <argsstring>(stbi *s)</argsstring>
        <name>at_eof</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="763" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="763" bodyend="773"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a272fdc6b2d1a9d668a2223056a3691b5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi_inline stbi__uint8</type>
        <definition>static stbi_inline stbi__uint8 get8u</definition>
        <argsstring>(stbi *s)</argsstring>
        <name>get8u</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="775" column="32" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="775" bodyend="778"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a70132eb48871f2c3668bbd478eb2748c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void skip</definition>
        <argsstring>(stbi *s, int n)</argsstring>
        <name>skip</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="780" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="780" bodyend="791"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a8780812d8f19a042ef706fcf49ccf125" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int getn</definition>
        <argsstring>(stbi *s, stbi_uc *buffer, int n)</argsstring>
        <name>getn</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>stbi_uc *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="793" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="793" bodyend="815"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1aa6f16d004643ea5c5c38c7198dc25141" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int get16</definition>
        <argsstring>(stbi *s)</argsstring>
        <name>get16</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="817" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="817" bodyend="821"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a1da2dada4aa8a2acdc632eb41a05b7b2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi__uint32</type>
        <definition>static stbi__uint32 get32</definition>
        <argsstring>(stbi *s)</argsstring>
        <name>get32</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="823" column="21" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="823" bodyend="827"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1aeef53f9c6b757791340b398119198b83" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int get16le</definition>
        <argsstring>(stbi *s)</argsstring>
        <name>get16le</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="829" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="829" bodyend="833"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a18eedeb6627d5f93e5e4ae65b71f9084" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi__uint32</type>
        <definition>static stbi__uint32 get32le</definition>
        <argsstring>(stbi *s)</argsstring>
        <name>get32le</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="835" column="21" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="835" bodyend="839"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a2f9810ff73cee9f063764fe631e4d656" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi__uint8</type>
        <definition>static stbi__uint8 compute_y</definition>
        <argsstring>(int r, int g, int b)</argsstring>
        <name>compute_y</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>g</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="852" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="852" bodyend="855"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1adc5737c042616254680261ca7570e5ed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char *</type>
        <definition>static unsigned char * convert_format</definition>
        <argsstring>(unsigned char *data, int img_n, int req_comp, unsigned int x, unsigned int y)</argsstring>
        <name>convert_format</name>
        <param>
          <type>unsigned char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>img_n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>req_comp</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="857" column="22" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="857" bodyend="899"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a0749b05104242b2963cabc0c7079d421" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int build_huffman</definition>
        <argsstring>(huffman *h, int *count)</argsstring>
        <name>build_huffman</name>
        <param>
          <type><ref refid="structhuffman" kindref="compound">huffman</ref> *</type>
          <declname>h</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1026" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1026" bodyend="1065"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a0d5cd042c3f9d8dd94e1cba45c4ccfc0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void grow_buffer_unsafe</definition>
        <argsstring>(jpeg *j)</argsstring>
        <name>grow_buffer_unsafe</name>
        <param>
          <type><ref refid="structjpeg" kindref="compound">jpeg</ref> *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1067" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1067" bodyend="1082"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a56921e2bc51ca531cdba1e5b7f280a9e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi_inline int</type>
        <definition>static stbi_inline int decode</definition>
        <argsstring>(jpeg *j, huffman *h)</argsstring>
        <name>decode</name>
        <param>
          <type><ref refid="structjpeg" kindref="compound">jpeg</ref> *</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="structhuffman" kindref="compound">huffman</ref> *</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1088" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1088" bodyend="1135"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1aef53e2b28f4d5de097bd53e68c8be3f6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi_inline int</type>
        <definition>static stbi_inline int extend_receive</definition>
        <argsstring>(jpeg *j, int n)</argsstring>
        <name>extend_receive</name>
        <param>
          <type><ref refid="structjpeg" kindref="compound">jpeg</ref> *</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1139" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1139" bodyend="1162"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1ad16407aaf8bb09760ba5aceaf52641bb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int decode_block</definition>
        <argsstring>(jpeg *j, short data[64], huffman *hdc, huffman *hac, int b)</argsstring>
        <name>decode_block</name>
        <param>
          <type><ref refid="structjpeg" kindref="compound">jpeg</ref> *</type>
          <declname>j</declname>
        </param>
        <param>
          <type>short</type>
          <declname>data</declname>
          <array>[64]</array>
        </param>
        <param>
          <type><ref refid="structhuffman" kindref="compound">huffman</ref> *</type>
          <declname>hdc</declname>
        </param>
        <param>
          <type><ref refid="structhuffman" kindref="compound">huffman</ref> *</type>
          <declname>hac</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1182" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1182" bodyend="1214"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a75fdc025668b1bbdd984a7722dabb66f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi_inline stbi__uint8</type>
        <definition>static stbi_inline stbi__uint8 clamp</definition>
        <argsstring>(int x)</argsstring>
        <name>clamp</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1217" column="32" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1217" bodyend="1225"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a9b71ed26d773a919612c16ced9f54272" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void idct_block</definition>
        <argsstring>(stbi__uint8 *out, int out_stride, short data[64], stbi_dequantize_t *dequantize)</argsstring>
        <name>idct_block</name>
        <param>
          <type>stbi__uint8 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>out_stride</declname>
        </param>
        <param>
          <type>short</type>
          <declname>data</declname>
          <array>[64]</array>
        </param>
        <param>
          <type>stbi_dequantize_t *</type>
          <declname>dequantize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1275" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1275" bodyend="1334"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1ae1f7a032bc600e39da4ccb6af79b3953" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi__uint8</type>
        <definition>static stbi__uint8 get_marker</definition>
        <argsstring>(jpeg *j)</argsstring>
        <name>get_marker</name>
        <param>
          <type><ref refid="structjpeg" kindref="compound">jpeg</ref> *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1349" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1349" bodyend="1358"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a343f52bf3f58acf6a0d89c871625f49a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void reset</definition>
        <argsstring>(jpeg *j)</argsstring>
        <name>reset</name>
        <param>
          <type><ref refid="structjpeg" kindref="compound">jpeg</ref> *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1366" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1366" bodyend="1376"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1aa9d60ab6c7827d7415101658650424f8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int parse_entropy_coded_data</definition>
        <argsstring>(jpeg *z)</argsstring>
        <name>parse_entropy_coded_data</name>
        <param>
          <type><ref refid="structjpeg" kindref="compound">jpeg</ref> *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1378" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1378" bodyend="1448"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a887e3ec890d7b9459eda3bba57f61336" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int process_marker</definition>
        <argsstring>(jpeg *z, int m)</argsstring>
        <name>process_marker</name>
        <param>
          <type><ref refid="structjpeg" kindref="compound">jpeg</ref> *</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1450" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1450" bodyend="1516"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1aa1534bb7c68f06c60a76e03d9fc14889" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int process_scan_header</definition>
        <argsstring>(jpeg *z)</argsstring>
        <name>process_scan_header</name>
        <param>
          <type><ref refid="structjpeg" kindref="compound">jpeg</ref> *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1519" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1519" bodyend="1542"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a08ddba3fe4478391f1b9cc809b4aa1de" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int process_frame_header</definition>
        <argsstring>(jpeg *z, int scan)</argsstring>
        <name>process_frame_header</name>
        <param>
          <type><ref refid="structjpeg" kindref="compound">jpeg</ref> *</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scan</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1544" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1544" bodyend="1614"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1acc8c7b5fbea8040f5648dc4c12f6cc80" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int decode_jpeg_header</definition>
        <argsstring>(jpeg *z, int scan)</argsstring>
        <name>decode_jpeg_header</name>
        <param>
          <type><ref refid="structjpeg" kindref="compound">jpeg</ref> *</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scan</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1623" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1623" bodyend="1642"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1acde0f6132eb7d24a91ff954ee306d02c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int decode_jpeg_image</definition>
        <argsstring>(jpeg *j)</argsstring>
        <name>decode_jpeg_image</name>
        <param>
          <type><ref refid="structjpeg" kindref="compound">jpeg</ref> *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1644" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1644" bodyend="1673"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1adada1e49a58e2137370e3b856adedafe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi__uint8 *</type>
        <definition>static stbi__uint8 * resample_row_1</definition>
        <argsstring>(stbi__uint8 *out, stbi__uint8 *in_near, stbi__uint8 *in_far, int w, int hs)</argsstring>
        <name>resample_row_1</name>
        <param>
          <type>stbi__uint8 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>stbi__uint8 *</type>
          <declname>in_near</declname>
        </param>
        <param>
          <type>stbi__uint8 *</type>
          <declname>in_far</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1682" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1682" bodyend="1689"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a8833d8f6fd960f0f29a663768ba04634" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi__uint8 *</type>
        <definition>static stbi__uint8 * resample_row_v_2</definition>
        <argsstring>(stbi__uint8 *out, stbi__uint8 *in_near, stbi__uint8 *in_far, int w, int hs)</argsstring>
        <name>resample_row_v_2</name>
        <param>
          <type>stbi__uint8 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>stbi__uint8 *</type>
          <declname>in_near</declname>
        </param>
        <param>
          <type>stbi__uint8 *</type>
          <declname>in_far</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1691" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1691" bodyend="1699"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a0fdddb49c32f5374d0a0f9710f0e5206" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi__uint8 *</type>
        <definition>static stbi__uint8 * resample_row_h_2</definition>
        <argsstring>(stbi__uint8 *out, stbi__uint8 *in_near, stbi__uint8 *in_far, int w, int hs)</argsstring>
        <name>resample_row_h_2</name>
        <param>
          <type>stbi__uint8 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>stbi__uint8 *</type>
          <declname>in_near</declname>
        </param>
        <param>
          <type>stbi__uint8 *</type>
          <declname>in_far</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1701" column="21" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1701" bodyend="1727"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a3d40ddcdac4f14a371af61bca8b524b7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi__uint8 *</type>
        <definition>static stbi__uint8 * resample_row_hv_2</definition>
        <argsstring>(stbi__uint8 *out, stbi__uint8 *in_near, stbi__uint8 *in_far, int w, int hs)</argsstring>
        <name>resample_row_hv_2</name>
        <param>
          <type>stbi__uint8 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>stbi__uint8 *</type>
          <declname>in_near</declname>
        </param>
        <param>
          <type>stbi__uint8 *</type>
          <declname>in_far</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1731" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1731" bodyend="1753"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a4e773cb51f69ca7a66dc7fde79c36a4e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi__uint8 *</type>
        <definition>static stbi__uint8 * resample_row_generic</definition>
        <argsstring>(stbi__uint8 *out, stbi__uint8 *in_near, stbi__uint8 *in_far, int w, int hs)</argsstring>
        <name>resample_row_generic</name>
        <param>
          <type>stbi__uint8 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>stbi__uint8 *</type>
          <declname>in_near</declname>
        </param>
        <param>
          <type>stbi__uint8 *</type>
          <declname>in_far</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1755" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1755" bodyend="1764"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a31bc004f2cddc7e3c041571a9e9aa1db" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void YCbCr_to_RGB_row</definition>
        <argsstring>(stbi__uint8 *out, const stbi__uint8 *y, const stbi__uint8 *pcb, const stbi__uint8 *pcr, int count, int step)</argsstring>
        <name>YCbCr_to_RGB_row</name>
        <param>
          <type>stbi__uint8 *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const stbi__uint8 *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const stbi__uint8 *</type>
          <declname>pcb</declname>
        </param>
        <param>
          <type>const stbi__uint8 *</type>
          <declname>pcr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>step</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1770" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1770" bodyend="1793"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a38cf00d4049653c5d3eacc6616428cd5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void cleanup_jpeg</definition>
        <argsstring>(jpeg *j)</argsstring>
        <name>cleanup_jpeg</name>
        <param>
          <type><ref refid="structjpeg" kindref="compound">jpeg</ref> *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1806" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1806" bodyend="1819"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1acf79fc0ff098ec7de87a2ab96a885c54" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi__uint8 *</type>
        <definition>static stbi__uint8 * load_jpeg_image</definition>
        <argsstring>(jpeg *z, int *out_x, int *out_y, int *comp, int req_comp)</argsstring>
        <name>load_jpeg_image</name>
        <param>
          <type><ref refid="structjpeg" kindref="compound">jpeg</ref> *</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>out_x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>out_y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>req_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1831" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1831" bodyend="1929"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1aefdd43467455ee527aa64374f7d406ec" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int stbi_jpeg_info_raw</definition>
        <argsstring>(jpeg *j, int *x, int *y, int *comp)</argsstring>
        <name>stbi_jpeg_info_raw</name>
        <param>
          <type><ref refid="structjpeg" kindref="compound">jpeg</ref> *</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1948" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1948" bodyend="1958"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1ac4c294ebd942640259201ef8fe28306a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi_inline int</type>
        <definition>static stbi_inline int bitreverse16</definition>
        <argsstring>(int n)</argsstring>
        <name>bitreverse16</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1990" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1990" bodyend="1997"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a47c6813ede053cd166e42770217deac1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi_inline int</type>
        <definition>static stbi_inline int bit_reverse</definition>
        <argsstring>(int v, int bits)</argsstring>
        <name>bit_reverse</name>
        <param>
          <type>int</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="1999" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="1999" bodyend="2005"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1aabbfd94a5a327c15c08e62447a60831f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int zbuild_huffman</definition>
        <argsstring>(zhuffman *z, stbi__uint8 *sizelist, int num)</argsstring>
        <name>zbuild_huffman</name>
        <param>
          <type><ref refid="structzhuffman" kindref="compound">zhuffman</ref> *</type>
          <declname>z</declname>
        </param>
        <param>
          <type>stbi__uint8 *</type>
          <declname>sizelist</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2007" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2007" bodyend="2050"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a2ebb84646380f0e78bda46dce59201f4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi_inline int</type>
        <definition>static stbi_inline int zget8</definition>
        <argsstring>(zbuf *z)</argsstring>
        <name>zget8</name>
        <param>
          <type><ref refid="structzbuf" kindref="compound">zbuf</ref> *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2072" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2072" bodyend="2076"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a304a55b32f2e788727af78e089685c23" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void fill_bits</definition>
        <argsstring>(zbuf *z)</argsstring>
        <name>fill_bits</name>
        <param>
          <type><ref refid="structzbuf" kindref="compound">zbuf</ref> *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2078" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2078" bodyend="2085"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a142a17daf34c0edfbc095f8fa8efd847" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi_inline unsigned int</type>
        <definition>static stbi_inline unsigned int zreceive</definition>
        <argsstring>(zbuf *z, int n)</argsstring>
        <name>zreceive</name>
        <param>
          <type><ref refid="structzbuf" kindref="compound">zbuf</ref> *</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2087" column="33" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2087" bodyend="2095"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1ad2f594a73d27a89d1d38086be10b3b3d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi_inline int</type>
        <definition>static stbi_inline int zhuffman_decode</definition>
        <argsstring>(zbuf *a, zhuffman *z)</argsstring>
        <name>zhuffman_decode</name>
        <param>
          <type><ref refid="structzbuf" kindref="compound">zbuf</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structzhuffman" kindref="compound">zhuffman</ref> *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2097" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2097" bodyend="2122"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a934741686cd586d3d57c9e73c5155790" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int expand</definition>
        <argsstring>(zbuf *z, int n)</argsstring>
        <name>expand</name>
        <param>
          <type><ref refid="structzbuf" kindref="compound">zbuf</ref> *</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2124" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2124" bodyend="2139"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a494a781bd215df3273e17813a2d473d7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int parse_huffman_block</definition>
        <argsstring>(zbuf *a)</argsstring>
        <name>parse_huffman_block</name>
        <param>
          <type><ref refid="structzbuf" kindref="compound">zbuf</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2155" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2155" bodyend="2181"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a240f5714b196a862e52f2cf6e9a21bbe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int compute_huffman_codes</definition>
        <argsstring>(zbuf *a)</argsstring>
        <name>compute_huffman_codes</name>
        <param>
          <type><ref refid="structzbuf" kindref="compound">zbuf</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2183" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2183" bodyend="2227"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a9b6c50bd1c55e659448e454effa99830" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int parse_uncompressed_block</definition>
        <argsstring>(zbuf *a)</argsstring>
        <name>parse_uncompressed_block</name>
        <param>
          <type><ref refid="structzbuf" kindref="compound">zbuf</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2229" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2229" bodyend="2256"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a31d317cc8be21d578d0248d1cf7ca3ae" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int parse_zlib_header</definition>
        <argsstring>(zbuf *a)</argsstring>
        <name>parse_zlib_header</name>
        <param>
          <type><ref refid="structzbuf" kindref="compound">zbuf</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2258" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2258" bodyend="2269"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1adaf0e04594c8d1dbdc0ef45b20da99ab" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void init_defaults</definition>
        <argsstring>(void)</argsstring>
        <name>init_defaults</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2273" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2273" bodyend="2282"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1affe59d7d7941bfc9d3a4efbb7970302b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int parse_zlib</definition>
        <argsstring>(zbuf *a, int parse_header)</argsstring>
        <name>parse_zlib</name>
        <param>
          <type><ref refid="structzbuf" kindref="compound">zbuf</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>parse_header</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2285" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2285" bodyend="2314"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1ad84433b6290d3d64e451cd557cedcae1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int do_zlib</definition>
        <argsstring>(zbuf *a, char *obuf, int olen, int exp, int parse_header)</argsstring>
        <name>do_zlib</name>
        <param>
          <type><ref refid="structzbuf" kindref="compound">zbuf</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>obuf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>olen</declname>
        </param>
        <param>
          <type>int</type>
          <declname>exp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>parse_header</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2316" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2316" bodyend="2324"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a3fa1c17098aeba2fac9371c1c7e3ae60" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structchunk" kindref="compound">chunk</ref></type>
        <definition>static chunk get_chunk_header</definition>
        <argsstring>(stbi *s)</argsstring>
        <name>get_chunk_header</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2420" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2420" bodyend="2426"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a0686537908db03e8dc1d7c1ac0d57667" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int check_png_header</definition>
        <argsstring>(stbi *s)</argsstring>
        <name>check_png_header</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2428" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2428" bodyend="2435"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1ac8659019a007e793979ae2d9da0633a5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int paeth</definition>
        <argsstring>(int a, int b, int c)</argsstring>
        <name>paeth</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2454" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2454" bodyend="2463"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a5bb78aa6d7e9ff78292be617e889cab8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int create_png_image_raw</definition>
        <argsstring>(png *a, stbi__uint8 *raw, stbi__uint32 raw_len, int out_n, stbi__uint32 x, stbi__uint32 y)</argsstring>
        <name>create_png_image_raw</name>
        <param>
          <type><ref refid="structpng" kindref="compound">png</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>stbi__uint8 *</type>
          <declname>raw</declname>
        </param>
        <param>
          <type>stbi__uint32</type>
          <declname>raw_len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>out_n</declname>
        </param>
        <param>
          <type>stbi__uint32</type>
          <declname>x</declname>
        </param>
        <param>
          <type>stbi__uint32</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2466" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2466" bodyend="2541"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1aec20afc761891380cf9e7d4e6021dd59" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int create_png_image</definition>
        <argsstring>(png *a, stbi__uint8 *raw, stbi__uint32 raw_len, int out_n, int interlaced)</argsstring>
        <name>create_png_image</name>
        <param>
          <type><ref refid="structpng" kindref="compound">png</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>stbi__uint8 *</type>
          <declname>raw</declname>
        </param>
        <param>
          <type>stbi__uint32</type>
          <declname>raw_len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>out_n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>interlaced</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2543" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2543" bodyend="2582"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a2913ad568845a6a8d0a73d9d7361f985" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int compute_transparency</definition>
        <argsstring>(png *z, stbi__uint8 tc[3], int out_n)</argsstring>
        <name>compute_transparency</name>
        <param>
          <type><ref refid="structpng" kindref="compound">png</ref> *</type>
          <declname>z</declname>
        </param>
        <param>
          <type>stbi__uint8</type>
          <declname>tc</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>int</type>
          <declname>out_n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2584" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2584" bodyend="2607"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a1fea56f71fb700d7b0f63e97835ff9d4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int expand_palette</definition>
        <argsstring>(png *a, stbi__uint8 *palette, int len, int pal_img_n)</argsstring>
        <name>expand_palette</name>
        <param>
          <type><ref refid="structpng" kindref="compound">png</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>stbi__uint8 *</type>
          <declname>palette</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pal_img_n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2609" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2609" bodyend="2644"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a21cf0ae50aa9eab8e20aac256697bc82" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void stbi_de_iphone</definition>
        <argsstring>(png *z)</argsstring>
        <name>stbi_de_iphone</name>
        <param>
          <type><ref refid="structpng" kindref="compound">png</ref> *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2658" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2658" bodyend="2698"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a61e5579b6b3b358971e7f68442f4f20a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int parse_png_file</definition>
        <argsstring>(png *z, int scan, int req_comp)</argsstring>
        <name>parse_png_file</name>
        <param>
          <type><ref refid="structpng" kindref="compound">png</ref> *</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scan</declname>
        </param>
        <param>
          <type>int</type>
          <declname>req_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2700" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2700" bodyend="2851"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a29ca0815993a53cfab23838a85791b8d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char *</type>
        <definition>static unsigned char * do_png</definition>
        <argsstring>(png *p, int *x, int *y, int *n, int req_comp)</argsstring>
        <name>do_png</name>
        <param>
          <type><ref refid="structpng" kindref="compound">png</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>req_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2853" column="22" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2853" bodyend="2874"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1aa71b19fbfaccaf9942a32fe04b5baab9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int stbi_png_info_raw</definition>
        <argsstring>(png *p, int *x, int *y, int *comp)</argsstring>
        <name>stbi_png_info_raw</name>
        <param>
          <type><ref refid="structpng" kindref="compound">png</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2891" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2891" bodyend="2901"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1abb953ea077c8c214f7e2b4cae02587c2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int bmp_test</definition>
        <argsstring>(stbi *s)</argsstring>
        <name>bmp_test</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2912" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2912" bodyend="2924"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1aea474c19c7e7d52a6d735d38960d4c3a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int high_bit</definition>
        <argsstring>(unsigned int z)</argsstring>
        <name>high_bit</name>
        <param>
          <type>unsigned int</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2935" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2935" bodyend="2945"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a3e5e7e71e0f8b2f8495b751b0a4e6f2c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int bitcount</definition>
        <argsstring>(unsigned int a)</argsstring>
        <name>bitcount</name>
        <param>
          <type>unsigned int</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2947" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2947" bodyend="2955"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a123ea096877fe25bd064b42ccfda41a1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int shiftsigned</definition>
        <argsstring>(int v, int shift, int bits)</argsstring>
        <name>shiftsigned</name>
        <param>
          <type>int</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>shift</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2957" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2957" bodyend="2972"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1af7c401cdcab9cc571ef62b6d8bc823ab" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi_uc *</type>
        <definition>static stbi_uc * bmp_load</definition>
        <argsstring>(stbi *s, int *x, int *y, int *comp, int req_comp)</argsstring>
        <name>bmp_load</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>req_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="2974" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="2974" bodyend="3168"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a4bc192949ec8025ae39453ec76316a8a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int tga_info</definition>
        <argsstring>(stbi *s, int *x, int *y, int *comp)</argsstring>
        <name>tga_info</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="3179" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="3179" bodyend="3214"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1ab2c5f9c29ad26412d7f88eda26e87226" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int tga_test</definition>
        <argsstring>(stbi *s)</argsstring>
        <name>tga_test</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="3221" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="3221" bodyend="3239"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a2f0a91e7af2f0e452728ff037272f059" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi_uc *</type>
        <definition>static stbi_uc * tga_load</definition>
        <argsstring>(stbi *s, int *x, int *y, int *comp, int req_comp)</argsstring>
        <name>tga_load</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>req_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="3248" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="3248" bodyend="3440"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a06ce886e6451d8a056122f4dc28ae85d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int psd_test</definition>
        <argsstring>(stbi *s)</argsstring>
        <name>psd_test</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="3451" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="3451" bodyend="3455"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a3b1981a20648ba4def6c116a84038f33" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi_uc *</type>
        <definition>static stbi_uc * psd_load</definition>
        <argsstring>(stbi *s, int *x, int *y, int *comp, int req_comp)</argsstring>
        <name>psd_load</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>req_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="3464" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="3464" bodyend="3620"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a63940207e5541786fab414bf37a46703" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int pic_is4</definition>
        <argsstring>(stbi *s, const char *str)</argsstring>
        <name>pic_is4</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="3634" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="3634" bodyend="3642"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1ae2fdc273eac2e599e8427010ea5be751" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int pic_test</definition>
        <argsstring>(stbi *s)</argsstring>
        <name>pic_test</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="3644" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="3644" bodyend="3658"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1afc555e95b4416351a05f6f5e128ee21d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi_uc *</type>
        <definition>static stbi_uc * pic_readval</definition>
        <argsstring>(stbi *s, int channel, stbi_uc *dest)</argsstring>
        <name>pic_readval</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>stbi_uc *</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="3665" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="3665" bodyend="3677"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a7e508ad33c579eceb4a6b4adff1f04ae" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void pic_copyval</definition>
        <argsstring>(int channel, stbi_uc *dest, const stbi_uc *src)</argsstring>
        <name>pic_copyval</name>
        <param>
          <type>int</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>stbi_uc *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const stbi_uc *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="3679" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="3679" bodyend="3686"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a98efd96024ddad951a62e8eb73ab586d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi_uc *</type>
        <definition>static stbi_uc * pic_load2</definition>
        <argsstring>(stbi *s, int width, int height, int *comp, stbi_uc *result)</argsstring>
        <name>pic_load2</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>stbi_uc *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="3688" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="3688" bodyend="3797"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a172eebe23b8e721496b482130146c6e9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi_uc *</type>
        <definition>static stbi_uc * pic_load</definition>
        <argsstring>(stbi *s, int *px, int *py, int *comp, int req_comp)</argsstring>
        <name>pic_load</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>px</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>py</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>req_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="3799" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="3799" bodyend="3830"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1ac85f91c1424b07798f7cafa0559deab4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int gif_test</definition>
        <argsstring>(stbi *s)</argsstring>
        <name>gif_test</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="3869" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="3869" bodyend="3877"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a209e81e4caef248a3cbb758253758bee" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void stbi_gif_parse_colortable</definition>
        <argsstring>(stbi *s, stbi__uint8 pal[256][4], int num_entries, int transp)</argsstring>
        <name>stbi_gif_parse_colortable</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>stbi__uint8</type>
          <declname>pal</declname>
          <array>[256][4]</array>
        </param>
        <param>
          <type>int</type>
          <declname>num_entries</declname>
        </param>
        <param>
          <type>int</type>
          <declname>transp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="3886" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="3886" bodyend="3895"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a1f47abab89cb2ab9d8852cfe85b0003f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int stbi_gif_header</definition>
        <argsstring>(stbi *s, stbi_gif *g, int *comp, int is_info)</argsstring>
        <name>stbi_gif_header</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="structstbi__gif__struct" kindref="compound">stbi_gif</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>is_info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="3897" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="3897" bodyend="3923"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1af51f96d12514eb0ba0ff733027af44d6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int stbi_gif_info_raw</definition>
        <argsstring>(stbi *s, int *x, int *y, int *comp)</argsstring>
        <name>stbi_gif_info_raw</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="3925" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="3925" bodyend="3935"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1ada3d2f97c3a0de5d052c47e8d77afbd4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void stbi_out_gif_code</definition>
        <argsstring>(stbi_gif *g, stbi__uint16 code)</argsstring>
        <name>stbi_out_gif_code</name>
        <param>
          <type><ref refid="structstbi__gif__struct" kindref="compound">stbi_gif</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>stbi__uint16</type>
          <declname>code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="3937" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="3937" bodyend="3969"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1adb9578dcebc1c7704efb67c23c18d8e6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi__uint8 *</type>
        <definition>static stbi__uint8 * stbi_process_gif_raster</definition>
        <argsstring>(stbi *s, stbi_gif *g)</argsstring>
        <name>stbi_process_gif_raster</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="structstbi__gif__struct" kindref="compound">stbi_gif</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="3971" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="3971" bodyend="4048"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a868f31c602124c2b606f47b8019e6ea8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void stbi_fill_gif_background</definition>
        <argsstring>(stbi_gif *g)</argsstring>
        <name>stbi_fill_gif_background</name>
        <param>
          <type><ref refid="structstbi__gif__struct" kindref="compound">stbi_gif</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="4050" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="4050" bodyend="4062"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1aa790e0e8f5de8be6b878647a65853a82" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stbi__uint8 *</type>
        <definition>static stbi__uint8 * stbi_gif_load_next</definition>
        <argsstring>(stbi *s, stbi_gif *g, int *comp, int req_comp)</argsstring>
        <name>stbi_gif_load_next</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="structstbi__gif__struct" kindref="compound">stbi_gif</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>req_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="4065" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="4065" bodyend="4163"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1aecb01879b94528123e244c3f8d36ece6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int hdr_test</definition>
        <argsstring>(stbi *s)</argsstring>
        <name>hdr_test</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="4190" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="4190" bodyend="4198"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1acc72842d7ced8038cc71a23d0a3d14c2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>static char * hdr_gettoken</definition>
        <argsstring>(stbi *z, char *buffer)</argsstring>
        <name>hdr_gettoken</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>z</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="4208" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="4208" bodyend="4228"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a624764d3c46a924fd92818b0ae46600e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void hdr_convert</definition>
        <argsstring>(float *output, stbi_uc *input, int req_comp)</argsstring>
        <name>hdr_convert</name>
        <param>
          <type>float *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>stbi_uc *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>int</type>
          <declname>req_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="4230" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="4230" bodyend="4255"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a2debee2615eac7ddf849807dace1cdf3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float *</type>
        <definition>static float * hdr_load</definition>
        <argsstring>(stbi *s, int *x, int *y, int *comp, int req_comp)</argsstring>
        <name>hdr_load</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>req_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="4257" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="4257" bodyend="4366"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1ae8c6eba08e06fd12ea1721660cf9f914" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int stbi_hdr_info</definition>
        <argsstring>(stbi *s, int *x, int *y, int *comp)</argsstring>
        <name>stbi_hdr_info</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="4373" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="4373" bodyend="4410"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a6e282e679f27114734279983d23eee02" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int stbi_bmp_info</definition>
        <argsstring>(stbi *s, int *x, int *y, int *comp)</argsstring>
        <name>stbi_bmp_info</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="4413" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="4413" bodyend="4439"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1aec72084ffb16e7d0aaab15add054cfdb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int stbi_psd_info</definition>
        <argsstring>(stbi *s, int *x, int *y, int *comp)</argsstring>
        <name>stbi_psd_info</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="4441" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="4441" bodyend="4470"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1a113d70060d950993742fc5bcef9ed497" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int stbi_pic_info</definition>
        <argsstring>(stbi *s, int *x, int *y, int *comp)</argsstring>
        <name>stbi_pic_info</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="4472" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="4472" bodyend="4515"/>
      </memberdef>
      <memberdef kind="function" id="stb__image_8c_1ab25783c87d2680ab7d5b4253f77e3782" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int stbi_info_main</definition>
        <argsstring>(stbi *s, int *x, int *y, int *comp)</argsstring>
        <name>stbi_info_main</name>
        <param>
          <type><ref refid="structstbi" kindref="compound">stbi</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" line="4517" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c" bodystart="4517" bodyend="4539"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>stb_image<sp/>-<sp/>v1.35<sp/>-<sp/>public<sp/>domain<sp/>JPEG/PNG<sp/>reader<sp/>-<sp/>http://nothings.org/stb_image.c</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/>when<sp/>you<sp/>control<sp/>the<sp/>images<sp/>you&apos;re<sp/>loading</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>no<sp/>warranty<sp/>implied;<sp/>use<sp/>at<sp/>your<sp/>own<sp/>risk</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/>QUICK<sp/>NOTES:</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Primarily<sp/>of<sp/>interest<sp/>to<sp/>game<sp/>developers<sp/>and<sp/>other<sp/>people<sp/>who<sp/>can</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>avoid<sp/>problematic<sp/>images<sp/>and<sp/>only<sp/>need<sp/>the<sp/>trivial<sp/>interface</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>JPEG<sp/>baseline<sp/>(no<sp/>JPEG<sp/>progressive)</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>PNG<sp/>8-bit-per-channel<sp/>only</highlight></codeline>
<codeline lineno="11"><highlight class="comment"></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>TGA<sp/>(not<sp/>sure<sp/>what<sp/>subset,<sp/>if<sp/>a<sp/>subset)</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>BMP<sp/>non-1bpp,<sp/>non-RLE</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>PSD<sp/>(composited<sp/>view<sp/>only,<sp/>no<sp/>extra<sp/>channels)</highlight></codeline>
<codeline lineno="15"><highlight class="comment"></highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>GIF<sp/>(*comp<sp/>always<sp/>reports<sp/>as<sp/>4-channel)</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>HDR<sp/>(radiance<sp/>rgbE<sp/>format)</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>PIC<sp/>(Softimage<sp/>PIC)</highlight></codeline>
<codeline lineno="19"><highlight class="comment"></highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>decode<sp/>from<sp/>memory<sp/>or<sp/>through<sp/>FILE<sp/>(define<sp/>STBI_NO_STDIO<sp/>to<sp/>remove<sp/>code)</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>decode<sp/>from<sp/>arbitrary<sp/>I/O<sp/>callbacks</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>overridable<sp/>dequantizing-IDCT,<sp/>YCbCr-to-RGB<sp/>conversion<sp/>(define<sp/>STBI_SIMD)</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/><sp/>Latest<sp/>revisions:</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.35<sp/>(2014-05-27)<sp/>warnings,<sp/>bugfixes,<sp/>TGA<sp/>optimization,<sp/>etc</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.34<sp/>(unknown<sp/><sp/><sp/>)<sp/>warning<sp/>fix</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.33<sp/>(2011-07-14)<sp/>minor<sp/>fixes<sp/>suggested<sp/>by<sp/>Dave<sp/>Moore</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.32<sp/>(2011-07-13)<sp/>info<sp/>support<sp/>for<sp/>all<sp/>filetypes<sp/>(SpartanJ)</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.31<sp/>(2011-06-19)<sp/>a<sp/>few<sp/>more<sp/>leak<sp/>fixes,<sp/>bug<sp/>in<sp/>PNG<sp/>handling<sp/>(SpartanJ)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.30<sp/>(2011-06-11)<sp/>added<sp/>ability<sp/>to<sp/>load<sp/>files<sp/>via<sp/>io<sp/>callbacks<sp/>(Ben<sp/>Wenger)</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.29<sp/>(2010-08-16)<sp/>various<sp/>warning<sp/>fixes<sp/>from<sp/>Aurelien<sp/>Pocheville<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.28<sp/>(2010-08-01)<sp/>fix<sp/>bug<sp/>in<sp/>GIF<sp/>palette<sp/>transparency<sp/>(SpartanJ)</highlight></codeline>
<codeline lineno="33"><highlight class="comment"></highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/>See<sp/>end<sp/>of<sp/>file<sp/>for<sp/>full<sp/>revision<sp/>history.</highlight></codeline>
<codeline lineno="35"><highlight class="comment"></highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/>TODO:</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>stbi_info<sp/>support<sp/>for<sp/>BMP,PSD,HDR,PIC</highlight></codeline>
<codeline lineno="38"><highlight class="comment"></highlight></codeline>
<codeline lineno="39"><highlight class="comment"></highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>============================<sp/><sp/><sp/><sp/>Contributors<sp/><sp/><sp/><sp/>=========================</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>Image<sp/>formats<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bug<sp/>fixes<sp/>&amp;<sp/>warning<sp/>fixes</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/>Sean<sp/>Barrett<sp/>(jpeg,<sp/>png,<sp/>bmp)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Marc<sp/>LeBlanc</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/><sp/>Nicolas<sp/>Schulz<sp/>(hdr,<sp/>psd)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Christpher<sp/>Lloyd</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/><sp/>Jonathan<sp/>Dummer<sp/>(tga)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dave<sp/>Moore</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/><sp/>Jean-Marc<sp/>Lienher<sp/>(gif)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Won<sp/>Chun</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/><sp/>Tom<sp/>Seddon<sp/>(pic)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>Horde3D<sp/>community</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/>Thatcher<sp/>Ulrich<sp/>(psd)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Janez<sp/>Zemva</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Jonathan<sp/>Blow</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Laurent<sp/>Gomila</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>Extensions,<sp/>features<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Aruelien<sp/>Pocheville</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/>Jetro<sp/>Lauha<sp/>(stbi_info)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ryamond<sp/>Barbiero</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/><sp/>James<sp/>&quot;moose2000&quot;<sp/>Brown<sp/>(iPhone<sp/>PNG)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>David<sp/>Woo</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/>Ben<sp/>&quot;Disch&quot;<sp/>Wenger<sp/>(io<sp/>callbacks)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Roy<sp/>Eltham</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/><sp/>Martin<sp/>&quot;SpartanJ&quot;<sp/>Golini<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Luke<sp/>Graham</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Thomas<sp/>Ruf</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>John<sp/>Bartholomew</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>Optimizations<sp/>&amp;<sp/>bugfixes<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ken<sp/>Hamada</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/>Fabian<sp/>&quot;ryg&quot;<sp/>Giesen<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Cort<sp/>Stratton</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/><sp/>Arseny<sp/>Kapoulkine<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Blazej<sp/>Dariusz<sp/>Roszkowski</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Thibault<sp/>Reuille</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>If<sp/>your<sp/>name<sp/>should<sp/>be<sp/>here<sp/>but<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Paul<sp/>Du<sp/>Bois</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>isn&apos;t<sp/>let<sp/>Sean<sp/>know.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Guillaume<sp/>George</highlight></codeline>
<codeline lineno="64"><highlight class="comment"></highlight></codeline>
<codeline lineno="65"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STBI_INCLUDE_STB_IMAGE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBI_INCLUDE_STB_IMAGE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>get<sp/>a<sp/>header<sp/>file<sp/>for<sp/>this,<sp/>either<sp/>cut<sp/>and<sp/>paste<sp/>the<sp/>header,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>create<sp/>stb_image.h,<sp/>#define<sp/>STBI_HEADER_FILE_ONLY,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/>then<sp/>include<sp/>stb_image.c<sp/>from<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Limitations:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>-<sp/>no<sp/>jpeg<sp/>progressive<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>-<sp/>non-HDR<sp/>formats<sp/>support<sp/>8-bit<sp/>samples<sp/>only<sp/>(jpeg,<sp/>png)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>-<sp/>no<sp/>delayed<sp/>line<sp/>count<sp/>(jpeg)<sp/>--<sp/>IJG<sp/>doesn&apos;t<sp/>support<sp/>either</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>-<sp/>no<sp/>1-bit<sp/>BMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>-<sp/>GIF<sp/>always<sp/>returns<sp/>*comp=4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Basic<sp/>usage<sp/>(see<sp/>HDR<sp/>discussion<sp/>below):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>int<sp/>x,y,n;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>unsigned<sp/>char<sp/>*data<sp/>=<sp/>stbi_load(filename,<sp/>&amp;x,<sp/>&amp;y,<sp/>&amp;n,<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//<sp/>...<sp/>process<sp/>data<sp/>if<sp/>not<sp/>NULL<sp/>...<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//<sp/>...<sp/>x<sp/>=<sp/>width,<sp/>y<sp/>=<sp/>height,<sp/>n<sp/>=<sp/>#<sp/>8-bit<sp/>components<sp/>per<sp/>pixel<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//<sp/>...<sp/>replace<sp/>&apos;0&apos;<sp/>with<sp/>&apos;1&apos;..&apos;4&apos;<sp/>to<sp/>force<sp/>that<sp/>many<sp/>components<sp/>per<sp/>pixel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//<sp/>...<sp/>but<sp/>&apos;n&apos;<sp/>will<sp/>always<sp/>be<sp/>the<sp/>number<sp/>that<sp/>it<sp/>would<sp/>have<sp/>been<sp/>if<sp/>you<sp/>said<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>stbi_image_free(data)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Standard<sp/>parameters:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>int<sp/>*x<sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<sp/>outputs<sp/>image<sp/>width<sp/>in<sp/>pixels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>int<sp/>*y<sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<sp/>outputs<sp/>image<sp/>height<sp/>in<sp/>pixels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>int<sp/>*comp<sp/><sp/><sp/><sp/>--<sp/>outputs<sp/>#<sp/>of<sp/>image<sp/>components<sp/>in<sp/>image<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>int<sp/>req_comp<sp/>--<sp/>if<sp/>non-zero,<sp/>#<sp/>of<sp/>image<sp/>components<sp/>requested<sp/>in<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>return<sp/>value<sp/>from<sp/>an<sp/>image<sp/>loader<sp/>is<sp/>an<sp/>&apos;unsigned<sp/>char<sp/>*&apos;<sp/>which<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>pixel<sp/>data.<sp/>The<sp/>pixel<sp/>data<sp/>consists<sp/>of<sp/>*y<sp/>scanlines<sp/>of<sp/>*x<sp/>pixels,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>each<sp/>pixel<sp/>consisting<sp/>of<sp/>N<sp/>interleaved<sp/>8-bit<sp/>components;<sp/>the<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pixel<sp/>pointed<sp/>to<sp/>is<sp/>top-left-most<sp/>in<sp/>the<sp/>image.<sp/>There<sp/>is<sp/>no<sp/>padding<sp/>between</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//<sp/>image<sp/>scanlines<sp/>or<sp/>between<sp/>pixels,<sp/>regardless<sp/>of<sp/>format.<sp/>The<sp/>number<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">//<sp/>components<sp/>N<sp/>is<sp/>&apos;req_comp&apos;<sp/>if<sp/>req_comp<sp/>is<sp/>non-zero,<sp/>or<sp/>*comp<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>req_comp<sp/>is<sp/>non-zero,<sp/>*comp<sp/>has<sp/>the<sp/>number<sp/>of<sp/>components<sp/>that<sp/>_would_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">//<sp/>have<sp/>been<sp/>output<sp/>otherwise.<sp/>E.g.<sp/>if<sp/>you<sp/>set<sp/>req_comp<sp/>to<sp/>4,<sp/>you<sp/>will<sp/>always</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//<sp/>get<sp/>RGBA<sp/>output,<sp/>but<sp/>you<sp/>can<sp/>check<sp/>*comp<sp/>to<sp/>easily<sp/>see<sp/>if<sp/>it&apos;s<sp/>opaque.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>output<sp/>image<sp/>with<sp/>N<sp/>components<sp/>has<sp/>the<sp/>following<sp/>components<sp/>interleaved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>this<sp/>order<sp/>in<sp/>each<sp/>pixel:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>N=#comp<sp/><sp/><sp/><sp/><sp/>components</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grey</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grey,<sp/>alpha</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>red,<sp/>green,<sp/>blue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>red,<sp/>green,<sp/>blue,<sp/>alpha</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>image<sp/>loading<sp/>fails<sp/>for<sp/>any<sp/>reason,<sp/>the<sp/>return<sp/>value<sp/>will<sp/>be<sp/>NULL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>*x,<sp/>*y,<sp/>*comp<sp/>will<sp/>be<sp/>unchanged.<sp/>The<sp/>function<sp/>stbi_failure_reason()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>queried<sp/>for<sp/>an<sp/>extremely<sp/>brief,<sp/>end-user<sp/>unfriendly<sp/>explanation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>why<sp/>the<sp/>load<sp/>failed.<sp/>Define<sp/>STBI_NO_FAILURE_STRINGS<sp/>to<sp/>avoid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compiling<sp/>these<sp/>strings<sp/>at<sp/>all,<sp/>and<sp/>STBI_FAILURE_USERMSG<sp/>to<sp/>get<sp/>slightly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">//<sp/>more<sp/>user-friendly<sp/>ones.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Paletted<sp/>PNG,<sp/>BMP,<sp/>GIF,<sp/>and<sp/>PIC<sp/>images<sp/>are<sp/>automatically<sp/>depalettized.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//<sp/>===========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">//<sp/>iPhone<sp/>PNG<sp/>support:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>By<sp/>default<sp/>we<sp/>convert<sp/>iphone-formatted<sp/>PNGs<sp/>back<sp/>to<sp/>RGB;<sp/>nominally<sp/>they</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>would<sp/>silently<sp/>load<sp/>as<sp/>BGR,<sp/>except<sp/>the<sp/>existing<sp/>code<sp/>should<sp/>have<sp/>just</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>failed<sp/>on<sp/>such<sp/>iPhone<sp/>PNGs.<sp/>But<sp/>you<sp/>can<sp/>disable<sp/>this<sp/>conversion<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//<sp/>by<sp/>calling<sp/>stbi_convert_iphone_png_to_rgb(0),<sp/>in<sp/>which<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>will<sp/>always<sp/>just<sp/>get<sp/>the<sp/>native<sp/>iphone<sp/>&quot;format&quot;<sp/>through.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Call<sp/>stbi_set_unpremultiply_on_load(1)<sp/>as<sp/>well<sp/>to<sp/>force<sp/>a<sp/>divide<sp/>per</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pixel<sp/>to<sp/>remove<sp/>any<sp/>premultiplied<sp/>alpha<sp/>*only*<sp/>if<sp/>the<sp/>image<sp/>file<sp/>explicitly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//<sp/>says<sp/>there&apos;s<sp/>premultiplied<sp/>data<sp/>(currently<sp/>only<sp/>happens<sp/>in<sp/>iPhone<sp/>images,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>only<sp/>if<sp/>iPhone<sp/>convert-to-rgb<sp/>processing<sp/>is<sp/>on).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//<sp/>===========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>HDR<sp/>image<sp/>support<sp/><sp/><sp/>(disable<sp/>by<sp/>defining<sp/>STBI_NO_HDR)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//<sp/>stb_image<sp/>now<sp/>supports<sp/>loading<sp/>HDR<sp/>images<sp/>in<sp/>general,<sp/>and<sp/>currently</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>Radiance<sp/>.HDR<sp/>file<sp/>format,<sp/>although<sp/>the<sp/>support<sp/>is<sp/>provided</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/>generically.<sp/>You<sp/>can<sp/>still<sp/>load<sp/>any<sp/>file<sp/>through<sp/>the<sp/>existing<sp/>interface;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>you<sp/>attempt<sp/>to<sp/>load<sp/>an<sp/>HDR<sp/>file,<sp/>it<sp/>will<sp/>be<sp/>automatically<sp/>remapped<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LDR,<sp/>assuming<sp/>gamma<sp/>2.2<sp/>and<sp/>an<sp/>arbitrary<sp/>scale<sp/>factor<sp/>defaulting<sp/>to<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">//<sp/>both<sp/>of<sp/>these<sp/>constants<sp/>can<sp/>be<sp/>reconfigured<sp/>through<sp/>this<sp/>interface:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>stbi_hdr_to_ldr_gamma(2.2f);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>stbi_hdr_to_ldr_scale(1.0f);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(note,<sp/>do<sp/>not<sp/>use<sp/>_inverse_<sp/>constants;<sp/>stbi_image<sp/>will<sp/>invert<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//<sp/>appropriately).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Additionally,<sp/>there<sp/>is<sp/>a<sp/>new,<sp/>parallel<sp/>interface<sp/>for<sp/>loading<sp/>files<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(linear)<sp/>floats<sp/>to<sp/>preserve<sp/>the<sp/>full<sp/>dynamic<sp/>range:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>float<sp/>*data<sp/>=<sp/>stbi_loadf(filename,<sp/>&amp;x,<sp/>&amp;y,<sp/>&amp;n,<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>you<sp/>load<sp/>LDR<sp/>images<sp/>through<sp/>this<sp/>interface,<sp/>those<sp/>images<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment">//<sp/>be<sp/>promoted<sp/>to<sp/>floating<sp/>point<sp/>values,<sp/>run<sp/>through<sp/>the<sp/>inverse<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">//<sp/>constants<sp/>corresponding<sp/>to<sp/>the<sp/>above:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>stbi_ldr_to_hdr_scale(1.0f);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>stbi_ldr_to_hdr_gamma(2.2f);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Finally,<sp/>given<sp/>a<sp/>filename<sp/>(or<sp/>an<sp/>open<sp/>file<sp/>or<sp/>memory<sp/>block--see<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">//<sp/>file<sp/>for<sp/>details)<sp/>containing<sp/>image<sp/>data,<sp/>you<sp/>can<sp/>query<sp/>for<sp/>the<sp/>&quot;most</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>appropriate&quot;<sp/>interface<sp/>to<sp/>use<sp/>(that<sp/>is,<sp/>whether<sp/>the<sp/>image<sp/>is<sp/>HDR<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">//<sp/>not),<sp/>using:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>stbi_is_hdr(char<sp/>*filename);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>===========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>I/O<sp/>callbacks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">//<sp/>I/O<sp/>callbacks<sp/>allow<sp/>you<sp/>to<sp/>read<sp/>from<sp/>arbitrary<sp/>sources,<sp/>like<sp/>packaged</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">//<sp/>files<sp/>or<sp/>some<sp/>other<sp/>source.<sp/>Data<sp/>read<sp/>from<sp/>callbacks<sp/>are<sp/>processed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">//<sp/>through<sp/>a<sp/>small<sp/>internal<sp/>buffer<sp/>(currently<sp/>128<sp/>bytes)<sp/>to<sp/>try<sp/>to<sp/>reduce</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment">//<sp/>overhead.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>three<sp/>functions<sp/>you<sp/>must<sp/>define<sp/>are<sp/>&quot;read&quot;<sp/>(reads<sp/>some<sp/>bytes<sp/>of<sp/>data),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;skip&quot;<sp/>(skips<sp/>some<sp/>bytes<sp/>of<sp/>data),<sp/>&quot;eof&quot;<sp/>(reports<sp/>if<sp/>the<sp/>stream<sp/>is<sp/>at<sp/>the<sp/>end).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STBI_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>_MSC_VER<sp/>&gt;=<sp/>1400</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_CRT_SECURE_NO_WARNINGS<sp/></highlight><highlight class="comment">//<sp/>suppress<sp/>warnings<sp/>about<sp/>fopen()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(push)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(disable:4996)<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>suppress<sp/>even<sp/>more<sp/>warnings<sp/>about<sp/>fopen()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>STBI_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBI_VERSION<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal">{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/>STBI_default<sp/>=<sp/>0,<sp/></highlight><highlight class="comment">//<sp/>only<sp/>used<sp/>for<sp/>req_comp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/>STBI_grey<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/>STBI_grey_alpha<sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/>STBI_rgb<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/>STBI_rgb_alpha<sp/><sp/>=<sp/>4</highlight></codeline>
<codeline lineno="210"><highlight class="normal">};</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>stbi_uc;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PRIMARY<sp/>API<sp/>-<sp/>works<sp/>on<sp/>images<sp/>of<sp/>any<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//<sp/>load<sp/>image<sp/>by<sp/>filename,<sp/>open<sp/>file,<sp/>or<sp/>memory<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>stbi_uc<sp/>*stbi_load_from_memory(stbi_uc<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STBI_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>stbi_uc<sp/>*stbi_load<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*filename,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>stbi_uc<sp/>*stbi_load_from_file<sp/><sp/>(FILE<sp/>*f,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>stbi_load_from_file,<sp/>file<sp/>pointer<sp/>is<sp/>left<sp/>pointing<sp/>immediately<sp/>after<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235" refid="structstbi__io__callbacks" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal">{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/>int<sp/><sp/><sp/><sp/><sp/><sp/>(*read)<sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*user,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>&apos;data&apos;<sp/>with<sp/>&apos;size&apos;<sp/>bytes.<sp/><sp/>return<sp/>number<sp/>of<sp/>bytes<sp/>actually<sp/>read<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/>void<sp/><sp/><sp/><sp/><sp/>(*skip)<sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*user,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>the<sp/>next<sp/>&apos;n&apos;<sp/>bytes,<sp/>or<sp/>&apos;unget&apos;<sp/>the<sp/>last<sp/>-n<sp/>bytes<sp/>if<sp/>negative</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/>int<sp/><sp/><sp/><sp/><sp/><sp/>(*eof)<sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*user);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>returns<sp/>nonzero<sp/>if<sp/>we<sp/>are<sp/>at<sp/>end<sp/>of<sp/>file/data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal">}<sp/><ref refid="structstbi__io__callbacks" kindref="compound">stbi_io_callbacks</ref>;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>stbi_uc<sp/>*stbi_load_from_callbacks<sp/><sp/>(<ref refid="structstbi__io__callbacks" kindref="compound">stbi_io_callbacks</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*clbk,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*user,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STBI_NO_HDR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*stbi_loadf_from_memory(stbi_uc<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>STBI_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*stbi_loadf<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*filename,<sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*stbi_loadf_from_file<sp/><sp/>(FILE<sp/>*f,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*stbi_loadf_from_callbacks<sp/><sp/>(<ref refid="structstbi__io__callbacks" kindref="compound">stbi_io_callbacks</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*clbk,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*user,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>stbi_hdr_to_ldr_gamma(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>stbi_hdr_to_ldr_scale(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>stbi_ldr_to_hdr_gamma(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>stbi_ldr_to_hdr_scale(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>STBI_NO_HDR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">//<sp/>stbi_is_hdr<sp/>is<sp/>always<sp/>defined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>stbi_is_hdr_from_callbacks(<ref refid="structstbi__io__callbacks" kindref="compound">stbi_io_callbacks</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*clbk,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*user);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>stbi_is_hdr_from_memory(stbi_uc<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STBI_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi_is_hdr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*filename);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi_is_hdr_from_file(FILE<sp/>*f);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>STBI_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment">//<sp/>get<sp/>a<sp/>VERY<sp/>brief<sp/>reason<sp/>for<sp/>failure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NOT<sp/>THREADSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stbi_failure_reason<sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment">//<sp/>free<sp/>the<sp/>loaded<sp/>image<sp/>--<sp/>this<sp/>is<sp/>just<sp/>free()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>stbi_image_free<sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*retval_from_stbi_load);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="comment">//<sp/>get<sp/>image<sp/>dimensions<sp/>&amp;<sp/>components<sp/>without<sp/>fully<sp/>decoding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi_info_from_memory(stbi_uc<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi_info_from_callbacks(<ref refid="structstbi__io__callbacks" kindref="compound">stbi_io_callbacks</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*clbk,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*user,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STBI_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi_info<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*filename,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi_info_from_file<sp/><sp/>(FILE<sp/>*f,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>image<sp/>formats<sp/>that<sp/>explicitly<sp/>notate<sp/>that<sp/>they<sp/>have<sp/>premultiplied<sp/>alpha,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>just<sp/>return<sp/>the<sp/>colors<sp/>as<sp/>stored<sp/>in<sp/>the<sp/>file.<sp/>set<sp/>this<sp/>flag<sp/>to<sp/>force</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="comment">//<sp/>unpremultiplication.<sp/>results<sp/>are<sp/>undefined<sp/>if<sp/>the<sp/>unpremultiply<sp/>overflow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbi_set_unpremultiply_on_load(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag_true_if_should_unpremultiply);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="comment">//<sp/>indicate<sp/>whether<sp/>we<sp/>should<sp/>process<sp/>iphone<sp/>images<sp/>back<sp/>to<sp/>canonical<sp/>format,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>just<sp/>pass<sp/>them<sp/>through<sp/>&quot;as-is&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbi_convert_iphone_png_to_rgb(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag_true_if_should_convert);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ZLIB<sp/>client<sp/>-<sp/>used<sp/>by<sp/>PNG,<sp/>available<sp/>for<sp/>other<sp/>purposes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stbi_zlib_decode_malloc_guesssize(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initial_size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*outlen);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stbi_zlib_decode_malloc_guesssize_headerflag(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initial_size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*outlen,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>parse_header);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stbi_zlib_decode_malloc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*outlen);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>stbi_zlib_decode_buffer(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*obuffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>olen,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ibuffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ilen);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stbi_zlib_decode_noheader_malloc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*outlen);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>stbi_zlib_decode_noheader_buffer(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*obuffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>olen,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ibuffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ilen);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="comment">//<sp/>define<sp/>faster<sp/>low-level<sp/>operations<sp/>(typically<sp/>SIMD<sp/>support)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STBI_SIMD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*stbi_idct_8x8)(stbi_uc<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>out_stride,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>data[64],<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*dequantize);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compute<sp/>an<sp/>integer<sp/>IDCT<sp/>on<sp/>&quot;input&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>input[x]<sp/>=<sp/>data[x]<sp/>*<sp/>dequantize[x]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>write<sp/>results<sp/>to<sp/>&apos;out&apos;:<sp/>64<sp/>samples,<sp/>each<sp/>run<sp/>of<sp/>8<sp/>spaced<sp/>by<sp/>&apos;out_stride&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLAMP<sp/>results<sp/>to<sp/>0..255</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*stbi_YCbCr_to_RGB_run)(stbi_uc<sp/>*<ref refid="structoutput" kindref="compound">output</ref>,<sp/>stbi_uc<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/>*y,<sp/>stbi_uc<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*cb,<sp/>stbi_uc<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*cr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compute<sp/>a<sp/>conversion<sp/>from<sp/>YCbCr<sp/>to<sp/>RGB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>&apos;count&apos;<sp/>pixels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>write<sp/>pixels<sp/>to<sp/>&apos;output&apos;;<sp/>each<sp/>pixel<sp/>is<sp/>&apos;step&apos;<sp/>bytes<sp/>(either<sp/>3<sp/>or<sp/>4;<sp/>if<sp/>4,<sp/>write<sp/>&apos;255&apos;<sp/>as<sp/>4th),<sp/>order<sp/>R,G,B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>y:<sp/>Y<sp/>input<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>cb:<sp/>Cb<sp/>input<sp/>channel;<sp/>scale/biased<sp/>to<sp/>be<sp/>0..255</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>cr:<sp/>Cr<sp/>input<sp/>channel;<sp/>scale/biased<sp/>to<sp/>be<sp/>0..255</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbi_install_idct(stbi_idct_8x8<sp/>func);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbi_install_YCbCr_to_RGB(stbi_YCbCr_to_RGB_run<sp/>func);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>STBI_SIMD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="337"><highlight class="comment"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>STBI_INCLUDE_STB_IMAGE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STBI_HEADER_FILE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STBI_NO_HDR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ldexp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>strcmp,<sp/>strtok</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STBI_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>ptrdiff_t<sp/>on<sp/>osx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>stbi_inline<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>stbi_inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>stbi_inline<sp/>__forceinline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>stbi__uint8;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>stbi__uint16;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>stbi__int16;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>stbi__uint32;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>stbi__int32;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint8_t<sp/><sp/>stbi__uint8;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint16_t<sp/>stbi__uint16;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int16_t<sp/><sp/>stbi__int16;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/>stbi__uint32;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int32_t<sp/><sp/>stbi__int32;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="comment">//<sp/>should<sp/>produce<sp/>compiler<sp/>error<sp/>if<sp/>size<sp/>is<sp/>wrong</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>validate_uint32[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stbi__uint32)==4<sp/>?<sp/>1<sp/>:<sp/>-1];</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBI_NOTUSED(v)<sp/><sp/>(void)(v)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBI_NOTUSED(v)<sp/><sp/>(void)sizeof(v)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBI_HAS_LROTL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STBI_HAS_LROTL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>stbi_lrot(x,y)<sp/><sp/>_lrotl(x,y)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>stbi_lrot(x,y)<sp/><sp/>(((x)<sp/>&lt;&lt;<sp/>(y))<sp/>|<sp/>((x)<sp/>&gt;&gt;<sp/>(32<sp/>-<sp/>(y))))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>stbi<sp/>struct<sp/>and<sp/>start_xxx<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="comment">//<sp/>stbi<sp/>structure<sp/>is<sp/>our<sp/>basic<sp/>context<sp/>used<sp/>by<sp/>all<sp/>images,<sp/>so<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contains<sp/>all<sp/>the<sp/>IO<sp/>context,<sp/>plus<sp/>some<sp/>basic<sp/>image<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406" refid="structstbi" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal">{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/>stbi__uint32<sp/>img_x,<sp/>img_y;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>img_n,<sp/>img_out_n;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstbi__io__callbacks" kindref="compound">stbi_io_callbacks</ref><sp/>io;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*io_user_data;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>read_from_callbacks;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buflen;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/>stbi__uint8<sp/>buffer_start[128];</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/>stbi__uint8<sp/>*img_buffer,<sp/>*img_buffer_end;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/>stbi__uint8<sp/>*img_buffer_original;</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}<sp/><ref refid="structstbi" kindref="compound">stbi</ref>;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>refill_buffer(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="comment">//<sp/>initialize<sp/>a<sp/>memory-decode<sp/>context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>start_mem(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/>stbi__uint8<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="427"><highlight class="normal">{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/>s-&gt;io.read<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/>s-&gt;read_from_callbacks<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/>s-&gt;img_buffer<sp/>=<sp/>s-&gt;img_buffer_original<sp/>=<sp/>(stbi__uint8<sp/>*)<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/>s-&gt;img_buffer_end<sp/>=<sp/>(stbi__uint8<sp/>*)<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>+len;</highlight></codeline>
<codeline lineno="432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="comment">//<sp/>initialize<sp/>a<sp/>callback-based<sp/>context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>start_callbacks(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/><ref refid="structstbi__io__callbacks" kindref="compound">stbi_io_callbacks</ref><sp/>*c,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*user)</highlight></codeline>
<codeline lineno="436"><highlight class="normal">{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/>s-&gt;io<sp/>=<sp/>*c;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/>s-&gt;io_user_data<sp/>=<sp/>user;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/>s-&gt;buflen<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(s-&gt;buffer_start);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/>s-&gt;read_from_callbacks<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/>s-&gt;img_buffer_original<sp/>=<sp/>s-&gt;buffer_start;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/>refill_buffer(s);</highlight></codeline>
<codeline lineno="443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STBI_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stdio_read(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*user,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="448"><highlight class="normal">{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>fread(data,1,size,(FILE*)<sp/>user);</highlight></codeline>
<codeline lineno="450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stdio_skip(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*user,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="453"><highlight class="normal">{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/>fseek((FILE*)<sp/>user,<sp/>n,<sp/>SEEK_CUR);</highlight></codeline>
<codeline lineno="455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stdio_eof(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*user)</highlight></codeline>
<codeline lineno="458"><highlight class="normal">{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>feof((FILE*)<sp/>user);</highlight></codeline>
<codeline lineno="460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structstbi__io__callbacks" kindref="compound">stbi_io_callbacks</ref><sp/>stbi_stdio_callbacks<sp/>=</highlight></codeline>
<codeline lineno="463"><highlight class="normal">{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/>stdio_read,</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/>stdio_skip,</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/>stdio_eof,</highlight></codeline>
<codeline lineno="467"><highlight class="normal">};</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>start_file(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/>FILE<sp/>*f)</highlight></codeline>
<codeline lineno="470"><highlight class="normal">{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/>start_callbacks(s,<sp/>&amp;stbi_stdio_callbacks,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>f);</highlight></codeline>
<codeline lineno="472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="comment">//static<sp/>void<sp/>stop_file(stbi<sp/>*s)<sp/>{<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>!STBI_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbi_rewind(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s)</highlight></codeline>
<codeline lineno="479"><highlight class="normal">{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>conceptually<sp/>rewind<sp/>SHOULD<sp/>rewind<sp/>to<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>stream,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>we<sp/>just<sp/>rewind<sp/>to<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>initial<sp/>buffer,<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>only<sp/>use<sp/>it<sp/>after<sp/>doing<sp/>&apos;test&apos;,<sp/>which<sp/>only<sp/>ever<sp/>looks<sp/>at<sp/>at<sp/>most<sp/>92<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/>s-&gt;img_buffer<sp/>=<sp/>s-&gt;img_buffer_original;</highlight></codeline>
<codeline lineno="484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi_jpeg_test(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi_uc<sp/>*stbi_jpeg_load(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi_jpeg_info(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi_png_test(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi_uc<sp/>*stbi_png_load(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi_png_info(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi_bmp_test(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi_uc<sp/>*stbi_bmp_load(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi_tga_test(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi_uc<sp/>*stbi_tga_load(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi_tga_info(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi_psd_test(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi_uc<sp/>*stbi_psd_load(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STBI_NO_HDR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi_hdr_test(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>*stbi_hdr_load(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi_pic_test(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi_uc<sp/>*stbi_pic_load(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi_gif_test(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi_uc<sp/>*stbi_gif_load(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi_gif_info(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>not<sp/>threadsafe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*failure_reason;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stbi_failure_reason(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="514"><highlight class="normal">{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>failure_reason;</highlight></codeline>
<codeline lineno="516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)</highlight></codeline>
<codeline lineno="519"><highlight class="normal">{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/>failure_reason<sp/>=<sp/>str;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="comment">//<sp/>e<sp/>-<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="comment">//<sp/>epf<sp/>-<sp/>error<sp/>returning<sp/>pointer<sp/>to<sp/>float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="comment">//<sp/>epuc<sp/>-<sp/>error<sp/>returning<sp/>pointer<sp/>to<sp/>unsigned<sp/>char</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STBI_NO_FAILURE_STRINGS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>e(x,y)<sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(STBI_FAILURE_USERMSG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>e(x,y)<sp/><sp/>e(y)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>e(x,y)<sp/><sp/>e(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>epf(x,y)<sp/><sp/><sp/>((float<sp/>*)<sp/>(e(x,y)?NULL:NULL))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>epuc(x,y)<sp/><sp/>((unsigned<sp/>char<sp/>*)<sp/>(e(x,y)?NULL:NULL))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbi_image_free(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*retval_from_stbi_load)</highlight></codeline>
<codeline lineno="540"><highlight class="normal">{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/>free(retval_from_stbi_load);</highlight></codeline>
<codeline lineno="542"><highlight class="normal">}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STBI_NO_HDR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>*ldr_to_hdr(stbi_uc<sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi_uc<sp/>*hdr_to_ldr(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stbi_load_main(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp)</highlight></codeline>
<codeline lineno="550"><highlight class="normal">{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stbi_jpeg_test(s))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stbi_jpeg_load(s,x,y,comp,req_comp);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stbi_png_test(s))<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stbi_png_load(s,x,y,comp,req_comp);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stbi_bmp_test(s))<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stbi_bmp_load(s,x,y,comp,req_comp);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stbi_gif_test(s))<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stbi_gif_load(s,x,y,comp,req_comp);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stbi_psd_test(s))<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stbi_psd_load(s,x,y,comp,req_comp);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stbi_pic_test(s))<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stbi_pic_load(s,x,y,comp,req_comp);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>STBI_NO_HDR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stbi_hdr_test(s))<sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*hdr<sp/>=<sp/>stbi_hdr_load(s,<sp/>x,y,comp,req_comp);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hdr_to_ldr(hdr,<sp/>*x,<sp/>*y,<sp/>req_comp<sp/>?<sp/>req_comp<sp/>:<sp/>*comp);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>tga<sp/>last<sp/>because<sp/>it&apos;s<sp/>a<sp/>crappy<sp/>test!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stbi_tga_test(s))</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stbi_tga_load(s,x,y,comp,req_comp);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;unknown<sp/>image<sp/>type&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Image<sp/>not<sp/>of<sp/>any<sp/>known<sp/>type,<sp/>or<sp/>corrupt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STBI_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stbi_load(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp)</highlight></codeline>
<codeline lineno="573"><highlight class="normal">{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*f<sp/>=<sp/>fopen(filename,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;can&apos;t<sp/>fopen&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>open<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>stbi_load_from_file(f,x,y,comp,req_comp);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stbi_load_from_file(FILE<sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp)</highlight></codeline>
<codeline lineno="583"><highlight class="normal">{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstbi" kindref="compound">stbi</ref><sp/>s;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/>start_file(&amp;s,f);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>stbi_load_main(&amp;s,x,y,comp,req_comp);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structresult" kindref="compound">result</ref>)<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>&apos;unget&apos;<sp/>all<sp/>the<sp/>characters<sp/>in<sp/>the<sp/>IO<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fseek(f,<sp/>-<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>(s.img_buffer_end<sp/>-<sp/>s.img_buffer),<sp/>SEEK_CUR);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="593"><highlight class="normal">}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stbi_load_from_memory(stbi_uc<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp)</highlight></codeline>
<codeline lineno="597"><highlight class="normal">{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstbi" kindref="compound">stbi</ref><sp/>s;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/>start_mem(&amp;s,<ref refid="classbuffer" kindref="compound">buffer</ref>,len);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stbi_load_main(&amp;s,x,y,comp,req_comp);</highlight></codeline>
<codeline lineno="601"><highlight class="normal">}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stbi_load_from_callbacks(<ref refid="structstbi__io__callbacks" kindref="compound">stbi_io_callbacks</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*clbk,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*user,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp)</highlight></codeline>
<codeline lineno="604"><highlight class="normal">{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstbi" kindref="compound">stbi</ref><sp/>s;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/>start_callbacks(&amp;s,<sp/>(<ref refid="structstbi__io__callbacks" kindref="compound">stbi_io_callbacks</ref><sp/>*)<sp/>clbk,<sp/>user);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stbi_load_main(&amp;s,x,y,comp,req_comp);</highlight></codeline>
<codeline lineno="608"><highlight class="normal">}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STBI_NO_HDR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*stbi_loadf_main(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp)</highlight></codeline>
<codeline lineno="613"><highlight class="normal">{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>STBI_NO_HDR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stbi_hdr_test(s))</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stbi_hdr_load(s,x,y,comp,req_comp);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/>data<sp/>=<sp/>stbi_load_main(s,<sp/>x,<sp/>y,<sp/>comp,<sp/>req_comp);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data)</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ldr_to_hdr(data,<sp/>*x,<sp/>*y,<sp/>req_comp<sp/>?<sp/>req_comp<sp/>:<sp/>*comp);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epf(</highlight><highlight class="stringliteral">&quot;unknown<sp/>image<sp/>type&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Image<sp/>not<sp/>of<sp/>any<sp/>known<sp/>type,<sp/>or<sp/>corrupt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="623"><highlight class="normal">}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*stbi_loadf_from_memory(stbi_uc<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp)</highlight></codeline>
<codeline lineno="626"><highlight class="normal">{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstbi" kindref="compound">stbi</ref><sp/>s;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/>start_mem(&amp;s,<ref refid="classbuffer" kindref="compound">buffer</ref>,len);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stbi_loadf_main(&amp;s,x,y,comp,req_comp);</highlight></codeline>
<codeline lineno="630"><highlight class="normal">}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*stbi_loadf_from_callbacks(<ref refid="structstbi__io__callbacks" kindref="compound">stbi_io_callbacks</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*clbk,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*user,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp)</highlight></codeline>
<codeline lineno="633"><highlight class="normal">{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstbi" kindref="compound">stbi</ref><sp/>s;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/>start_callbacks(&amp;s,<sp/>(<ref refid="structstbi__io__callbacks" kindref="compound">stbi_io_callbacks</ref><sp/>*)<sp/>clbk,<sp/>user);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stbi_loadf_main(&amp;s,x,y,comp,req_comp);</highlight></codeline>
<codeline lineno="637"><highlight class="normal">}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STBI_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*stbi_loadf(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp)</highlight></codeline>
<codeline lineno="641"><highlight class="normal">{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*f<sp/>=<sp/>fopen(filename,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epf(</highlight><highlight class="stringliteral">&quot;can&apos;t<sp/>fopen&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>open<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>stbi_loadf_from_file(f,x,y,comp,req_comp);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="648"><highlight class="normal">}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*stbi_loadf_from_file(FILE<sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp)</highlight></codeline>
<codeline lineno="651"><highlight class="normal">{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstbi" kindref="compound">stbi</ref><sp/>s;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/>start_file(&amp;s,f);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stbi_loadf_main(&amp;s,x,y,comp,req_comp);</highlight></codeline>
<codeline lineno="655"><highlight class="normal">}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>!STBI_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>!STBI_NO_HDR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="comment">//<sp/>these<sp/>is-hdr-or-not<sp/>is<sp/>defined<sp/>independent<sp/>of<sp/>whether<sp/>STBI_NO_HDR<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight><highlight class="comment">//<sp/>defined,<sp/>for<sp/>API<sp/>simplicity;<sp/>if<sp/>STBI_NO_HDR<sp/>is<sp/>defined,<sp/>it<sp/>always</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reports<sp/>false!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_is_hdr_from_memory(stbi_uc<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="665"><highlight class="normal">{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>STBI_NO_HDR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstbi" kindref="compound">stbi</ref><sp/>s;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/>start_mem(&amp;s,<ref refid="classbuffer" kindref="compound">buffer</ref>,len);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stbi_hdr_test(&amp;s);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/>STBI_NOTUSED(<ref refid="classbuffer" kindref="compound">buffer</ref>);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/>STBI_NOTUSED(len);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal">}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STBI_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi_is_hdr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*filename)</highlight></codeline>
<codeline lineno="679"><highlight class="normal">{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*f<sp/>=<sp/>fopen(filename,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>=0;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f)<sp/>{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>stbi_is_hdr_from_file(f);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="687"><highlight class="normal">}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi_is_hdr_from_file(FILE<sp/>*f)</highlight></codeline>
<codeline lineno="690"><highlight class="normal">{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>STBI_NO_HDR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstbi" kindref="compound">stbi</ref><sp/>s;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/>start_file(&amp;s,f);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stbi_hdr_test(&amp;s);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal">}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>!STBI_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi_is_hdr_from_callbacks(<ref refid="structstbi__io__callbacks" kindref="compound">stbi_io_callbacks</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*clbk,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*user)</highlight></codeline>
<codeline lineno="702"><highlight class="normal">{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>STBI_NO_HDR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstbi" kindref="compound">stbi</ref><sp/>s;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/>start_callbacks(&amp;s,<sp/>(<ref refid="structstbi__io__callbacks" kindref="compound">stbi_io_callbacks</ref><sp/>*)<sp/>clbk,<sp/>user);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stbi_hdr_test(&amp;s);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal">}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STBI_NO_HDR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>h2l_gamma_i=1.0f/2.2f,<sp/>h2l_scale_i=1.0f;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>l2h_gamma=2.2f,<sp/>l2h_scale=1.0f;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>stbi_hdr_to_ldr_gamma(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma)<sp/>{<sp/>h2l_gamma_i<sp/>=<sp/>1/gamma;<sp/>}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>stbi_hdr_to_ldr_scale(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale)<sp/>{<sp/>h2l_scale_i<sp/>=<sp/>1/<ref refid="group__gtc__matrix__transform_1gaae2f8b2080622b24b85e1096748599b6" kindref="member">scale</ref>;<sp/>}</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>stbi_ldr_to_hdr_gamma(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma)<sp/>{<sp/>l2h_gamma<sp/>=<sp/>gamma;<sp/>}</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>stbi_ldr_to_hdr_scale(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale)<sp/>{<sp/>l2h_scale<sp/>=<sp/><ref refid="group__gtc__matrix__transform_1gaae2f8b2080622b24b85e1096748599b6" kindref="member">scale</ref>;<sp/>}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Common<sp/>code<sp/>used<sp/>by<sp/>all<sp/>image<sp/>loaders</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal">{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/>SCAN_load=0,</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/>SCAN_type,</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/>SCAN_header</highlight></codeline>
<codeline lineno="734"><highlight class="normal">};</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>refill_buffer(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s)</highlight></codeline>
<codeline lineno="737"><highlight class="normal">{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>(s-&gt;io.read)(s-&gt;io_user_data,(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)s-&gt;buffer_start,s-&gt;buflen);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>at<sp/>end<sp/>of<sp/>file,<sp/>treat<sp/>same<sp/>as<sp/>if<sp/>from<sp/>memory,<sp/>but<sp/>need<sp/>to<sp/>handle<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>where<sp/>s-&gt;img_buffer<sp/>isn&apos;t<sp/>pointing<sp/>to<sp/>safe<sp/>memory,<sp/>e.g.<sp/>0-byte<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;read_from_callbacks<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;img_buffer<sp/>=<sp/>s-&gt;buffer_start;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;img_buffer_end<sp/>=<sp/>s-&gt;buffer_start+1;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*s-&gt;img_buffer<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;img_buffer<sp/>=<sp/>s-&gt;buffer_start;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;img_buffer_end<sp/>=<sp/>s-&gt;buffer_start<sp/>+<sp/>n;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="normal">}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal">stbi_inline<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get8(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s)</highlight></codeline>
<codeline lineno="753"><highlight class="normal">{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;img_buffer<sp/>&lt;<sp/>s-&gt;img_buffer_end)</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*s-&gt;img_buffer++;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;read_from_callbacks)<sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>refill_buffer(s);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*s-&gt;img_buffer++;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="761"><highlight class="normal">}</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal">stbi_inline<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>at_eof(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s)</highlight></codeline>
<codeline lineno="764"><highlight class="normal">{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;io.read)<sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(s-&gt;io.eof)(s-&gt;io_user_data))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>feof()<sp/>is<sp/>true,<sp/>check<sp/>if<sp/>buffer<sp/>=<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>special<sp/>case:<sp/>we&apos;ve<sp/>only<sp/>got<sp/>the<sp/>special<sp/>0<sp/>character<sp/>at<sp/>the<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;read_from_callbacks<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s-&gt;img_buffer<sp/>&gt;=<sp/>s-&gt;img_buffer_end;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="773"><highlight class="normal">}</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal">stbi_inline<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi__uint8<sp/>get8u(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s)</highlight></codeline>
<codeline lineno="776"><highlight class="normal">{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(stbi__uint8)<sp/>get8(s);</highlight></codeline>
<codeline lineno="778"><highlight class="normal">}</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>skip(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="781"><highlight class="normal">{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;io.read)<sp/>{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blen<sp/>=<sp/>(int)<sp/>(s-&gt;img_buffer_end<sp/>-<sp/>s-&gt;img_buffer);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blen<sp/>&lt;<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;img_buffer<sp/>=<sp/>s-&gt;img_buffer_end;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(s-&gt;io.skip)(s-&gt;io_user_data,<sp/>n<sp/>-<sp/>blen);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/>s-&gt;img_buffer<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="791"><highlight class="normal">}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getn(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/>stbi_uc<sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="794"><highlight class="normal">{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;io.read)<sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blen<sp/>=<sp/>(int)<sp/>(s-&gt;img_buffer_end<sp/>-<sp/>s-&gt;img_buffer);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blen<sp/>&lt;<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res,<sp/>count;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>s-&gt;img_buffer,<sp/>blen);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/>(s-&gt;io.read)(s-&gt;io_user_data,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/><ref refid="classbuffer" kindref="compound">buffer</ref><sp/>+<sp/>blen,<sp/>n<sp/>-<sp/>blen);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>(count<sp/>==<sp/>(n-blen));</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;img_buffer<sp/>=<sp/>s-&gt;img_buffer_end;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;img_buffer+n<sp/>&lt;=<sp/>s-&gt;img_buffer_end)<sp/>{</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>s-&gt;img_buffer,<sp/>n);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;img_buffer<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="815"><highlight class="normal">}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get16(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s)</highlight></codeline>
<codeline lineno="818"><highlight class="normal">{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>get8(s);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(z<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>get8(s);</highlight></codeline>
<codeline lineno="821"><highlight class="normal">}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi__uint32<sp/>get32(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s)</highlight></codeline>
<codeline lineno="824"><highlight class="normal">{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/>stbi__uint32<sp/>z<sp/>=<sp/>get16(s);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(z<sp/>&lt;&lt;<sp/>16)<sp/>+<sp/>get16(s);</highlight></codeline>
<codeline lineno="827"><highlight class="normal">}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get16le(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s)</highlight></codeline>
<codeline lineno="830"><highlight class="normal">{</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>get8(s);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z<sp/>+<sp/>(get8(s)<sp/>&lt;&lt;<sp/>8);</highlight></codeline>
<codeline lineno="833"><highlight class="normal">}</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi__uint32<sp/>get32le(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s)</highlight></codeline>
<codeline lineno="836"><highlight class="normal">{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/>stbi__uint32<sp/>z<sp/>=<sp/>get16le(s);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z<sp/>+<sp/>(get16le(s)<sp/>&lt;&lt;<sp/>16);</highlight></codeline>
<codeline lineno="839"><highlight class="normal">}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>generic<sp/>converter<sp/>from<sp/>built-in<sp/>img_n<sp/>to<sp/>req_comp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>individual<sp/>types<sp/>do<sp/>this<sp/>automatically<sp/>as<sp/>much<sp/>as<sp/>possible<sp/>(e.g.<sp/>jpeg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>does<sp/>all<sp/>cases<sp/>internally<sp/>since<sp/>it<sp/>needs<sp/>to<sp/>colorspace<sp/>convert<sp/>anyway,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>and<sp/>it<sp/>never<sp/>has<sp/>alpha,<sp/>so<sp/>very<sp/>few<sp/>cases<sp/>).<sp/>png<sp/>can<sp/>automatically</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>interleave<sp/>an<sp/>alpha=255<sp/>channel,<sp/>but<sp/>falls<sp/>back<sp/>to<sp/>this<sp/>for<sp/>other<sp/>cases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>assume<sp/>data<sp/>buffer<sp/>is<sp/>malloced,<sp/>so<sp/>malloc<sp/>a<sp/>new<sp/>one<sp/>and<sp/>free<sp/>that<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>only<sp/>failure<sp/>mode<sp/>is<sp/>malloc<sp/>failing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi__uint8<sp/>compute_y(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="853"><highlight class="normal">{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(stbi__uint8)<sp/>(((r*77)<sp/>+<sp/>(g*150)<sp/>+<sp/><sp/>(29*b))<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="855"><highlight class="normal">}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*convert_format(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>img_n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y)</highlight></codeline>
<codeline lineno="858"><highlight class="normal">{</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*good;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(req_comp<sp/>==<sp/>img_n)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/>assert(req_comp<sp/>&gt;=<sp/>1<sp/>&amp;&amp;<sp/>req_comp<sp/>&lt;=<sp/>4);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/>good<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(req_comp<sp/>*<sp/>x<sp/>*<sp/>y);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(good<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(data);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;outofmem&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Out<sp/>of<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>(int)<sp/>y;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src<sp/><sp/>=<sp/>data<sp/>+<sp/>j<sp/>*<sp/>x<sp/>*<sp/>img_n<sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dest<sp/>=<sp/>good<sp/>+<sp/>j<sp/>*<sp/>x<sp/>*<sp/>req_comp;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>COMBO(a,b)<sp/><sp/>((a)*8+(b))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>CASE(a,b)<sp/><sp/><sp/>case<sp/>COMBO(a,b):<sp/>for(i=x-1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i,<sp/>src<sp/>+=<sp/>a,<sp/>dest<sp/>+=<sp/>b)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>source<sp/>image<sp/>with<sp/>img_n<sp/>components<sp/>to<sp/>one<sp/>with<sp/>req_comp<sp/>components;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>avoid<sp/>switch<sp/>per<sp/>pixel,<sp/>so<sp/>use<sp/>switch<sp/>per<sp/>scanline<sp/>and<sp/>massive<sp/>macros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(COMBO(img_n,<sp/>req_comp))<sp/>{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE(1,2)<sp/>dest[0]=src[0],<sp/>dest[1]=255;<sp/>break;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE(1,3)<sp/>dest[0]=dest[1]=dest[2]=src[0];<sp/>break;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE(1,4)<sp/>dest[0]=dest[1]=dest[2]=src[0],<sp/>dest[3]=255;<sp/>break;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE(2,1)<sp/>dest[0]=src[0];<sp/>break;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE(2,3)<sp/>dest[0]=dest[1]=dest[2]=src[0];<sp/>break;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE(2,4)<sp/>dest[0]=dest[1]=dest[2]=src[0],<sp/>dest[3]=src[1];<sp/>break;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE(3,4)<sp/>dest[0]=src[0],dest[1]=src[1],dest[2]=src[2],dest[3]=255;<sp/>break;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE(3,1)<sp/>dest[0]=compute_y(src[0],src[1],src[2]);<sp/>break;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE(3,2)<sp/>dest[0]=compute_y(src[0],src[1],src[2]),<sp/>dest[1]<sp/>=<sp/>255;<sp/>break;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE(4,1)<sp/>dest[0]=compute_y(src[0],src[1],src[2]);<sp/>break;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE(4,2)<sp/>dest[0]=compute_y(src[0],src[1],src[2]),<sp/>dest[1]<sp/>=<sp/>src[3];<sp/>break;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE(4,3)<sp/>dest[0]=src[0],dest[1]=src[1],dest[2]=src[2];<sp/>break;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>assert(0);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>CASE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/>free(data);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>good;</highlight></codeline>
<codeline lineno="899"><highlight class="normal">}</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STBI_NO_HDR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>*ldr_to_hdr(stbi_uc<sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp)</highlight></codeline>
<codeline lineno="903"><highlight class="normal">{</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,k,n;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<ref refid="structoutput" kindref="compound">output</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>malloc(x<sp/>*<sp/>y<sp/>*<sp/>comp<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structoutput" kindref="compound">output</ref><sp/>==<sp/>NULL)<sp/>{<sp/>free(data);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epf(</highlight><highlight class="stringliteral">&quot;outofmem&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Out<sp/>of<sp/>memory&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>number<sp/>of<sp/>non-alpha<sp/>components</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comp<sp/>&amp;<sp/>1)<sp/>n<sp/>=<sp/>comp;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>comp-1;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>x*y;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=0;<sp/>k<sp/>&lt;<sp/>n;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structoutput" kindref="compound">output</ref>[i*comp<sp/>+<sp/>k]<sp/>=<sp/>(float)<sp/><ref refid="group__core__func__exponential_1ga717a43207fffc8b5e8e66cf56ded5ace" kindref="member">pow</ref>(data[i*comp+k]/255.0f,<sp/>l2h_gamma)<sp/>*<sp/>l2h_scale;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>&lt;<sp/>comp)<sp/><ref refid="structoutput" kindref="compound">output</ref>[i*comp<sp/>+<sp/>k]<sp/>=<sp/>data[i*comp+k]/255.0f;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/>free(data);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structoutput" kindref="compound">output</ref>;</highlight></codeline>
<codeline lineno="917"><highlight class="normal">}</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>float2int(x)<sp/><sp/><sp/>((int)<sp/>(x))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi_uc<sp/>*hdr_to_ldr(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp)</highlight></codeline>
<codeline lineno="921"><highlight class="normal">{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,k,n;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/>stbi_uc<sp/>*<ref refid="structoutput" kindref="compound">output</ref><sp/>=<sp/>(stbi_uc<sp/>*)<sp/>malloc(x<sp/>*<sp/>y<sp/>*<sp/>comp);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structoutput" kindref="compound">output</ref><sp/>==<sp/>NULL)<sp/>{<sp/>free(data);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;outofmem&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Out<sp/>of<sp/>memory&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>number<sp/>of<sp/>non-alpha<sp/>components</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comp<sp/>&amp;<sp/>1)<sp/>n<sp/>=<sp/>comp;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>comp-1;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>x*y;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=0;<sp/>k<sp/>&lt;<sp/>n;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>(float)<sp/><ref refid="group__core__func__exponential_1ga717a43207fffc8b5e8e66cf56ded5ace" kindref="member">pow</ref>(data[i*comp+k]*h2l_scale_i,<sp/>h2l_gamma_i)<sp/>*<sp/>255<sp/>+<sp/>0.5f;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&lt;<sp/>0)<sp/>z<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&gt;<sp/>255)<sp/>z<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structoutput" kindref="compound">output</ref>[i*comp<sp/>+<sp/>k]<sp/>=<sp/>(stbi__uint8)<sp/>float2int(z);</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>&lt;<sp/>comp)<sp/>{</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>data[i*comp+k]<sp/>*<sp/>255<sp/>+<sp/>0.5f;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&lt;<sp/>0)<sp/>z<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&gt;<sp/>255)<sp/>z<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structoutput" kindref="compound">output</ref>[i*comp<sp/>+<sp/>k]<sp/>=<sp/>(stbi__uint8)<sp/>float2int(z);</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/>free(data);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structoutput" kindref="compound">output</ref>;</highlight></codeline>
<codeline lineno="943"><highlight class="normal">}</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>&quot;baseline&quot;<sp/>JPEG/JFIF<sp/>decoder<sp/>(not<sp/>actually<sp/>fully<sp/>baseline<sp/>implementation)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>simple<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>channel<sp/>subsampling<sp/>of<sp/>at<sp/>most<sp/>2<sp/>in<sp/>each<sp/>dimension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>doesn&apos;t<sp/>support<sp/>delayed<sp/>output<sp/>of<sp/>y-dimension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>simple<sp/>interface<sp/>(only<sp/>one<sp/>output<sp/>format:<sp/>8-bit<sp/>interleaved<sp/>RGB)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>doesn&apos;t<sp/>try<sp/>to<sp/>recover<sp/>corrupt<sp/>jpegs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>doesn&apos;t<sp/>allow<sp/>partial<sp/>loading,<sp/>loading<sp/>multiple<sp/>at<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>still<sp/>fast<sp/>on<sp/>x86<sp/>(copying<sp/>globals<sp/>into<sp/>locals<sp/>doesn&apos;t<sp/>help<sp/>x86)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>allocates<sp/>lots<sp/>of<sp/>intermediate<sp/>memory<sp/>(full<sp/>size<sp/>of<sp/>all<sp/>components)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>non-interleaved<sp/>case<sp/>requires<sp/>this<sp/>anyway</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>allows<sp/>good<sp/>upsampling<sp/>(see<sp/>next)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>high-quality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>upsampled<sp/>channels<sp/>are<sp/>bilinearly<sp/>interpolated,<sp/>even<sp/>across<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>quality<sp/>integer<sp/>IDCT<sp/>derived<sp/>from<sp/>IJG&apos;s<sp/>&apos;slow&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>performance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>fast<sp/>huffman;<sp/>reasonable<sp/>integer<sp/>IDCT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>uses<sp/>a<sp/>lot<sp/>of<sp/>intermediate<sp/>memory,<sp/>could<sp/>cache<sp/>poorly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>load<sp/>http://nothings.org/remote/anemones.jpg<sp/>3<sp/>times<sp/>on<sp/>2.8Ghz<sp/>P4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_jpeg:<sp/><sp/><sp/>1.34<sp/>seconds<sp/>(MSVC6,<sp/>default<sp/>release<sp/>build)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_jpeg:<sp/><sp/><sp/>1.06<sp/>seconds<sp/>(MSVC6,<sp/>processor<sp/>=<sp/>Pentium<sp/>Pro)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IJL11.dll:<sp/><sp/>1.08<sp/>seconds<sp/>(compiled<sp/>by<sp/>intel)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IJG<sp/>1998:<sp/><sp/><sp/>0.98<sp/>seconds<sp/>(MSVC6,<sp/>makefile<sp/>provided<sp/>by<sp/>IJG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IJG<sp/>1998:<sp/><sp/><sp/>0.95<sp/>seconds<sp/>(MSVC6,<sp/>makefile<sp/>+<sp/>proc=PPro)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight><highlight class="comment">//<sp/>huffman<sp/>decoding<sp/>acceleration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAST_BITS<sp/><sp/><sp/>9<sp/><sp/></highlight><highlight class="comment">//<sp/>larger<sp/>handles<sp/>more<sp/>cases;<sp/>smaller<sp/>stomps<sp/>less<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976" refid="structhuffman" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal">{</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/>stbi__uint8<sp/><sp/>fast[1<sp/>&lt;&lt;<sp/>FAST_BITS];</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>weirdly,<sp/>repacking<sp/>this<sp/>into<sp/>AoS<sp/>is<sp/>a<sp/>10%<sp/>speed<sp/>loss,<sp/>instead<sp/>of<sp/>a<sp/>win</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/>stbi__uint16<sp/>code[256];</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/>stbi__uint8<sp/><sp/>values[256];</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/>stbi__uint8<sp/><sp/>size[257];</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxcode[18];</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>delta[17];<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>old<sp/>&apos;firstsymbol&apos;<sp/>-<sp/>old<sp/>&apos;firstcode&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal">}<sp/><ref refid="structhuffman" kindref="compound">huffman</ref>;</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="987" refid="structjpeg" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal">{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>STBI_SIMD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>dequant2[4][64];</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><ref refid="structhuffman" kindref="compound">huffman</ref><sp/>huff_dc[4];</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><ref refid="structhuffman" kindref="compound">huffman</ref><sp/>huff_ac[4];</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/>stbi__uint8<sp/>dequant[4][64];</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight><highlight class="comment">//<sp/>sizes<sp/>for<sp/>components,<sp/>interleaved<sp/>MCUs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>img_h_max,<sp/>img_v_max;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>img_mcu_x,<sp/>img_mcu_y;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>img_mcu_w,<sp/>img_mcu_h;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight><highlight class="comment">//<sp/>definition<sp/>of<sp/>jpeg<sp/>image<sp/>component</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,v;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tq;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hd,ha;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dc_pred;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,y,w2,h2;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi__uint8<sp/>*data;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*raw_data;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi__uint8<sp/>*linebuf;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/>}<sp/>img_comp[4];</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/>stbi__uint32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code_buffer;<sp/></highlight><highlight class="comment">//<sp/>jpeg<sp/>entropy-coded<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code_bits;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>valid<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>marker;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>marker<sp/>seen<sp/>while<sp/>filling<sp/>entropy<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nomore;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>flag<sp/>if<sp/>we<sp/>saw<sp/>a<sp/>marker<sp/>so<sp/>must<sp/>stop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scan_n,<sp/>order[4];</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>restart_interval,<sp/>todo;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal">}<sp/><ref refid="structjpeg" kindref="compound">jpeg</ref>;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>build_huffman(<ref refid="structhuffman" kindref="compound">huffman</ref><sp/>*h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*count)</highlight></codeline>
<codeline lineno="1027"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,k=0,code;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>size<sp/>list<sp/>for<sp/>each<sp/>symbol<sp/>(from<sp/>JPEG<sp/>spec)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>16;<sp/>++i)</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>count[i];<sp/>++j)</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h-&gt;size[k++]<sp/>=<sp/>(stbi__uint8)<sp/>(i+1);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/>h-&gt;size[k]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>actual<sp/>symbols<sp/>(from<sp/>jpeg<sp/>spec)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/>code<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/>k<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=1;<sp/>j<sp/>&lt;=<sp/>16;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>delta<sp/>to<sp/>add<sp/>to<sp/>code<sp/>to<sp/>compute<sp/>symbol<sp/>id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h-&gt;delta[j]<sp/>=<sp/>k<sp/>-<sp/>code;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h-&gt;size[k]<sp/>==<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(h-&gt;size[k]<sp/>==<sp/>j)</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h-&gt;code[k++]<sp/>=<sp/>(stbi__uint16)<sp/>(code++);</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code-1<sp/>&gt;=<sp/>(1<sp/>&lt;&lt;<sp/>j))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>code<sp/>lengths&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>JPEG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>largest<sp/>code<sp/>+<sp/>1<sp/>for<sp/>this<sp/>size,<sp/>preshifted<sp/>as<sp/>needed<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h-&gt;maxcode[j]<sp/>=<sp/>code<sp/>&lt;&lt;<sp/>(16-j);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>code<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/>h-&gt;maxcode[j]<sp/>=<sp/>0xffffffff;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>non-spec<sp/>acceleration<sp/>table;<sp/>255<sp/>is<sp/>flag<sp/>for<sp/>not-accelerated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/>memset(h-&gt;fast,<sp/>255,<sp/>1<sp/>&lt;&lt;<sp/>FAST_BITS);</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>k;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>h-&gt;size[i];</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>&lt;=<sp/>FAST_BITS)<sp/>{</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>h-&gt;code[i]<sp/>&lt;&lt;<sp/>(FAST_BITS-s);</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>(FAST_BITS-s);</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>m;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h-&gt;fast[c+j]<sp/>=<sp/>(stbi__uint8)<sp/>i;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>grow_buffer_unsafe(<ref refid="structjpeg" kindref="compound">jpeg</ref><sp/>*j)</highlight></codeline>
<codeline lineno="1068"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>j-&gt;nomore<sp/>?<sp/>0<sp/>:<sp/>get8(j-&gt;s);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b<sp/>==<sp/>0xff)<sp/>{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>get8(j-&gt;s);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j-&gt;marker<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)<sp/>c;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j-&gt;nomore<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j-&gt;code_buffer<sp/>|=<sp/>b<sp/>&lt;&lt;<sp/>(24<sp/>-<sp/>j-&gt;code_bits);</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j-&gt;code_bits<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j-&gt;code_bits<sp/>&lt;=<sp/>24);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(1<sp/>&lt;&lt;<sp/>n)<sp/>-<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi__uint32<sp/>bmask[17]={0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535};</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight><highlight class="comment">//<sp/>decode<sp/>a<sp/>jpeg<sp/>huffman<sp/>value<sp/>from<sp/>the<sp/>bitstream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal">stbi_inline<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>decode(<ref refid="structjpeg" kindref="compound">jpeg</ref><sp/>*j,<sp/><ref refid="structhuffman" kindref="compound">huffman</ref><sp/>*h)</highlight></codeline>
<codeline lineno="1089"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,k;</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j-&gt;code_bits<sp/>&lt;<sp/>16)<sp/>grow_buffer_unsafe(j);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>look<sp/>at<sp/>the<sp/>top<sp/>FAST_BITS<sp/>and<sp/>determine<sp/>what<sp/>symbol<sp/>ID<sp/>it<sp/>is,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>code<sp/>is<sp/>&lt;=<sp/>FAST_BITS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/>c<sp/>=<sp/>(j-&gt;code_buffer<sp/>&gt;&gt;<sp/>(32<sp/>-<sp/>FAST_BITS))<sp/>&amp;<sp/>((1<sp/>&lt;&lt;<sp/>FAST_BITS)-1);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/>k<sp/>=<sp/>h-&gt;fast[c];</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>&lt;<sp/>255)<sp/>{</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>h-&gt;size[k];</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>&gt;<sp/>j-&gt;code_bits)</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j-&gt;code_buffer<sp/>&lt;&lt;=<sp/>s;</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j-&gt;code_bits<sp/>-=<sp/>s;</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h-&gt;values[k];</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>naive<sp/>test<sp/>is<sp/>to<sp/>shift<sp/>the<sp/>code_buffer<sp/>down<sp/>so<sp/>k<sp/>bits<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>valid,<sp/>then<sp/>test<sp/>against<sp/>maxcode.<sp/>To<sp/>speed<sp/>this<sp/>up,<sp/>we&apos;ve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>preshifted<sp/>maxcode<sp/>left<sp/>so<sp/>that<sp/>it<sp/>has<sp/>(16-k)<sp/>0s<sp/>at<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>end;<sp/>in<sp/>other<sp/>words,<sp/>regardless<sp/>of<sp/>the<sp/>number<sp/>of<sp/>bits,<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wants<sp/>to<sp/>be<sp/>compared<sp/>against<sp/>something<sp/>shifted<sp/>to<sp/>have<sp/>16;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>way<sp/>we<sp/>don&apos;t<sp/>need<sp/>to<sp/>shift<sp/>inside<sp/>the<sp/>loop.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/>temp<sp/>=<sp/>j-&gt;code_buffer<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=FAST_BITS+1<sp/>;<sp/>;<sp/>++k)</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(temp<sp/>&lt;<sp/>h-&gt;maxcode[k])</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>==<sp/>17)<sp/>{</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>error!<sp/>code<sp/>not<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j-&gt;code_bits<sp/>-=<sp/>16;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>&gt;<sp/>j-&gt;code_bits)</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>the<sp/>huffman<sp/>code<sp/>to<sp/>the<sp/>symbol<sp/>id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/>c<sp/>=<sp/>((j-&gt;code_buffer<sp/>&gt;&gt;<sp/>(32<sp/>-<sp/>k))<sp/>&amp;<sp/>bmask[k])<sp/>+<sp/>h-&gt;delta[k];</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/>assert((((j-&gt;code_buffer)<sp/>&gt;&gt;<sp/>(32<sp/>-<sp/>h-&gt;size[c]))<sp/>&amp;<sp/>bmask[h-&gt;size[c]])<sp/>==<sp/>h-&gt;code[c]);</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>the<sp/>id<sp/>to<sp/>a<sp/>symbol</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/>j-&gt;code_bits<sp/>-=<sp/>k;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/>j-&gt;code_buffer<sp/>&lt;&lt;=<sp/>k;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h-&gt;values[c];</highlight></codeline>
<codeline lineno="1135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight><highlight class="comment">//<sp/>combined<sp/>JPEG<sp/>&apos;receive&apos;<sp/>and<sp/>JPEG<sp/>&apos;extend&apos;,<sp/>since<sp/>baseline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight><highlight class="comment">//<sp/>always<sp/>extends<sp/>everything<sp/>it<sp/>receives.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal">stbi_inline<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>extend_receive(<ref refid="structjpeg" kindref="compound">jpeg</ref><sp/>*j,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="1140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>(n-1);</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j-&gt;code_bits<sp/>&lt;<sp/>n)<sp/>grow_buffer_unsafe(j);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#if<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/>k<sp/>=<sp/>stbi_lrot(j-&gt;code_buffer,<sp/>n);</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/>j-&gt;code_buffer<sp/>=<sp/>k<sp/>&amp;<sp/>~bmask[n];</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/>k<sp/>&amp;=<sp/>bmask[n];</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/>j-&gt;code_bits<sp/>-=<sp/>n;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/>k<sp/>=<sp/>(j-&gt;code_buffer<sp/>&gt;&gt;<sp/>(32<sp/>-<sp/>n))<sp/>&amp;<sp/>bmask[n];</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/>j-&gt;code_bits<sp/>-=<sp/>n;</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/>j-&gt;code_buffer<sp/>&lt;&lt;=<sp/>n;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>following<sp/>test<sp/>is<sp/>probably<sp/>a<sp/>random<sp/>branch<sp/>that<sp/>won&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>predict<sp/>well.<sp/>I<sp/>tried<sp/>to<sp/>table<sp/>accelerate<sp/>it<sp/>but<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>maybe<sp/>it&apos;s<sp/>compiling<sp/>as<sp/>a<sp/>conditional<sp/>move?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>&lt;<sp/>m)</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1<sp/>&lt;&lt;<sp/>n)<sp/>+<sp/>k<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight><highlight class="comment">//<sp/>given<sp/>a<sp/>value<sp/>that&apos;s<sp/>at<sp/>position<sp/>X<sp/>in<sp/>the<sp/>zigzag<sp/>stream,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight><highlight class="comment">//<sp/>where<sp/>does<sp/>it<sp/>appear<sp/>in<sp/>the<sp/>8x8<sp/>matrix<sp/>coded<sp/>as<sp/>row-major?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi__uint8<sp/>dezigzag[64+15]<sp/>=</highlight></codeline>
<codeline lineno="1167"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/><sp/>1,<sp/><sp/>8,<sp/>16,<sp/><sp/>9,<sp/><sp/>2,<sp/><sp/>3,<sp/>10,</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/>17,<sp/>24,<sp/>32,<sp/>25,<sp/>18,<sp/>11,<sp/><sp/>4,<sp/><sp/>5,</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/>12,<sp/>19,<sp/>26,<sp/>33,<sp/>40,<sp/>48,<sp/>41,<sp/>34,</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/>27,<sp/>20,<sp/>13,<sp/><sp/>6,<sp/><sp/>7,<sp/>14,<sp/>21,<sp/>28,</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/>35,<sp/>42,<sp/>49,<sp/>56,<sp/>57,<sp/>50,<sp/>43,<sp/>36,</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/>29,<sp/>22,<sp/>15,<sp/>23,<sp/>30,<sp/>37,<sp/>44,<sp/>51,</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/>58,<sp/>59,<sp/>52,<sp/>45,<sp/>38,<sp/>31,<sp/>39,<sp/>46,</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/>53,<sp/>60,<sp/>61,<sp/>54,<sp/>47,<sp/>55,<sp/>62,<sp/>63,</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>let<sp/>corrupt<sp/>input<sp/>sample<sp/>past<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/>63,<sp/>63,<sp/>63,<sp/>63,<sp/>63,<sp/>63,<sp/>63,<sp/>63,</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/>63,<sp/>63,<sp/>63,<sp/>63,<sp/>63,<sp/>63,<sp/>63</highlight></codeline>
<codeline lineno="1179"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight><highlight class="comment">//<sp/>decode<sp/>one<sp/>64-entry<sp/>block--</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>decode_block(<ref refid="structjpeg" kindref="compound">jpeg</ref><sp/>*j,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>data[64],<sp/><ref refid="structhuffman" kindref="compound">huffman</ref><sp/>*hdc,<sp/><ref refid="structhuffman" kindref="compound">huffman</ref><sp/>*hac,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="1183"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>diff,dc,k;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>decode(j,<sp/>hdc);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>huffman<sp/>code&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>JPEG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0<sp/>all<sp/>the<sp/>ac<sp/>values<sp/>now<sp/>so<sp/>we<sp/>can<sp/>do<sp/>it<sp/>32-bits<sp/>at<sp/>a<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/>memset(data,0,64*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(data[0]));</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/>diff<sp/>=<sp/>t<sp/>?<sp/>extend_receive(j,<sp/>t)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/>dc<sp/>=<sp/>j-&gt;img_comp[b].dc_pred<sp/>+<sp/>diff;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/>j-&gt;img_comp[b].dc_pred<sp/>=<sp/>dc;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/>data[0]<sp/>=<sp/>(short)<sp/>dc;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>decode<sp/>AC<sp/>components,<sp/>see<sp/>JPEG<sp/>spec</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/>k<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r,s;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rs<sp/>=<sp/>decode(j,<sp/>hac);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rs<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>huffman<sp/>code&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>JPEG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>rs<sp/>&amp;<sp/>15;</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>rs<sp/>&gt;&gt;<sp/>4;</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rs<sp/>!=<sp/>0xf0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>end<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>+=<sp/>16;</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>+=<sp/>r;</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>decode<sp/>into<sp/>unzigzag&apos;d<sp/>location</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[dezigzag[k++]]<sp/>=<sp/>(short)<sp/>extend_receive(j,s);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(k<sp/>&lt;<sp/>64);</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight><highlight class="comment">//<sp/>take<sp/>a<sp/>-128..127<sp/>value<sp/>and<sp/>clamp<sp/>it<sp/>and<sp/>convert<sp/>to<sp/>0..255</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal">stbi_inline<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi__uint8<sp/><ref refid="group__core__func__common_1ga93bce26c7d80d30a62f5c508f8498a6c" kindref="member">clamp</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)</highlight></codeline>
<codeline lineno="1218"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>trick<sp/>to<sp/>use<sp/>a<sp/>single<sp/>test<sp/>to<sp/>catch<sp/>both<sp/>cases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>x<sp/>&gt;<sp/>255)<sp/>{</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;<sp/>255)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>255;</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(stbi__uint8)<sp/>x;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>f2f(x)<sp/><sp/>(int)<sp/>(((x)<sp/>*<sp/>4096<sp/>+<sp/>0.5))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>fsh(x)<sp/><sp/>((x)<sp/>&lt;&lt;<sp/>12)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight><highlight class="comment">//<sp/>derived<sp/>from<sp/>jidctint<sp/>--<sp/>DCT_ISLOW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IDCT_1D(s0,s1,s2,s3,s4,s5,s6,s7)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1232"><highlight class="preprocessor"><sp/><sp/><sp/>int<sp/>t0,t1,t2,t3,p1,p2,p3,p4,p5,x0,x1,x2,x3;<sp/>\</highlight></codeline>
<codeline lineno="1233"><highlight class="preprocessor"><sp/><sp/><sp/>p2<sp/>=<sp/>s2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1234"><highlight class="preprocessor"><sp/><sp/><sp/>p3<sp/>=<sp/>s6;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1235"><highlight class="preprocessor"><sp/><sp/><sp/>p1<sp/>=<sp/>(p2+p3)<sp/>*<sp/>f2f(0.5411961f);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1236"><highlight class="preprocessor"><sp/><sp/><sp/>t2<sp/>=<sp/>p1<sp/>+<sp/>p3*f2f(-1.847759065f);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1237"><highlight class="preprocessor"><sp/><sp/><sp/>t3<sp/>=<sp/>p1<sp/>+<sp/>p2*f2f(<sp/>0.765366865f);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1238"><highlight class="preprocessor"><sp/><sp/><sp/>p2<sp/>=<sp/>s0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1239"><highlight class="preprocessor"><sp/><sp/><sp/>p3<sp/>=<sp/>s4;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1240"><highlight class="preprocessor"><sp/><sp/><sp/>t0<sp/>=<sp/>fsh(p2+p3);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1241"><highlight class="preprocessor"><sp/><sp/><sp/>t1<sp/>=<sp/>fsh(p2-p3);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1242"><highlight class="preprocessor"><sp/><sp/><sp/>x0<sp/>=<sp/>t0+t3;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1243"><highlight class="preprocessor"><sp/><sp/><sp/>x3<sp/>=<sp/>t0-t3;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1244"><highlight class="preprocessor"><sp/><sp/><sp/>x1<sp/>=<sp/>t1+t2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1245"><highlight class="preprocessor"><sp/><sp/><sp/>x2<sp/>=<sp/>t1-t2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1246"><highlight class="preprocessor"><sp/><sp/><sp/>t0<sp/>=<sp/>s7;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1247"><highlight class="preprocessor"><sp/><sp/><sp/>t1<sp/>=<sp/>s5;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1248"><highlight class="preprocessor"><sp/><sp/><sp/>t2<sp/>=<sp/>s3;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1249"><highlight class="preprocessor"><sp/><sp/><sp/>t3<sp/>=<sp/>s1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1250"><highlight class="preprocessor"><sp/><sp/><sp/>p3<sp/>=<sp/>t0+t2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1251"><highlight class="preprocessor"><sp/><sp/><sp/>p4<sp/>=<sp/>t1+t3;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1252"><highlight class="preprocessor"><sp/><sp/><sp/>p1<sp/>=<sp/>t0+t3;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1253"><highlight class="preprocessor"><sp/><sp/><sp/>p2<sp/>=<sp/>t1+t2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1254"><highlight class="preprocessor"><sp/><sp/><sp/>p5<sp/>=<sp/>(p3+p4)*f2f(<sp/>1.175875602f);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1255"><highlight class="preprocessor"><sp/><sp/><sp/>t0<sp/>=<sp/>t0*f2f(<sp/>0.298631336f);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1256"><highlight class="preprocessor"><sp/><sp/><sp/>t1<sp/>=<sp/>t1*f2f(<sp/>2.053119869f);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1257"><highlight class="preprocessor"><sp/><sp/><sp/>t2<sp/>=<sp/>t2*f2f(<sp/>3.072711026f);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1258"><highlight class="preprocessor"><sp/><sp/><sp/>t3<sp/>=<sp/>t3*f2f(<sp/>1.501321110f);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1259"><highlight class="preprocessor"><sp/><sp/><sp/>p1<sp/>=<sp/>p5<sp/>+<sp/>p1*f2f(-0.899976223f);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1260"><highlight class="preprocessor"><sp/><sp/><sp/>p2<sp/>=<sp/>p5<sp/>+<sp/>p2*f2f(-2.562915447f);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1261"><highlight class="preprocessor"><sp/><sp/><sp/>p3<sp/>=<sp/>p3*f2f(-1.961570560f);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1262"><highlight class="preprocessor"><sp/><sp/><sp/>p4<sp/>=<sp/>p4*f2f(-0.390180644f);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1263"><highlight class="preprocessor"><sp/><sp/><sp/>t3<sp/>+=<sp/>p1+p4;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1264"><highlight class="preprocessor"><sp/><sp/><sp/>t2<sp/>+=<sp/>p2+p3;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1265"><highlight class="preprocessor"><sp/><sp/><sp/>t1<sp/>+=<sp/>p2+p4;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1266"><highlight class="preprocessor"><sp/><sp/><sp/>t0<sp/>+=<sp/>p1+p3;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STBI_SIMD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>stbi_dequantize_t;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>stbi__uint8<sp/>stbi_dequantize_t;</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight><highlight class="comment">//<sp/>.344<sp/>seconds<sp/>on<sp/>3*anemones.jpg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>idct_block(stbi__uint8<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>out_stride,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>data[64],<sp/>stbi_dequantize_t<sp/>*dequantize)</highlight></codeline>
<codeline lineno="1276"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,val[64],*v=val;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/>stbi_dequantize_t<sp/>*dq<sp/>=<sp/>dequantize;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/>stbi__uint8<sp/>*o;</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*d<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>columns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>8;<sp/>++i,++d,++dq,<sp/>++v)<sp/>{</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>all<sp/>zeroes,<sp/>shortcut<sp/>--<sp/>this<sp/>avoids<sp/>dequantizing<sp/>0s<sp/>and<sp/>IDCTing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d[<sp/>8]==0<sp/>&amp;&amp;<sp/>d[16]==0<sp/>&amp;&amp;<sp/>d[24]==0<sp/>&amp;&amp;<sp/>d[32]==0</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>d[40]==0<sp/>&amp;&amp;<sp/>d[48]==0<sp/>&amp;&amp;<sp/>d[56]==0)<sp/>{</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>no<sp/>shortcut<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/>seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>(1|2|3|4|5|6|7)==0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/>seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>all<sp/>separate<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-0.047<sp/>seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>1<sp/>&amp;&amp;<sp/>2|3<sp/>&amp;&amp;<sp/>4|5<sp/>&amp;&amp;<sp/>6|7:<sp/><sp/><sp/><sp/>-0.047<sp/>seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dcterm<sp/>=<sp/>d[0]<sp/>*<sp/>dq[0]<sp/>&lt;&lt;<sp/>2;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[0]<sp/>=<sp/>v[8]<sp/>=<sp/>v[16]<sp/>=<sp/>v[24]<sp/>=<sp/>v[32]<sp/>=<sp/>v[40]<sp/>=<sp/>v[48]<sp/>=<sp/>v[56]<sp/>=<sp/>dcterm;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDCT_1D(d[<sp/>0]*dq[<sp/>0],d[<sp/>8]*dq[<sp/>8],d[16]*dq[16],d[24]*dq[24],</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[32]*dq[32],d[40]*dq[40],d[48]*dq[48],d[56]*dq[56])</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>constants<sp/>scaled<sp/>things<sp/>up<sp/>by<sp/>1&lt;&lt;12;<sp/>let&apos;s<sp/>bring<sp/>them<sp/>back</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>down,<sp/>but<sp/>keep<sp/>2<sp/>extra<sp/>bits<sp/>of<sp/>precision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x0<sp/>+=<sp/>512;<sp/>x1<sp/>+=<sp/>512;<sp/>x2<sp/>+=<sp/>512;<sp/>x3<sp/>+=<sp/>512;</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[<sp/>0]<sp/>=<sp/>(x0+t3)<sp/>&gt;&gt;<sp/>10;</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[56]<sp/>=<sp/>(x0-t3)<sp/>&gt;&gt;<sp/>10;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[<sp/>8]<sp/>=<sp/>(x1+t2)<sp/>&gt;&gt;<sp/>10;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[48]<sp/>=<sp/>(x1-t2)<sp/>&gt;&gt;<sp/>10;</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[16]<sp/>=<sp/>(x2+t1)<sp/>&gt;&gt;<sp/>10;</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[40]<sp/>=<sp/>(x2-t1)<sp/>&gt;&gt;<sp/>10;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[24]<sp/>=<sp/>(x3+t0)<sp/>&gt;&gt;<sp/>10;</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[32]<sp/>=<sp/>(x3-t0)<sp/>&gt;&gt;<sp/>10;</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0,<sp/>v=val,<sp/>o=out;<sp/>i<sp/>&lt;<sp/>8;<sp/>++i,v+=8,o+=out_stride)<sp/>{</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>fast<sp/>case<sp/>since<sp/>the<sp/>first<sp/>1D<sp/>IDCT<sp/>spread<sp/>components<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IDCT_1D(v[0],v[1],v[2],v[3],v[4],v[5],v[6],v[7])</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>constants<sp/>scaled<sp/>things<sp/>up<sp/>by<sp/>1&lt;&lt;12,<sp/>plus<sp/>we<sp/>had<sp/>1&lt;&lt;2<sp/>from<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>loop,<sp/>plus<sp/>horizontal<sp/>and<sp/>vertical<sp/>each<sp/>scale<sp/>by<sp/>sqrt(8)<sp/>so<sp/>together</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we&apos;ve<sp/>got<sp/>an<sp/>extra<sp/>1&lt;&lt;3,<sp/>so<sp/>1&lt;&lt;17<sp/>total<sp/>we<sp/>need<sp/>to<sp/>remove.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>we<sp/>want<sp/>to<sp/>round<sp/>that,<sp/>which<sp/>means<sp/>adding<sp/>0.5<sp/>*<sp/>1&lt;&lt;17,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>aka<sp/>65536.<sp/>Also,<sp/>we&apos;ll<sp/>end<sp/>up<sp/>with<sp/>-128<sp/>to<sp/>127<sp/>that<sp/>we<sp/>want</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>encode<sp/>as<sp/>0..255<sp/>by<sp/>adding<sp/>128,<sp/>so<sp/>we&apos;ll<sp/>add<sp/>that<sp/>before<sp/>the<sp/>shift</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x0<sp/>+=<sp/>65536<sp/>+<sp/>(128&lt;&lt;17);</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x1<sp/>+=<sp/>65536<sp/>+<sp/>(128&lt;&lt;17);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x2<sp/>+=<sp/>65536<sp/>+<sp/>(128&lt;&lt;17);</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x3<sp/>+=<sp/>65536<sp/>+<sp/>(128&lt;&lt;17);</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tried<sp/>computing<sp/>the<sp/>shifts<sp/>into<sp/>temps,<sp/>or&apos;ing<sp/>the<sp/>temps<sp/>to<sp/>see</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>any<sp/>were<sp/>out<sp/>of<sp/>range,<sp/>but<sp/>that<sp/>was<sp/>slower</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>o[0]<sp/>=<sp/><ref refid="group__core__func__common_1ga93bce26c7d80d30a62f5c508f8498a6c" kindref="member">clamp</ref>((x0+t3)<sp/>&gt;&gt;<sp/>17);</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>o[7]<sp/>=<sp/><ref refid="group__core__func__common_1ga93bce26c7d80d30a62f5c508f8498a6c" kindref="member">clamp</ref>((x0-t3)<sp/>&gt;&gt;<sp/>17);</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>o[1]<sp/>=<sp/><ref refid="group__core__func__common_1ga93bce26c7d80d30a62f5c508f8498a6c" kindref="member">clamp</ref>((x1+t2)<sp/>&gt;&gt;<sp/>17);</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>o[6]<sp/>=<sp/><ref refid="group__core__func__common_1ga93bce26c7d80d30a62f5c508f8498a6c" kindref="member">clamp</ref>((x1-t2)<sp/>&gt;&gt;<sp/>17);</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>o[2]<sp/>=<sp/><ref refid="group__core__func__common_1ga93bce26c7d80d30a62f5c508f8498a6c" kindref="member">clamp</ref>((x2+t1)<sp/>&gt;&gt;<sp/>17);</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>o[5]<sp/>=<sp/><ref refid="group__core__func__common_1ga93bce26c7d80d30a62f5c508f8498a6c" kindref="member">clamp</ref>((x2-t1)<sp/>&gt;&gt;<sp/>17);</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>o[3]<sp/>=<sp/><ref refid="group__core__func__common_1ga93bce26c7d80d30a62f5c508f8498a6c" kindref="member">clamp</ref>((x3+t0)<sp/>&gt;&gt;<sp/>17);</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>o[4]<sp/>=<sp/><ref refid="group__core__func__common_1ga93bce26c7d80d30a62f5c508f8498a6c" kindref="member">clamp</ref>((x3-t0)<sp/>&gt;&gt;<sp/>17);</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STBI_SIMD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi_idct_8x8<sp/>stbi_idct_installed<sp/>=<sp/>idct_block;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbi_install_idct(stbi_idct_8x8<sp/>func)</highlight></codeline>
<codeline lineno="1340"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/>stbi_idct_installed<sp/>=<sp/>func;</highlight></codeline>
<codeline lineno="1342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MARKER_none<sp/><sp/>0xff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>there&apos;s<sp/>a<sp/>pending<sp/>marker<sp/>from<sp/>the<sp/>entropy<sp/>stream,<sp/>return<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight><highlight class="comment">//<sp/>otherwise,<sp/>fetch<sp/>from<sp/>the<sp/>stream<sp/>and<sp/>get<sp/>a<sp/>marker.<sp/>if<sp/>there&apos;s<sp/>no</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight><highlight class="comment">//<sp/>marker,<sp/>return<sp/>0xff,<sp/>which<sp/>is<sp/>never<sp/>a<sp/>valid<sp/>marker<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi__uint8<sp/>get_marker(<ref refid="structjpeg" kindref="compound">jpeg</ref><sp/>*j)</highlight></codeline>
<codeline lineno="1350"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/>stbi__uint8<sp/>x;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j-&gt;marker<sp/>!=<sp/>MARKER_none)<sp/>{<sp/>x<sp/>=<sp/>j-&gt;marker;<sp/>j-&gt;marker<sp/>=<sp/>MARKER_none;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;<sp/>}</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/>x<sp/>=<sp/>get8u(j-&gt;s);</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>!=<sp/>0xff)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MARKER_none;</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(x<sp/>==<sp/>0xff)</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>get8u(j-&gt;s);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="1358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>each<sp/>scan,<sp/>we&apos;ll<sp/>have<sp/>scan_n<sp/>components,<sp/>and<sp/>the<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>components<sp/>is<sp/>specified<sp/>by<sp/>order[]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RESTART(x)<sp/><sp/><sp/><sp/><sp/>((x)<sp/>&gt;=<sp/>0xd0<sp/>&amp;&amp;<sp/>(x)<sp/>&lt;=<sp/>0xd7)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"></highlight><highlight class="comment">//<sp/>after<sp/>a<sp/>restart<sp/>interval,<sp/>reset<sp/>the<sp/>entropy<sp/>decoder<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>dc<sp/>prediction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reset(<ref refid="structjpeg" kindref="compound">jpeg</ref><sp/>*j)</highlight></codeline>
<codeline lineno="1367"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/>j-&gt;code_bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/>j-&gt;code_buffer<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/>j-&gt;nomore<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/>j-&gt;img_comp[0].dc_pred<sp/>=<sp/>j-&gt;img_comp[1].dc_pred<sp/>=<sp/>j-&gt;img_comp[2].dc_pred<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/>j-&gt;marker<sp/>=<sp/>MARKER_none;</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/>j-&gt;todo<sp/>=<sp/>j-&gt;restart_interval<sp/>?<sp/>j-&gt;restart_interval<sp/>:<sp/>0x7fffffff;</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>more<sp/>than<sp/>1&lt;&lt;31<sp/>MCUs<sp/>if<sp/>no<sp/>restart_interal?<sp/>that&apos;s<sp/>plenty<sp/>safe,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>since<sp/>we<sp/>don&apos;t<sp/>even<sp/>allow<sp/>1&lt;&lt;30<sp/>pixels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>parse_entropy_coded_data(<ref refid="structjpeg" kindref="compound">jpeg</ref><sp/>*z)</highlight></codeline>
<codeline lineno="1379"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/>reset(z);</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z-&gt;scan_n<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>STBI_SIMD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>__declspec(align(16))</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>data[64];</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>z-&gt;order[0];</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>non-interleaved<sp/>data,<sp/>we<sp/>just<sp/>need<sp/>to<sp/>process<sp/>one<sp/>block<sp/>at<sp/>a<sp/>time,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>trivial<sp/>scanline<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>blocks<sp/>to<sp/>do<sp/>just<sp/>depends<sp/>on<sp/>how<sp/>many<sp/>actual<sp/>&quot;pixels&quot;<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>component<sp/>has,<sp/>independent<sp/>of<sp/>interleaved<sp/>MCU<sp/>blocking<sp/>and<sp/>such</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w<sp/>=<sp/>(z-&gt;img_comp[n].x+7)<sp/>&gt;&gt;<sp/>3;</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>(z-&gt;img_comp[n].y+7)<sp/>&gt;&gt;<sp/>3;</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>h;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>w;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!decode_block(z,<sp/>data,<sp/>z-&gt;huff_dc+z-&gt;img_comp[n].hd,<sp/>z-&gt;huff_ac+z-&gt;img_comp[n].ha,<sp/>n))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>STBI_SIMD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi_idct_installed(z-&gt;img_comp[n].data+z-&gt;img_comp[n].w2*j*8+i*8,<sp/>z-&gt;img_comp[n].w2,<sp/>data,<sp/>z-&gt;dequant2[z-&gt;img_comp[n].tq]);</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idct_block(z-&gt;img_comp[n].data+z-&gt;img_comp[n].w2*j*8+i*8,<sp/>z-&gt;img_comp[n].w2,<sp/>data,<sp/>z-&gt;dequant[z-&gt;img_comp[n].tq]);</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>every<sp/>data<sp/>block<sp/>is<sp/>an<sp/>MCU,<sp/>so<sp/>countdown<sp/>the<sp/>restart<sp/>interval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--z-&gt;todo<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z-&gt;code_bits<sp/>&lt;<sp/>24)<sp/>grow_buffer_unsafe(z);</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>it&apos;s<sp/>NOT<sp/>a<sp/>restart,<sp/>then<sp/>just<sp/>bail,<sp/>so<sp/>we<sp/>get<sp/>corrupt<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rather<sp/>than<sp/>no<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!RESTART(z-&gt;marker))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reset(z);</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>interleaved!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,k,x,y;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>data[64];</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>z-&gt;img_mcu_y;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>z-&gt;img_mcu_x;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scan<sp/>an<sp/>interleaved<sp/>mcu...<sp/>process<sp/>scan_n<sp/>components<sp/>in<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=0;<sp/>k<sp/>&lt;<sp/>z-&gt;scan_n;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>z-&gt;order[k];</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scan<sp/>out<sp/>an<sp/>mcu&apos;s<sp/>worth<sp/>of<sp/>this<sp/>component;<sp/>that&apos;s<sp/>just<sp/>determined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>by<sp/>the<sp/>basic<sp/>H<sp/>and<sp/>V<sp/>specified<sp/>for<sp/>the<sp/>component</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y=0;<sp/>y<sp/>&lt;<sp/>z-&gt;img_comp[n].v;<sp/>++y)<sp/>{</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x=0;<sp/>x<sp/>&lt;<sp/>z-&gt;img_comp[n].h;<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x2<sp/>=<sp/>(i*z-&gt;img_comp[n].h<sp/>+<sp/>x)*8;</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y2<sp/>=<sp/>(j*z-&gt;img_comp[n].v<sp/>+<sp/>y)*8;</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!decode_block(z,<sp/>data,<sp/>z-&gt;huff_dc+z-&gt;img_comp[n].hd,<sp/>z-&gt;huff_ac+z-&gt;img_comp[n].ha,<sp/>n))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>STBI_SIMD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi_idct_installed(z-&gt;img_comp[n].data+z-&gt;img_comp[n].w2*y2+x2,<sp/>z-&gt;img_comp[n].w2,<sp/>data,<sp/>z-&gt;dequant2[z-&gt;img_comp[n].tq]);</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idct_block(z-&gt;img_comp[n].data+z-&gt;img_comp[n].w2*y2+x2,<sp/>z-&gt;img_comp[n].w2,<sp/>data,<sp/>z-&gt;dequant[z-&gt;img_comp[n].tq]);</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>after<sp/>all<sp/>interleaved<sp/>components,<sp/>that&apos;s<sp/>an<sp/>interleaved<sp/>MCU,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>now<sp/>count<sp/>down<sp/>the<sp/>restart<sp/>interval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--z-&gt;todo<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z-&gt;code_bits<sp/>&lt;<sp/>24)<sp/>grow_buffer_unsafe(z);</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>it&apos;s<sp/>NOT<sp/>a<sp/>restart,<sp/>then<sp/>just<sp/>bail,<sp/>so<sp/>we<sp/>get<sp/>corrupt<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rather<sp/>than<sp/>no<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!RESTART(z-&gt;marker))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reset(z);</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>process_marker(<ref refid="structjpeg" kindref="compound">jpeg</ref><sp/>*z,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m)</highlight></codeline>
<codeline lineno="1451"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>L;</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(m)<sp/>{</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MARKER_none:<sp/></highlight><highlight class="comment">//<sp/>no<sp/>marker<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;expected<sp/>marker&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>JPEG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xC2:<sp/></highlight><highlight class="comment">//<sp/>SOF<sp/>-<sp/>progressive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;progressive<sp/>jpeg&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;JPEG<sp/>format<sp/>not<sp/>supported<sp/>(progressive)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xDD:<sp/></highlight><highlight class="comment">//<sp/>DRI<sp/>-<sp/>specify<sp/>restart<sp/>interval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get16(z-&gt;s)<sp/>!=<sp/>4)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>DRI<sp/>len&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>JPEG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;restart_interval<sp/>=<sp/>get16(z-&gt;s);</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xDB:<sp/></highlight><highlight class="comment">//<sp/>DQT<sp/>-<sp/>define<sp/>quantization<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/>get16(z-&gt;s)-2;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(L<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>q<sp/>=<sp/>get8(z-&gt;s);</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>q<sp/>&gt;&gt;<sp/>4;</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>q<sp/>&amp;<sp/>15,i;</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>DQT<sp/>type&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>JPEG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&gt;<sp/>3)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>DQT<sp/>table&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>JPEG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>64;<sp/>++i)</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;dequant[t][dezigzag[i]]<sp/>=<sp/>get8u(z-&gt;s);</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>STBI_SIMD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>64;<sp/>++i)</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;dequant2[t][i]<sp/>=<sp/>z-&gt;dequant[t][i];</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>-=<sp/>65;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>L==0;</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0xC4:<sp/></highlight><highlight class="comment">//<sp/>DHT<sp/>-<sp/>define<sp/>huffman<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/>get16(z-&gt;s)-2;</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(L<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi__uint8<sp/>*v;</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sizes[16],i,n=0;</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>q<sp/>=<sp/>get8(z-&gt;s);</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tc<sp/>=<sp/>q<sp/>&gt;&gt;<sp/>4;</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>th<sp/>=<sp/>q<sp/>&amp;<sp/>15;</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tc<sp/>&gt;<sp/>1<sp/>||<sp/>th<sp/>&gt;<sp/>3)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>DHT<sp/>header&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>JPEG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>16;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizes[i]<sp/>=<sp/>get8(z-&gt;s);</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>+=<sp/>sizes[i];</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>-=<sp/>17;</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tc<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!build_huffman(z-&gt;huff_dc+th,<sp/>sizes))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>z-&gt;huff_dc[th].values;</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!build_huffman(z-&gt;huff_ac+th,<sp/>sizes))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>z-&gt;huff_ac[th].values;</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>get8u(z-&gt;s);</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>-=<sp/>n;</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>L==0;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>comment<sp/>block<sp/>or<sp/>APP<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((m<sp/>&gt;=<sp/>0xE0<sp/>&amp;&amp;<sp/>m<sp/>&lt;=<sp/>0xEF)<sp/>||<sp/>m<sp/>==<sp/>0xFE)<sp/>{</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>skip(z-&gt;s,<sp/>get16(z-&gt;s)-2);</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"></highlight><highlight class="comment">//<sp/>after<sp/>we<sp/>see<sp/>SOS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>process_scan_header(<ref refid="structjpeg" kindref="compound">jpeg</ref><sp/>*z)</highlight></codeline>
<codeline lineno="1520"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Ls<sp/>=<sp/>get16(z-&gt;s);</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/>z-&gt;scan_n<sp/>=<sp/>get8(z-&gt;s);</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z-&gt;scan_n<sp/>&lt;<sp/>1<sp/>||<sp/>z-&gt;scan_n<sp/>&gt;<sp/>4<sp/>||<sp/>z-&gt;scan_n<sp/>&gt;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>z-&gt;s-&gt;img_n)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>SOS<sp/>component<sp/>count&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>JPEG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Ls<sp/>!=<sp/>6+2*z-&gt;scan_n)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>SOS<sp/>len&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>JPEG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>z-&gt;scan_n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>get8(z-&gt;s),<sp/>which;</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>q<sp/>=<sp/>get8(z-&gt;s);</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(which<sp/>=<sp/>0;<sp/>which<sp/>&lt;<sp/>z-&gt;s-&gt;img_n;<sp/>++which)</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z-&gt;img_comp[which].id<sp/>==<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(which<sp/>==<sp/>z-&gt;s-&gt;img_n)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;img_comp[which].hd<sp/>=<sp/>q<sp/>&gt;&gt;<sp/>4;<sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z-&gt;img_comp[which].hd<sp/>&gt;<sp/>3)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>DC<sp/>huff&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>JPEG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;img_comp[which].ha<sp/>=<sp/>q<sp/>&amp;<sp/>15;<sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z-&gt;img_comp[which].ha<sp/>&gt;<sp/>3)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>AC<sp/>huff&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>JPEG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;order[i]<sp/>=<sp/>which;</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get8(z-&gt;s)<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>SOS&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>JPEG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/>get8(z-&gt;s);<sp/></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>63,<sp/>but<sp/>might<sp/>be<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get8(z-&gt;s)<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>SOS&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>JPEG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1542"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>process_frame_header(<ref refid="structjpeg" kindref="compound">jpeg</ref><sp/>*z,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scan)</highlight></codeline>
<codeline lineno="1545"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s<sp/>=<sp/>z-&gt;s;</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Lf,p,i,q,<sp/>h_max=1,v_max=1,c;</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/>Lf<sp/>=<sp/>get16(s);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Lf<sp/>&lt;<sp/>11)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>SOF<sp/>len&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>JPEG&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>JPEG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/>p<sp/><sp/>=<sp/>get8(s);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>!=<sp/>8)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;only<sp/>8-bit&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;JPEG<sp/>format<sp/>not<sp/>supported:<sp/>8-bit<sp/>only&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>JPEG<sp/>baseline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/>s-&gt;img_y<sp/>=<sp/>get16(s);<sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;img_y<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;no<sp/>header<sp/>height&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;JPEG<sp/>format<sp/>not<sp/>supported:<sp/>delayed<sp/>height&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>Legal,<sp/>but<sp/>we<sp/>don&apos;t<sp/>handle<sp/>it--but<sp/>neither<sp/>does<sp/>IJG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/>s-&gt;img_x<sp/>=<sp/>get16(s);<sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;img_x<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;0<sp/>width&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>JPEG&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>JPEG<sp/>requires</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/>c<sp/>=<sp/>get8(s);</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/>3<sp/>&amp;&amp;<sp/>c<sp/>!=<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>component<sp/>count&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>JPEG&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>JFIF<sp/>requires</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/>s-&gt;img_n<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>c;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;img_comp[i].data<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;img_comp[i].linebuf<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Lf<sp/>!=<sp/>8+3*s-&gt;img_n)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>SOF<sp/>len&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>JPEG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>s-&gt;img_n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;img_comp[i].id<sp/>=<sp/>get8(s);</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z-&gt;img_comp[i].id<sp/>!=<sp/>i+1)<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>JFIF<sp/>requires</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z-&gt;img_comp[i].id<sp/>!=<sp/>i)<sp/><sp/></highlight><highlight class="comment">//<sp/>some<sp/>version<sp/>of<sp/>jpegtran<sp/>outputs<sp/>non-JFIF-compliant<sp/>files!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>component<sp/>ID&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>JPEG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>get8(s);</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;img_comp[i].h<sp/>=<sp/>(q<sp/>&gt;&gt;<sp/>4);<sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!z-&gt;img_comp[i].h<sp/>||<sp/>z-&gt;img_comp[i].h<sp/>&gt;<sp/>4)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>H&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>JPEG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;img_comp[i].v<sp/>=<sp/>q<sp/>&amp;<sp/>15;<sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!z-&gt;img_comp[i].v<sp/>||<sp/>z-&gt;img_comp[i].v<sp/>&gt;<sp/>4)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>V&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>JPEG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;img_comp[i].tq<sp/>=<sp/>get8(s);<sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z-&gt;img_comp[i].tq<sp/>&gt;<sp/>3)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>TQ&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>JPEG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scan<sp/>!=<sp/>SCAN_load)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((1<sp/>&lt;&lt;<sp/>30)<sp/>/<sp/>s-&gt;img_x<sp/>/<sp/>s-&gt;img_n<sp/>&lt;<sp/>s-&gt;img_y)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;too<sp/>large&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Image<sp/>too<sp/>large<sp/>to<sp/>decode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"></highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>s-&gt;img_n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z-&gt;img_comp[i].h<sp/>&gt;<sp/>h_max)<sp/>h_max<sp/>=<sp/>z-&gt;img_comp[i].h;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z-&gt;img_comp[i].v<sp/>&gt;<sp/>v_max)<sp/>v_max<sp/>=<sp/>z-&gt;img_comp[i].v;</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>interleaved<sp/>mcu<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/>z-&gt;img_h_max<sp/>=<sp/>h_max;</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/>z-&gt;img_v_max<sp/>=<sp/>v_max;</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/>z-&gt;img_mcu_w<sp/>=<sp/>h_max<sp/>*<sp/>8;</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/>z-&gt;img_mcu_h<sp/>=<sp/>v_max<sp/>*<sp/>8;</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/>z-&gt;img_mcu_x<sp/>=<sp/>(s-&gt;img_x<sp/>+<sp/>z-&gt;img_mcu_w-1)<sp/>/<sp/>z-&gt;img_mcu_w;</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/>z-&gt;img_mcu_y<sp/>=<sp/>(s-&gt;img_y<sp/>+<sp/>z-&gt;img_mcu_h-1)<sp/>/<sp/>z-&gt;img_mcu_h;</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>s-&gt;img_n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>effective<sp/>pixels<sp/>(e.g.<sp/>for<sp/>non-interleaved<sp/>MCU)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;img_comp[i].x<sp/>=<sp/>(s-&gt;img_x<sp/>*<sp/>z-&gt;img_comp[i].h<sp/>+<sp/>h_max-1)<sp/>/<sp/>h_max;</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;img_comp[i].y<sp/>=<sp/>(s-&gt;img_y<sp/>*<sp/>z-&gt;img_comp[i].v<sp/>+<sp/>v_max-1)<sp/>/<sp/>v_max;</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>simplify<sp/>generation,<sp/>we&apos;ll<sp/>allocate<sp/>enough<sp/>memory<sp/>to<sp/>decode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>bogus<sp/>oversized<sp/>data<sp/>from<sp/>using<sp/>interleaved<sp/>MCUs<sp/>and<sp/>their</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>big<sp/>blocks<sp/>(e.g.<sp/>a<sp/>16x16<sp/>iMCU<sp/>on<sp/>an<sp/>image<sp/>of<sp/>width<sp/>33);<sp/>we<sp/>won&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>discard<sp/>the<sp/>extra<sp/>data<sp/>until<sp/>colorspace<sp/>conversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;img_comp[i].w2<sp/>=<sp/>z-&gt;img_mcu_x<sp/>*<sp/>z-&gt;img_comp[i].h<sp/>*<sp/>8;</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;img_comp[i].h2<sp/>=<sp/>z-&gt;img_mcu_y<sp/>*<sp/>z-&gt;img_comp[i].v<sp/>*<sp/>8;</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;img_comp[i].raw_data<sp/>=<sp/>malloc(z-&gt;img_comp[i].w2<sp/>*<sp/>z-&gt;img_comp[i].h2+15);</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z-&gt;img_comp[i].raw_data<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(--i;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(z-&gt;img_comp[i].raw_data);</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;img_comp[i].data<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;outofmem&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Out<sp/>of<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>align<sp/>blocks<sp/>for<sp/>installable-idct<sp/>using<sp/>mmx/sse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;img_comp[i].data<sp/>=<sp/>(stbi__uint8*)<sp/>(((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>z-&gt;img_comp[i].raw_data<sp/>+<sp/>15)<sp/>&amp;<sp/>~15);</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;img_comp[i].linebuf<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1614"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight><highlight class="comment">//<sp/>use<sp/>comparisons<sp/>since<sp/>in<sp/>some<sp/>cases<sp/>we<sp/>handle<sp/>more<sp/>than<sp/>one<sp/>case<sp/>(e.g.<sp/>SOF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DNL(x)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((x)<sp/>==<sp/>0xdc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SOI(x)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((x)<sp/>==<sp/>0xd8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EOI(x)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((x)<sp/>==<sp/>0xd9)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SOF(x)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((x)<sp/>==<sp/>0xc0<sp/>||<sp/>(x)<sp/>==<sp/>0xc1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SOS(x)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((x)<sp/>==<sp/>0xda)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>decode_jpeg_header(<ref refid="structjpeg" kindref="compound">jpeg</ref><sp/>*z,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scan)</highlight></codeline>
<codeline lineno="1624"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m;</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/>z-&gt;marker<sp/>=<sp/>MARKER_none;<sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>cached<sp/>marker<sp/>to<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/>m<sp/>=<sp/>get_marker(z);</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!SOI(m))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;no<sp/>SOI&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>JPEG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scan<sp/>==<sp/>SCAN_type)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/>m<sp/>=<sp/>get_marker(z);</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!SOF(m))<sp/>{</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!process_marker(z,m))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>get_marker(z);</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(m<sp/>==<sp/>MARKER_none)<sp/>{</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>some<sp/>files<sp/>have<sp/>extra<sp/>padding<sp/>after<sp/>their<sp/>blocks,<sp/>so<sp/>ok,<sp/>we&apos;ll<sp/>scan</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(at_eof(z-&gt;s))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;no<sp/>SOF&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Corrupt<sp/>JPEG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>get_marker(z);</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!process_frame_header(z,<sp/>scan))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1642"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>decode_jpeg_image(<ref refid="structjpeg" kindref="compound">jpeg</ref><sp/>*j)</highlight></codeline>
<codeline lineno="1645"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m;</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/>j-&gt;restart_interval<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!decode_jpeg_header(j,<sp/>SCAN_load))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/>m<sp/>=<sp/>get_marker(j);</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!EOI(m))<sp/>{</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SOS(m))<sp/>{</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!process_scan_header(j))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parse_entropy_coded_data(j))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j-&gt;marker<sp/>==<sp/>MARKER_none<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>0s<sp/>at<sp/>the<sp/>end<sp/>of<sp/>image<sp/>data<sp/>from<sp/>IP<sp/>Kamera<sp/>9060</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!at_eof(j-&gt;s))<sp/>{</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>get8(j-&gt;s);</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>==<sp/>255)<sp/>{</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j-&gt;marker<sp/>=<sp/>get8u(j-&gt;s);</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>reach<sp/>eof<sp/>without<sp/>hitting<sp/>a<sp/>marker,<sp/>get_marker()<sp/>below<sp/>will<sp/>fail<sp/>and<sp/>we&apos;ll<sp/>eventually<sp/>return<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!process_marker(j,<sp/>m))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>get_marker(j);</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1673"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight><highlight class="comment">//<sp/>static<sp/>jfif-centered<sp/>resampling<sp/>(across<sp/>block<sp/>boundaries)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>stbi__uint8<sp/>*(*resample_row_func)(stbi__uint8<sp/>*out,<sp/>stbi__uint8<sp/>*in0,<sp/>stbi__uint8<sp/>*in1,</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hs);</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>div4(x)<sp/>((stbi__uint8)<sp/>((x)<sp/>&gt;&gt;<sp/>2))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi__uint8<sp/>*resample_row_1(stbi__uint8<sp/>*out,<sp/>stbi__uint8<sp/>*in_near,<sp/>stbi__uint8<sp/>*in_far,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hs)</highlight></codeline>
<codeline lineno="1683"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/>STBI_NOTUSED(out);</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/>STBI_NOTUSED(in_far);</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/>STBI_NOTUSED(w);</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/>STBI_NOTUSED(hs);</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>in_near;</highlight></codeline>
<codeline lineno="1689"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi__uint8*<sp/>resample_row_v_2(stbi__uint8<sp/>*out,<sp/>stbi__uint8<sp/>*in_near,<sp/>stbi__uint8<sp/>*in_far,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hs)</highlight></codeline>
<codeline lineno="1692"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>generate<sp/>two<sp/>samples<sp/>vertically<sp/>for<sp/>every<sp/>one<sp/>in<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/>STBI_NOTUSED(hs);</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>w;<sp/>++i)</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[i]<sp/>=<sp/>div4(3*in_near[i]<sp/>+<sp/>in_far[i]<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="1699"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi__uint8*<sp/><sp/>resample_row_h_2(stbi__uint8<sp/>*out,<sp/>stbi__uint8<sp/>*in_near,<sp/>stbi__uint8<sp/>*in_far,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hs)</highlight></codeline>
<codeline lineno="1702"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>generate<sp/>two<sp/>samples<sp/>horizontally<sp/>for<sp/>every<sp/>one<sp/>in<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/>stbi__uint8<sp/>*input<sp/>=<sp/>in_near;</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(w<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>only<sp/>one<sp/>sample,<sp/>can&apos;t<sp/>do<sp/>any<sp/>interpolation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>out[1]<sp/>=<sp/>input[0];</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/>out[0]<sp/>=<sp/>input[0];</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/>out[1]<sp/>=<sp/>div4(input[0]*3<sp/>+<sp/>input[1]<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=1;<sp/>i<sp/>&lt;<sp/>w-1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>3*input[i]+2;</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[i*2+0]<sp/>=<sp/>div4(n+input[i-1]);</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[i*2+1]<sp/>=<sp/>div4(n+input[i+1]);</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/>out[i*2+0]<sp/>=<sp/>div4(input[w-2]*3<sp/>+<sp/>input[w-1]<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/>out[i*2+1]<sp/>=<sp/>input[w-1];</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/>STBI_NOTUSED(in_far);</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/>STBI_NOTUSED(hs);</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="1727"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>div16(x)<sp/>((stbi__uint8)<sp/>((x)<sp/>&gt;&gt;<sp/>4))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi__uint8<sp/>*resample_row_hv_2(stbi__uint8<sp/>*out,<sp/>stbi__uint8<sp/>*in_near,<sp/>stbi__uint8<sp/>*in_far,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hs)</highlight></codeline>
<codeline lineno="1732"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>generate<sp/>2x2<sp/>samples<sp/>for<sp/>every<sp/>one<sp/>in<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,t0,t1;</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(w<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>out[1]<sp/>=<sp/>div4(3*in_near[0]<sp/>+<sp/>in_far[0]<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"></highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/>t1<sp/>=<sp/>3*in_near[0]<sp/>+<sp/>in_far[0];</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/>out[0]<sp/>=<sp/>div4(t1+2);</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=1;<sp/>i<sp/>&lt;<sp/>w;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t0<sp/>=<sp/>t1;</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t1<sp/>=<sp/>3*in_near[i]+in_far[i];</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[i*2-1]<sp/>=<sp/>div16(3*t0<sp/>+<sp/>t1<sp/>+<sp/>8);</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[i*2<sp/><sp/>]<sp/>=<sp/>div16(3*t1<sp/>+<sp/>t0<sp/>+<sp/>8);</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/>out[w*2-1]<sp/>=<sp/>div4(t1+2);</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"></highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/>STBI_NOTUSED(hs);</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"></highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="1753"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"></highlight></codeline>
<codeline lineno="1755"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi__uint8<sp/>*resample_row_generic(stbi__uint8<sp/>*out,<sp/>stbi__uint8<sp/>*in_near,<sp/>stbi__uint8<sp/>*in_far,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hs)</highlight></codeline>
<codeline lineno="1756"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>resample<sp/>with<sp/>nearest-neighbor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j;</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/>STBI_NOTUSED(in_far);</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>w;<sp/>++i)</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>hs;<sp/>++j)</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[i*hs+j]<sp/>=<sp/>in_near[i];</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="1764"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>float2fixed(x)<sp/><sp/>((int)<sp/>((x)<sp/>*<sp/>65536<sp/>+<sp/>0.5))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"></highlight><highlight class="comment">//<sp/>0.38<sp/>seconds<sp/>on<sp/>3*anemones.jpg<sp/><sp/><sp/>(0.25<sp/>with<sp/>processor<sp/>=<sp/>Pro)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"></highlight><highlight class="comment">//<sp/>VC6<sp/>without<sp/>processor=Pro<sp/>is<sp/>generating<sp/>multiple<sp/>LEAs<sp/>per<sp/>multiply!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>YCbCr_to_RGB_row(stbi__uint8<sp/>*out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>stbi__uint8<sp/>*y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>stbi__uint8<sp/>*pcb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>stbi__uint8<sp/>*pcr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>)</highlight></codeline>
<codeline lineno="1771"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>count;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y_fixed<sp/>=<sp/>(y[i]<sp/>&lt;&lt;<sp/>16)<sp/>+<sp/>32768;<sp/></highlight><highlight class="comment">//<sp/>rounding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r,g,b;</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cr<sp/>=<sp/>pcr[i]<sp/>-<sp/>128;</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cb<sp/>=<sp/>pcb[i]<sp/>-<sp/>128;</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>y_fixed<sp/>+<sp/>cr*float2fixed(1.40200f);</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>y_fixed<sp/>-<sp/>cr*float2fixed(0.71414f)<sp/>-<sp/>cb*float2fixed(0.34414f);</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>y_fixed<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>cb*float2fixed(1.77200f);</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>&gt;&gt;=<sp/>16;</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>&gt;&gt;=<sp/>16;</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>&gt;&gt;=<sp/>16;</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)<sp/>r<sp/>&gt;<sp/>255)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>&lt;<sp/>0)<sp/>r<sp/>=<sp/>0;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>255;<sp/>}</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)<sp/>g<sp/>&gt;<sp/>255)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g<sp/>&lt;<sp/>0)<sp/>g<sp/>=<sp/>0;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>g<sp/>=<sp/>255;<sp/>}</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)<sp/>b<sp/>&gt;<sp/>255)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b<sp/>&lt;<sp/>0)<sp/>b<sp/>=<sp/>0;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>255;<sp/>}</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>(stbi__uint8)r;</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[1]<sp/>=<sp/>(stbi__uint8)g;</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[2]<sp/>=<sp/>(stbi__uint8)b;</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[3]<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>+=<sp/><ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>;</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1793"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"></highlight></codeline>
<codeline lineno="1795"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STBI_SIMD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi_YCbCr_to_RGB_run<sp/>stbi_YCbCr_installed<sp/>=<sp/>YCbCr_to_RGB_row;</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbi_install_YCbCr_to_RGB(stbi_YCbCr_to_RGB_run<sp/>func)</highlight></codeline>
<codeline lineno="1799"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/>stbi_YCbCr_installed<sp/>=<sp/>func;</highlight></codeline>
<codeline lineno="1801"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clean<sp/>up<sp/>the<sp/>temporary<sp/>component<sp/>buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1806"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cleanup_jpeg(<ref refid="structjpeg" kindref="compound">jpeg</ref><sp/>*j)</highlight></codeline>
<codeline lineno="1807"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>j-&gt;s-&gt;img_n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j-&gt;img_comp[i].data)<sp/>{</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(j-&gt;img_comp[i].raw_data);</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j-&gt;img_comp[i].data<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j-&gt;img_comp[i].linebuf)<sp/>{</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(j-&gt;img_comp[i].linebuf);</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j-&gt;img_comp[i].linebuf<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1819"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"></highlight></codeline>
<codeline lineno="1821" refid="structstbi__resample" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1822"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/>resample_row_func<sp/>resample;</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/>stbi__uint8<sp/>*line0,*line1;</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hs,vs;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>expansion<sp/>factor<sp/>in<sp/>each<sp/>axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w_lores;<sp/></highlight><highlight class="comment">//<sp/>horizontal<sp/>pixels<sp/>pre-expansion<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ystep;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>how<sp/>far<sp/>through<sp/>vertical<sp/>expansion<sp/>we<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ypos;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>pre-expansion<sp/>row<sp/>we&apos;re<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal">}<sp/><ref refid="structstbi__resample" kindref="compound">stbi_resample</ref>;</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"></highlight></codeline>
<codeline lineno="1831"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi__uint8<sp/>*load_jpeg_image(<ref refid="structjpeg" kindref="compound">jpeg</ref><sp/>*z,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*out_x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*out_y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp)</highlight></codeline>
<codeline lineno="1832"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>decode_n;</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>validate<sp/>req_comp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(req_comp<sp/>&lt;<sp/>0<sp/>||<sp/>req_comp<sp/>&gt;<sp/>4)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;bad<sp/>req_comp&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Internal<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/>z-&gt;s-&gt;img_n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"></highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>load<sp/>a<sp/>jpeg<sp/>image<sp/>from<sp/>whichever<sp/>source</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!decode_jpeg_image(z))<sp/>{<sp/>cleanup_jpeg(z);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/>}</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"></highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>determine<sp/>actual<sp/>number<sp/>of<sp/>components<sp/>to<sp/>generate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>req_comp<sp/>?<sp/>req_comp<sp/>:<sp/>z-&gt;s-&gt;img_n;</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"></highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z-&gt;s-&gt;img_n<sp/>==<sp/>3<sp/>&amp;&amp;<sp/>n<sp/>&lt;<sp/>3)</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>decode_n<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>decode_n<sp/>=<sp/>z-&gt;s-&gt;img_n;</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"></highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>resample<sp/>and<sp/>color-convert</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j;</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi__uint8<sp/>*<ref refid="structoutput" kindref="compound">output</ref>;</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi__uint8<sp/>*coutput[4];</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"></highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structstbi__resample" kindref="compound">stbi_resample</ref><sp/>res_comp[4];</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"></highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=0;<sp/>k<sp/>&lt;<sp/>decode_n;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structstbi__resample" kindref="compound">stbi_resample</ref><sp/>*r<sp/>=<sp/>&amp;res_comp[k];</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>line<sp/>buffer<sp/>big<sp/>enough<sp/>for<sp/>upsampling<sp/>off<sp/>the<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>upsample<sp/>factor<sp/>of<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;img_comp[k].linebuf<sp/>=<sp/>(stbi__uint8<sp/>*)<sp/>malloc(z-&gt;s-&gt;img_x<sp/>+<sp/>3);</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!z-&gt;img_comp[k].linebuf)<sp/>{<sp/>cleanup_jpeg(z);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;outofmem&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Out<sp/>of<sp/>memory&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;hs<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>z-&gt;img_h_max<sp/>/<sp/>z-&gt;img_comp[k].h;</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;vs<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>z-&gt;img_v_max<sp/>/<sp/>z-&gt;img_comp[k].v;</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;ystep<sp/><sp/><sp/>=<sp/>r-&gt;vs<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;w_lores<sp/>=<sp/>(z-&gt;s-&gt;img_x<sp/>+<sp/>r-&gt;hs-1)<sp/>/<sp/>r-&gt;hs;</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;ypos<sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;line0<sp/><sp/><sp/>=<sp/>r-&gt;line1<sp/>=<sp/>z-&gt;img_comp[k].data;</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/><sp/><sp/><sp/><sp/><sp/>(r-&gt;hs<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>r-&gt;vs<sp/>==<sp/>1)<sp/>r-&gt;resample<sp/>=<sp/>resample_row_1;</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r-&gt;hs<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>r-&gt;vs<sp/>==<sp/>2)<sp/>r-&gt;resample<sp/>=<sp/>resample_row_v_2;</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r-&gt;hs<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>r-&gt;vs<sp/>==<sp/>1)<sp/>r-&gt;resample<sp/>=<sp/>resample_row_h_2;</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r-&gt;hs<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>r-&gt;vs<sp/>==<sp/>2)<sp/>r-&gt;resample<sp/>=<sp/>resample_row_hv_2;</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;resample<sp/>=<sp/>resample_row_generic;</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"></highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can&apos;t<sp/>error<sp/>after<sp/>this<sp/>so,<sp/>this<sp/>is<sp/>safe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structoutput" kindref="compound">output</ref><sp/>=<sp/>(stbi__uint8<sp/>*)<sp/>malloc(n<sp/>*<sp/>z-&gt;s-&gt;img_x<sp/>*<sp/>z-&gt;s-&gt;img_y<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="structoutput" kindref="compound">output</ref>)<sp/>{<sp/>cleanup_jpeg(z);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;outofmem&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Out<sp/>of<sp/>memory&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>go<sp/>ahead<sp/>and<sp/>resample</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>z-&gt;s-&gt;img_y;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi__uint8<sp/>*out<sp/>=<sp/><ref refid="structoutput" kindref="compound">output</ref><sp/>+<sp/>n<sp/>*<sp/>z-&gt;s-&gt;img_x<sp/>*<sp/>j;</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=0;<sp/>k<sp/>&lt;<sp/>decode_n;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structstbi__resample" kindref="compound">stbi_resample</ref><sp/>*r<sp/>=<sp/>&amp;res_comp[k];</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y_bot<sp/>=<sp/>r-&gt;ystep<sp/>&gt;=<sp/>(r-&gt;vs<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coutput[k]<sp/>=<sp/>r-&gt;resample(z-&gt;img_comp[k].linebuf,</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y_bot<sp/>?<sp/>r-&gt;line1<sp/>:<sp/>r-&gt;line0,</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y_bot<sp/>?<sp/>r-&gt;line0<sp/>:<sp/>r-&gt;line1,</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;w_lores,<sp/>r-&gt;hs);</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++r-&gt;ystep<sp/>&gt;=<sp/>r-&gt;vs)<sp/>{</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;ystep<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;line0<sp/>=<sp/>r-&gt;line1;</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++r-&gt;ypos<sp/>&lt;<sp/>z-&gt;img_comp[k].y)</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;line1<sp/>+=<sp/>z-&gt;img_comp[k].w2;</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi__uint8<sp/>*y<sp/>=<sp/>coutput[0];</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z-&gt;s-&gt;img_n<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>STBI_SIMD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi_YCbCr_installed(out,<sp/>y,<sp/>coutput[1],<sp/>coutput[2],<sp/>z-&gt;s-&gt;img_x,<sp/>n);</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>YCbCr_to_RGB_row(out,<sp/>y,<sp/>coutput[1],<sp/>coutput[2],<sp/>z-&gt;s-&gt;img_x,<sp/>n);</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>z-&gt;s-&gt;img_x;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>out[1]<sp/>=<sp/>out[2]<sp/>=<sp/>y[i];</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[3]<sp/>=<sp/>255;<sp/></highlight><highlight class="comment">//<sp/>not<sp/>used<sp/>if<sp/>n==3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi__uint8<sp/>*y<sp/>=<sp/>coutput[0];</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>z-&gt;s-&gt;img_x;<sp/>++i)<sp/>out[i]<sp/>=<sp/>y[i];</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>z-&gt;s-&gt;img_x;<sp/>++i)<sp/>*out++<sp/>=<sp/>y[i],<sp/>*out++<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cleanup_jpeg(z);</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*out_x<sp/>=<sp/>z-&gt;s-&gt;img_x;</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*out_y<sp/>=<sp/>z-&gt;s-&gt;img_y;</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comp)<sp/>*comp<sp/><sp/>=<sp/>z-&gt;s-&gt;img_n;<sp/></highlight><highlight class="comment">//<sp/>report<sp/>original<sp/>components,<sp/>not<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structoutput" kindref="compound">output</ref>;</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1929"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"></highlight></codeline>
<codeline lineno="1931"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stbi_jpeg_load(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp)</highlight></codeline>
<codeline lineno="1932"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><ref refid="structjpeg" kindref="compound">jpeg</ref><sp/>j;</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/>j.s<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>load_jpeg_image(&amp;j,<sp/>x,y,comp,req_comp);</highlight></codeline>
<codeline lineno="1936"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"></highlight></codeline>
<codeline lineno="1938"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_jpeg_test(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s)</highlight></codeline>
<codeline lineno="1939"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><ref refid="structjpeg" kindref="compound">jpeg</ref><sp/>j;</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/>j.s<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/>r<sp/>=<sp/>decode_jpeg_header(&amp;j,<sp/>SCAN_type);</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/>stbi_rewind(s);</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="1946"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"></highlight></codeline>
<codeline lineno="1948"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_jpeg_info_raw(<ref refid="structjpeg" kindref="compound">jpeg</ref><sp/>*j,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp)</highlight></codeline>
<codeline lineno="1949"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!decode_jpeg_header(j,<sp/>SCAN_header))<sp/>{</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi_rewind(<sp/>j-&gt;s<sp/>);</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x)<sp/>*x<sp/>=<sp/>j-&gt;s-&gt;img_x;</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y)<sp/>*y<sp/>=<sp/>j-&gt;s-&gt;img_y;</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comp)<sp/>*comp<sp/>=<sp/>j-&gt;s-&gt;img_n;</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1958"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"></highlight></codeline>
<codeline lineno="1960"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_jpeg_info(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp)</highlight></codeline>
<codeline lineno="1961"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><ref refid="structjpeg" kindref="compound">jpeg</ref><sp/>j;</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/>j.s<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stbi_jpeg_info_raw(&amp;j,<sp/>x,<sp/>y,<sp/>comp);</highlight></codeline>
<codeline lineno="1965"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"></highlight></codeline>
<codeline lineno="1967"><highlight class="normal"></highlight><highlight class="comment">//<sp/>public<sp/>domain<sp/>zlib<sp/>decode<sp/><sp/><sp/><sp/>v0.2<sp/><sp/>Sean<sp/>Barrett<sp/>2006-11-18</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1968"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>simple<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1969"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>all<sp/>input<sp/>must<sp/>be<sp/>provided<sp/>in<sp/>an<sp/>upfront<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1970"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>all<sp/>output<sp/>is<sp/>written<sp/>to<sp/>a<sp/>single<sp/>output<sp/>buffer<sp/>(can<sp/>malloc/realloc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1971"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>performance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1972"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>fast<sp/>huffman</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1973"><highlight class="normal"></highlight></codeline>
<codeline lineno="1974"><highlight class="normal"></highlight><highlight class="comment">//<sp/>fast-way<sp/>is<sp/>faster<sp/>to<sp/>check<sp/>than<sp/>jpeg<sp/>huffman,<sp/>but<sp/>slow<sp/>way<sp/>is<sp/>slower</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1975"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZFAST_BITS<sp/><sp/>9<sp/></highlight><highlight class="comment">//<sp/>accelerate<sp/>all<sp/>cases<sp/>in<sp/>default<sp/>tables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1976"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZFAST_MASK<sp/><sp/>((1<sp/>&lt;&lt;<sp/>ZFAST_BITS)<sp/>-<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1977"><highlight class="normal"></highlight></codeline>
<codeline lineno="1978"><highlight class="normal"></highlight><highlight class="comment">//<sp/>zlib-style<sp/>huffman<sp/>encoding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1979"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(jpegs<sp/>packs<sp/>from<sp/>left,<sp/>zlib<sp/>from<sp/>right,<sp/>so<sp/>can&apos;t<sp/>share<sp/>code)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1980" refid="structzhuffman" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/>stbi__uint16<sp/>fast[1<sp/>&lt;&lt;<sp/>ZFAST_BITS];</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/>stbi__uint16<sp/>firstcode[16];</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxcode[17];</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/>stbi__uint16<sp/>firstsymbol[16];</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/>stbi__uint8<sp/><sp/>size[288];</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/>stbi__uint16<sp/><ref refid="classvalue" kindref="compound">value</ref>[288];<sp/></highlight></codeline>
<codeline lineno="1988"><highlight class="normal">}<sp/><ref refid="structzhuffman" kindref="compound">zhuffman</ref>;</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"></highlight></codeline>
<codeline lineno="1990"><highlight class="normal">stbi_inline<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bitreverse16(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="1991"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>((n<sp/>&amp;<sp/>0xAAAA)<sp/>&gt;&gt;<sp/><sp/>1)<sp/>|<sp/>((n<sp/>&amp;<sp/>0x5555)<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>((n<sp/>&amp;<sp/>0xCCCC)<sp/>&gt;&gt;<sp/><sp/>2)<sp/>|<sp/>((n<sp/>&amp;<sp/>0x3333)<sp/>&lt;&lt;<sp/>2);</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>((n<sp/>&amp;<sp/>0xF0F0)<sp/>&gt;&gt;<sp/><sp/>4)<sp/>|<sp/>((n<sp/>&amp;<sp/>0x0F0F)<sp/>&lt;&lt;<sp/>4);</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>((n<sp/>&amp;<sp/>0xFF00)<sp/>&gt;&gt;<sp/><sp/>8)<sp/>|<sp/>((n<sp/>&amp;<sp/>0x00FF)<sp/>&lt;&lt;<sp/>8);</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="1997"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"></highlight></codeline>
<codeline lineno="1999"><highlight class="normal">stbi_inline<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_reverse(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits)</highlight></codeline>
<codeline lineno="2000"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/>assert(bits<sp/>&lt;=<sp/>16);</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>bit<sp/>reverse<sp/>n<sp/>bits,<sp/>reverse<sp/>16<sp/>and<sp/>shift</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>e.g.<sp/>11<sp/>bits,<sp/>bit<sp/>reverse<sp/>and<sp/>shift<sp/>away<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bitreverse16(v)<sp/>&gt;&gt;<sp/>(16-bits);</highlight></codeline>
<codeline lineno="2005"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"></highlight></codeline>
<codeline lineno="2007"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>zbuild_huffman(<ref refid="structzhuffman" kindref="compound">zhuffman</ref><sp/>*z,<sp/>stbi__uint8<sp/>*sizelist,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num)</highlight></codeline>
<codeline lineno="2008"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,k=0;</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code,<sp/>next_code[16],<sp/>sizes[17];</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"></highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DEFLATE<sp/>spec<sp/>for<sp/>generating<sp/>codes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/>memset(sizes,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(sizes));</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/>memset(z-&gt;fast,<sp/>255,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(z-&gt;fast));</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>num;<sp/>++i)<sp/></highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++sizes[sizelist[i]];</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/>sizes[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=1;<sp/>i<sp/>&lt;<sp/>16;<sp/>++i)</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(sizes[i]<sp/>&lt;=<sp/>(1<sp/>&lt;&lt;<sp/>i));</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/>code<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=1;<sp/>i<sp/>&lt;<sp/>16;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>next_code[i]<sp/>=<sp/>code;</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;firstcode[i]<sp/>=<sp/>(stbi__uint16)<sp/>code;</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;firstsymbol[i]<sp/>=<sp/>(stbi__uint16)<sp/>k;</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>code<sp/>=<sp/>(code<sp/>+<sp/>sizes[i]);</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sizes[i])</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code-1<sp/>&gt;=<sp/>(1<sp/>&lt;&lt;<sp/>i))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>codelengths&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>JPEG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;maxcode[i]<sp/>=<sp/>code<sp/>&lt;&lt;<sp/>(16-i);<sp/></highlight><highlight class="comment">//<sp/>preshift<sp/>for<sp/>inner<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>code<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>+=<sp/>sizes[i];</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/>z-&gt;maxcode[16]<sp/>=<sp/>0x10000;<sp/></highlight><highlight class="comment">//<sp/>sentinel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>num;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>sizelist[i];</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)<sp/>{</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>next_code[s]<sp/>-<sp/>z-&gt;firstcode[s]<sp/>+<sp/>z-&gt;firstsymbol[s];</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;size[c]<sp/>=<sp/>(stbi__uint8)s;</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;value[c]<sp/>=<sp/>(stbi__uint16)i;</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>&lt;=<sp/>ZFAST_BITS)<sp/>{</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>bit_reverse(next_code[s],s);</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(k<sp/>&lt;<sp/>(1<sp/>&lt;&lt;<sp/>ZFAST_BITS))<sp/>{</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;fast[k]<sp/>=<sp/>(stbi__uint16)<sp/>c;</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>+=<sp/>(1<sp/>&lt;&lt;<sp/>s);</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++next_code[s];</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2050"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"></highlight></codeline>
<codeline lineno="2052"><highlight class="normal"></highlight><highlight class="comment">//<sp/>zlib-from-memory<sp/>implementation<sp/>for<sp/>PNG<sp/>reading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>because<sp/>PNG<sp/>allows<sp/>splitting<sp/>the<sp/>zlib<sp/>stream<sp/>arbitrarily,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2054"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>and<sp/>it&apos;s<sp/>annoying<sp/>structurally<sp/>to<sp/>have<sp/>PNG<sp/>call<sp/>ZLIB<sp/>call<sp/>PNG,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2055"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>we<sp/>require<sp/>PNG<sp/>read<sp/>all<sp/>the<sp/>IDATs<sp/>and<sp/>combine<sp/>them<sp/>into<sp/>a<sp/>single</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2056"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>memory<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2057"><highlight class="normal"></highlight></codeline>
<codeline lineno="2058" refid="structzbuf" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2059"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/>stbi__uint8<sp/>*zbuffer,<sp/>*zbuffer_end;</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bits;</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/>stbi__uint32<sp/>code_buffer;</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*zout;</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*zout_start;</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*zout_end;</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>z_expandable;</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"></highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><ref refid="structzhuffman" kindref="compound">zhuffman</ref><sp/>z_length,<sp/>z_distance;</highlight></codeline>
<codeline lineno="2070"><highlight class="normal">}<sp/><ref refid="structzbuf" kindref="compound">zbuf</ref>;</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal">stbi_inline<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>zget8(<ref refid="structzbuf" kindref="compound">zbuf</ref><sp/>*z)</highlight></codeline>
<codeline lineno="2073"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z-&gt;zbuffer<sp/>&gt;=<sp/>z-&gt;zbuffer_end)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*z-&gt;zbuffer++;</highlight></codeline>
<codeline lineno="2076"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"></highlight></codeline>
<codeline lineno="2078"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fill_bits(<ref refid="structzbuf" kindref="compound">zbuf</ref><sp/>*z)</highlight></codeline>
<codeline lineno="2079"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(z-&gt;code_buffer<sp/>&lt;<sp/>(1U<sp/>&lt;&lt;<sp/>z-&gt;num_bits));</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;code_buffer<sp/>|=<sp/>zget8(z)<sp/>&lt;&lt;<sp/>z-&gt;num_bits;</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;num_bits<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(z-&gt;num_bits<sp/>&lt;=<sp/>24);</highlight></codeline>
<codeline lineno="2085"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"></highlight></codeline>
<codeline lineno="2087"><highlight class="normal">stbi_inline<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>zreceive(<ref refid="structzbuf" kindref="compound">zbuf</ref><sp/>*z,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="2088"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z-&gt;num_bits<sp/>&lt;<sp/>n)<sp/>fill_bits(z);</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/>k<sp/>=<sp/>z-&gt;code_buffer<sp/>&amp;<sp/>((1<sp/>&lt;&lt;<sp/>n)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/>z-&gt;code_buffer<sp/>&gt;&gt;=<sp/>n;</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/>z-&gt;num_bits<sp/>-=<sp/>n;</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>k;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2095"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"></highlight></codeline>
<codeline lineno="2097"><highlight class="normal">stbi_inline<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>zhuffman_decode(<ref refid="structzbuf" kindref="compound">zbuf</ref><sp/>*a,<sp/><ref refid="structzhuffman" kindref="compound">zhuffman</ref><sp/>*z)</highlight></codeline>
<codeline lineno="2098"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,s,k;</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;num_bits<sp/>&lt;<sp/>16)<sp/>fill_bits(a);</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/>b<sp/>=<sp/>z-&gt;fast[a-&gt;code_buffer<sp/>&amp;<sp/>ZFAST_MASK];</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b<sp/>&lt;<sp/>0xffff)<sp/>{</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>z-&gt;size[b];</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;code_buffer<sp/>&gt;&gt;=<sp/>s;</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;num_bits<sp/>-=<sp/>s;</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z-&gt;value[b];</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"></highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>resolved<sp/>by<sp/>fast<sp/>table,<sp/>so<sp/>compute<sp/>it<sp/>the<sp/>slow<sp/>way</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>jpeg<sp/>approach,<sp/>which<sp/>requires<sp/>MSbits<sp/>at<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/>k<sp/>=<sp/>bit_reverse(a-&gt;code_buffer,<sp/>16);</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(s=ZFAST_BITS+1;<sp/>;<sp/>++s)</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>&lt;<sp/>z-&gt;maxcode[s])</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/>16)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;<sp/></highlight><highlight class="comment">//<sp/>invalid<sp/>code!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>code<sp/>size<sp/>is<sp/>s,<sp/>so:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/>b<sp/>=<sp/>(k<sp/>&gt;&gt;<sp/>(16-s))<sp/>-<sp/>z-&gt;firstcode[s]<sp/>+<sp/>z-&gt;firstsymbol[s];</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/>assert(z-&gt;size[b]<sp/>==<sp/>s);</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/>a-&gt;code_buffer<sp/>&gt;&gt;=<sp/>s;</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/>a-&gt;num_bits<sp/>-=<sp/>s;</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z-&gt;value[b];</highlight></codeline>
<codeline lineno="2122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"></highlight></codeline>
<codeline lineno="2124"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expand(<ref refid="structzbuf" kindref="compound">zbuf</ref><sp/>*z,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>make<sp/>room<sp/>for<sp/>n<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*q;</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cur,<sp/>limit;</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!z-&gt;z_expandable)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;output<sp/>buffer<sp/>limit&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/>cur<sp/><sp/><sp/>=<sp/>(int)<sp/>(z-&gt;zout<sp/><sp/><sp/><sp/><sp/>-<sp/>z-&gt;zout_start);</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/>limit<sp/>=<sp/>(int)<sp/>(z-&gt;zout_end<sp/>-<sp/>z-&gt;zout_start);</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(cur<sp/>+<sp/>n<sp/>&gt;<sp/>limit)</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>limit<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/>q<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>realloc(z-&gt;zout_start,<sp/>limit);</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;outofmem&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Out<sp/>of<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/>z-&gt;zout_start<sp/>=<sp/>q;</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/>z-&gt;zout<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>q<sp/>+<sp/>cur;</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/>z-&gt;zout_end<sp/><sp/><sp/>=<sp/>q<sp/>+<sp/>limit;</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"></highlight></codeline>
<codeline lineno="2141"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length_base[31]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/>3,4,5,6,7,8,9,10,11,13,</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/>15,17,19,23,27,31,35,43,51,59,</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/>67,83,99,115,131,163,195,227,258,0,0<sp/>};</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"></highlight></codeline>
<codeline lineno="2146"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length_extra[31]=<sp/></highlight></codeline>
<codeline lineno="2147"><highlight class="normal">{<sp/>0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0<sp/>};</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"></highlight></codeline>
<codeline lineno="2149"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dist_base[32]<sp/>=<sp/>{<sp/>1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,</highlight></codeline>
<codeline lineno="2150"><highlight class="normal">257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0};</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"></highlight></codeline>
<codeline lineno="2152"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dist_extra[32]<sp/>=</highlight></codeline>
<codeline lineno="2153"><highlight class="normal">{<sp/>0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"></highlight></codeline>
<codeline lineno="2155"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>parse_huffman_block(<ref refid="structzbuf" kindref="compound">zbuf</ref><sp/>*a)</highlight></codeline>
<codeline lineno="2156"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)<sp/>{</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>zhuffman_decode(a,<sp/>&amp;a-&gt;z_length);</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&lt;<sp/>256)<sp/>{</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>huffman<sp/>code&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>error<sp/>in<sp/>huffman<sp/>codes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;zout<sp/>&gt;=<sp/>a-&gt;zout_end)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!expand(a,<sp/>1))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a-&gt;zout++<sp/>=<sp/>(char)<sp/>z;</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi__uint8<sp/>*p;</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,dist;</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>==<sp/>256)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>-=<sp/>257;</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>length_base[z];</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length_extra[z])<sp/>len<sp/>+=<sp/>zreceive(a,<sp/>length_extra[z]);</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>zhuffman_decode(a,<sp/>&amp;a-&gt;z_distance);</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>huffman<sp/>code&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist<sp/>=<sp/>dist_base[z];</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist_extra[z])<sp/>dist<sp/>+=<sp/>zreceive(a,<sp/>dist_extra[z]);</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;zout<sp/>-<sp/>a-&gt;zout_start<sp/>&lt;<sp/>dist)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>dist&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;zout<sp/>+<sp/>len<sp/>&gt;<sp/>a-&gt;zout_end)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!expand(a,<sp/>len))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>(stbi__uint8<sp/>*)<sp/>(a-&gt;zout<sp/>-<sp/>dist);</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(len--)</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a-&gt;zout++<sp/>=<sp/>*p++;</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"></highlight></codeline>
<codeline lineno="2183"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compute_huffman_codes(<ref refid="structzbuf" kindref="compound">zbuf</ref><sp/>*a)</highlight></codeline>
<codeline lineno="2184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi__uint8<sp/>length_dezigzag[19]<sp/>=<sp/>{<sp/>16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15<sp/>};</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><ref refid="structzhuffman" kindref="compound">zhuffman</ref><sp/>z_codelength;</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/>stbi__uint8<sp/>lencodes[286+32+137];</highlight><highlight class="comment">//padding<sp/>for<sp/>maximum<sp/>single<sp/>op</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/>stbi__uint8<sp/>codelength_sizes[19];</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,n;</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"></highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hlit<sp/><sp/>=<sp/>zreceive(a,5)<sp/>+<sp/>257;</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hdist<sp/>=<sp/>zreceive(a,5)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hclen<sp/>=<sp/>zreceive(a,4)<sp/>+<sp/>4;</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"></highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/>memset(codelength_sizes,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(codelength_sizes));</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>hclen;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>zreceive(a,3);</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>codelength_sizes[length_dezigzag[i]]<sp/>=<sp/>(stbi__uint8)<sp/>s;</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!zbuild_huffman(&amp;z_codelength,<sp/>codelength_sizes,<sp/>19))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>hlit<sp/>+<sp/>hdist)<sp/>{</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>zhuffman_decode(a,<sp/>&amp;z_codelength);</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(c<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>c<sp/>&lt;<sp/>19);</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&lt;<sp/>16)</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lencodes[n++]<sp/>=<sp/>(stbi__uint8)<sp/>c;</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>16)<sp/>{</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>zreceive(a,2)+3;</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(lencodes+n,<sp/>lencodes[n-1],<sp/>c);</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>+=<sp/>c;</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>17)<sp/>{</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>zreceive(a,3)+3;</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(lencodes+n,<sp/>0,<sp/>c);</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>+=<sp/>c;</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(c<sp/>==<sp/>18);</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>zreceive(a,7)+11;</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(lencodes+n,<sp/>0,<sp/>c);</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>+=<sp/>c;</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>!=<sp/>hlit+hdist)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>codelengths&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!zbuild_huffman(&amp;a-&gt;z_length,<sp/>lencodes,<sp/>hlit))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!zbuild_huffman(&amp;a-&gt;z_distance,<sp/>lencodes+hlit,<sp/>hdist))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"></highlight></codeline>
<codeline lineno="2229"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>parse_uncompressed_block(<ref refid="structzbuf" kindref="compound">zbuf</ref><sp/>*a)</highlight></codeline>
<codeline lineno="2230"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/>stbi__uint8<sp/>header[4];</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,nlen,k;</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;num_bits<sp/>&amp;<sp/>7)</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zreceive(a,<sp/>a-&gt;num_bits<sp/>&amp;<sp/>7);<sp/></highlight><highlight class="comment">//<sp/>discard</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>drain<sp/>the<sp/>bit-packed<sp/>data<sp/>into<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/>k<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(a-&gt;num_bits<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>header[k++]<sp/>=<sp/>(stbi__uint8)<sp/>(a-&gt;code_buffer<sp/>&amp;<sp/>255);<sp/></highlight><highlight class="comment">//<sp/>wtf<sp/>this<sp/>warns?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;code_buffer<sp/>&gt;&gt;=<sp/>8;</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;num_bits<sp/>-=<sp/>8;</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/>assert(a-&gt;num_bits<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>fill<sp/>header<sp/>the<sp/>normal<sp/>way</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(k<sp/>&lt;<sp/>4)</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>header[k++]<sp/>=<sp/>(stbi__uint8)<sp/>zget8(a);</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/>len<sp/><sp/>=<sp/>header[1]<sp/>*<sp/>256<sp/>+<sp/>header[0];</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/>nlen<sp/>=<sp/>header[3]<sp/>*<sp/>256<sp/>+<sp/>header[2];</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nlen<sp/>!=<sp/>(len<sp/>^<sp/>0xffff))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;zlib<sp/>corrupt&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;zbuffer<sp/>+<sp/>len<sp/>&gt;<sp/>a-&gt;zbuffer_end)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;read<sp/>past<sp/>buffer&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;zout<sp/>+<sp/>len<sp/>&gt;<sp/>a-&gt;zout_end)</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!expand(a,<sp/>len))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/>memcpy(a-&gt;zout,<sp/>a-&gt;zbuffer,<sp/>len);</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/>a-&gt;zbuffer<sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/>a-&gt;zout<sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"></highlight></codeline>
<codeline lineno="2258"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>parse_zlib_header(<ref refid="structzbuf" kindref="compound">zbuf</ref><sp/>*a)</highlight></codeline>
<codeline lineno="2259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmf<sp/><sp/><sp/>=<sp/>zget8(a);</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cm<sp/><sp/><sp/><sp/>=<sp/>cmf<sp/>&amp;<sp/>15;</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>int<sp/>cinfo<sp/>=<sp/>cmf<sp/>&gt;&gt;<sp/>4;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flg<sp/><sp/><sp/>=<sp/>zget8(a);</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cmf*256+flg)<sp/>%<sp/>31<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>zlib<sp/>header&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>zlib<sp/>spec</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flg<sp/>&amp;<sp/>32)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;no<sp/>preset<sp/>dict&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>preset<sp/>dictionary<sp/>not<sp/>allowed<sp/>in<sp/>png</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cm<sp/>!=<sp/>8)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>compression&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>DEFLATE<sp/>required<sp/>for<sp/>png</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>window<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>(8<sp/>+<sp/>cinfo)...<sp/>but<sp/>who<sp/>cares,<sp/>we<sp/>fully<sp/>buffer<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"></highlight></codeline>
<codeline lineno="2271"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@TODO:<sp/>should<sp/>statically<sp/>initialize<sp/>these<sp/>for<sp/>optimal<sp/>thread<sp/>safety</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2272"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi__uint8<sp/>default_length[288],<sp/>default_distance[32];</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_defaults(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2274"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>&lt;=<sp/>to<sp/>match<sp/>clearly<sp/>with<sp/>spec</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;=<sp/>143;<sp/>++i)<sp/><sp/><sp/><sp/><sp/>default_length[i]<sp/><sp/><sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/>;<sp/>i<sp/>&lt;=<sp/>255;<sp/>++i)<sp/><sp/><sp/><sp/><sp/>default_length[i]<sp/><sp/><sp/>=<sp/>9;</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/>;<sp/>i<sp/>&lt;=<sp/>279;<sp/>++i)<sp/><sp/><sp/><sp/><sp/>default_length[i]<sp/><sp/><sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/>;<sp/>i<sp/>&lt;=<sp/>287;<sp/>++i)<sp/><sp/><sp/><sp/><sp/>default_length[i]<sp/><sp/><sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"></highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;=<sp/><sp/>31;<sp/>++i)<sp/><sp/><sp/><sp/><sp/>default_distance[i]<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="2282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"></highlight></codeline>
<codeline lineno="2284"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_png_partial;<sp/></highlight><highlight class="comment">//<sp/>a<sp/>quick<sp/>hack<sp/>to<sp/>only<sp/>allow<sp/>decoding<sp/>some<sp/>of<sp/>a<sp/>PNG...<sp/>I<sp/>should<sp/>implement<sp/>real<sp/>streaming<sp/>support<sp/>instead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2285"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>parse_zlib(<ref refid="structzbuf" kindref="compound">zbuf</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>parse_header)</highlight></codeline>
<codeline lineno="2286"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal">,<sp/>type;</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parse_header)</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parse_zlib_header(a))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/>a-&gt;num_bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/>a-&gt;code_buffer<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/>=<sp/>zreceive(a,1);</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>=<sp/>zreceive(a,2);</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parse_uncompressed_block(a))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>fixed<sp/>code<sp/>lengths</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!default_distance[31])<sp/>init_defaults();</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!zbuild_huffman(&amp;a-&gt;z_length<sp/><sp/>,<sp/>default_length<sp/><sp/>,<sp/>288))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!zbuild_huffman(&amp;a-&gt;z_distance,<sp/>default_distance,<sp/><sp/>32))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!compute_huffman_codes(a))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parse_huffman_block(a))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stbi_png_partial<sp/>&amp;&amp;<sp/>a-&gt;zout<sp/>-<sp/>a-&gt;zout_start<sp/>&gt;<sp/>65536)</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!</highlight><highlight class="keyword">final</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"></highlight></codeline>
<codeline lineno="2316"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>do_zlib(<ref refid="structzbuf" kindref="compound">zbuf</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*obuf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>olen,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__core__func__exponential_1gaf6342f49d902286a599ceb86036236ce" kindref="member">exp</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>parse_header)</highlight></codeline>
<codeline lineno="2317"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/>a-&gt;zout_start<sp/>=<sp/>obuf;</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/>a-&gt;zout<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>obuf;</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/>a-&gt;zout_end<sp/><sp/><sp/>=<sp/>obuf<sp/>+<sp/>olen;</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/>a-&gt;z_expandable<sp/>=<sp/><ref refid="group__core__func__exponential_1gaf6342f49d902286a599ceb86036236ce" kindref="member">exp</ref>;</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"></highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parse_zlib(a,<sp/>parse_header);</highlight></codeline>
<codeline lineno="2324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"></highlight></codeline>
<codeline lineno="2326"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stbi_zlib_decode_malloc_guesssize(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initial_size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*outlen)</highlight></codeline>
<codeline lineno="2327"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><ref refid="structzbuf" kindref="compound">zbuf</ref><sp/>a;</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(initial_size);</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/>a.zbuffer<sp/>=<sp/>(stbi__uint8<sp/>*)<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>;</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/>a.zbuffer_end<sp/>=<sp/>(stbi__uint8<sp/>*)<sp/><ref refid="classbuffer" kindref="compound">buffer</ref><sp/>+<sp/>len;</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(do_zlib(&amp;a,<sp/>p,<sp/>initial_size,<sp/>1,<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outlen)<sp/>*outlen<sp/>=<sp/>(int)<sp/>(a.zout<sp/>-<sp/>a.zout_start);</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.zout_start;</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(a.zout_start);</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"></highlight></codeline>
<codeline lineno="2342"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stbi_zlib_decode_malloc(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*outlen)</highlight></codeline>
<codeline lineno="2343"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stbi_zlib_decode_malloc_guesssize(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>len,<sp/>16384,<sp/>outlen);</highlight></codeline>
<codeline lineno="2345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"></highlight></codeline>
<codeline lineno="2347"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stbi_zlib_decode_malloc_guesssize_headerflag(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initial_size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*outlen,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>parse_header)</highlight></codeline>
<codeline lineno="2348"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><ref refid="structzbuf" kindref="compound">zbuf</ref><sp/>a;</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(initial_size);</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/>a.zbuffer<sp/>=<sp/>(stbi__uint8<sp/>*)<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>;</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/>a.zbuffer_end<sp/>=<sp/>(stbi__uint8<sp/>*)<sp/><ref refid="classbuffer" kindref="compound">buffer</ref><sp/>+<sp/>len;</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(do_zlib(&amp;a,<sp/>p,<sp/>initial_size,<sp/>1,<sp/>parse_header))<sp/>{</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outlen)<sp/>*outlen<sp/>=<sp/>(int)<sp/>(a.zout<sp/>-<sp/>a.zout_start);</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.zout_start;</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(a.zout_start);</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"></highlight></codeline>
<codeline lineno="2363"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_zlib_decode_buffer(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*obuffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>olen,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*ibuffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ilen)</highlight></codeline>
<codeline lineno="2364"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><ref refid="structzbuf" kindref="compound">zbuf</ref><sp/>a;</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/>a.zbuffer<sp/>=<sp/>(stbi__uint8<sp/>*)<sp/>ibuffer;</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/>a.zbuffer_end<sp/>=<sp/>(stbi__uint8<sp/>*)<sp/>ibuffer<sp/>+<sp/>ilen;</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(do_zlib(&amp;a,<sp/>obuffer,<sp/>olen,<sp/>0,<sp/>1))</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>(a.zout<sp/>-<sp/>a.zout_start);</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="2372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"></highlight></codeline>
<codeline lineno="2374"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stbi_zlib_decode_noheader_malloc(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*outlen)</highlight></codeline>
<codeline lineno="2375"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><ref refid="structzbuf" kindref="compound">zbuf</ref><sp/>a;</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(16384);</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/>a.zbuffer<sp/>=<sp/>(stbi__uint8<sp/>*)<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>;</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/>a.zbuffer_end<sp/>=<sp/>(stbi__uint8<sp/>*)<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>+len;</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(do_zlib(&amp;a,<sp/>p,<sp/>16384,<sp/>1,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outlen)<sp/>*outlen<sp/>=<sp/>(int)<sp/>(a.zout<sp/>-<sp/>a.zout_start);</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.zout_start;</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(a.zout_start);</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"></highlight></codeline>
<codeline lineno="2390"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_zlib_decode_noheader_buffer(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*obuffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>olen,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ibuffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ilen)</highlight></codeline>
<codeline lineno="2391"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><ref refid="structzbuf" kindref="compound">zbuf</ref><sp/>a;</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/>a.zbuffer<sp/>=<sp/>(stbi__uint8<sp/>*)<sp/>ibuffer;</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/>a.zbuffer_end<sp/>=<sp/>(stbi__uint8<sp/>*)<sp/>ibuffer<sp/>+<sp/>ilen;</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(do_zlib(&amp;a,<sp/>obuffer,<sp/>olen,<sp/>0,<sp/>0))</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>(a.zout<sp/>-<sp/>a.zout_start);</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="2399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"></highlight></codeline>
<codeline lineno="2401"><highlight class="normal"></highlight><highlight class="comment">//<sp/>public<sp/>domain<sp/>&quot;baseline&quot;<sp/>PNG<sp/>decoder<sp/><sp/><sp/>v0.10<sp/><sp/>Sean<sp/>Barrett<sp/>2006-11-18</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2402"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>simple<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2403"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>only<sp/>8-bit<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2404"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>no<sp/>CRC<sp/>checking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2405"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>allocates<sp/>lots<sp/>of<sp/>intermediate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2406"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>avoids<sp/>problem<sp/>of<sp/>streaming<sp/>data<sp/>between<sp/>subsystems</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2407"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>avoids<sp/>explicit<sp/>window<sp/>management</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2408"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>performance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2409"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>uses<sp/>stb_zlib,<sp/>a<sp/>PD<sp/>zlib<sp/>implementation<sp/>with<sp/>fast<sp/>huffman<sp/>decoding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2410"><highlight class="normal"></highlight></codeline>
<codeline lineno="2411"><highlight class="normal"></highlight></codeline>
<codeline lineno="2412" refid="structchunk" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2413"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/>stbi__uint32<sp/>length;</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/>stbi__uint32<sp/>type;</highlight></codeline>
<codeline lineno="2416"><highlight class="normal">}<sp/><ref refid="structchunk" kindref="compound">chunk</ref>;</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"></highlight></codeline>
<codeline lineno="2418"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PNG_TYPE(a,b,c,d)<sp/><sp/>(((a)<sp/>&lt;&lt;<sp/>24)<sp/>+<sp/>((b)<sp/>&lt;&lt;<sp/>16)<sp/>+<sp/>((c)<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>(d))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2419"><highlight class="normal"></highlight></codeline>
<codeline lineno="2420"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structchunk" kindref="compound">chunk</ref><sp/>get_chunk_header(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s)</highlight></codeline>
<codeline lineno="2421"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><ref refid="structchunk" kindref="compound">chunk</ref><sp/>c;</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/>c.length<sp/>=<sp/>get32(s);</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/>c.type<sp/><sp/><sp/>=<sp/>get32(s);</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="2426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"></highlight></codeline>
<codeline lineno="2428"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>check_png_header(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s)</highlight></codeline>
<codeline lineno="2429"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi__uint8<sp/>png_sig[8]<sp/>=<sp/>{<sp/>137,80,78,71,13,10,26,10<sp/>};</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>8;<sp/>++i)</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get8u(s)<sp/>!=<sp/>png_sig[i])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>png<sp/>sig&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Not<sp/>a<sp/>PNG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"></highlight></codeline>
<codeline lineno="2437" refid="structpng" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2438"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s;</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/>stbi__uint8<sp/>*idata,<sp/>*expanded,<sp/>*out;</highlight></codeline>
<codeline lineno="2441"><highlight class="normal">}<sp/><ref refid="structpng" kindref="compound">png</ref>;</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"></highlight></codeline>
<codeline lineno="2443"><highlight class="normal"></highlight></codeline>
<codeline lineno="2444"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/>F_none=0,<sp/>F_sub=1,<sp/>F_up=2,<sp/>F_avg=3,<sp/>F_paeth=4,</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/>F_avg_first,<sp/>F_paeth_first</highlight></codeline>
<codeline lineno="2447"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"></highlight></codeline>
<codeline lineno="2449"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi__uint8<sp/>first_row_filter[5]<sp/>=</highlight></codeline>
<codeline lineno="2450"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/>F_none,<sp/>F_sub,<sp/>F_none,<sp/>F_avg_first,<sp/>F_paeth_first</highlight></codeline>
<codeline lineno="2452"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"></highlight></codeline>
<codeline lineno="2454"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>paeth(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c)</highlight></codeline>
<codeline lineno="2455"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>a<sp/>+<sp/>b<sp/>-<sp/>c;</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pa<sp/>=<sp/><ref refid="group__core__func__common_1ga693d77696ff36572a0da79efec965acd" kindref="member">abs</ref>(p-a);</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pb<sp/>=<sp/><ref refid="group__core__func__common_1ga693d77696ff36572a0da79efec965acd" kindref="member">abs</ref>(p-b);</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pc<sp/>=<sp/><ref refid="group__core__func__common_1ga693d77696ff36572a0da79efec965acd" kindref="member">abs</ref>(p-c);</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pa<sp/>&lt;=<sp/>pb<sp/>&amp;&amp;<sp/>pa<sp/>&lt;=<sp/>pc)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pb<sp/>&lt;=<sp/>pc)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b;</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="2463"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"></highlight></codeline>
<codeline lineno="2465"><highlight class="normal"></highlight><highlight class="comment">//<sp/>create<sp/>the<sp/>png<sp/>data<sp/>from<sp/>post-deflated<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2466"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>create_png_image_raw(<ref refid="structpng" kindref="compound">png</ref><sp/>*a,<sp/>stbi__uint8<sp/>*raw,<sp/>stbi__uint32<sp/>raw_len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>out_n,<sp/>stbi__uint32<sp/>x,<sp/>stbi__uint32<sp/>y)</highlight></codeline>
<codeline lineno="2467"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s<sp/>=<sp/>a-&gt;s;</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/>stbi__uint32<sp/>i,j,stride<sp/>=<sp/>x*out_n;</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>img_n<sp/>=<sp/>s-&gt;img_n;<sp/></highlight><highlight class="comment">//<sp/>copy<sp/>it<sp/>into<sp/>a<sp/>local<sp/>for<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/>assert(out_n<sp/>==<sp/>s-&gt;img_n<sp/>||<sp/>out_n<sp/>==<sp/>s-&gt;img_n+1);</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stbi_png_partial)<sp/>y<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/>a-&gt;out<sp/>=<sp/>(stbi__uint8<sp/>*)<sp/>malloc(x<sp/>*<sp/>y<sp/>*<sp/>out_n);</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!a-&gt;out)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;outofmem&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Out<sp/>of<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stbi_png_partial)<sp/>{</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;img_x<sp/>==<sp/>x<sp/>&amp;&amp;<sp/>s-&gt;img_y<sp/>==<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(raw_len<sp/>!=<sp/>(img_n<sp/>*<sp/>x<sp/>+<sp/>1)<sp/>*<sp/>y)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;not<sp/>enough<sp/>pixels&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>interlaced:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(raw_len<sp/>&lt;<sp/>(img_n<sp/>*<sp/>x<sp/>+<sp/>1)<sp/>*<sp/>y)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;not<sp/>enough<sp/>pixels&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>y;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi__uint8<sp/>*cur<sp/>=<sp/>a-&gt;out<sp/>+<sp/>stride*j;</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi__uint8<sp/>*prior<sp/>=<sp/>cur<sp/>-<sp/>stride;</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>filter<sp/>=<sp/>*raw++;</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filter<sp/>&gt;<sp/>4)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;invalid<sp/>filter&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>first<sp/>row,<sp/>use<sp/>special<sp/>filter<sp/>that<sp/>doesn&apos;t<sp/>sample<sp/>previous<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>0)<sp/>filter<sp/>=<sp/>first_row_filter[filter];</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>first<sp/>pixel<sp/>explicitly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=0;<sp/>k<sp/>&lt;<sp/>img_n;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(filter)<sp/>{</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>F_none<sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>cur[k]<sp/>=<sp/>raw[k];<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>F_sub<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>cur[k]<sp/>=<sp/>raw[k];<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>F_up<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>cur[k]<sp/>=<sp/>raw[k]<sp/>+<sp/>prior[k];<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>F_avg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>cur[k]<sp/>=<sp/>raw[k]<sp/>+<sp/>(prior[k]&gt;&gt;1);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>F_paeth<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>cur[k]<sp/>=<sp/>(stbi__uint8)<sp/>(raw[k]<sp/>+<sp/>paeth(0,prior[k],0));<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>F_avg_first<sp/><sp/>:<sp/>cur[k]<sp/>=<sp/>raw[k];<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>F_paeth_first:<sp/>cur[k]<sp/>=<sp/>raw[k];<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(img_n<sp/>!=<sp/>out_n)<sp/>cur[img_n]<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>raw<sp/>+=<sp/>img_n;</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cur<sp/>+=<sp/>out_n;</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prior<sp/>+=<sp/>out_n;</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>a<sp/>little<sp/>gross,<sp/>so<sp/>that<sp/>we<sp/>don&apos;t<sp/>switch<sp/>per-pixel<sp/>or<sp/>per-component</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(img_n<sp/>==<sp/>out_n)<sp/>{</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>CASE(f)<sp/>\</highlight></codeline>
<codeline lineno="2509"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>f:<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2510"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(i=x-1;<sp/>i<sp/>&gt;=<sp/>1;<sp/>--i,<sp/>raw+=img_n,cur+=img_n,prior+=img_n)<sp/>\</highlight></codeline>
<codeline lineno="2511"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(k=0;<sp/>k<sp/>&lt;<sp/>img_n;<sp/>++k)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(filter)<sp/>{</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE(F_none)<sp/><sp/>cur[k]<sp/>=<sp/>raw[k];<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE(F_sub)<sp/><sp/><sp/>cur[k]<sp/>=<sp/>raw[k]<sp/>+<sp/>cur[k-img_n];<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE(F_up)<sp/><sp/><sp/><sp/>cur[k]<sp/>=<sp/>raw[k]<sp/>+<sp/>prior[k];<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE(F_avg)<sp/><sp/><sp/>cur[k]<sp/>=<sp/>raw[k]<sp/>+<sp/>((prior[k]<sp/>+<sp/>cur[k-img_n])&gt;&gt;1);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE(F_paeth)<sp/><sp/>cur[k]<sp/>=<sp/>(stbi__uint8)<sp/>(raw[k]<sp/>+<sp/>paeth(cur[k-img_n],prior[k],prior[k-img_n]));<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE(F_avg_first)<sp/><sp/><sp/><sp/>cur[k]<sp/>=<sp/>raw[k]<sp/>+<sp/>(cur[k-img_n]<sp/>&gt;&gt;<sp/>1);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE(F_paeth_first)<sp/><sp/>cur[k]<sp/>=<sp/>(stbi__uint8)<sp/>(raw[k]<sp/>+<sp/>paeth(cur[k-img_n],0,0));<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#undef<sp/>CASE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(img_n+1<sp/>==<sp/>out_n);</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>CASE(f)<sp/>\</highlight></codeline>
<codeline lineno="2525"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>f:<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2526"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(i=x-1;<sp/>i<sp/>&gt;=<sp/>1;<sp/>--i,<sp/>cur[img_n]=255,raw+=img_n,cur+=out_n,prior+=out_n)<sp/>\</highlight></codeline>
<codeline lineno="2527"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(k=0;<sp/>k<sp/>&lt;<sp/>img_n;<sp/>++k)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(filter)<sp/>{</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE(F_none)<sp/><sp/>cur[k]<sp/>=<sp/>raw[k];<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE(F_sub)<sp/><sp/><sp/>cur[k]<sp/>=<sp/>raw[k]<sp/>+<sp/>cur[k-out_n];<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE(F_up)<sp/><sp/><sp/><sp/>cur[k]<sp/>=<sp/>raw[k]<sp/>+<sp/>prior[k];<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE(F_avg)<sp/><sp/><sp/>cur[k]<sp/>=<sp/>raw[k]<sp/>+<sp/>((prior[k]<sp/>+<sp/>cur[k-out_n])&gt;&gt;1);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE(F_paeth)<sp/><sp/>cur[k]<sp/>=<sp/>(stbi__uint8)<sp/>(raw[k]<sp/>+<sp/>paeth(cur[k-out_n],prior[k],prior[k-out_n]));<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE(F_avg_first)<sp/><sp/><sp/><sp/>cur[k]<sp/>=<sp/>raw[k]<sp/>+<sp/>(cur[k-out_n]<sp/>&gt;&gt;<sp/>1);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE(F_paeth_first)<sp/><sp/>cur[k]<sp/>=<sp/>(stbi__uint8)<sp/>(raw[k]<sp/>+<sp/>paeth(cur[k-out_n],0,0));<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#undef<sp/>CASE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2541"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"></highlight></codeline>
<codeline lineno="2543"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>create_png_image(<ref refid="structpng" kindref="compound">png</ref><sp/>*a,<sp/>stbi__uint8<sp/>*raw,<sp/>stbi__uint32<sp/>raw_len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>out_n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>interlaced)</highlight></codeline>
<codeline lineno="2544"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/>stbi__uint8<sp/>*</highlight><highlight class="keyword">final</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>save;</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!interlaced)</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>create_png_image_raw(a,<sp/>raw,<sp/>raw_len,<sp/>out_n,<sp/>a-&gt;s-&gt;img_x,<sp/>a-&gt;s-&gt;img_y);</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/>save<sp/>=<sp/>stbi_png_partial;</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/>stbi_png_partial<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"></highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>de-interlacing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/>=<sp/>(stbi__uint8<sp/>*)<sp/>malloc(a-&gt;s-&gt;img_x<sp/>*<sp/>a-&gt;s-&gt;img_y<sp/>*<sp/>out_n);</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(p=0;<sp/>p<sp/>&lt;<sp/>7;<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xorig[]<sp/>=<sp/>{<sp/>0,4,0,2,0,1,0<sp/>};</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yorig[]<sp/>=<sp/>{<sp/>0,0,4,0,2,0,1<sp/>};</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xspc[]<sp/><sp/>=<sp/>{<sp/>8,8,4,4,2,2,1<sp/>};</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yspc[]<sp/><sp/>=<sp/>{<sp/>8,8,8,4,4,2,2<sp/>};</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,x,y;</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pass1_x[4]<sp/>=<sp/>0,<sp/>pass1_x[5]<sp/>=<sp/>1,<sp/>pass1_x[12]<sp/>=<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(a-&gt;s-&gt;img_x<sp/>-<sp/>xorig[p]<sp/>+<sp/>xspc[p]-1)<sp/>/<sp/>xspc[p];</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>(a-&gt;s-&gt;img_y<sp/>-<sp/>yorig[p]<sp/>+<sp/>yspc[p]-1)<sp/>/<sp/>yspc[p];</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&amp;&amp;<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!create_png_image_raw(a,<sp/>raw,<sp/>raw_len,<sp/>out_n,<sp/>x,<sp/>y))<sp/>{</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(</highlight><highlight class="keyword">final</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>y;<sp/>++j)</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>x;<sp/>++i)</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(</highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/>+<sp/>(j*yspc[p]+yorig[p])*a-&gt;s-&gt;img_x*out_n<sp/>+<sp/>(i*xspc[p]+xorig[p])*out_n,</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;out<sp/>+<sp/>(j*x+i)*out_n,<sp/>out_n);</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(a-&gt;out);</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>raw<sp/>+=<sp/>(x*out_n+1)*y;</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>raw_len<sp/>-=<sp/>(x*out_n+1)*y;</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/>a-&gt;out<sp/>=<sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"></highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/><sp/>stbi_png_partial<sp/>=<sp/>save;</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"></highlight></codeline>
<codeline lineno="2584"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compute_transparency(<ref refid="structpng" kindref="compound">png</ref><sp/>*z,<sp/>stbi__uint8<sp/>tc[3],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>out_n)</highlight></codeline>
<codeline lineno="2585"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s<sp/>=<sp/>z-&gt;s;</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/><sp/>stbi__uint32<sp/>i,<sp/>pixel_count<sp/>=<sp/>s-&gt;img_x<sp/>*<sp/>s-&gt;img_y;</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/><sp/>stbi__uint8<sp/>*p<sp/>=<sp/>z-&gt;out;</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"></highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>color-based<sp/>transparency,<sp/>assuming<sp/>we&apos;ve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>already<sp/>got<sp/>255<sp/>as<sp/>the<sp/>alpha<sp/>value<sp/>in<sp/>the<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/>assert(out_n<sp/>==<sp/>2<sp/>||<sp/>out_n<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"></highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out_n<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>pixel_count;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[1]<sp/>=<sp/>(p[0]<sp/>==<sp/>tc[0]<sp/>?<sp/>0<sp/>:<sp/>255);</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>pixel_count;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p[0]<sp/>==<sp/>tc[0]<sp/>&amp;&amp;<sp/>p[1]<sp/>==<sp/>tc[1]<sp/>&amp;&amp;<sp/>p[2]<sp/>==<sp/>tc[2])</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[3]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2607"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"></highlight></codeline>
<codeline lineno="2609"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expand_palette(<ref refid="structpng" kindref="compound">png</ref><sp/>*a,<sp/>stbi__uint8<sp/>*palette,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pal_img_n)</highlight></codeline>
<codeline lineno="2610"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/>stbi__uint32<sp/>i,<sp/>pixel_count<sp/>=<sp/>a-&gt;s-&gt;img_x<sp/>*<sp/>a-&gt;s-&gt;img_y;</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/>stbi__uint8<sp/>*p,<sp/>*temp_out,<sp/>*orig<sp/>=<sp/>a-&gt;out;</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"></highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/>p<sp/>=<sp/>(stbi__uint8<sp/>*)<sp/>malloc(pixel_count<sp/>*<sp/>pal_img_n);</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;outofmem&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Out<sp/>of<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"></highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>between<sp/>here<sp/>and<sp/>free(out)<sp/>below,<sp/>exitting<sp/>would<sp/>leak</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/>temp_out<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"></highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pal_img_n<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>pixel_count;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>orig[i]*4;</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[0]<sp/>=<sp/>palette[n<sp/><sp/>];</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[1]<sp/>=<sp/>palette[n+1];</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[2]<sp/>=<sp/>palette[n+2];</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>pixel_count;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>orig[i]*4;</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[0]<sp/>=<sp/>palette[n<sp/><sp/>];</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[1]<sp/>=<sp/>palette[n+1];</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[2]<sp/>=<sp/>palette[n+2];</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[3]<sp/>=<sp/>palette[n+3];</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/><sp/>free(a-&gt;out);</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/>a-&gt;out<sp/>=<sp/>temp_out;</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"></highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/>STBI_NOTUSED(len);</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"></highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2644"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"></highlight></codeline>
<codeline lineno="2646"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_unpremultiply_on_load<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_de_iphone_flag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"></highlight></codeline>
<codeline lineno="2649"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbi_set_unpremultiply_on_load(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag_true_if_should_unpremultiply)</highlight></codeline>
<codeline lineno="2650"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/><sp/>stbi_unpremultiply_on_load<sp/>=<sp/>flag_true_if_should_unpremultiply;</highlight></codeline>
<codeline lineno="2652"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbi_convert_iphone_png_to_rgb(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag_true_if_should_convert)</highlight></codeline>
<codeline lineno="2654"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/>stbi_de_iphone_flag<sp/>=<sp/>flag_true_if_should_convert;</highlight></codeline>
<codeline lineno="2656"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"></highlight></codeline>
<codeline lineno="2658"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbi_de_iphone(<ref refid="structpng" kindref="compound">png</ref><sp/>*z)</highlight></codeline>
<codeline lineno="2659"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s<sp/>=<sp/>z-&gt;s;</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><sp/>stbi__uint32<sp/>i,<sp/>pixel_count<sp/>=<sp/>s-&gt;img_x<sp/>*<sp/>s-&gt;img_y;</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/>stbi__uint8<sp/>*p<sp/>=<sp/>z-&gt;out;</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"></highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;img_out_n<sp/>==<sp/>3)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>bgr<sp/>to<sp/>rgb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>pixel_count;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi__uint8<sp/>t<sp/>=<sp/>p[0];</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[0]<sp/>=<sp/>p[2];</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[2]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(s-&gt;img_out_n<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stbi_unpremultiply_on_load)<sp/>{</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>bgr<sp/>to<sp/>rgb<sp/>and<sp/>unpremultiply</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>pixel_count;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi__uint8<sp/>a<sp/>=<sp/>p[3];</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi__uint8<sp/>t<sp/>=<sp/>p[0];</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a)<sp/>{</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[0]<sp/>=<sp/>p[2]<sp/>*<sp/>255<sp/>/<sp/>a;</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[1]<sp/>=<sp/>p[1]<sp/>*<sp/>255<sp/>/<sp/>a;</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[2]<sp/>=<sp/><sp/>t<sp/><sp/><sp/>*<sp/>255<sp/>/<sp/>a;</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[0]<sp/>=<sp/>p[2];</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[2]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>bgr<sp/>to<sp/>rgb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>pixel_count;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi__uint8<sp/>t<sp/>=<sp/>p[0];</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[0]<sp/>=<sp/>p[2];</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[2]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2698"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"></highlight></codeline>
<codeline lineno="2700"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>parse_png_file(<ref refid="structpng" kindref="compound">png</ref><sp/>*z,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scan,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp)</highlight></codeline>
<codeline lineno="2701"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/>stbi__uint8<sp/>palette[1024],<sp/>pal_img_n=0;</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/>stbi__uint8<sp/>has_trans=0,<sp/>tc[3];</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/>stbi__uint32<sp/>ioff=0,<sp/>idata_limit=0,<sp/>i,<sp/>pal_len=0;</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>first=1,k,interlace=0,<sp/>iphone=0;</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s<sp/>=<sp/>z-&gt;s;</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"></highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/>z-&gt;expanded<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/>z-&gt;idata<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/>z-&gt;out<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"></highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!check_png_header(s))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"></highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scan<sp/>==<sp/>SCAN_type)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"></highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structchunk" kindref="compound">chunk</ref><sp/>c<sp/>=<sp/>get_chunk_header(s);</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(c.type)<sp/>{</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>PNG_TYPE(</highlight><highlight class="charliteral">&apos;C&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;B&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;I&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iphone<sp/>=<sp/>stbi_de_iphone_flag;</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip(s,<sp/>c.length);</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>PNG_TYPE(</highlight><highlight class="charliteral">&apos;I&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;H&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;D&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;R&apos;</highlight><highlight class="normal">):<sp/>{</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth,color,comp,filter;</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!first)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;multiple<sp/>IHDR&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c.length<sp/>!=<sp/>13)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>IHDR<sp/>len&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;img_x<sp/>=<sp/>get32(s);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;img_x<sp/>&gt;<sp/>(1<sp/>&lt;&lt;<sp/>24))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;too<sp/>large&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Very<sp/>large<sp/>image<sp/>(corrupt?)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;img_y<sp/>=<sp/>get32(s);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;img_y<sp/>&gt;<sp/>(1<sp/>&lt;&lt;<sp/>24))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;too<sp/>large&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Very<sp/>large<sp/>image<sp/>(corrupt?)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>depth<sp/>=<sp/>get8(s);<sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(depth<sp/>!=<sp/>8)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;8bit<sp/>only&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;PNG<sp/>not<sp/>supported:<sp/>8-bit<sp/>only&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>=<sp/>get8(s);<sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(color<sp/>&gt;<sp/>6)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>ctype&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(color<sp/>==<sp/>3)<sp/>pal_img_n<sp/>=<sp/>3;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(color<sp/>&amp;<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>ctype&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comp<sp/><sp/>=<sp/>get8(s);<sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comp)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>comp<sp/>method&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filter=<sp/>get8(s);<sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filter)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>filter<sp/>method&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interlace<sp/>=<sp/>get8(s);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interlace&gt;1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>interlace<sp/>method&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s-&gt;img_x<sp/>||<sp/>!s-&gt;img_y)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;0-pixel<sp/>image&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pal_img_n)<sp/>{</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;img_n<sp/>=<sp/>(color<sp/>&amp;<sp/>2<sp/>?<sp/>3<sp/>:<sp/>1)<sp/>+<sp/>(color<sp/>&amp;<sp/>4<sp/>?<sp/>1<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((1<sp/>&lt;&lt;<sp/>30)<sp/>/<sp/>s-&gt;img_x<sp/>/<sp/>s-&gt;img_n<sp/>&lt;<sp/>s-&gt;img_y)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;too<sp/>large&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Image<sp/>too<sp/>large<sp/>to<sp/>decode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scan<sp/>==<sp/>SCAN_header)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>paletted,<sp/>then<sp/>pal_n<sp/>is<sp/>our<sp/>final<sp/>components,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>img_n<sp/>is<sp/>#<sp/>components<sp/>to<sp/>decompress/filter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;img_n<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((1<sp/>&lt;&lt;<sp/>30)<sp/>/<sp/>s-&gt;img_x<sp/>/<sp/>4<sp/>&lt;<sp/>s-&gt;img_y)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;too<sp/>large&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>SCAN_header,<sp/>have<sp/>to<sp/>scan<sp/>to<sp/>see<sp/>if<sp/>we<sp/>have<sp/>a<sp/>tRNS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"></highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>PNG_TYPE(</highlight><highlight class="charliteral">&apos;P&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;L&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;T&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;E&apos;</highlight><highlight class="normal">):<sp/><sp/>{</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;first<sp/>not<sp/>IHDR&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c.length<sp/>&gt;<sp/>256*3)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;invalid<sp/>PLTE&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pal_len<sp/>=<sp/>c.length<sp/>/<sp/>3;</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pal_len<sp/>*<sp/>3<sp/>!=<sp/>c.length)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;invalid<sp/>PLTE&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>pal_len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>palette[i*4+0]<sp/>=<sp/>get8u(s);</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>palette[i*4+1]<sp/>=<sp/>get8u(s);</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>palette[i*4+2]<sp/>=<sp/>get8u(s);</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>palette[i*4+3]<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"></highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>PNG_TYPE(</highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;R&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;N&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;S&apos;</highlight><highlight class="normal">):<sp/>{</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;first<sp/>not<sp/>IHDR&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z-&gt;idata)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;tRNS<sp/>after<sp/>IDAT&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pal_img_n)<sp/>{</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scan<sp/>==<sp/>SCAN_header)<sp/>{<sp/>s-&gt;img_n<sp/>=<sp/>4;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pal_len<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;tRNS<sp/>before<sp/>PLTE&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c.length<sp/>&gt;<sp/>pal_len)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>tRNS<sp/>len&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pal_img_n<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>c.length;<sp/>++i)</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>palette[i*4+3]<sp/>=<sp/>get8u(s);</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(s-&gt;img_n<sp/>&amp;<sp/>1))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;tRNS<sp/>with<sp/>alpha&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c.length<sp/>!=<sp/>(stbi__uint32)<sp/>s-&gt;img_n*2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;bad<sp/>tRNS<sp/>len&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>has_trans<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=0;<sp/>k<sp/>&lt;<sp/>s-&gt;img_n;<sp/>++k)</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tc[k]<sp/>=<sp/>(stbi__uint8)<sp/>get16(s);<sp/></highlight><highlight class="comment">//<sp/>non<sp/>8-bit<sp/>images<sp/>will<sp/>be<sp/>larger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"></highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>PNG_TYPE(</highlight><highlight class="charliteral">&apos;I&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;D&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;T&apos;</highlight><highlight class="normal">):<sp/>{</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;first<sp/>not<sp/>IHDR&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pal_img_n<sp/>&amp;&amp;<sp/>!pal_len)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;no<sp/>PLTE&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scan<sp/>==<sp/>SCAN_header)<sp/>{<sp/>s-&gt;img_n<sp/>=<sp/>pal_img_n;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ioff<sp/>+<sp/>c.length<sp/>&gt;<sp/>idata_limit)<sp/>{</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi__uint8<sp/>*p;</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idata_limit<sp/>==<sp/>0)<sp/>idata_limit<sp/>=<sp/>c.length<sp/>&gt;<sp/>4096<sp/>?<sp/>c.length<sp/>:<sp/>4096;</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ioff<sp/>+<sp/>c.length<sp/>&gt;<sp/>idata_limit)</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idata_limit<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>(stbi__uint8<sp/>*)<sp/>realloc(z-&gt;idata,<sp/>idata_limit);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;outofmem&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Out<sp/>of<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;idata<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!getn(s,<sp/>z-&gt;idata+ioff,c.length))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;outofdata&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ioff<sp/>+=<sp/>c.length;</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"></highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>PNG_TYPE(</highlight><highlight class="charliteral">&apos;I&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;E&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;N&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;D&apos;</highlight><highlight class="normal">):<sp/>{</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi__uint32<sp/>raw_len;</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;first<sp/>not<sp/>IHDR&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scan<sp/>!=<sp/>SCAN_load)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z-&gt;idata<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;no<sp/>IDAT&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;expanded<sp/>=<sp/>(stbi__uint8<sp/>*)<sp/>stbi_zlib_decode_malloc_guesssize_headerflag((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>z-&gt;idata,<sp/>ioff,<sp/>16384,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>&amp;raw_len,<sp/>!iphone);</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z-&gt;expanded<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">//<sp/>zlib<sp/>should<sp/>set<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(z-&gt;idata);<sp/>z-&gt;idata<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((req_comp<sp/>==<sp/>s-&gt;img_n+1<sp/>&amp;&amp;<sp/>req_comp<sp/>!=<sp/>3<sp/>&amp;&amp;<sp/>!pal_img_n)<sp/>||<sp/>has_trans)</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;img_out_n<sp/>=<sp/>s-&gt;img_n+1;</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;img_out_n<sp/>=<sp/>s-&gt;img_n;</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!create_png_image(z,<sp/>z-&gt;expanded,<sp/>raw_len,<sp/>s-&gt;img_out_n,<sp/>interlace))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_trans)</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!compute_transparency(z,<sp/>tc,<sp/>s-&gt;img_out_n))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iphone<sp/>&amp;&amp;<sp/>s-&gt;img_out_n<sp/>&gt;<sp/>2)</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi_de_iphone(z);</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pal_img_n)<sp/>{</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pal_img_n<sp/>==<sp/>3<sp/>or<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;img_n<sp/>=<sp/>pal_img_n;<sp/></highlight><highlight class="comment">//<sp/>record<sp/>the<sp/>actual<sp/>colors<sp/>we<sp/>had</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;img_out_n<sp/>=<sp/>pal_img_n;</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(req_comp<sp/>&gt;=<sp/>3)<sp/>s-&gt;img_out_n<sp/>=<sp/>req_comp;</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!expand_palette(z,<sp/>palette,<sp/>pal_len,<sp/>s-&gt;img_out_n))</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(z-&gt;expanded);<sp/>z-&gt;expanded<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"></highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>critical,<sp/>fail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;first<sp/>not<sp/>IHDR&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PNG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c.type<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>29))<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifndef<sp/>STBI_NO_FAILURE_STRINGS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>threadsafe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>invalid_chunk[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;XXXX<sp/>chunk<sp/>not<sp/>known&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invalid_chunk[0]<sp/>=<sp/>(stbi__uint8)<sp/>(c.type<sp/>&gt;&gt;<sp/>24);</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invalid_chunk[1]<sp/>=<sp/>(stbi__uint8)<sp/>(c.type<sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invalid_chunk[2]<sp/>=<sp/>(stbi__uint8)<sp/>(c.type<sp/>&gt;&gt;<sp/><sp/>8);</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invalid_chunk[3]<sp/>=<sp/>(stbi__uint8)<sp/>(c.type<sp/>&gt;&gt;<sp/><sp/>0);</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(invalid_chunk,<sp/></highlight><highlight class="stringliteral">&quot;PNG<sp/>not<sp/>supported:<sp/>unknown<sp/>chunk<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip(s,<sp/>c.length);</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>chunk,<sp/>read<sp/>and<sp/>skip<sp/>CRC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>get32(s);</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2851"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"></highlight></codeline>
<codeline lineno="2853"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*do_png(<ref refid="structpng" kindref="compound">png</ref><sp/>*p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp)</highlight></codeline>
<codeline lineno="2854"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structresult" kindref="compound">result</ref>=NULL;</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(req_comp<sp/>&lt;<sp/>0<sp/>||<sp/>req_comp<sp/>&gt;<sp/>4)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;bad<sp/>req_comp&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Internal<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parse_png_file(p,<sp/>SCAN_load,<sp/>req_comp))<sp/>{</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>p-&gt;out;</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;out<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(req_comp<sp/>&amp;&amp;<sp/>req_comp<sp/>!=<sp/>p-&gt;s-&gt;img_out_n)<sp/>{</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>convert_format(<ref refid="structresult" kindref="compound">result</ref>,<sp/>p-&gt;s-&gt;img_out_n,<sp/>req_comp,<sp/>p-&gt;s-&gt;img_x,<sp/>p-&gt;s-&gt;img_y);</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;s-&gt;img_out_n<sp/>=<sp/>req_comp;</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structresult" kindref="compound">result</ref><sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*x<sp/>=<sp/>p-&gt;s-&gt;img_x;</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*y<sp/>=<sp/>p-&gt;s-&gt;img_y;</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n)<sp/>*n<sp/>=<sp/>p-&gt;s-&gt;img_n;</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/><sp/>free(p-&gt;out);<sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;out<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/>free(p-&gt;expanded);<sp/>p-&gt;expanded<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/><sp/>free(p-&gt;idata);<sp/><sp/><sp/><sp/>p-&gt;idata<sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"></highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="2874"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"></highlight></codeline>
<codeline lineno="2876"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stbi_png_load(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp)</highlight></codeline>
<codeline lineno="2877"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/><sp/><ref refid="structpng" kindref="compound">png</ref><sp/>p;</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><sp/>p.s<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>do_png(&amp;p,<sp/>x,y,comp,req_comp);</highlight></codeline>
<codeline lineno="2881"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2882"><highlight class="normal"></highlight></codeline>
<codeline lineno="2883"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_png_test(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s)</highlight></codeline>
<codeline lineno="2884"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/><sp/>r<sp/>=<sp/>check_png_header(s);</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/>stbi_rewind(s);</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="2889"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"></highlight></codeline>
<codeline lineno="2891"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_png_info_raw(<ref refid="structpng" kindref="compound">png</ref><sp/>*p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp)</highlight></codeline>
<codeline lineno="2892"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parse_png_file(p,<sp/>SCAN_header,<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi_rewind(<sp/>p-&gt;s<sp/>);</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x)<sp/>*x<sp/>=<sp/>p-&gt;s-&gt;img_x;</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y)<sp/>*y<sp/>=<sp/>p-&gt;s-&gt;img_y;</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comp)<sp/>*comp<sp/>=<sp/>p-&gt;s-&gt;img_n;</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2901"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"></highlight></codeline>
<codeline lineno="2903"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi_png_info(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp)</highlight></codeline>
<codeline lineno="2904"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/><sp/><ref refid="structpng" kindref="compound">png</ref><sp/>p;</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/><sp/>p.s<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stbi_png_info_raw(&amp;p,<sp/>x,<sp/>y,<sp/>comp);</highlight></codeline>
<codeline lineno="2908"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"></highlight></codeline>
<codeline lineno="2910"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Microsoft/Windows<sp/>BMP<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2911"><highlight class="normal"></highlight></codeline>
<codeline lineno="2912"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bmp_test(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s)</highlight></codeline>
<codeline lineno="2913"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sz;</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get8(s)<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;B&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get8(s)<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;M&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/><sp/>get32le(s);<sp/></highlight><highlight class="comment">//<sp/>discard<sp/>filesize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/><sp/>get16le(s);<sp/></highlight><highlight class="comment">//<sp/>discard<sp/>reserved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/><sp/>get16le(s);<sp/></highlight><highlight class="comment">//<sp/>discard<sp/>reserved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/><sp/>get32le(s);<sp/></highlight><highlight class="comment">//<sp/>discard<sp/>data<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/>sz<sp/>=<sp/>get32le(s);</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sz<sp/>==<sp/>12<sp/>||<sp/>sz<sp/>==<sp/>40<sp/>||<sp/>sz<sp/>==<sp/>56<sp/>||<sp/>sz<sp/>==<sp/>108)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2924"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"></highlight></codeline>
<codeline lineno="2926"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_bmp_test(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s)</highlight></codeline>
<codeline lineno="2927"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>bmp_test(s);</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/><sp/>stbi_rewind(s);</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="2931"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"></highlight></codeline>
<codeline lineno="2933"><highlight class="normal"></highlight></codeline>
<codeline lineno="2934"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>0..31<sp/>for<sp/>the<sp/>highest<sp/>set<sp/>bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2935"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>high_bit(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z)</highlight></codeline>
<codeline lineno="2936"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=0;</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&gt;=<sp/>0x10000)<sp/>n<sp/>+=<sp/>16,<sp/>z<sp/>&gt;&gt;=<sp/>16;</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&gt;=<sp/>0x00100)<sp/>n<sp/>+=<sp/><sp/>8,<sp/>z<sp/>&gt;&gt;=<sp/><sp/>8;</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&gt;=<sp/>0x00010)<sp/>n<sp/>+=<sp/><sp/>4,<sp/>z<sp/>&gt;&gt;=<sp/><sp/>4;</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&gt;=<sp/>0x00004)<sp/>n<sp/>+=<sp/><sp/>2,<sp/>z<sp/>&gt;&gt;=<sp/><sp/>2;</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&gt;=<sp/>0x00002)<sp/>n<sp/>+=<sp/><sp/>1,<sp/>z<sp/>&gt;&gt;=<sp/><sp/>1;</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="2945"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"></highlight></codeline>
<codeline lineno="2947"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bitcount(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="2948"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/><sp/>a<sp/>=<sp/>(a<sp/>&amp;<sp/>0x55555555)<sp/>+<sp/>((a<sp/>&gt;&gt;<sp/><sp/>1)<sp/>&amp;<sp/>0x55555555);<sp/></highlight><highlight class="comment">//<sp/>max<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/><sp/>a<sp/>=<sp/>(a<sp/>&amp;<sp/>0x33333333)<sp/>+<sp/>((a<sp/>&gt;&gt;<sp/><sp/>2)<sp/>&amp;<sp/>0x33333333);<sp/></highlight><highlight class="comment">//<sp/>max<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/><sp/>a<sp/>=<sp/>(a<sp/>+<sp/>(a<sp/>&gt;&gt;<sp/>4))<sp/>&amp;<sp/>0x0f0f0f0f;<sp/></highlight><highlight class="comment">//<sp/>max<sp/>8<sp/>per<sp/>4,<sp/>now<sp/>8<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/><sp/>a<sp/>=<sp/>(a<sp/>+<sp/>(a<sp/>&gt;&gt;<sp/>8));<sp/></highlight><highlight class="comment">//<sp/>max<sp/>16<sp/>per<sp/>8<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/><sp/>a<sp/>=<sp/>(a<sp/>+<sp/>(a<sp/>&gt;&gt;<sp/>16));<sp/></highlight><highlight class="comment">//<sp/>max<sp/>32<sp/>per<sp/>8<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="2955"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"></highlight></codeline>
<codeline lineno="2957"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shiftsigned(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits)</highlight></codeline>
<codeline lineno="2958"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z=0;</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"></highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shift<sp/>&lt;<sp/>0)<sp/>v<sp/>&lt;&lt;=<sp/>-shift;</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>v<sp/>&gt;&gt;=<sp/>shift;</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"></highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/><sp/>z<sp/>=<sp/>bits;</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(z<sp/>&lt;<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>+=<sp/>v<sp/>&gt;&gt;<sp/>z;</highlight></codeline>
<codeline lineno="2969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>+=<sp/>bits;</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="2972"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"></highlight></codeline>
<codeline lineno="2974"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi_uc<sp/>*bmp_load(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp)</highlight></codeline>
<codeline lineno="2975"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/><sp/>stbi__uint8<sp/>*out;</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mr=0,mg=0,mb=0,ma=0,<sp/>fake_a=0;</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/>stbi_uc<sp/>pal[256][4];</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>psize=0,i,j,compress=0,width;</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bpp,<sp/>flip_vertically,<sp/>pad,<sp/>target,<sp/>offset,<sp/>hsz;</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get8(s)<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;B&apos;</highlight><highlight class="normal"><sp/>||<sp/>get8(s)<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;M&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;not<sp/>BMP&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Corrupt<sp/>BMP&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"><sp/><sp/><sp/>get32le(s);<sp/></highlight><highlight class="comment">//<sp/>discard<sp/>filesize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/><sp/>get16le(s);<sp/></highlight><highlight class="comment">//<sp/>discard<sp/>reserved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/><sp/>get16le(s);<sp/></highlight><highlight class="comment">//<sp/>discard<sp/>reserved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/><sp/>offset<sp/>=<sp/>get32le(s);</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/><sp/>hsz<sp/>=<sp/>get32le(s);</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hsz<sp/>!=<sp/>12<sp/>&amp;&amp;<sp/>hsz<sp/>!=<sp/>40<sp/>&amp;&amp;<sp/>hsz<sp/>!=<sp/>56<sp/>&amp;&amp;<sp/>hsz<sp/>!=<sp/>108)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;unknown<sp/>BMP&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BMP<sp/>type<sp/>not<sp/>supported:<sp/>unknown&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hsz<sp/>==<sp/>12)<sp/>{</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;img_x<sp/>=<sp/>get16le(s);</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;img_y<sp/>=<sp/>get16le(s);</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;img_x<sp/>=<sp/>get32le(s);</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;img_y<sp/>=<sp/>get32le(s);</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get16le(s)<sp/>!=<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;bad<sp/>BMP&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>BMP&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/><sp/>bpp<sp/>=<sp/>get16le(s);</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bpp<sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;monochrome&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BMP<sp/>type<sp/>not<sp/>supported:<sp/>1-bit&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/><sp/>flip_vertically<sp/>=<sp/>((int)<sp/>s-&gt;img_y)<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/><sp/>s-&gt;img_y<sp/>=<sp/><ref refid="group__core__func__common_1ga693d77696ff36572a0da79efec965acd" kindref="member">abs</ref>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>s-&gt;img_y);</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hsz<sp/>==<sp/>12)<sp/>{</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bpp<sp/>&lt;<sp/>24)</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psize<sp/>=<sp/>(offset<sp/>-<sp/>14<sp/>-<sp/>24)<sp/>/<sp/>3;</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>compress<sp/>=<sp/>get32le(s);</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compress<sp/>==<sp/>1<sp/>||<sp/>compress<sp/>==<sp/>2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;BMP<sp/>RLE&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BMP<sp/>type<sp/>not<sp/>supported:<sp/>RLE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>get32le(s);<sp/></highlight><highlight class="comment">//<sp/>discard<sp/>sizeof</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>get32le(s);<sp/></highlight><highlight class="comment">//<sp/>discard<sp/>hres</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>get32le(s);<sp/></highlight><highlight class="comment">//<sp/>discard<sp/>vres</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>get32le(s);<sp/></highlight><highlight class="comment">//<sp/>discard<sp/>colorsused</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>get32le(s);<sp/></highlight><highlight class="comment">//<sp/>discard<sp/>max<sp/>important</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hsz<sp/>==<sp/>40<sp/>||<sp/>hsz<sp/>==<sp/>56)<sp/>{</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hsz<sp/>==<sp/>56)<sp/>{</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get32le(s);</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get32le(s);</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get32le(s);</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get32le(s);</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bpp<sp/>==<sp/>16<sp/>||<sp/>bpp<sp/>==<sp/>32)<sp/>{</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mr<sp/>=<sp/>mg<sp/>=<sp/>mb<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compress<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bpp<sp/>==<sp/>32)<sp/>{</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mr<sp/>=<sp/>0xffu<sp/>&lt;&lt;<sp/>16;</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mg<sp/>=<sp/>0xffu<sp/>&lt;&lt;<sp/><sp/>8;</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mb<sp/>=<sp/>0xffu<sp/>&lt;&lt;<sp/><sp/>0;</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ma<sp/>=<sp/>0xffu<sp/>&lt;&lt;<sp/>24;</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fake_a<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>check<sp/>for<sp/>cases<sp/>like<sp/>alpha<sp/>value<sp/>is<sp/>all<sp/>0<sp/>and<sp/>switch<sp/>it<sp/>to<sp/>255</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBI_NOTUSED(fake_a);</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mr<sp/>=<sp/>31u<sp/>&lt;&lt;<sp/>10;</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mg<sp/>=<sp/>31u<sp/>&lt;&lt;<sp/><sp/>5;</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mb<sp/>=<sp/>31u<sp/>&lt;&lt;<sp/><sp/>0;</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compress<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mr<sp/>=<sp/>get32le(s);</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mg<sp/>=<sp/>get32le(s);</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mb<sp/>=<sp/>get32le(s);</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>documented,<sp/>but<sp/>generated<sp/>by<sp/>photoshop<sp/>and<sp/>handled<sp/>by<sp/>mspaint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mr<sp/>==<sp/>mg<sp/>&amp;&amp;<sp/>mg<sp/>==<sp/>mb)<sp/>{</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>?!?!?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;bad<sp/>BMP&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>BMP&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;bad<sp/>BMP&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>BMP&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(hsz<sp/>==<sp/>108);</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mr<sp/>=<sp/>get32le(s);</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mg<sp/>=<sp/>get32le(s);</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mb<sp/>=<sp/>get32le(s);</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ma<sp/>=<sp/>get32le(s);</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get32le(s);<sp/></highlight><highlight class="comment">//<sp/>discard<sp/>color<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>12;<sp/>++i)</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get32le(s);<sp/></highlight><highlight class="comment">//<sp/>discard<sp/>color<sp/>space<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bpp<sp/>&lt;<sp/>16)</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psize<sp/>=<sp/>(offset<sp/>-<sp/>14<sp/>-<sp/>hsz)<sp/>&gt;&gt;<sp/>2;</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/><sp/>s-&gt;img_n<sp/>=<sp/>ma<sp/>?<sp/>4<sp/>:<sp/>3;</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(req_comp<sp/>&amp;&amp;<sp/>req_comp<sp/>&gt;=<sp/>3)<sp/></highlight><highlight class="comment">//<sp/>we<sp/>can<sp/>directly<sp/>decode<sp/>3<sp/>or<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>target<sp/>=<sp/>req_comp;</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>target<sp/>=<sp/>s-&gt;img_n;<sp/></highlight><highlight class="comment">//<sp/>if<sp/>they<sp/>want<sp/>monochrome,<sp/>we&apos;ll<sp/>post-convert</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/><sp/>out<sp/>=<sp/>(stbi_uc<sp/>*)<sp/>malloc(target<sp/>*<sp/>s-&gt;img_x<sp/>*<sp/>s-&gt;img_y);</highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!out)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;outofmem&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Out<sp/>of<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bpp<sp/>&lt;<sp/>16)<sp/>{</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z=0;</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(psize<sp/>==<sp/>0<sp/>||<sp/>psize<sp/>&gt;<sp/>256)<sp/>{<sp/>free(out);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;invalid&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Corrupt<sp/>BMP&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>psize;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pal[i][2]<sp/>=<sp/>get8u(s);</highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pal[i][1]<sp/>=<sp/>get8u(s);</highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pal[i][0]<sp/>=<sp/>get8u(s);</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hsz<sp/>!=<sp/>12)<sp/>get8(s);</highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pal[i][3]<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>skip(s,<sp/>offset<sp/>-<sp/>14<sp/>-<sp/>hsz<sp/>-<sp/>psize<sp/>*<sp/>(hsz<sp/>==<sp/>12<sp/>?<sp/>3<sp/>:<sp/>4));</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bpp<sp/>==<sp/>4)<sp/>width<sp/>=<sp/>(s-&gt;img_x<sp/>+<sp/>1)<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bpp<sp/>==<sp/>8)<sp/>width<sp/>=<sp/>s-&gt;img_x;</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>free(out);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;bad<sp/>bpp&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Corrupt<sp/>BMP&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pad<sp/>=<sp/>(-width)&amp;3;</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>(int)<sp/>s-&gt;img_y;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>(int)<sp/>s-&gt;img_x;<sp/>i<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v=get8(s),v2=0;</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bpp<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v2<sp/>=<sp/>v<sp/>&amp;<sp/>15;</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>&gt;&gt;=<sp/>4;</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[z++]<sp/>=<sp/>pal[v][0];</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[z++]<sp/>=<sp/>pal[v][1];</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[z++]<sp/>=<sp/>pal[v][2];</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target<sp/>==<sp/>4)<sp/>out[z++]<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i+1<sp/>==<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>s-&gt;img_x)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>(bpp<sp/>==<sp/>8)<sp/>?<sp/>get8(s)<sp/>:<sp/>v2;</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[z++]<sp/>=<sp/>pal[v][0];</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[z++]<sp/>=<sp/>pal[v][1];</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[z++]<sp/>=<sp/>pal[v][2];</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target<sp/>==<sp/>4)<sp/>out[z++]<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip(s,<sp/>pad);</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rshift=0,gshift=0,bshift=0,ashift=0,rcount=0,gcount=0,bcount=0,acount=0;</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>easy=0;</highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>skip(s,<sp/>offset<sp/>-<sp/>14<sp/>-<sp/>hsz);</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bpp<sp/>==<sp/>24)<sp/>width<sp/>=<sp/>3<sp/>*<sp/>s-&gt;img_x;</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bpp<sp/>==<sp/>16)<sp/>width<sp/>=<sp/>2*s-&gt;img_x;</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>bpp<sp/>=<sp/>32<sp/>and<sp/>pad<sp/>=<sp/>0<sp/>*/</highlight><highlight class="normal"><sp/>width=0;</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pad<sp/>=<sp/>(-width)<sp/>&amp;<sp/>3;</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bpp<sp/>==<sp/>24)<sp/>{</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>easy<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bpp<sp/>==<sp/>32)<sp/>{</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mb<sp/>==<sp/>0xff<sp/>&amp;&amp;<sp/>mg<sp/>==<sp/>0xff00<sp/>&amp;&amp;<sp/>mr<sp/>==<sp/>0x00ff0000<sp/>&amp;&amp;<sp/>ma<sp/>==<sp/>0xff000000)</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>easy<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!easy)<sp/>{</highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mr<sp/>||<sp/>!mg<sp/>||<sp/>!mb)<sp/>{<sp/>free(out);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;bad<sp/>masks&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Corrupt<sp/>BMP&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>right<sp/>shift<sp/>amt<sp/>to<sp/>put<sp/>high<sp/>bit<sp/>in<sp/>position<sp/>#7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rshift<sp/>=<sp/>high_bit(mr)-7;<sp/>rcount<sp/>=<sp/>bitcount(mr);</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gshift<sp/>=<sp/>high_bit(mg)-7;<sp/>gcount<sp/>=<sp/>bitcount(mg);</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bshift<sp/>=<sp/>high_bit(mb)-7;<sp/>bcount<sp/>=<sp/>bitcount(mb);</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ashift<sp/>=<sp/>high_bit(ma)-7;<sp/>acount<sp/>=<sp/>bitcount(ma);</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>(int)<sp/>s-&gt;img_y;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(easy)<sp/>{</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>(int)<sp/>s-&gt;img_x;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[z+2]<sp/>=<sp/>get8u(s);</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[z+1]<sp/>=<sp/>get8u(s);</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[z+0]<sp/>=<sp/>get8u(s);</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>(easy<sp/>==<sp/>2<sp/>?<sp/>get8(s)<sp/>:<sp/>255);</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target<sp/>==<sp/>4)<sp/>out[z++]<sp/>=<sp/>(stbi__uint8)<sp/>a;</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>(int)<sp/>s-&gt;img_x;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi__uint32<sp/>v<sp/>=<sp/>(stbi__uint32)<sp/>(bpp<sp/>==<sp/>16<sp/>?<sp/>get16le(s)<sp/>:<sp/>get32le(s));</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[z++]<sp/>=<sp/>(stbi__uint8)<sp/>shiftsigned(v<sp/>&amp;<sp/>mr,<sp/>rshift,<sp/>rcount);</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[z++]<sp/>=<sp/>(stbi__uint8)<sp/>shiftsigned(v<sp/>&amp;<sp/>mg,<sp/>gshift,<sp/>gcount);</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[z++]<sp/>=<sp/>(stbi__uint8)<sp/>shiftsigned(v<sp/>&amp;<sp/>mb,<sp/>bshift,<sp/>bcount);</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>(ma<sp/>?<sp/>shiftsigned(v<sp/>&amp;<sp/>ma,<sp/>ashift,<sp/>acount)<sp/>:<sp/>255);</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target<sp/>==<sp/>4)<sp/>out[z++]<sp/>=<sp/>(stbi__uint8)<sp/>a;<sp/></highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip(s,<sp/>pad);</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flip_vertically)<sp/>{</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi_uc<sp/>t;</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>(int)<sp/>s-&gt;img_y&gt;&gt;1;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi_uc<sp/>*p1<sp/>=<sp/>out<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/>j<sp/><sp/><sp/><sp/><sp/>*s-&gt;img_x*target;</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi_uc<sp/>*p2<sp/>=<sp/>out<sp/>+<sp/>(s-&gt;img_y-1-j)*s-&gt;img_x*target;</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(i=0;<sp/>i<sp/>&lt;<sp/>(int)<sp/>s-&gt;img_x*target;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>p1[i],<sp/>p1[i]<sp/>=<sp/>p2[i],<sp/>p2[i]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"></highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(req_comp<sp/>&amp;&amp;<sp/>req_comp<sp/>!=<sp/>target)<sp/>{</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>convert_format(out,<sp/>target,<sp/>req_comp,<sp/>s-&gt;img_x,<sp/>s-&gt;img_y);</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;<sp/></highlight><highlight class="comment">//<sp/>convert_format<sp/>frees<sp/>input<sp/>on<sp/>failure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"></highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/><sp/>*x<sp/>=<sp/>s-&gt;img_x;</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/><sp/>*y<sp/>=<sp/>s-&gt;img_y;</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comp)<sp/>*comp<sp/>=<sp/>s-&gt;img_n;</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="3168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3169"><highlight class="normal"></highlight></codeline>
<codeline lineno="3170"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi_uc<sp/>*stbi_bmp_load(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp)</highlight></codeline>
<codeline lineno="3171"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bmp_load(s,<sp/>x,y,comp,req_comp);</highlight></codeline>
<codeline lineno="3173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"></highlight></codeline>
<codeline lineno="3175"><highlight class="normal"></highlight></codeline>
<codeline lineno="3176"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Targa<sp/>Truevision<sp/>-<sp/>TGA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>by<sp/>Jonathan<sp/>Dummer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3178"><highlight class="normal"></highlight></codeline>
<codeline lineno="3179"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tga_info(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp)</highlight></codeline>
<codeline lineno="3180"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tga_w,<sp/>tga_h,<sp/>tga_comp;</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sz;</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/><sp/><sp/>get8u(s);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>discard<sp/>Offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/><sp/><sp/>sz<sp/>=<sp/>get8u(s);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>color<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>sz<sp/>&gt;<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi_rewind(s);</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>RGB<sp/>or<sp/>indexed<sp/>allowed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/><sp/><sp/>sz<sp/>=<sp/>get8u(s);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>image<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>RGB<sp/>or<sp/>grey<sp/>allowed,<sp/>+/-<sp/>RLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((sz<sp/>!=<sp/>1)<sp/>&amp;&amp;<sp/>(sz<sp/>!=<sp/>2)<sp/>&amp;&amp;<sp/>(sz<sp/>!=<sp/>3)<sp/>&amp;&amp;<sp/>(sz<sp/>!=<sp/>9)<sp/>&amp;&amp;<sp/>(sz<sp/>!=<sp/>10)<sp/>&amp;&amp;<sp/>(sz<sp/>!=<sp/>11))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3192"><highlight class="normal"><sp/><sp/><sp/><sp/>skip(s,9);</highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/><sp/><sp/>tga_w<sp/>=<sp/>get16le(s);</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>tga_w<sp/>&lt;<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi_rewind(s);</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>width</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/><sp/><sp/>tga_h<sp/>=<sp/>get16le(s);</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>tga_h<sp/>&lt;<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi_rewind(s);</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>height</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/><sp/><sp/>sz<sp/>=<sp/>get8(s);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bits<sp/>per<sp/>pixel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>RGB<sp/>or<sp/>RGBA<sp/>or<sp/>grey<sp/>allowed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((sz<sp/>!=<sp/>8)<sp/>&amp;&amp;<sp/>(sz<sp/>!=<sp/>16)<sp/>&amp;&amp;<sp/>(sz<sp/>!=<sp/>24)<sp/>&amp;&amp;<sp/>(sz<sp/>!=<sp/>32))<sp/>{</highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi_rewind(s);</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/><sp/><sp/>tga_comp<sp/>=<sp/>sz;</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x)<sp/>*x<sp/>=<sp/>tga_w;</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y)<sp/>*y<sp/>=<sp/>tga_h;</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comp)<sp/>*comp<sp/>=<sp/>tga_comp<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>seems<sp/>to<sp/>have<sp/>passed<sp/>everything</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"></highlight></codeline>
<codeline lineno="3216"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_tga_info(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp)</highlight></codeline>
<codeline lineno="3217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tga_info(s,<sp/>x,<sp/>y,<sp/>comp);</highlight></codeline>
<codeline lineno="3219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"></highlight></codeline>
<codeline lineno="3221"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tga_test(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s)</highlight></codeline>
<codeline lineno="3222"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sz;</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/><sp/>get8u(s);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>discard<sp/>Offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/><sp/>sz<sp/>=<sp/>get8u(s);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>color<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sz<sp/>&gt;<sp/>1<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>only<sp/>RGB<sp/>or<sp/>indexed<sp/>allowed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/><sp/>sz<sp/>=<sp/>get8u(s);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>image<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(sz<sp/>!=<sp/>1)<sp/>&amp;&amp;<sp/>(sz<sp/>!=<sp/>2)<sp/>&amp;&amp;<sp/>(sz<sp/>!=<sp/>3)<sp/>&amp;&amp;<sp/>(sz<sp/>!=<sp/>9)<sp/>&amp;&amp;<sp/>(sz<sp/>!=<sp/>10)<sp/>&amp;&amp;<sp/>(sz<sp/>!=<sp/>11)<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>only<sp/>RGB<sp/>or<sp/>grey<sp/>allowed,<sp/>+/-<sp/>RLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/><sp/>get16(s);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>discard<sp/>palette<sp/>start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/><sp/>get16(s);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>discard<sp/>palette<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/><sp/>get8(s);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>discard<sp/>bits<sp/>per<sp/>palette<sp/>color<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/>get16(s);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>discard<sp/>x<sp/>origin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/>get16(s);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>discard<sp/>y<sp/>origin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>get16(s)<sp/>&lt;<sp/>1<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>test<sp/>width</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>get16(s)<sp/>&lt;<sp/>1<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>test<sp/>height</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/><sp/>sz<sp/>=<sp/>get8(s);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>bits<sp/>per<sp/>pixel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(sz<sp/>!=<sp/>8)<sp/>&amp;&amp;<sp/>(sz<sp/>!=<sp/>16)<sp/>&amp;&amp;<sp/>(sz<sp/>!=<sp/>24)<sp/>&amp;&amp;<sp/>(sz<sp/>!=<sp/>32)<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>only<sp/>RGB<sp/>or<sp/>RGBA<sp/>or<sp/>grey<sp/>allowed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>seems<sp/>to<sp/>have<sp/>passed<sp/>everything</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"></highlight></codeline>
<codeline lineno="3241"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_tga_test(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s)</highlight></codeline>
<codeline lineno="3242"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>tga_test(s);</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/><sp/>stbi_rewind(s);</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="3246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"></highlight></codeline>
<codeline lineno="3248"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi_uc<sp/>*tga_load(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp)</highlight></codeline>
<codeline lineno="3249"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>read<sp/>in<sp/>the<sp/>TGA<sp/>header<sp/>stuff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tga_offset<sp/>=<sp/>get8u(s);</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tga_indexed<sp/>=<sp/>get8u(s);</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tga_image_type<sp/>=<sp/>get8u(s);</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tga_is_RLE<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tga_palette_start<sp/>=<sp/>get16le(s);</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tga_palette_len<sp/>=<sp/>get16le(s);</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tga_palette_bits<sp/>=<sp/>get8u(s);</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tga_x_origin<sp/>=<sp/>get16le(s);</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tga_y_origin<sp/>=<sp/>get16le(s);</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tga_width<sp/>=<sp/>get16le(s);</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tga_height<sp/>=<sp/>get16le(s);</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tga_bits_per_pixel<sp/>=<sp/>get8u(s);</highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tga_comp<sp/>=<sp/>tga_bits_per_pixel<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tga_inverted<sp/>=<sp/>get8u(s);</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>image<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tga_data;</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tga_palette<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>raw_data[4];</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RLE_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RLE_repeating<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>read_next_pixel<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"></highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>do<sp/>a<sp/>tiny<sp/>bit<sp/>of<sp/>precessing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tga_image_type<sp/>&gt;=<sp/>8<sp/>)</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tga_image_type<sp/>-=<sp/>8;</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tga_is_RLE<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>int<sp/>tga_alpha_bits<sp/>=<sp/>tga_inverted<sp/>&amp;<sp/>15;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/>tga_inverted<sp/>=<sp/>1<sp/>-<sp/>((tga_inverted<sp/>&gt;&gt;<sp/>5)<sp/>&amp;<sp/>1);</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"></highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>error<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="comment">//(tga_indexed)<sp/>||</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(tga_width<sp/>&lt;<sp/>1)<sp/>||<sp/>(tga_height<sp/>&lt;<sp/>1)<sp/>||</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(tga_image_type<sp/>&lt;<sp/>1)<sp/>||<sp/>(tga_image_type<sp/>&gt;<sp/>3)<sp/>||</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>((tga_bits_per_pixel<sp/>!=<sp/>8)<sp/>&amp;&amp;<sp/>(tga_bits_per_pixel<sp/>!=<sp/>16)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(tga_bits_per_pixel<sp/>!=<sp/>24)<sp/>&amp;&amp;<sp/>(tga_bits_per_pixel<sp/>!=<sp/>32))</highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>we<sp/>don&apos;t<sp/>report<sp/>this<sp/>as<sp/>a<sp/>bad<sp/>TGA<sp/>because<sp/>we<sp/>don&apos;t<sp/>even<sp/>know<sp/>if<sp/>it&apos;s<sp/>TGA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"></highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>If<sp/>I&apos;m<sp/>paletted,<sp/>then<sp/>I&apos;ll<sp/>use<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>from<sp/>the<sp/>palette</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tga_indexed<sp/>)</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tga_comp<sp/>=<sp/>tga_palette_bits<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"></highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>tga<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/><sp/>*x<sp/>=<sp/>tga_width;</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/><sp/>*y<sp/>=<sp/>tga_height;</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comp)<sp/>*comp<sp/>=<sp/>tga_comp;</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"></highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/><sp/>tga_data<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(<sp/>tga_width<sp/>*<sp/>tga_height<sp/>*<sp/>req_comp<sp/>);</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tga_data)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;outofmem&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Out<sp/>of<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"></highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>skip<sp/>to<sp/>the<sp/>data&apos;s<sp/>starting<sp/>position<sp/>(offset<sp/>usually<sp/>=<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/><sp/>skip(s,<sp/>tga_offset<sp/>);</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"></highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!tga_indexed<sp/>&amp;&amp;<sp/>!tga_is_RLE)<sp/>{</highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>tga_height;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>tga_inverted<sp/>?<sp/>tga_height<sp/>-i<sp/>-<sp/>1<sp/>:<sp/>i;</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi__uint8<sp/>*tga_row<sp/>=<sp/>tga_data<sp/>+<sp/>y*tga_width*tga_comp;</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getn(s,<sp/>tga_row,<sp/>tga_width<sp/>*<sp/>tga_comp);</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>do<sp/>I<sp/>need<sp/>to<sp/>load<sp/>a<sp/>palette?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tga_indexed)</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>any<sp/>data<sp/>to<sp/>skip?<sp/>(offset<sp/>usually<sp/>=<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip(s,<sp/>tga_palette_start<sp/>);</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>load<sp/>the<sp/>palette</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tga_palette<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(<sp/>tga_palette_len<sp/>*<sp/>tga_palette_bits<sp/>/<sp/>8<sp/>);</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tga_palette)<sp/>{</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(tga_data);</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;outofmem&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Out<sp/>of<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!getn(s,<sp/>tga_palette,<sp/>tga_palette_len<sp/>*<sp/>tga_palette_bits<sp/>/<sp/>8<sp/>))<sp/>{</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(tga_data);</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(tga_palette);</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;bad<sp/>palette&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Corrupt<sp/>TGA&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>load<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>tga_width<sp/>*<sp/>tga_height;<sp/>++i)</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>I&apos;m<sp/>in<sp/>RLE<sp/>mode,<sp/>do<sp/>I<sp/>need<sp/>to<sp/>get<sp/>a<sp/>RLE<sp/>chunk?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tga_is_RLE<sp/>)</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>RLE_count<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>yep,<sp/>get<sp/>the<sp/>next<sp/>byte<sp/>as<sp/>a<sp/>RLE<sp/>command</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RLE_cmd<sp/>=<sp/>get8u(s);</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RLE_count<sp/>=<sp/>1<sp/>+<sp/>(RLE_cmd<sp/>&amp;<sp/>127);</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RLE_repeating<sp/>=<sp/>RLE_cmd<sp/>&gt;&gt;<sp/>7;</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_next_pixel<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!RLE_repeating<sp/>)</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_next_pixel<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_next_pixel<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>OK,<sp/>if<sp/>I<sp/>need<sp/>to<sp/>read<sp/>a<sp/>pixel,<sp/>do<sp/>it<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>read_next_pixel<sp/>)</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>load<sp/>however<sp/>much<sp/>data<sp/>we<sp/>did<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tga_indexed<sp/>)</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>read<sp/>in<sp/>1<sp/>byte,<sp/>then<sp/>perform<sp/>the<sp/>lookup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pal_idx<sp/>=<sp/>get8u(s);</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pal_idx<sp/>&gt;=<sp/>tga_palette_len<sp/>)</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>invalid<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pal_idx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pal_idx<sp/>*=<sp/>tga_bits_per_pixel<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j*8<sp/>&lt;<sp/>tga_bits_per_pixel;<sp/>++j)</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>raw_data[j]<sp/>=<sp/>tga_palette[pal_idx+j];</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>read<sp/>in<sp/>the<sp/>data<sp/>raw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j*8<sp/>&lt;<sp/>tga_bits_per_pixel;<sp/>++j)</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>raw_data[j]<sp/>=<sp/>get8u(s);</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>clear<sp/>the<sp/>reading<sp/>flag<sp/>for<sp/>the<sp/>next<sp/>pixel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read_next_pixel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>reading<sp/>a<sp/>pixel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3385"><highlight class="normal"></highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>tga_comp;<sp/>++j)</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tga_data[i*tga_comp+j]<sp/>=<sp/>raw_data[j];</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"></highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>in<sp/>case<sp/>we&apos;re<sp/>in<sp/>RLE<sp/>mode,<sp/>keep<sp/>counting<sp/>down</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--RLE_count;</highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>do<sp/>I<sp/>need<sp/>to<sp/>invert<sp/>the<sp/>image?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tga_inverted<sp/>)</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j*2<sp/>&lt;<sp/>tga_height;<sp/>++j)</highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index1<sp/>=<sp/>j<sp/>*<sp/>tga_width<sp/>*<sp/>req_comp;</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index2<sp/>=<sp/>(tga_height<sp/>-<sp/>1<sp/>-<sp/>j)<sp/>*<sp/>tga_width<sp/>*<sp/>req_comp;</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>tga_width<sp/>*<sp/>req_comp;<sp/>i<sp/>&gt;<sp/>0;<sp/>--i)</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>tga_data[index1];</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tga_data[index1]<sp/>=<sp/>tga_data[index2];</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tga_data[index2]<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++index1;</highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++index2;</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>clear<sp/>my<sp/>palette,<sp/>if<sp/>I<sp/>had<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>tga_palette<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(<sp/>tga_palette<sp/>);</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"></highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>swap<sp/>RGB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tga_comp<sp/>&gt;=<sp/>3)</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>tga_pixel<sp/>=<sp/>tga_data;</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>tga_width<sp/>*<sp/>tga_height;<sp/>++i)</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>tga_pixel[0];</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tga_pixel[0]<sp/>=<sp/>tga_pixel[2];</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tga_pixel[2]<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tga_pixel<sp/>+=<sp/>tga_comp;</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"></highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>to<sp/>target<sp/>component<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(req_comp<sp/>&amp;&amp;<sp/>req_comp<sp/>!=<sp/>tga_comp)</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tga_data<sp/>=<sp/>convert_format(tga_data,<sp/>tga_comp,<sp/>req_comp,<sp/>tga_width,<sp/>tga_height);</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"></highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>the<sp/>things<sp/>I<sp/>do<sp/>to<sp/>get<sp/>rid<sp/>of<sp/>an<sp/>error<sp/>message,<sp/>and<sp/>yet<sp/>keep</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>Microsoft&apos;s<sp/>C<sp/>compilers<sp/>happy...<sp/>[8^(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/><sp/>tga_palette_start<sp/>=<sp/>tga_palette_len<sp/>=<sp/>tga_palette_bits<sp/>=</highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tga_x_origin<sp/>=<sp/>tga_y_origin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>OK,<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tga_data;</highlight></codeline>
<codeline lineno="3440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"></highlight></codeline>
<codeline lineno="3442"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi_uc<sp/>*stbi_tga_load(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp)</highlight></codeline>
<codeline lineno="3443"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tga_load(s,x,y,comp,req_comp);</highlight></codeline>
<codeline lineno="3445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"></highlight></codeline>
<codeline lineno="3447"><highlight class="normal"></highlight></codeline>
<codeline lineno="3448"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*************************************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3449"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Photoshop<sp/>PSD<sp/>loader<sp/>--<sp/>PD<sp/>by<sp/>Thatcher<sp/>Ulrich,<sp/>integration<sp/>by<sp/>Nicolas<sp/>Schulz,<sp/>tweaked<sp/>by<sp/>STB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3450"><highlight class="normal"></highlight></codeline>
<codeline lineno="3451"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>psd_test(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s)</highlight></codeline>
<codeline lineno="3452"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get32(s)<sp/>!=<sp/>0x38425053)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;8BPS&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="3455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"></highlight></codeline>
<codeline lineno="3457"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_psd_test(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s)</highlight></codeline>
<codeline lineno="3458"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>psd_test(s);</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/><sp/>stbi_rewind(s);</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="3462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"></highlight></codeline>
<codeline lineno="3464"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi_uc<sp/>*psd_load(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp)</highlight></codeline>
<codeline lineno="3465"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>pixelCount;</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channelCount,<sp/>compression;</highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel,<sp/>i,<sp/>count,<sp/>len;</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,h;</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/><sp/>stbi__uint8<sp/>*out;</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"></highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>identifier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get32(s)<sp/>!=<sp/>0x38425053)<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;8BPS&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;not<sp/>PSD&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Corrupt<sp/>PSD<sp/>image&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3475"><highlight class="normal"></highlight></codeline>
<codeline lineno="3476"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>file<sp/>type<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get16(s)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;wrong<sp/>version&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>version<sp/>of<sp/>PSD<sp/>image&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"></highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>6<sp/>reserved<sp/>bytes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/><sp/>skip(s,<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"></highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>number<sp/>of<sp/>channels<sp/>(R,<sp/>G,<sp/>B,<sp/>A,<sp/>etc).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/><sp/>channelCount<sp/>=<sp/>get16(s);</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(channelCount<sp/>&lt;<sp/>0<sp/>||<sp/>channelCount<sp/>&gt;<sp/>16)</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;wrong<sp/>channel<sp/>count&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>number<sp/>of<sp/>channels<sp/>in<sp/>PSD<sp/>image&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"></highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>rows<sp/>and<sp/>columns<sp/>of<sp/>the<sp/>image.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/><sp/>h<sp/>=<sp/>get32(s);</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/><sp/>w<sp/>=<sp/>get32(s);</highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>the<sp/>depth<sp/>is<sp/>8<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get16(s)<sp/>!=<sp/>8)</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;unsupported<sp/>bit<sp/>depth&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;PSD<sp/>bit<sp/>depth<sp/>is<sp/>not<sp/>8<sp/>bit&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"></highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>the<sp/>color<sp/>mode<sp/>is<sp/>RGB.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Valid<sp/>options<sp/>are:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>0:<sp/>Bitmap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>1:<sp/>Grayscale</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>2:<sp/>Indexed<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>3:<sp/>RGB<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>4:<sp/>CMYK<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>7:<sp/>Multichannel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>8:<sp/>Duotone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>9:<sp/>Lab<sp/>color</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get16(s)<sp/>!=<sp/>3)</highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;wrong<sp/>color<sp/>format&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;PSD<sp/>is<sp/>not<sp/>in<sp/>RGB<sp/>color<sp/>format&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"></highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>the<sp/>Mode<sp/>Data.<sp/><sp/>(It&apos;s<sp/>the<sp/>palette<sp/>for<sp/>indexed<sp/>color;<sp/>other<sp/>info<sp/>for<sp/>other<sp/>modes.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/><sp/>skip(s,get32(s)<sp/>);</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"></highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>the<sp/>image<sp/>resources.<sp/><sp/>(resolution,<sp/>pen<sp/>tool<sp/>paths,<sp/>etc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/><sp/>skip(s,<sp/>get32(s)<sp/>);</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"></highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>the<sp/>reserved<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3516"><highlight class="normal"><sp/><sp/><sp/>skip(s,<sp/>get32(s)<sp/>);</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"></highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>out<sp/>if<sp/>the<sp/>data<sp/>is<sp/>compressed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Known<sp/>values:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>0:<sp/>no<sp/>compression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>1:<sp/>RLE<sp/>compressed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/><sp/>compression<sp/>=<sp/>get16(s);</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compression<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;bad<sp/>compression&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;PSD<sp/>has<sp/>an<sp/>unknown<sp/>compression<sp/>format&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"></highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>destination<sp/>image.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/><sp/>out<sp/>=<sp/>(stbi_uc<sp/>*)<sp/>malloc(4<sp/>*<sp/>w*h);</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!out)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;outofmem&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Out<sp/>of<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/><sp/>pixelCount<sp/>=<sp/>w*h;</highlight></codeline>
<codeline lineno="3530"><highlight class="normal"></highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>data<sp/>to<sp/>zero.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//memset(<sp/>out,<sp/>0,<sp/>pixelCount<sp/>*<sp/>4<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Finally,<sp/>the<sp/>image<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compression)<sp/>{</highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>RLE<sp/>as<sp/>used<sp/>by<sp/>.PSD<sp/>and<sp/>.TIFF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>until<sp/>you<sp/>get<sp/>the<sp/>number<sp/>of<sp/>unpacked<sp/>bytes<sp/>you<sp/>are<sp/>expecting:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Read<sp/>the<sp/>next<sp/>source<sp/>byte<sp/>into<sp/>n.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>If<sp/>n<sp/>is<sp/>between<sp/>0<sp/>and<sp/>127<sp/>inclusive,<sp/>copy<sp/>the<sp/>next<sp/>n+1<sp/>bytes<sp/>literally.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Else<sp/>if<sp/>n<sp/>is<sp/>between<sp/>-127<sp/>and<sp/>-1<sp/>inclusive,<sp/>copy<sp/>the<sp/>next<sp/>byte<sp/>-n+1<sp/>times.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Else<sp/>if<sp/>n<sp/>is<sp/>128,<sp/>noop.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Endloop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3543"><highlight class="normal"></highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>RLE-compressed<sp/>data<sp/>is<sp/>preceeded<sp/>by<sp/>a<sp/>2-byte<sp/>data<sp/>count<sp/>for<sp/>each<sp/>row<sp/>in<sp/>the<sp/>data,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>we&apos;re<sp/>going<sp/>to<sp/>just<sp/>skip.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>skip(s,<sp/>h<sp/>*<sp/>channelCount<sp/>*<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"></highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>RLE<sp/>data<sp/>by<sp/>channel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(channel<sp/>=<sp/>0;<sp/>channel<sp/>&lt;<sp/>4;<sp/>channel++)<sp/>{</highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi__uint8<sp/>*p;</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>out+channel;</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(channel<sp/>&gt;=<sp/>channelCount)<sp/>{</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>this<sp/>channel<sp/>with<sp/>default<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>pixelCount;<sp/>i++)<sp/>*p<sp/>=<sp/>(channel<sp/>==<sp/>3<sp/>?<sp/>255<sp/>:<sp/>0),<sp/>p<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>RLE<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(count<sp/>&lt;<sp/>pixelCount)<sp/>{</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>get8(s);</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>128)<sp/>{</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No-op.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&lt;<sp/>128)<sp/>{</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>next<sp/>len+1<sp/>bytes<sp/>literally.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len++;</highlight></codeline>
<codeline lineno="3566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(len)<sp/>{</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p<sp/>=<sp/>get8u(s);</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len--;</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>128)<sp/>{</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi__uint8<sp/><sp/><sp/>val;</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Next<sp/>-len+1<sp/>bytes<sp/>in<sp/>the<sp/>dest<sp/>are<sp/>replicated<sp/>from<sp/>next<sp/>source<sp/>byte.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(Interpret<sp/>len<sp/>as<sp/>a<sp/>negative<sp/>8-bit<sp/>int.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>^=<sp/>0x0FF;</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>get8u(s);</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(len)<sp/>{</highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len--;</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;re<sp/>at<sp/>the<sp/>raw<sp/>image<sp/>data.<sp/><sp/>It&apos;s<sp/>each<sp/>channel<sp/>in<sp/>order<sp/>(Red,<sp/>Green,<sp/>Blue,<sp/>Alpha,<sp/>...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>where<sp/>each<sp/>channel<sp/>consists<sp/>of<sp/>an<sp/>8-bit<sp/>value<sp/>for<sp/>each<sp/>pixel<sp/>in<sp/>the<sp/>image.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>data<sp/>by<sp/>channel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(channel<sp/>=<sp/>0;<sp/>channel<sp/>&lt;<sp/>4;<sp/>channel++)<sp/>{</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi__uint8<sp/>*p;</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>out<sp/>+<sp/>channel;</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(channel<sp/>&gt;<sp/>channelCount)<sp/>{</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>this<sp/>channel<sp/>with<sp/>default<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>pixelCount;<sp/>i++)<sp/>*p<sp/>=<sp/>channel<sp/>==<sp/>3<sp/>?<sp/>255<sp/>:<sp/>0,<sp/>p<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>pixelCount;<sp/>i++)</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p<sp/>=<sp/>get8u(s),<sp/>p<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"></highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(req_comp<sp/>&amp;&amp;<sp/>req_comp<sp/>!=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>convert_format(out,<sp/>4,<sp/>req_comp,<sp/>w,<sp/>h);</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;<sp/></highlight><highlight class="comment">//<sp/>convert_format<sp/>frees<sp/>input<sp/>on<sp/>failure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"></highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comp)<sp/>*comp<sp/>=<sp/>channelCount;</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/><sp/>*y<sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/><sp/>*x<sp/>=<sp/>w;</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3619"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="3620"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"></highlight></codeline>
<codeline lineno="3622"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi_uc<sp/>*stbi_psd_load(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp)</highlight></codeline>
<codeline lineno="3623"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>psd_load(s,x,y,comp,req_comp);</highlight></codeline>
<codeline lineno="3625"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3626"><highlight class="normal"></highlight></codeline>
<codeline lineno="3627"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*************************************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3628"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Softimage<sp/>PIC<sp/>loader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3629"><highlight class="normal"></highlight><highlight class="comment">//<sp/>by<sp/>Tom<sp/>Seddon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3630"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3631"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>http://softimage.wiki.softimage.com/index.php/INFO:_PIC_file_format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3632"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>http://ozviz.wasp.uwa.edu.au/~pbourke/dataformats/softimagepic/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3633"><highlight class="normal"></highlight></codeline>
<codeline lineno="3634"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pic_is4(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)</highlight></codeline>
<codeline lineno="3635"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;4;<sp/>++i)</highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get8(s)<sp/>!=<sp/>(stbi_uc)str[i])</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"></highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="3642"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3643"><highlight class="normal"></highlight></codeline>
<codeline lineno="3644"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pic_test(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s)</highlight></codeline>
<codeline lineno="3645"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"></highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pic_is4(s,</highlight><highlight class="stringliteral">&quot;\x53\x80\xF6\x34&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="3649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3650"><highlight class="normal"></highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;84;++i)</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>get8(s);</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"></highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pic_is4(s,</highlight><highlight class="stringliteral">&quot;PICT&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"></highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="3658"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"></highlight></codeline>
<codeline lineno="3660" refid="structpic__packet__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3661"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/>stbi_uc<sp/>size,type,channel;</highlight></codeline>
<codeline lineno="3663"><highlight class="normal">}<sp/><ref refid="structpic__packet__t" kindref="compound">pic_packet_t</ref>;</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"></highlight></codeline>
<codeline lineno="3665"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi_uc<sp/>*pic_readval(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel,<sp/>stbi_uc<sp/>*dest)</highlight></codeline>
<codeline lineno="3666"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structmask" kindref="compound">mask</ref>=0x80,<sp/>i;</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"></highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;4;<sp/>++i,<sp/>mask&gt;&gt;=1)<sp/>{</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(channel<sp/>&amp;<sp/><ref refid="structmask" kindref="compound">mask</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(at_eof(s))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;bad<sp/>file&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;PIC<sp/>file<sp/>too<sp/>short&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest[i]=get8u(s);</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3675"><highlight class="normal"></highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dest;</highlight></codeline>
<codeline lineno="3677"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3678"><highlight class="normal"></highlight></codeline>
<codeline lineno="3679"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pic_copyval(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel,stbi_uc<sp/>*dest,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>stbi_uc<sp/>*src)</highlight></codeline>
<codeline lineno="3680"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structmask" kindref="compound">mask</ref>=0x80,i;</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"></highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;4;<sp/>++i,<sp/>mask&gt;&gt;=1)</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(channel&amp;<ref refid="structmask" kindref="compound">mask</ref>)</highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest[i]=src[i];</highlight></codeline>
<codeline lineno="3686"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"></highlight></codeline>
<codeline lineno="3688"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi_uc<sp/>*pic_load2(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/>stbi_uc<sp/>*<ref refid="structresult" kindref="compound">result</ref>)</highlight></codeline>
<codeline lineno="3689"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>act_comp=0,num_packets=0,y,chained;</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/><sp/><ref refid="structpic__packet__t" kindref="compound">pic_packet_t</ref><sp/>packets[10];</highlight></codeline>
<codeline lineno="3692"><highlight class="normal"></highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>will<sp/>(should...)<sp/>cater<sp/>for<sp/>even<sp/>some<sp/>bizarre<sp/>stuff<sp/>like<sp/>having<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>the<sp/>same<sp/>channel<sp/>in<sp/>multiple<sp/>packets.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpic__packet__t" kindref="compound">pic_packet_t</ref><sp/>*packet;</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"></highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_packets==</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(packets)/</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(packets[0]))</highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;bad<sp/>format&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;too<sp/>many<sp/>packets&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"></highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>packet<sp/>=<sp/>&amp;packets[num_packets++];</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"></highlight></codeline>
<codeline lineno="3703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>chained<sp/>=<sp/>get8(s);</highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>packet-&gt;size<sp/><sp/><sp/><sp/>=<sp/>get8u(s);</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>packet-&gt;type<sp/><sp/><sp/><sp/>=<sp/>get8u(s);</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>packet-&gt;channel<sp/>=<sp/>get8u(s);</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"></highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>act_comp<sp/>|=<sp/>packet-&gt;channel;</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"></highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(at_eof(s))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;bad<sp/>file&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;file<sp/>too<sp/>short<sp/>(reading<sp/>packets)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(packet-&gt;size<sp/>!=<sp/>8)<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;bad<sp/>format&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;packet<sp/>isn&apos;t<sp/>8bpp&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(chained);</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"></highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/>*comp<sp/>=<sp/>(act_comp<sp/>&amp;<sp/>0x10<sp/>?<sp/>4<sp/>:<sp/>3);<sp/></highlight><highlight class="comment">//<sp/>has<sp/>alpha<sp/>channel?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3715"><highlight class="normal"></highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(y=0;<sp/>y&lt;height;<sp/>++y)<sp/>{</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>packet_idx;</highlight></codeline>
<codeline lineno="3718"><highlight class="normal"></highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(packet_idx=0;<sp/>packet_idx<sp/>&lt;<sp/>num_packets;<sp/>++packet_idx)<sp/>{</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpic__packet__t" kindref="compound">pic_packet_t</ref><sp/>*packet<sp/>=<sp/>&amp;packets[packet_idx];</highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi_uc<sp/>*dest<sp/>=<sp/><ref refid="structresult" kindref="compound">result</ref>+y*width*4;</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"></highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(packet-&gt;type)<sp/>{</highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;bad<sp/>format&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;packet<sp/>has<sp/>bad<sp/>compression<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3726"><highlight class="normal"></highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/>{</highlight><highlight class="comment">//uncompressed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"></highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(x=0;x&lt;width;++x,<sp/>dest+=4)</highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pic_readval(s,packet-&gt;channel,dest))</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"></highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight><highlight class="comment">//Pure<sp/>RLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>left=width,<sp/>i;</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"></highlight></codeline>
<codeline lineno="3740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(left&gt;0)<sp/>{</highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi_uc<sp/>count,<ref refid="classvalue" kindref="compound">value</ref>[4];</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"></highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count=get8u(s);</highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(at_eof(s))<sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;bad<sp/>file&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;file<sp/>too<sp/>short<sp/>(pure<sp/>read<sp/>count)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"></highlight></codeline>
<codeline lineno="3746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>&gt;<sp/>left)</highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/>(stbi__uint8)<sp/>left;</highlight></codeline>
<codeline lineno="3748"><highlight class="normal"></highlight></codeline>
<codeline lineno="3749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pic_readval(s,packet-&gt;channel,<ref refid="classvalue" kindref="compound">value</ref>))<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3750"><highlight class="normal"></highlight></codeline>
<codeline lineno="3751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;count;<sp/>++i,dest+=4)</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pic_copyval(packet-&gt;channel,dest,<ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="3753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>-=<sp/>count;</highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"></highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/>{</highlight><highlight class="comment">//Mixed<sp/>RLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>left=width;</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(left&gt;0)<sp/>{</highlight></codeline>
<codeline lineno="3761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>get8(s),<sp/>i;</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(at_eof(s))<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;bad<sp/>file&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;file<sp/>too<sp/>short<sp/>(mixed<sp/>read<sp/>count)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"></highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>&gt;=<sp/>128)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Repeated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi_uc<sp/><ref refid="classvalue" kindref="compound">value</ref>[4];</highlight></codeline>
<codeline lineno="3766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"></highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count==128)</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/>get16(s);</highlight></codeline>
<codeline lineno="3770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>-=<sp/>127;</highlight></codeline>
<codeline lineno="3772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>&gt;<sp/>left)</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;bad<sp/>file&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;scanline<sp/>overrun&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3774"><highlight class="normal"></highlight></codeline>
<codeline lineno="3775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pic_readval(s,packet-&gt;channel,<ref refid="classvalue" kindref="compound">value</ref>))</highlight></codeline>
<codeline lineno="3776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"></highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;count;++i,<sp/>dest<sp/>+=<sp/>4)</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pic_copyval(packet-&gt;channel,dest,<ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="3780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>Raw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++count;</highlight></codeline>
<codeline lineno="3782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count&gt;left)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;bad<sp/>file&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;scanline<sp/>overrun&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"></highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;count;++i,<sp/>dest+=4)</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pic_readval(s,packet-&gt;channel,dest))</highlight></codeline>
<codeline lineno="3786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left-=count;</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3795"><highlight class="normal"></highlight></codeline>
<codeline lineno="3796"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="3797"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3798"><highlight class="normal"></highlight></codeline>
<codeline lineno="3799"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi_uc<sp/>*pic_load(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*px,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*py,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp)</highlight></codeline>
<codeline lineno="3800"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3801"><highlight class="normal"><sp/><sp/><sp/>stbi_uc<sp/>*<ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>x,y;</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"></highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;92;<sp/>++i)</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>get8(s);</highlight></codeline>
<codeline lineno="3806"><highlight class="normal"></highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/><sp/>x<sp/>=<sp/>get16(s);</highlight></codeline>
<codeline lineno="3808"><highlight class="normal"><sp/><sp/><sp/>y<sp/>=<sp/>get16(s);</highlight></codeline>
<codeline lineno="3809"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(at_eof(s))<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;bad<sp/>file&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;file<sp/>too<sp/>short<sp/>(pic<sp/>header)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3810"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((1<sp/>&lt;&lt;<sp/>28)<sp/>/<sp/>x<sp/>&lt;<sp/>y)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;too<sp/>large&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Image<sp/>too<sp/>large<sp/>to<sp/>decode&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3811"><highlight class="normal"></highlight></codeline>
<codeline lineno="3812"><highlight class="normal"><sp/><sp/><sp/>get32(s);<sp/></highlight><highlight class="comment">//skip<sp/>`ratio&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3813"><highlight class="normal"><sp/><sp/><sp/>get16(s);<sp/></highlight><highlight class="comment">//skip<sp/>`fields&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3814"><highlight class="normal"><sp/><sp/><sp/>get16(s);<sp/></highlight><highlight class="comment">//skip<sp/>`pad&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3815"><highlight class="normal"></highlight></codeline>
<codeline lineno="3816"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>intermediate<sp/>buffer<sp/>is<sp/>RGBA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>(stbi_uc<sp/>*)<sp/>malloc(x*y*4);</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/><sp/>memset(<ref refid="structresult" kindref="compound">result</ref>,<sp/>0xff,<sp/>x*y*4);</highlight></codeline>
<codeline lineno="3819"><highlight class="normal"></highlight></codeline>
<codeline lineno="3820"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pic_load2(s,x,y,comp,<sp/><ref refid="structresult" kindref="compound">result</ref>))<sp/>{</highlight></codeline>
<codeline lineno="3821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(<ref refid="structresult" kindref="compound">result</ref>);</highlight></codeline>
<codeline lineno="3822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structresult" kindref="compound">result</ref>=0;</highlight></codeline>
<codeline lineno="3823"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3824"><highlight class="normal"><sp/><sp/><sp/>*px<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="3825"><highlight class="normal"><sp/><sp/><sp/>*py<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(req_comp<sp/>==<sp/>0)<sp/>req_comp<sp/>=<sp/>*comp;</highlight></codeline>
<codeline lineno="3827"><highlight class="normal"><sp/><sp/><sp/><ref refid="structresult" kindref="compound">result</ref>=convert_format(<ref refid="structresult" kindref="compound">result</ref>,4,req_comp,x,y);</highlight></codeline>
<codeline lineno="3828"><highlight class="normal"></highlight></codeline>
<codeline lineno="3829"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="3830"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"></highlight></codeline>
<codeline lineno="3832"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_pic_test(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s)</highlight></codeline>
<codeline lineno="3833"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3834"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>pic_test(s);</highlight></codeline>
<codeline lineno="3835"><highlight class="normal"><sp/><sp/><sp/>stbi_rewind(s);</highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="3837"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3838"><highlight class="normal"></highlight></codeline>
<codeline lineno="3839"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi_uc<sp/>*stbi_pic_load(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp)</highlight></codeline>
<codeline lineno="3840"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pic_load(s,x,y,comp,req_comp);</highlight></codeline>
<codeline lineno="3842"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3843"><highlight class="normal"></highlight></codeline>
<codeline lineno="3844"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*************************************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3845"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GIF<sp/>loader<sp/>--<sp/>public<sp/>domain<sp/>by<sp/>Jean-Marc<sp/>Lienher<sp/>--<sp/>simplified/shrunk<sp/>by<sp/>stb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3846" refid="structstbi__gif__lzw__struct" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstbi__gif__lzw__struct" kindref="compound">stbi_gif_lzw_struct</ref><sp/>{</highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/><sp/>stbi__int16<sp/>prefix;</highlight></codeline>
<codeline lineno="3848"><highlight class="normal"><sp/><sp/><sp/>stbi__uint8<sp/>first;</highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/><sp/>stbi__uint8<sp/>suffix;</highlight></codeline>
<codeline lineno="3850"><highlight class="normal">}<sp/><ref refid="structstbi__gif__lzw__struct" kindref="compound">stbi_gif_lzw</ref>;</highlight></codeline>
<codeline lineno="3851"><highlight class="normal"></highlight></codeline>
<codeline lineno="3852" refid="structstbi__gif__struct" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstbi__gif__struct" kindref="compound">stbi_gif_struct</ref></highlight></codeline>
<codeline lineno="3853"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3854"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,h;</highlight></codeline>
<codeline lineno="3855"><highlight class="normal"><sp/><sp/><sp/>stbi_uc<sp/>*out;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>buffer<sp/>(always<sp/>4<sp/>components)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3856"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags,<sp/>bgindex,<sp/>ratio,<sp/>transparent,<sp/>eflags;</highlight></codeline>
<codeline lineno="3857"><highlight class="normal"><sp/><sp/><sp/>stbi__uint8<sp/><sp/>pal[256][4];</highlight></codeline>
<codeline lineno="3858"><highlight class="normal"><sp/><sp/><sp/>stbi__uint8<sp/>lpal[256][4];</highlight></codeline>
<codeline lineno="3859"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstbi__gif__lzw__struct" kindref="compound">stbi_gif_lzw</ref><sp/>codes[4096];</highlight></codeline>
<codeline lineno="3860"><highlight class="normal"><sp/><sp/><sp/>stbi__uint8<sp/>*color_table;</highlight></codeline>
<codeline lineno="3861"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>parse,<sp/>step;</highlight></codeline>
<codeline lineno="3862"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lflags;</highlight></codeline>
<codeline lineno="3863"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start_x,<sp/>start_y;</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_x,<sp/>max_y;</highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cur_x,<sp/>cur_y;</highlight></codeline>
<codeline lineno="3866"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line_size;</highlight></codeline>
<codeline lineno="3867"><highlight class="normal">}<sp/><ref refid="structstbi__gif__struct" kindref="compound">stbi_gif</ref>;</highlight></codeline>
<codeline lineno="3868"><highlight class="normal"></highlight></codeline>
<codeline lineno="3869"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gif_test(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s)</highlight></codeline>
<codeline lineno="3870"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sz;</highlight></codeline>
<codeline lineno="3872"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get8(s)<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;G&apos;</highlight><highlight class="normal"><sp/>||<sp/>get8(s)<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;I&apos;</highlight><highlight class="normal"><sp/>||<sp/>get8(s)<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;F&apos;</highlight><highlight class="normal"><sp/>||<sp/>get8(s)<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3873"><highlight class="normal"><sp/><sp/><sp/>sz<sp/>=<sp/>get8(s);</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sz<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>sz<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;7&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3875"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get8(s)<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="3877"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3878"><highlight class="normal"></highlight></codeline>
<codeline lineno="3879"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_gif_test(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s)</highlight></codeline>
<codeline lineno="3880"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3881"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>gif_test(s);</highlight></codeline>
<codeline lineno="3882"><highlight class="normal"><sp/><sp/><sp/>stbi_rewind(s);</highlight></codeline>
<codeline lineno="3883"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="3884"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"></highlight></codeline>
<codeline lineno="3886"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbi_gif_parse_colortable(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/>stbi__uint8<sp/>pal[256][4],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_entries,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>transp)</highlight></codeline>
<codeline lineno="3887"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>num_entries;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pal[i][2]<sp/>=<sp/>get8u(s);</highlight></codeline>
<codeline lineno="3891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pal[i][1]<sp/>=<sp/>get8u(s);</highlight></codeline>
<codeline lineno="3892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pal[i][0]<sp/>=<sp/>get8u(s);</highlight></codeline>
<codeline lineno="3893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pal[i][3]<sp/>=<sp/>transp<sp/>?<sp/>0<sp/>:<sp/>255;</highlight></codeline>
<codeline lineno="3894"><highlight class="normal"><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3895"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3896"><highlight class="normal"></highlight></codeline>
<codeline lineno="3897"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_gif_header(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/><ref refid="structstbi__gif__struct" kindref="compound">stbi_gif</ref><sp/>*g,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>is_info)</highlight></codeline>
<codeline lineno="3898"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3899"><highlight class="normal"><sp/><sp/><sp/>stbi__uint8<sp/>version;</highlight></codeline>
<codeline lineno="3900"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get8(s)<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;G&apos;</highlight><highlight class="normal"><sp/>||<sp/>get8(s)<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;I&apos;</highlight><highlight class="normal"><sp/>||<sp/>get8(s)<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;F&apos;</highlight><highlight class="normal"><sp/>||<sp/>get8(s)<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;not<sp/>GIF&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Corrupt<sp/>GIF&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3902"><highlight class="normal"></highlight></codeline>
<codeline lineno="3903"><highlight class="normal"><sp/><sp/><sp/>version<sp/>=<sp/>get8u(s);</highlight></codeline>
<codeline lineno="3904"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(version<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;7&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>version<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;not<sp/>GIF&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Corrupt<sp/>GIF&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3905"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get8(s)<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;not<sp/>GIF&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Corrupt<sp/>GIF&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3906"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3907"><highlight class="normal"><sp/><sp/><sp/>failure_reason<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3908"><highlight class="normal"><sp/><sp/><sp/>g-&gt;w<sp/>=<sp/>get16le(s);</highlight></codeline>
<codeline lineno="3909"><highlight class="normal"><sp/><sp/><sp/>g-&gt;h<sp/>=<sp/>get16le(s);</highlight></codeline>
<codeline lineno="3910"><highlight class="normal"><sp/><sp/><sp/>g-&gt;flags<sp/>=<sp/>get8(s);</highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/><sp/>g-&gt;bgindex<sp/>=<sp/>get8(s);</highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><sp/><sp/><sp/>g-&gt;ratio<sp/>=<sp/>get8(s);</highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/><sp/>g-&gt;transparent<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3914"><highlight class="normal"></highlight></codeline>
<codeline lineno="3915"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comp<sp/>!=<sp/>0)<sp/>*comp<sp/>=<sp/>4;<sp/><sp/></highlight><highlight class="comment">//<sp/>can&apos;t<sp/>actually<sp/>tell<sp/>whether<sp/>it&apos;s<sp/>3<sp/>or<sp/>4<sp/>until<sp/>we<sp/>parse<sp/>the<sp/>comments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3916"><highlight class="normal"></highlight></codeline>
<codeline lineno="3917"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_info)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="3918"><highlight class="normal"></highlight></codeline>
<codeline lineno="3919"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g-&gt;flags<sp/>&amp;<sp/>0x80)</highlight></codeline>
<codeline lineno="3920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi_gif_parse_colortable(s,g-&gt;pal,<sp/>2<sp/>&lt;&lt;<sp/>(g-&gt;flags<sp/>&amp;<sp/>7),<sp/>-1);</highlight></codeline>
<codeline lineno="3921"><highlight class="normal"></highlight></codeline>
<codeline lineno="3922"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="3923"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3924"><highlight class="normal"></highlight></codeline>
<codeline lineno="3925"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_gif_info_raw(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp)</highlight></codeline>
<codeline lineno="3926"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3927"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstbi__gif__struct" kindref="compound">stbi_gif</ref><sp/>g;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stbi_gif_header(s,<sp/>&amp;g,<sp/>comp,<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi_rewind(<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="3930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3931"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3932"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x)<sp/>*x<sp/>=<sp/>g.w;</highlight></codeline>
<codeline lineno="3933"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y)<sp/>*y<sp/>=<sp/>g.h;</highlight></codeline>
<codeline lineno="3934"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="3935"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"></highlight></codeline>
<codeline lineno="3937"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbi_out_gif_code(<ref refid="structstbi__gif__struct" kindref="compound">stbi_gif</ref><sp/>*g,<sp/>stbi__uint16<sp/>code)</highlight></codeline>
<codeline lineno="3938"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3939"><highlight class="normal"><sp/><sp/><sp/>stbi__uint8<sp/>*p,<sp/>*c;</highlight></codeline>
<codeline lineno="3940"><highlight class="normal"></highlight></codeline>
<codeline lineno="3941"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>recurse<sp/>to<sp/>decode<sp/>the<sp/>prefixes,<sp/>since<sp/>the<sp/>linked-list<sp/>is<sp/>backwards,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3942"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>working<sp/>backwards<sp/>through<sp/>an<sp/>interleaved<sp/>image<sp/>would<sp/>be<sp/>nasty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3943"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g-&gt;codes[code].prefix<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="3944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi_out_gif_code(g,<sp/>g-&gt;codes[code].prefix);</highlight></codeline>
<codeline lineno="3945"><highlight class="normal"></highlight></codeline>
<codeline lineno="3946"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g-&gt;cur_y<sp/>&gt;=<sp/>g-&gt;max_y)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3947"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3948"><highlight class="normal"><sp/><sp/><sp/>p<sp/>=<sp/>&amp;g-&gt;out[g-&gt;cur_x<sp/>+<sp/>g-&gt;cur_y];</highlight></codeline>
<codeline lineno="3949"><highlight class="normal"><sp/><sp/><sp/>c<sp/>=<sp/>&amp;g-&gt;color_table[g-&gt;codes[code].suffix<sp/>*<sp/>4];</highlight></codeline>
<codeline lineno="3950"><highlight class="normal"></highlight></codeline>
<codeline lineno="3951"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c[3]<sp/>&gt;=<sp/>128)<sp/>{</highlight></codeline>
<codeline lineno="3952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[0]<sp/>=<sp/>c[2];</highlight></codeline>
<codeline lineno="3953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[1]<sp/>=<sp/>c[1];</highlight></codeline>
<codeline lineno="3954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[2]<sp/>=<sp/>c[0];</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[3]<sp/>=<sp/>c[3];</highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/><sp/>g-&gt;cur_x<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="3958"><highlight class="normal"></highlight></codeline>
<codeline lineno="3959"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g-&gt;cur_x<sp/>&gt;=<sp/>g-&gt;max_x)<sp/>{</highlight></codeline>
<codeline lineno="3960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;cur_x<sp/>=<sp/>g-&gt;start_x;</highlight></codeline>
<codeline lineno="3961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;cur_y<sp/>+=<sp/>g-&gt;step;</highlight></codeline>
<codeline lineno="3962"><highlight class="normal"></highlight></codeline>
<codeline lineno="3963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(g-&gt;cur_y<sp/>&gt;=<sp/>g-&gt;max_y<sp/>&amp;&amp;<sp/>g-&gt;parse<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;step<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>g-&gt;parse)<sp/>*<sp/>g-&gt;line_size;</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;cur_y<sp/>=<sp/>g-&gt;start_y<sp/>+<sp/>(g-&gt;step<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--g-&gt;parse;</highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3969"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3970"><highlight class="normal"></highlight></codeline>
<codeline lineno="3971"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi__uint8<sp/>*stbi_process_gif_raster(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/><ref refid="structstbi__gif__struct" kindref="compound">stbi_gif</ref><sp/>*g)</highlight></codeline>
<codeline lineno="3972"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3973"><highlight class="normal"><sp/><sp/><sp/>stbi__uint8<sp/>lzw_cs;</highlight></codeline>
<codeline lineno="3974"><highlight class="normal"><sp/><sp/><sp/>stbi__int32<sp/>len,<sp/>code;</highlight></codeline>
<codeline lineno="3975"><highlight class="normal"><sp/><sp/><sp/>stbi__uint32<sp/>first;</highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/><sp/>stbi__int32<sp/>codesize,<sp/>codemask,<sp/>avail,<sp/>oldcode,<sp/>bits,<sp/>valid_bits,<sp/>clear;</highlight></codeline>
<codeline lineno="3977"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstbi__gif__lzw__struct" kindref="compound">stbi_gif_lzw</ref><sp/>*p;</highlight></codeline>
<codeline lineno="3978"><highlight class="normal"></highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/><sp/>lzw_cs<sp/>=<sp/>get8u(s);</highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/><sp/><sp/>clear<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>lzw_cs;</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"><sp/><sp/><sp/>first<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3982"><highlight class="normal"><sp/><sp/><sp/>codesize<sp/>=<sp/>lzw_cs<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3983"><highlight class="normal"><sp/><sp/><sp/>codemask<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>codesize)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="3984"><highlight class="normal"><sp/><sp/><sp/>bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3985"><highlight class="normal"><sp/><sp/><sp/>valid_bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3986"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(code<sp/>=<sp/>0;<sp/>code<sp/>&lt;<sp/>clear;<sp/>code++)<sp/>{</highlight></codeline>
<codeline lineno="3987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;codes[code].prefix<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;codes[code].first<sp/>=<sp/>(stbi__uint8)<sp/>code;</highlight></codeline>
<codeline lineno="3989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;codes[code].suffix<sp/>=<sp/>(stbi__uint8)<sp/>code;</highlight></codeline>
<codeline lineno="3990"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"></highlight></codeline>
<codeline lineno="3992"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>support<sp/>no<sp/>starting<sp/>clear<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3993"><highlight class="normal"><sp/><sp/><sp/>avail<sp/>=<sp/>clear+2;</highlight></codeline>
<codeline lineno="3994"><highlight class="normal"><sp/><sp/><sp/>oldcode<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3995"><highlight class="normal"></highlight></codeline>
<codeline lineno="3996"><highlight class="normal"><sp/><sp/><sp/>len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3997"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)<sp/>{</highlight></codeline>
<codeline lineno="3998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(valid_bits<sp/>&lt;<sp/>codesize)<sp/>{</highlight></codeline>
<codeline lineno="3999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>get8(s);<sp/></highlight><highlight class="comment">//<sp/>start<sp/>new<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>0)<sp/></highlight></codeline>
<codeline lineno="4002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g-&gt;out;</highlight></codeline>
<codeline lineno="4003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--len;</highlight></codeline>
<codeline lineno="4005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>|=<sp/>(stbi__int32)<sp/>get8(s)<sp/>&lt;&lt;<sp/>valid_bits;</highlight></codeline>
<codeline lineno="4006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid_bits<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="4007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi__int32<sp/>code<sp/>=<sp/>bits<sp/>&amp;<sp/>codemask;</highlight></codeline>
<codeline lineno="4009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>&gt;&gt;=<sp/>codesize;</highlight></codeline>
<codeline lineno="4010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid_bits<sp/>-=<sp/>codesize;</highlight></codeline>
<codeline lineno="4011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@OPTIMIZE:<sp/>is<sp/>there<sp/>some<sp/>way<sp/>we<sp/>can<sp/>accelerate<sp/>the<sp/>non-clear<sp/>path?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/>clear)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codesize<sp/>=<sp/>lzw_cs<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codemask<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>codesize)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="4015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>avail<sp/>=<sp/>clear<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="4016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldcode<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/>clear<sp/>+<sp/>1)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>stream<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip(s,<sp/>len);</highlight></codeline>
<codeline lineno="4020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((len<sp/>=<sp/>get8(s))<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="4021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip(s,len);</highlight></codeline>
<codeline lineno="4022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g-&gt;out;</highlight></codeline>
<codeline lineno="4023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>&lt;=<sp/>avail)<sp/>{</highlight></codeline>
<codeline lineno="4024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;no<sp/>clear<sp/>code&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Corrupt<sp/>GIF&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4025"><highlight class="normal"></highlight></codeline>
<codeline lineno="4026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oldcode<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>&amp;g-&gt;codes[avail++];</highlight></codeline>
<codeline lineno="4028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(avail<sp/>&gt;<sp/>4096)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;too<sp/>many<sp/>codes&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Corrupt<sp/>GIF&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;prefix<sp/>=<sp/>(stbi__int16)<sp/>oldcode;</highlight></codeline>
<codeline lineno="4030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;first<sp/>=<sp/>g-&gt;codes[oldcode].first;</highlight></codeline>
<codeline lineno="4031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;suffix<sp/>=<sp/>(code<sp/>==<sp/>avail)<sp/>?<sp/>p-&gt;first<sp/>:<sp/>g-&gt;codes[code].first;</highlight></codeline>
<codeline lineno="4032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/>avail)</highlight></codeline>
<codeline lineno="4033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;illegal<sp/>code<sp/>in<sp/>raster&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Corrupt<sp/>GIF&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4034"><highlight class="normal"></highlight></codeline>
<codeline lineno="4035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi_out_gif_code(g,<sp/>(stbi__uint16)<sp/>code);</highlight></codeline>
<codeline lineno="4036"><highlight class="normal"></highlight></codeline>
<codeline lineno="4037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((avail<sp/>&amp;<sp/>codemask)<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>avail<sp/>&lt;=<sp/>0x0FFF)<sp/>{</highlight></codeline>
<codeline lineno="4038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codesize++;</highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>codemask<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>codesize)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="4040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4041"><highlight class="normal"></highlight></codeline>
<codeline lineno="4042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldcode<sp/>=<sp/>code;</highlight></codeline>
<codeline lineno="4043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;illegal<sp/>code<sp/>in<sp/>raster&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Corrupt<sp/>GIF&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="4047"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4048"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4049"><highlight class="normal"></highlight></codeline>
<codeline lineno="4050"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbi_fill_gif_background(<ref refid="structstbi__gif__struct" kindref="compound">stbi_gif</ref><sp/>*g)</highlight></codeline>
<codeline lineno="4051"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4052"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4053"><highlight class="normal"><sp/><sp/><sp/>stbi__uint8<sp/>*c<sp/>=<sp/>g-&gt;pal[g-&gt;bgindex];</highlight></codeline>
<codeline lineno="4054"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@OPTIMIZE:<sp/>write<sp/>a<sp/>dword<sp/>at<sp/>a<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4055"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>g-&gt;w<sp/>*<sp/>g-&gt;h<sp/>*<sp/>4;<sp/>i<sp/>+=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="4056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi__uint8<sp/>*p<sp/><sp/>=<sp/>&amp;g-&gt;out[i];</highlight></codeline>
<codeline lineno="4057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[0]<sp/>=<sp/>c[2];</highlight></codeline>
<codeline lineno="4058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[1]<sp/>=<sp/>c[1];</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[2]<sp/>=<sp/>c[0];</highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p[3]<sp/>=<sp/>c[3];</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4062"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"></highlight></codeline>
<codeline lineno="4064"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>function<sp/>is<sp/>designed<sp/>to<sp/>support<sp/>animated<sp/>gifs,<sp/>although<sp/>stb_image<sp/>doesn&apos;t<sp/>support<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4065"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi__uint8<sp/>*stbi_gif_load_next(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/><ref refid="structstbi__gif__struct" kindref="compound">stbi_gif</ref><sp/>*g,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp)</highlight></codeline>
<codeline lineno="4066"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4067"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4068"><highlight class="normal"><sp/><sp/><sp/>stbi__uint8<sp/>*old_out<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4069"><highlight class="normal"></highlight></codeline>
<codeline lineno="4070"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g-&gt;out<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stbi_gif_header(s,<sp/>g,<sp/>comp,0))<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">//<sp/>failure_reason<sp/>set<sp/>by<sp/>stbi_gif_header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;out<sp/>=<sp/>(stbi__uint8<sp/>*)<sp/>malloc(4<sp/>*<sp/>g-&gt;w<sp/>*<sp/>g-&gt;h);</highlight></codeline>
<codeline lineno="4073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g-&gt;out<sp/>==<sp/>0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;outofmem&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Out<sp/>of<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbi_fill_gif_background(g);</highlight></codeline>
<codeline lineno="4075"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>animated-gif-only<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((g-&gt;eflags<sp/>&amp;<sp/>0x1C)<sp/>&gt;&gt;<sp/>2)<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="4078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>old_out<sp/>=<sp/>g-&gt;out;</highlight></codeline>
<codeline lineno="4079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;out<sp/>=<sp/>(stbi__uint8<sp/>*)<sp/>malloc(4<sp/>*<sp/>g-&gt;w<sp/>*<sp/>g-&gt;h);</highlight></codeline>
<codeline lineno="4080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g-&gt;out<sp/>==<sp/>0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;outofmem&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Out<sp/>of<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(g-&gt;out,<sp/>old_out,<sp/>g-&gt;w*g-&gt;h*4);</highlight></codeline>
<codeline lineno="4082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4083"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4085"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="4086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(get8(s))<sp/>{</highlight></codeline>
<codeline lineno="4087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x2C:<sp/></highlight><highlight class="comment">/*<sp/>Image<sp/>Descriptor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi__int32<sp/>x,<sp/>y,<sp/>w,<sp/>h;</highlight></codeline>
<codeline lineno="4090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi__uint8<sp/>*o;</highlight></codeline>
<codeline lineno="4091"><highlight class="normal"></highlight></codeline>
<codeline lineno="4092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>get16le(s);</highlight></codeline>
<codeline lineno="4093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>get16le(s);</highlight></codeline>
<codeline lineno="4094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>get16le(s);</highlight></codeline>
<codeline lineno="4095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>get16le(s);</highlight></codeline>
<codeline lineno="4096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((x<sp/>+<sp/>w)<sp/>&gt;<sp/>(g-&gt;w))<sp/>||<sp/>((y<sp/>+<sp/>h)<sp/>&gt;<sp/>(g-&gt;h)))</highlight></codeline>
<codeline lineno="4097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;bad<sp/>Image<sp/>Descriptor&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Corrupt<sp/>GIF&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4098"><highlight class="normal"></highlight></codeline>
<codeline lineno="4099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;line_size<sp/>=<sp/>g-&gt;w<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="4100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;start_x<sp/>=<sp/>x<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="4101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;start_y<sp/>=<sp/>y<sp/>*<sp/>g-&gt;line_size;</highlight></codeline>
<codeline lineno="4102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;max_x<sp/><sp/><sp/>=<sp/>g-&gt;start_x<sp/>+<sp/>w<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="4103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;max_y<sp/><sp/><sp/>=<sp/>g-&gt;start_y<sp/>+<sp/>h<sp/>*<sp/>g-&gt;line_size;</highlight></codeline>
<codeline lineno="4104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;cur_x<sp/><sp/><sp/>=<sp/>g-&gt;start_x;</highlight></codeline>
<codeline lineno="4105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;cur_y<sp/><sp/><sp/>=<sp/>g-&gt;start_y;</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"></highlight></codeline>
<codeline lineno="4107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;lflags<sp/>=<sp/>get8(s);</highlight></codeline>
<codeline lineno="4108"><highlight class="normal"></highlight></codeline>
<codeline lineno="4109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g-&gt;lflags<sp/>&amp;<sp/>0x40)<sp/>{</highlight></codeline>
<codeline lineno="4110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;step<sp/>=<sp/>8<sp/>*<sp/>g-&gt;line_size;<sp/></highlight><highlight class="comment">//<sp/>first<sp/>interlaced<sp/>spacing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;parse<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="4112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;step<sp/>=<sp/>g-&gt;line_size;</highlight></codeline>
<codeline lineno="4114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;parse<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4116"><highlight class="normal"></highlight></codeline>
<codeline lineno="4117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g-&gt;lflags<sp/>&amp;<sp/>0x80)<sp/>{</highlight></codeline>
<codeline lineno="4118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi_gif_parse_colortable(s,g-&gt;lpal,<sp/>2<sp/>&lt;&lt;<sp/>(g-&gt;lflags<sp/>&amp;<sp/>7),<sp/>g-&gt;eflags<sp/>&amp;<sp/>0x01<sp/>?<sp/>g-&gt;transparent<sp/>:<sp/>-1);</highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;color_table<sp/>=<sp/>(stbi__uint8<sp/>*)<sp/>g-&gt;lpal;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g-&gt;flags<sp/>&amp;<sp/>0x80)<sp/>{</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>256;<sp/>++i)<sp/><sp/></highlight><highlight class="comment">//<sp/>@OPTIMIZE:<sp/>reset<sp/>only<sp/>the<sp/>previous<sp/>transparent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;pal[i][3]<sp/>=<sp/>255;<sp/></highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(g-&gt;transparent<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>(g-&gt;eflags<sp/>&amp;<sp/>0x01))</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;pal[g-&gt;transparent][3]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;color_table<sp/>=<sp/>(stbi__uint8<sp/>*)<sp/>g-&gt;pal;</highlight></codeline>
<codeline lineno="4126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;missing<sp/>color<sp/>table&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Corrupt<sp/>GIF&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4128"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o<sp/>=<sp/>stbi_process_gif_raster(s,<sp/>g);</highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(o<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"></highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(req_comp<sp/>&amp;&amp;<sp/>req_comp<sp/>!=<sp/>4)</highlight></codeline>
<codeline lineno="4133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o<sp/>=<sp/>convert_format(o,<sp/>4,<sp/>req_comp,<sp/>g-&gt;w,<sp/>g-&gt;h);</highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>o;</highlight></codeline>
<codeline lineno="4135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4136"><highlight class="normal"></highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x21:<sp/></highlight><highlight class="comment">//<sp/>Comment<sp/>Extension.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="4140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get8(s)<sp/>==<sp/>0xF9)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Graphic<sp/>Control<sp/>Extension.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>get8(s);</highlight></codeline>
<codeline lineno="4142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="4143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;eflags<sp/>=<sp/>get8(s);</highlight></codeline>
<codeline lineno="4144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get16le(s);<sp/></highlight><highlight class="comment">//<sp/>delay</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g-&gt;transparent<sp/>=<sp/>get8(s);</highlight></codeline>
<codeline lineno="4146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip(s,<sp/>len);</highlight></codeline>
<codeline lineno="4148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((len<sp/>=<sp/>get8(s))<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="4152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip(s,<sp/>len);</highlight></codeline>
<codeline lineno="4153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4155"><highlight class="normal"></highlight></codeline>
<codeline lineno="4156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x3B:<sp/></highlight><highlight class="comment">//<sp/>gif<sp/>stream<sp/>termination<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(stbi__uint8<sp/>*)<sp/>1;</highlight></codeline>
<codeline lineno="4158"><highlight class="normal"></highlight></codeline>
<codeline lineno="4159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epuc(</highlight><highlight class="stringliteral">&quot;unknown<sp/>code&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Corrupt<sp/>GIF&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4162"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4164"><highlight class="normal"></highlight></codeline>
<codeline lineno="4165"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stbi_uc<sp/>*stbi_gif_load(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp)</highlight></codeline>
<codeline lineno="4166"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4167"><highlight class="normal"><sp/><sp/><sp/>stbi__uint8<sp/>*u<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4168"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstbi__gif__struct" kindref="compound">stbi_gif</ref><sp/>g={0};</highlight></codeline>
<codeline lineno="4169"><highlight class="normal"></highlight></codeline>
<codeline lineno="4170"><highlight class="normal"><sp/><sp/><sp/>u<sp/>=<sp/>stbi_gif_load_next(s,<sp/>&amp;g,<sp/>comp,<sp/>req_comp);</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(u<sp/>==<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>1)<sp/>u<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>animated<sp/>gif<sp/>marker</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4172"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(u)<sp/>{</highlight></codeline>
<codeline lineno="4173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*x<sp/>=<sp/>g.w;</highlight></codeline>
<codeline lineno="4174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*y<sp/>=<sp/>g.h;</highlight></codeline>
<codeline lineno="4175"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4176"><highlight class="normal"></highlight></codeline>
<codeline lineno="4177"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>u;</highlight></codeline>
<codeline lineno="4178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4179"><highlight class="normal"></highlight></codeline>
<codeline lineno="4180"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_gif_info(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp)</highlight></codeline>
<codeline lineno="4181"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4182"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stbi_gif_info_raw(s,x,y,comp);</highlight></codeline>
<codeline lineno="4183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4184"><highlight class="normal"></highlight></codeline>
<codeline lineno="4185"><highlight class="normal"></highlight></codeline>
<codeline lineno="4186"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*************************************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4187"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Radiance<sp/>RGBE<sp/>HDR<sp/>loader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4188"><highlight class="normal"></highlight><highlight class="comment">//<sp/>originally<sp/>by<sp/>Nicolas<sp/>Schulz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4189"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STBI_NO_HDR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4190"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hdr_test(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s)</highlight></codeline>
<codeline lineno="4191"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4192"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*signature<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;#?RADIANCE\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4193"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4194"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>signature[i];<sp/>++i)</highlight></codeline>
<codeline lineno="4195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get8(s)<sp/>!=<sp/>signature[i])</highlight></codeline>
<codeline lineno="4196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4197"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4199"><highlight class="normal"></highlight></codeline>
<codeline lineno="4200"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_hdr_test(<ref refid="structstbi" kindref="compound">stbi</ref>*<sp/>s)</highlight></codeline>
<codeline lineno="4201"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4202"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>hdr_test(s);</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"><sp/><sp/><sp/>stbi_rewind(s);</highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="4205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"></highlight></codeline>
<codeline lineno="4207"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HDR_BUFLEN<sp/><sp/>1024</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4208"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hdr_gettoken(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*z,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>)</highlight></codeline>
<codeline lineno="4209"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4210"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len=0;</highlight></codeline>
<codeline lineno="4211"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4212"><highlight class="normal"></highlight></codeline>
<codeline lineno="4213"><highlight class="normal"><sp/><sp/><sp/>c<sp/>=<sp/>(char)<sp/>get8(z);</highlight></codeline>
<codeline lineno="4214"><highlight class="normal"></highlight></codeline>
<codeline lineno="4215"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!at_eof(z)<sp/>&amp;&amp;<sp/>c<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[len++]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="4217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>HDR_BUFLEN-1)<sp/>{</highlight></codeline>
<codeline lineno="4218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>flush<sp/>to<sp/>end<sp/>of<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!at_eof(z)<sp/>&amp;&amp;<sp/>get8(z)<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="4221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>(char)<sp/>get8(z);</highlight></codeline>
<codeline lineno="4224"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4225"><highlight class="normal"></highlight></codeline>
<codeline lineno="4226"><highlight class="normal"><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[len]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4227"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>;</highlight></codeline>
<codeline lineno="4228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4229"><highlight class="normal"></highlight></codeline>
<codeline lineno="4230"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>hdr_convert(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<ref refid="structoutput" kindref="compound">output</ref>,<sp/>stbi_uc<sp/>*input,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp)</highlight></codeline>
<codeline lineno="4231"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4232"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>input[3]<sp/>!=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f1;</highlight></codeline>
<codeline lineno="4234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Exponent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f1<sp/>=<sp/>(float)<sp/><ref refid="group__core__func__common_1ga52e319d7289b849ec92055abd4830533" kindref="member">ldexp</ref>(1.0f,<sp/>input[3]<sp/>-<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(128<sp/>+<sp/>8));</highlight></codeline>
<codeline lineno="4236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(req_comp<sp/>&lt;=<sp/>2)</highlight></codeline>
<codeline lineno="4237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structoutput" kindref="compound">output</ref>[0]<sp/>=<sp/>(input[0]<sp/>+<sp/>input[1]<sp/>+<sp/>input[2])<sp/>*<sp/>f1<sp/>/<sp/>3;</highlight></codeline>
<codeline lineno="4238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structoutput" kindref="compound">output</ref>[0]<sp/>=<sp/>input[0]<sp/>*<sp/>f1;</highlight></codeline>
<codeline lineno="4240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structoutput" kindref="compound">output</ref>[1]<sp/>=<sp/>input[1]<sp/>*<sp/>f1;</highlight></codeline>
<codeline lineno="4241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structoutput" kindref="compound">output</ref>[2]<sp/>=<sp/>input[2]<sp/>*<sp/>f1;</highlight></codeline>
<codeline lineno="4242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(req_comp<sp/>==<sp/>2)<sp/><ref refid="structoutput" kindref="compound">output</ref>[1]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(req_comp<sp/>==<sp/>4)<sp/><ref refid="structoutput" kindref="compound">output</ref>[3]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4245"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(req_comp)<sp/>{</highlight></codeline>
<codeline lineno="4247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:<sp/><ref refid="structoutput" kindref="compound">output</ref>[3]<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">/*<sp/>fallthrough<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:<sp/><ref refid="structoutput" kindref="compound">output</ref>[0]<sp/>=<sp/><ref refid="structoutput" kindref="compound">output</ref>[1]<sp/>=<sp/><ref refid="structoutput" kindref="compound">output</ref>[2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/><ref refid="structoutput" kindref="compound">output</ref>[1]<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">/*<sp/>fallthrough<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/><ref refid="structoutput" kindref="compound">output</ref>[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4254"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4256"><highlight class="normal"></highlight></codeline>
<codeline lineno="4257"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*hdr_load(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp)</highlight></codeline>
<codeline lineno="4258"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4259"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[HDR_BUFLEN];</highlight></codeline>
<codeline lineno="4260"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*token;</highlight></codeline>
<codeline lineno="4261"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>valid<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4262"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/>height;</highlight></codeline>
<codeline lineno="4263"><highlight class="normal"><sp/><sp/><sp/>stbi_uc<sp/>*scanline;</highlight></codeline>
<codeline lineno="4264"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*hdr_data;</highlight></codeline>
<codeline lineno="4265"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="4266"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>count,<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="4267"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k,<sp/>c1,c2,<sp/>z;</highlight></codeline>
<codeline lineno="4268"><highlight class="normal"></highlight></codeline>
<codeline lineno="4269"><highlight class="normal"></highlight></codeline>
<codeline lineno="4270"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>identifier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4271"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(hdr_gettoken(s,<ref refid="classbuffer" kindref="compound">buffer</ref>),<sp/></highlight><highlight class="stringliteral">&quot;#?RADIANCE&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="4272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epf(</highlight><highlight class="stringliteral">&quot;not<sp/>HDR&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Corrupt<sp/>HDR<sp/>image&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4273"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4274"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4275"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)<sp/>{</highlight></codeline>
<codeline lineno="4276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>token<sp/>=<sp/>hdr_gettoken(s,<ref refid="classbuffer" kindref="compound">buffer</ref>);</highlight></codeline>
<codeline lineno="4277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(token[0]<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(token,<sp/></highlight><highlight class="stringliteral">&quot;FORMAT=32-bit_rle_rgbe&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>valid<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4279"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4280"><highlight class="normal"></highlight></codeline>
<codeline lineno="4281"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!valid)<sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epf(</highlight><highlight class="stringliteral">&quot;unsupported<sp/>format&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>HDR<sp/>format&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4282"><highlight class="normal"></highlight></codeline>
<codeline lineno="4283"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>width<sp/>and<sp/>height</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4284"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can&apos;t<sp/>use<sp/>sscanf()<sp/>if<sp/>we&apos;re<sp/>not<sp/>using<sp/>stdio!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4285"><highlight class="normal"><sp/><sp/><sp/>token<sp/>=<sp/>hdr_gettoken(s,<ref refid="classbuffer" kindref="compound">buffer</ref>);</highlight></codeline>
<codeline lineno="4286"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(token,<sp/></highlight><highlight class="stringliteral">&quot;-Y<sp/>&quot;</highlight><highlight class="normal">,<sp/>3))<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epf(</highlight><highlight class="stringliteral">&quot;unsupported<sp/>data<sp/>layout&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>HDR<sp/>format&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4287"><highlight class="normal"><sp/><sp/><sp/>token<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="4288"><highlight class="normal"><sp/><sp/><sp/>height<sp/>=<sp/>(int)<sp/>strtol(token,<sp/>&amp;token,<sp/>10);</highlight></codeline>
<codeline lineno="4289"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*token<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>++token;</highlight></codeline>
<codeline lineno="4290"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(token,<sp/></highlight><highlight class="stringliteral">&quot;+X<sp/>&quot;</highlight><highlight class="normal">,<sp/>3))<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epf(</highlight><highlight class="stringliteral">&quot;unsupported<sp/>data<sp/>layout&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>HDR<sp/>format&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4291"><highlight class="normal"><sp/><sp/><sp/>token<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="4292"><highlight class="normal"><sp/><sp/><sp/>width<sp/>=<sp/>(int)<sp/>strtol(token,<sp/>NULL,<sp/>10);</highlight></codeline>
<codeline lineno="4293"><highlight class="normal"></highlight></codeline>
<codeline lineno="4294"><highlight class="normal"><sp/><sp/><sp/>*x<sp/>=<sp/>width;</highlight></codeline>
<codeline lineno="4295"><highlight class="normal"><sp/><sp/><sp/>*y<sp/>=<sp/>height;</highlight></codeline>
<codeline lineno="4296"><highlight class="normal"></highlight></codeline>
<codeline lineno="4297"><highlight class="normal"><sp/><sp/><sp/>*comp<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="4298"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(req_comp<sp/>==<sp/>0)<sp/>req_comp<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="4299"><highlight class="normal"></highlight></codeline>
<codeline lineno="4300"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4301"><highlight class="normal"><sp/><sp/><sp/>hdr_data<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>malloc(height<sp/>*<sp/>width<sp/>*<sp/>req_comp<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4302"><highlight class="normal"></highlight></codeline>
<codeline lineno="4303"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>image<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4304"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>image<sp/>data<sp/>is<sp/>stored<sp/>as<sp/>some<sp/>number<sp/>of<sp/>sca</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4305"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>width<sp/>&lt;<sp/>8<sp/>||<sp/>width<sp/>&gt;=<sp/>32768)<sp/>{</highlight></codeline>
<codeline lineno="4306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>flat<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>height;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="4308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>width;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi_uc<sp/>rgbe[4];</highlight></codeline>
<codeline lineno="4310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>main_decode_loop:</highlight></codeline>
<codeline lineno="4311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getn(s,<sp/>rgbe,<sp/>4);</highlight></codeline>
<codeline lineno="4312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hdr_convert(hdr_data<sp/>+<sp/>j<sp/>*<sp/>width<sp/>*<sp/>req_comp<sp/>+<sp/>i<sp/>*<sp/>req_comp,<sp/>rgbe,<sp/>req_comp);</highlight></codeline>
<codeline lineno="4313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4315"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>RLE-encoded<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scanline<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4318"><highlight class="normal"></highlight></codeline>
<codeline lineno="4319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>height;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="4320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1<sp/>=<sp/>get8(s);</highlight></codeline>
<codeline lineno="4321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c2<sp/>=<sp/>get8(s);</highlight></codeline>
<codeline lineno="4322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>get8(s);</highlight></codeline>
<codeline lineno="4323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c1<sp/>!=<sp/>2<sp/>||<sp/>c2<sp/>!=<sp/>2<sp/>||<sp/>(len<sp/>&amp;<sp/>0x80))<sp/>{</highlight></codeline>
<codeline lineno="4324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>run-length<sp/>encoded,<sp/>so<sp/>we<sp/>have<sp/>to<sp/>actually<sp/>use<sp/>THIS<sp/>data<sp/>as<sp/>a<sp/>decoded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pixel<sp/>(note<sp/>this<sp/>can&apos;t<sp/>be<sp/>a<sp/>valid<sp/>pixel--one<sp/>of<sp/>RGB<sp/>must<sp/>be<sp/>&gt;=<sp/>128)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi__uint8<sp/>rgbe[4];</highlight></codeline>
<codeline lineno="4327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rgbe[0]<sp/>=<sp/>(stbi__uint8)<sp/>c1;</highlight></codeline>
<codeline lineno="4328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rgbe[1]<sp/>=<sp/>(stbi__uint8)<sp/>c2;</highlight></codeline>
<codeline lineno="4329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rgbe[2]<sp/>=<sp/>(stbi__uint8)<sp/>len;</highlight></codeline>
<codeline lineno="4330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rgbe[3]<sp/>=<sp/>(stbi__uint8)<sp/>get8u(s);</highlight></codeline>
<codeline lineno="4331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hdr_convert(hdr_data,<sp/>rgbe,<sp/>req_comp);</highlight></codeline>
<codeline lineno="4332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(scanline);</highlight></codeline>
<codeline lineno="4335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>main_decode_loop;<sp/></highlight><highlight class="comment">//<sp/>yes,<sp/>this<sp/>makes<sp/>no<sp/>sense</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>&lt;&lt;=<sp/>8;</highlight></codeline>
<codeline lineno="4338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>|=<sp/>get8(s);</highlight></codeline>
<codeline lineno="4339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>!=<sp/>width)<sp/>{<sp/>free(hdr_data);<sp/>free(scanline);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>epf(</highlight><highlight class="stringliteral">&quot;invalid<sp/>decoded<sp/>scanline<sp/>length&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;corrupt<sp/>HDR&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="4340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scanline<sp/>==<sp/>NULL)<sp/>scanline<sp/>=<sp/>(stbi_uc<sp/>*)<sp/>malloc(width<sp/>*<sp/>4);</highlight></codeline>
<codeline lineno="4341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="4342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>4;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="4343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>width)<sp/>{</highlight></codeline>
<codeline lineno="4345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/>get8u(s);</highlight></codeline>
<codeline lineno="4346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>&gt;<sp/>128)<sp/>{</highlight></codeline>
<codeline lineno="4347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>=<sp/>get8u(s);</highlight></codeline>
<codeline lineno="4349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>-=<sp/>128;</highlight></codeline>
<codeline lineno="4350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(z<sp/>=<sp/>0;<sp/>z<sp/>&lt;<sp/>count;<sp/>++z)</highlight></codeline>
<codeline lineno="4351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scanline[i++<sp/>*<sp/>4<sp/>+<sp/>k]<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="4352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Dump</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(z<sp/>=<sp/>0;<sp/>z<sp/>&lt;<sp/>count;<sp/>++z)</highlight></codeline>
<codeline lineno="4355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scanline[i++<sp/>*<sp/>4<sp/>+<sp/>k]<sp/>=<sp/>get8u(s);</highlight></codeline>
<codeline lineno="4356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>width;<sp/>++i)</highlight></codeline>
<codeline lineno="4360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hdr_convert(hdr_data+(j*width<sp/>+<sp/>i)*req_comp,<sp/>scanline<sp/>+<sp/>i*4,<sp/>req_comp);</highlight></codeline>
<codeline lineno="4361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(scanline);</highlight></codeline>
<codeline lineno="4363"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4364"><highlight class="normal"></highlight></codeline>
<codeline lineno="4365"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hdr_data;</highlight></codeline>
<codeline lineno="4366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4367"><highlight class="normal"></highlight></codeline>
<codeline lineno="4368"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*stbi_hdr_load(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req_comp)</highlight></codeline>
<codeline lineno="4369"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4370"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hdr_load(s,x,y,comp,req_comp);</highlight></codeline>
<codeline lineno="4371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4372"><highlight class="normal"></highlight></codeline>
<codeline lineno="4373"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_hdr_info(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp)</highlight></codeline>
<codeline lineno="4374"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4375"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[HDR_BUFLEN];</highlight></codeline>
<codeline lineno="4376"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*token;</highlight></codeline>
<codeline lineno="4377"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>valid<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4378"><highlight class="normal"></highlight></codeline>
<codeline lineno="4379"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(hdr_gettoken(s,<ref refid="classbuffer" kindref="compound">buffer</ref>),<sp/></highlight><highlight class="stringliteral">&quot;#?RADIANCE&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi_rewind(<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="4381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4382"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4383"><highlight class="normal"></highlight></codeline>
<codeline lineno="4384"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)<sp/>{</highlight></codeline>
<codeline lineno="4385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>token<sp/>=<sp/>hdr_gettoken(s,<ref refid="classbuffer" kindref="compound">buffer</ref>);</highlight></codeline>
<codeline lineno="4386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(token[0]<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(token,<sp/></highlight><highlight class="stringliteral">&quot;FORMAT=32-bit_rle_rgbe&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>valid<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4388"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4389"><highlight class="normal"></highlight></codeline>
<codeline lineno="4390"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!valid)<sp/>{</highlight></codeline>
<codeline lineno="4391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi_rewind(<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="4392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4393"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4394"><highlight class="normal"><sp/><sp/><sp/>token<sp/>=<sp/>hdr_gettoken(s,<ref refid="classbuffer" kindref="compound">buffer</ref>);</highlight></codeline>
<codeline lineno="4395"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(token,<sp/></highlight><highlight class="stringliteral">&quot;-Y<sp/>&quot;</highlight><highlight class="normal">,<sp/>3))<sp/>{</highlight></codeline>
<codeline lineno="4396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi_rewind(<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="4397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4398"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4399"><highlight class="normal"><sp/><sp/><sp/>token<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="4400"><highlight class="normal"><sp/><sp/><sp/>*y<sp/>=<sp/>(int)<sp/>strtol(token,<sp/>&amp;token,<sp/>10);</highlight></codeline>
<codeline lineno="4401"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*token<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>++token;</highlight></codeline>
<codeline lineno="4402"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(token,<sp/></highlight><highlight class="stringliteral">&quot;+X<sp/>&quot;</highlight><highlight class="normal">,<sp/>3))<sp/>{</highlight></codeline>
<codeline lineno="4403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi_rewind(<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="4404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4405"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4406"><highlight class="normal"><sp/><sp/><sp/>token<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="4407"><highlight class="normal"><sp/><sp/><sp/>*x<sp/>=<sp/>(int)<sp/>strtol(token,<sp/>NULL,<sp/>10);</highlight></codeline>
<codeline lineno="4408"><highlight class="normal"><sp/><sp/><sp/>*comp<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="4409"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4411"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>STBI_NO_HDR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4412"><highlight class="normal"></highlight></codeline>
<codeline lineno="4413"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_bmp_info(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp)</highlight></codeline>
<codeline lineno="4414"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4415"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hsz;</highlight></codeline>
<codeline lineno="4416"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get8(s)<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;B&apos;</highlight><highlight class="normal"><sp/>||<sp/>get8(s)<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;M&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi_rewind(<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="4418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4419"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4420"><highlight class="normal"><sp/><sp/><sp/>skip(s,12);</highlight></codeline>
<codeline lineno="4421"><highlight class="normal"><sp/><sp/><sp/>hsz<sp/>=<sp/>get32le(s);</highlight></codeline>
<codeline lineno="4422"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hsz<sp/>!=<sp/>12<sp/>&amp;&amp;<sp/>hsz<sp/>!=<sp/>40<sp/>&amp;&amp;<sp/>hsz<sp/>!=<sp/>56<sp/>&amp;&amp;<sp/>hsz<sp/>!=<sp/>108)<sp/>{</highlight></codeline>
<codeline lineno="4423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi_rewind(<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="4424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4425"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4426"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hsz<sp/>==<sp/>12)<sp/>{</highlight></codeline>
<codeline lineno="4427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*x<sp/>=<sp/>get16le(s);</highlight></codeline>
<codeline lineno="4428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*y<sp/>=<sp/>get16le(s);</highlight></codeline>
<codeline lineno="4429"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*x<sp/>=<sp/>get32le(s);</highlight></codeline>
<codeline lineno="4431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*y<sp/>=<sp/>get32le(s);</highlight></codeline>
<codeline lineno="4432"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4433"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get16le(s)<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi_rewind(<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="4435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4436"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4437"><highlight class="normal"><sp/><sp/><sp/>*comp<sp/>=<sp/>get16le(s)<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="4438"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4440"><highlight class="normal"></highlight></codeline>
<codeline lineno="4441"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_psd_info(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp)</highlight></codeline>
<codeline lineno="4442"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4443"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channelCount;</highlight></codeline>
<codeline lineno="4444"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get32(s)<sp/>!=<sp/>0x38425053)<sp/>{</highlight></codeline>
<codeline lineno="4445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi_rewind(<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="4446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4447"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4448"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get16(s)<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi_rewind(<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="4450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4451"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4452"><highlight class="normal"><sp/><sp/><sp/>skip(s,<sp/>6);</highlight></codeline>
<codeline lineno="4453"><highlight class="normal"><sp/><sp/><sp/>channelCount<sp/>=<sp/>get16(s);</highlight></codeline>
<codeline lineno="4454"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(channelCount<sp/>&lt;<sp/>0<sp/>||<sp/>channelCount<sp/>&gt;<sp/>16)<sp/>{</highlight></codeline>
<codeline lineno="4455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi_rewind(<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="4456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4457"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4458"><highlight class="normal"><sp/><sp/><sp/>*y<sp/>=<sp/>get32(s);</highlight></codeline>
<codeline lineno="4459"><highlight class="normal"><sp/><sp/><sp/>*x<sp/>=<sp/>get32(s);</highlight></codeline>
<codeline lineno="4460"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get16(s)<sp/>!=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="4461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi_rewind(<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="4462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4463"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4464"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get16(s)<sp/>!=<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="4465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi_rewind(<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="4466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4467"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4468"><highlight class="normal"><sp/><sp/><sp/>*comp<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="4469"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4471"><highlight class="normal"></highlight></codeline>
<codeline lineno="4472"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_pic_info(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp)</highlight></codeline>
<codeline lineno="4473"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4474"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>act_comp=0,num_packets=0,chained;</highlight></codeline>
<codeline lineno="4475"><highlight class="normal"><sp/><sp/><sp/><ref refid="structpic__packet__t" kindref="compound">pic_packet_t</ref><sp/>packets[10];</highlight></codeline>
<codeline lineno="4476"><highlight class="normal"></highlight></codeline>
<codeline lineno="4477"><highlight class="normal"><sp/><sp/><sp/>skip(s,<sp/>92);</highlight></codeline>
<codeline lineno="4478"><highlight class="normal"></highlight></codeline>
<codeline lineno="4479"><highlight class="normal"><sp/><sp/><sp/>*x<sp/>=<sp/>get16(s);</highlight></codeline>
<codeline lineno="4480"><highlight class="normal"><sp/><sp/><sp/>*y<sp/>=<sp/>get16(s);</highlight></codeline>
<codeline lineno="4481"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(at_eof(s))<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4482"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(*x)<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>(1<sp/>&lt;&lt;<sp/>28)<sp/>/<sp/>(*x)<sp/>&lt;<sp/>(*y))<sp/>{</highlight></codeline>
<codeline lineno="4483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi_rewind(<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="4484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4485"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4486"><highlight class="normal"></highlight></codeline>
<codeline lineno="4487"><highlight class="normal"><sp/><sp/><sp/>skip(s,<sp/>8);</highlight></codeline>
<codeline lineno="4488"><highlight class="normal"></highlight></codeline>
<codeline lineno="4489"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpic__packet__t" kindref="compound">pic_packet_t</ref><sp/>*packet;</highlight></codeline>
<codeline lineno="4491"><highlight class="normal"></highlight></codeline>
<codeline lineno="4492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_packets==</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(packets)/</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(packets[0]))</highlight></codeline>
<codeline lineno="4493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4494"><highlight class="normal"></highlight></codeline>
<codeline lineno="4495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>packet<sp/>=<sp/>&amp;packets[num_packets++];</highlight></codeline>
<codeline lineno="4496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>chained<sp/>=<sp/>get8(s);</highlight></codeline>
<codeline lineno="4497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>packet-&gt;size<sp/><sp/><sp/><sp/>=<sp/>get8u(s);</highlight></codeline>
<codeline lineno="4498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>packet-&gt;type<sp/><sp/><sp/><sp/>=<sp/>get8u(s);</highlight></codeline>
<codeline lineno="4499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>packet-&gt;channel<sp/>=<sp/>get8u(s);</highlight></codeline>
<codeline lineno="4500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>act_comp<sp/>|=<sp/>packet-&gt;channel;</highlight></codeline>
<codeline lineno="4501"><highlight class="normal"></highlight></codeline>
<codeline lineno="4502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(at_eof(s))<sp/>{</highlight></codeline>
<codeline lineno="4503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi_rewind(<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="4504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(packet-&gt;size<sp/>!=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="4507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi_rewind(<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="4508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4510"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(chained);</highlight></codeline>
<codeline lineno="4511"><highlight class="normal"></highlight></codeline>
<codeline lineno="4512"><highlight class="normal"><sp/><sp/><sp/>*comp<sp/>=<sp/>(act_comp<sp/>&amp;<sp/>0x10<sp/>?<sp/>4<sp/>:<sp/>3);</highlight></codeline>
<codeline lineno="4513"><highlight class="normal"></highlight></codeline>
<codeline lineno="4514"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4515"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4516"><highlight class="normal"></highlight></codeline>
<codeline lineno="4517"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_info_main(<ref refid="structstbi" kindref="compound">stbi</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp)</highlight></codeline>
<codeline lineno="4518"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4519"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stbi_jpeg_info(s,<sp/>x,<sp/>y,<sp/>comp))</highlight></codeline>
<codeline lineno="4520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4521"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stbi_png_info(s,<sp/>x,<sp/>y,<sp/>comp))</highlight></codeline>
<codeline lineno="4522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4523"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stbi_gif_info(s,<sp/>x,<sp/>y,<sp/>comp))</highlight></codeline>
<codeline lineno="4524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4525"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stbi_bmp_info(s,<sp/>x,<sp/>y,<sp/>comp))</highlight></codeline>
<codeline lineno="4526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4527"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stbi_psd_info(s,<sp/>x,<sp/>y,<sp/>comp))</highlight></codeline>
<codeline lineno="4528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4529"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stbi_pic_info(s,<sp/>x,<sp/>y,<sp/>comp))</highlight></codeline>
<codeline lineno="4530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4531"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>STBI_NO_HDR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4532"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stbi_hdr_info(s,<sp/>x,<sp/>y,<sp/>comp))</highlight></codeline>
<codeline lineno="4533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4534"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4535"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>tga<sp/>last<sp/>because<sp/>it&apos;s<sp/>a<sp/>crappy<sp/>test!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4536"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stbi_tga_info(s,<sp/>x,<sp/>y,<sp/>comp))</highlight></codeline>
<codeline lineno="4537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="4538"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;unknown<sp/>image<sp/>type&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Image<sp/>not<sp/>of<sp/>any<sp/>known<sp/>type,<sp/>or<sp/>corrupt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4540"><highlight class="normal"></highlight></codeline>
<codeline lineno="4541"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STBI_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4542"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_info(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp)</highlight></codeline>
<codeline lineno="4543"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4544"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*f<sp/>=<sp/>fopen(filename,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="4546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>(</highlight><highlight class="stringliteral">&quot;can&apos;t<sp/>fopen&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>open<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4547"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>stbi_info_from_file(f,<sp/>x,<sp/>y,<sp/>comp);</highlight></codeline>
<codeline lineno="4548"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="4549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="4550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4551"><highlight class="normal"></highlight></codeline>
<codeline lineno="4552"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_info_from_file(FILE<sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp)</highlight></codeline>
<codeline lineno="4553"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4554"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="4555"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstbi" kindref="compound">stbi</ref><sp/>s;</highlight></codeline>
<codeline lineno="4556"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>ftell(f);</highlight></codeline>
<codeline lineno="4557"><highlight class="normal"><sp/><sp/><sp/>start_file(&amp;s,<sp/>f);</highlight></codeline>
<codeline lineno="4558"><highlight class="normal"><sp/><sp/><sp/>r<sp/>=<sp/>stbi_info_main(&amp;s,x,y,comp);</highlight></codeline>
<codeline lineno="4559"><highlight class="normal"><sp/><sp/><sp/>fseek(f,pos,SEEK_SET);</highlight></codeline>
<codeline lineno="4560"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="4561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4562"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>!STBI_NO_STDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4563"><highlight class="normal"></highlight></codeline>
<codeline lineno="4564"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_info_from_memory(stbi_uc<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp)</highlight></codeline>
<codeline lineno="4565"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4566"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstbi" kindref="compound">stbi</ref><sp/>s;</highlight></codeline>
<codeline lineno="4567"><highlight class="normal"><sp/><sp/><sp/>start_mem(&amp;s,<ref refid="classbuffer" kindref="compound">buffer</ref>,len);</highlight></codeline>
<codeline lineno="4568"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stbi_info_main(&amp;s,x,y,comp);</highlight></codeline>
<codeline lineno="4569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4570"><highlight class="normal"></highlight></codeline>
<codeline lineno="4571"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stbi_info_from_callbacks(<ref refid="structstbi__io__callbacks" kindref="compound">stbi_io_callbacks</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*c,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*user,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*comp)</highlight></codeline>
<codeline lineno="4572"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4573"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstbi" kindref="compound">stbi</ref><sp/>s;</highlight></codeline>
<codeline lineno="4574"><highlight class="normal"><sp/><sp/><sp/>start_callbacks(&amp;s,<sp/>(<ref refid="structstbi__io__callbacks" kindref="compound">stbi_io_callbacks</ref><sp/>*)<sp/>c,<sp/>user);</highlight></codeline>
<codeline lineno="4575"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stbi_info_main(&amp;s,x,y,comp);</highlight></codeline>
<codeline lineno="4576"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4577"><highlight class="normal"></highlight></codeline>
<codeline lineno="4578"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>STBI_HEADER_FILE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4579"><highlight class="normal"></highlight></codeline>
<codeline lineno="4580"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(STBI_NO_STDIO)<sp/>&amp;&amp;<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>_MSC_VER<sp/>&gt;=<sp/>1400</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4581"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(pop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4582"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4583"><highlight class="normal"></highlight></codeline>
<codeline lineno="4584"><highlight class="normal"></highlight></codeline>
<codeline lineno="4585"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4586"><highlight class="comment"><sp/><sp/><sp/>revision<sp/>history:</highlight></codeline>
<codeline lineno="4587"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.35<sp/>(2014-05-27)</highlight></codeline>
<codeline lineno="4588"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>various<sp/>warnings</highlight></codeline>
<codeline lineno="4589"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fix<sp/>broken<sp/>STBI_SIMD<sp/>path</highlight></codeline>
<codeline lineno="4590"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fix<sp/>bug<sp/>where<sp/>stbi_load_from_file<sp/>no<sp/>longer<sp/>left<sp/>file<sp/>pointer<sp/>in<sp/>correct<sp/>place</highlight></codeline>
<codeline lineno="4591"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fix<sp/>broken<sp/>non-easy<sp/>path<sp/>for<sp/>32-bit<sp/>BMP<sp/>(possibly<sp/>never<sp/>used)</highlight></codeline>
<codeline lineno="4592"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TGA<sp/>optimization<sp/>by<sp/>Arseny<sp/>Kapoulkine</highlight></codeline>
<codeline lineno="4593"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.34<sp/>(unknown)</highlight></codeline>
<codeline lineno="4594"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use<sp/>STBI_NOTUSED<sp/>in<sp/>resample_row_generic(),<sp/>fix<sp/>one<sp/>more<sp/>leak<sp/>in<sp/>tga<sp/>failure<sp/>case</highlight></codeline>
<codeline lineno="4595"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.33<sp/>(2011-07-14)</highlight></codeline>
<codeline lineno="4596"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>make<sp/>stbi_is_hdr<sp/>work<sp/>in<sp/>STBI_NO_HDR<sp/>(as<sp/>specified),<sp/>minor<sp/>compiler-friendly<sp/>improvements</highlight></codeline>
<codeline lineno="4597"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.32<sp/>(2011-07-13)</highlight></codeline>
<codeline lineno="4598"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>support<sp/>for<sp/>&quot;info&quot;<sp/>function<sp/>for<sp/>all<sp/>supported<sp/>filetypes<sp/>(SpartanJ)</highlight></codeline>
<codeline lineno="4599"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.31<sp/>(2011-06-20)</highlight></codeline>
<codeline lineno="4600"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>few<sp/>more<sp/>leak<sp/>fixes,<sp/>bug<sp/>in<sp/>PNG<sp/>handling<sp/>(SpartanJ)</highlight></codeline>
<codeline lineno="4601"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.30<sp/>(2011-06-11)</highlight></codeline>
<codeline lineno="4602"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>added<sp/>ability<sp/>to<sp/>load<sp/>files<sp/>via<sp/>callbacks<sp/>to<sp/>accomidate<sp/>custom<sp/>input<sp/>streams<sp/>(Ben<sp/>Wenger)</highlight></codeline>
<codeline lineno="4603"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>removed<sp/>deprecated<sp/>format-specific<sp/>test/load<sp/>functions</highlight></codeline>
<codeline lineno="4604"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>removed<sp/>support<sp/>for<sp/>installable<sp/>file<sp/>formats<sp/>(stbi_loader)<sp/>--<sp/>would<sp/>have<sp/>been<sp/>broken<sp/>for<sp/>IO<sp/>callbacks<sp/>anyway</highlight></codeline>
<codeline lineno="4605"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>cases<sp/>in<sp/>bmp<sp/>and<sp/>tga<sp/>give<sp/>messages<sp/>and<sp/>don&apos;t<sp/>leak<sp/>(Raymond<sp/>Barbiero,<sp/>grisha)</highlight></codeline>
<codeline lineno="4606"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fix<sp/>inefficiency<sp/>in<sp/>decoding<sp/>32-bit<sp/>BMP<sp/>(David<sp/>Woo)</highlight></codeline>
<codeline lineno="4607"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.29<sp/>(2010-08-16)</highlight></codeline>
<codeline lineno="4608"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>various<sp/>warning<sp/>fixes<sp/>from<sp/>Aurelien<sp/>Pocheville<sp/></highlight></codeline>
<codeline lineno="4609"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.28<sp/>(2010-08-01)</highlight></codeline>
<codeline lineno="4610"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fix<sp/>bug<sp/>in<sp/>GIF<sp/>palette<sp/>transparency<sp/>(SpartanJ)</highlight></codeline>
<codeline lineno="4611"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.27<sp/>(2010-08-01)</highlight></codeline>
<codeline lineno="4612"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cast-to-stbi__uint8<sp/>to<sp/>fix<sp/>warnings</highlight></codeline>
<codeline lineno="4613"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.26<sp/>(2010-07-24)</highlight></codeline>
<codeline lineno="4614"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fix<sp/>bug<sp/>in<sp/>file<sp/>buffering<sp/>for<sp/>PNG<sp/>reported<sp/>by<sp/>SpartanJ</highlight></codeline>
<codeline lineno="4615"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.25<sp/>(2010-07-17)</highlight></codeline>
<codeline lineno="4616"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refix<sp/>trans_data<sp/>warning<sp/>(Won<sp/>Chun)</highlight></codeline>
<codeline lineno="4617"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.24<sp/>(2010-07-12)</highlight></codeline>
<codeline lineno="4618"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perf<sp/>improvements<sp/>reading<sp/>from<sp/>files<sp/>on<sp/>platforms<sp/>with<sp/>lock-heavy<sp/>fgetc()</highlight></codeline>
<codeline lineno="4619"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minor<sp/>perf<sp/>improvements<sp/>for<sp/>jpeg</highlight></codeline>
<codeline lineno="4620"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deprecated<sp/>type-specific<sp/>functions<sp/>so<sp/>we&apos;ll<sp/>get<sp/>feedback<sp/>if<sp/>they&apos;re<sp/>needed</highlight></codeline>
<codeline lineno="4621"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attempt<sp/>to<sp/>fix<sp/>trans_data<sp/>warning<sp/>(Won<sp/>Chun)</highlight></codeline>
<codeline lineno="4622"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.23<sp/><sp/><sp/>fixed<sp/>bug<sp/>in<sp/>iPhone<sp/>support</highlight></codeline>
<codeline lineno="4623"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.22<sp/>(2010-07-10)</highlight></codeline>
<codeline lineno="4624"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>removed<sp/>image<sp/>*writing*<sp/>support</highlight></codeline>
<codeline lineno="4625"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi_info<sp/>support<sp/>from<sp/>Jetro<sp/>Lauha</highlight></codeline>
<codeline lineno="4626"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIF<sp/>support<sp/>from<sp/>Jean-Marc<sp/>Lienher</highlight></codeline>
<codeline lineno="4627"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iPhone<sp/>PNG-extensions<sp/>from<sp/>James<sp/>Brown</highlight></codeline>
<codeline lineno="4628"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warning-fixes<sp/>from<sp/>Nicolas<sp/>Schulz<sp/>and<sp/>Janez<sp/>Zemva<sp/>(i.e.<sp/>Janez<sp/>(U+017D)emva)</highlight></codeline>
<codeline lineno="4629"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.21<sp/><sp/><sp/>fix<sp/>use<sp/>of<sp/>&apos;stbi__uint8&apos;<sp/>in<sp/>header<sp/>(reported<sp/>by<sp/>jon<sp/>blow)</highlight></codeline>
<codeline lineno="4630"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.20<sp/><sp/><sp/>added<sp/>support<sp/>for<sp/>Softimage<sp/>PIC,<sp/>by<sp/>Tom<sp/>Seddon</highlight></codeline>
<codeline lineno="4631"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.19<sp/><sp/><sp/>bug<sp/>in<sp/>interlaced<sp/>PNG<sp/>corruption<sp/>check<sp/>(found<sp/>by<sp/>ryg)</highlight></codeline>
<codeline lineno="4632"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.18<sp/>2008-08-02</highlight></codeline>
<codeline lineno="4633"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fix<sp/>a<sp/>threading<sp/>bug<sp/>(local<sp/>mutable<sp/>static)</highlight></codeline>
<codeline lineno="4634"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.17<sp/><sp/><sp/>support<sp/>interlaced<sp/>PNG</highlight></codeline>
<codeline lineno="4635"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.16<sp/><sp/><sp/>major<sp/>bugfix<sp/>-<sp/>convert_format<sp/>converted<sp/>one<sp/>too<sp/>many<sp/>pixels</highlight></codeline>
<codeline lineno="4636"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.15<sp/><sp/><sp/>initialize<sp/>some<sp/>fields<sp/>for<sp/>thread<sp/>safety</highlight></codeline>
<codeline lineno="4637"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.14<sp/><sp/><sp/>fix<sp/>threadsafe<sp/>conversion<sp/>bug</highlight></codeline>
<codeline lineno="4638"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>header-file-only<sp/>version<sp/>(#define<sp/>STBI_HEADER_FILE_ONLY<sp/>before<sp/>including)</highlight></codeline>
<codeline lineno="4639"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.13<sp/><sp/><sp/>threadsafe</highlight></codeline>
<codeline lineno="4640"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.12<sp/><sp/><sp/>const<sp/>qualifiers<sp/>in<sp/>the<sp/>API</highlight></codeline>
<codeline lineno="4641"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.11<sp/><sp/><sp/>Support<sp/>installable<sp/>IDCT,<sp/>colorspace<sp/>conversion<sp/>routines</highlight></codeline>
<codeline lineno="4642"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.10<sp/><sp/><sp/>Fixes<sp/>for<sp/>64-bit<sp/>(don&apos;t<sp/>use<sp/>&quot;unsigned<sp/>long&quot;)</highlight></codeline>
<codeline lineno="4643"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimized<sp/>upsampling<sp/>by<sp/>Fabian<sp/>&quot;ryg&quot;<sp/>Giesen</highlight></codeline>
<codeline lineno="4644"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.09<sp/><sp/><sp/>Fix<sp/>format-conversion<sp/>for<sp/>PSD<sp/>code<sp/>(bad<sp/>global<sp/>variables!)</highlight></codeline>
<codeline lineno="4645"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.08<sp/><sp/><sp/>Thatcher<sp/>Ulrich&apos;s<sp/>PSD<sp/>code<sp/>integrated<sp/>by<sp/>Nicolas<sp/>Schulz</highlight></codeline>
<codeline lineno="4646"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.07<sp/><sp/><sp/>attempt<sp/>to<sp/>fix<sp/>C++<sp/>warning/errors<sp/>again</highlight></codeline>
<codeline lineno="4647"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.06<sp/><sp/><sp/>attempt<sp/>to<sp/>fix<sp/>C++<sp/>warning/errors<sp/>again</highlight></codeline>
<codeline lineno="4648"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.05<sp/><sp/><sp/>fix<sp/>TGA<sp/>loading<sp/>to<sp/>return<sp/>correct<sp/>*comp<sp/>and<sp/>use<sp/>good<sp/>luminance<sp/>calc</highlight></codeline>
<codeline lineno="4649"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.04<sp/><sp/><sp/>default<sp/>float<sp/>alpha<sp/>is<sp/>1,<sp/>not<sp/>255;<sp/>use<sp/>&apos;void<sp/>*&apos;<sp/>for<sp/>stbi_image_free</highlight></codeline>
<codeline lineno="4650"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.03<sp/><sp/><sp/>bugfixes<sp/>to<sp/>STBI_NO_STDIO,<sp/>STBI_NO_HDR</highlight></codeline>
<codeline lineno="4651"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.02<sp/><sp/><sp/>support<sp/>for<sp/>(subset<sp/>of)<sp/>HDR<sp/>files,<sp/>float<sp/>interface<sp/>for<sp/>preferred<sp/>access<sp/>to<sp/>them</highlight></codeline>
<codeline lineno="4652"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.01<sp/><sp/><sp/>fix<sp/>bug:<sp/>possible<sp/>bug<sp/>in<sp/>handling<sp/>right-side<sp/>up<sp/>bmps...<sp/>not<sp/>sure</highlight></codeline>
<codeline lineno="4653"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fix<sp/>bug:<sp/>the<sp/>stbi_bmp_load()<sp/>and<sp/>stbi_tga_load()<sp/>functions<sp/>didn&apos;t<sp/>work<sp/>at<sp/>all</highlight></codeline>
<codeline lineno="4654"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1.00<sp/><sp/><sp/>interface<sp/>to<sp/>zlib<sp/>that<sp/>skips<sp/>zlib<sp/>header</highlight></codeline>
<codeline lineno="4655"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>0.99<sp/><sp/><sp/>correct<sp/>handling<sp/>of<sp/>alpha<sp/>in<sp/>palette</highlight></codeline>
<codeline lineno="4656"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>0.98<sp/><sp/><sp/>TGA<sp/>loader<sp/>by<sp/>lonesock;<sp/>dynamically<sp/>add<sp/>loaders<sp/>(untested)</highlight></codeline>
<codeline lineno="4657"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>0.97<sp/><sp/><sp/>jpeg<sp/>errors<sp/>on<sp/>too<sp/>large<sp/>a<sp/>file;<sp/>also<sp/>catch<sp/>another<sp/>malloc<sp/>failure</highlight></codeline>
<codeline lineno="4658"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>0.96<sp/><sp/><sp/>fix<sp/>detection<sp/>of<sp/>invalid<sp/>v<sp/>value<sp/>-<sp/>particleman@mollyrocket<sp/>forum</highlight></codeline>
<codeline lineno="4659"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>0.95<sp/><sp/><sp/>during<sp/>header<sp/>scan,<sp/>seek<sp/>to<sp/>markers<sp/>in<sp/>case<sp/>of<sp/>padding</highlight></codeline>
<codeline lineno="4660"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>0.94<sp/><sp/><sp/>STBI_NO_STDIO<sp/>to<sp/>disable<sp/>stdio<sp/>usage;<sp/>rename<sp/>all<sp/>#defines<sp/>the<sp/>same</highlight></codeline>
<codeline lineno="4661"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>0.93<sp/><sp/><sp/>handle<sp/>jpegtran<sp/>output;<sp/>verbose<sp/>errors</highlight></codeline>
<codeline lineno="4662"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>0.92<sp/><sp/><sp/>read<sp/>4,8,16,24,32-bit<sp/>BMP<sp/>files<sp/>of<sp/>several<sp/>formats</highlight></codeline>
<codeline lineno="4663"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>0.91<sp/><sp/><sp/>output<sp/>24-bit<sp/>Windows<sp/>3.0<sp/>BMP<sp/>files</highlight></codeline>
<codeline lineno="4664"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>0.90<sp/><sp/><sp/>fix<sp/>a<sp/>few<sp/>more<sp/>warnings;<sp/>bump<sp/>version<sp/>number<sp/>to<sp/>approach<sp/>1.0</highlight></codeline>
<codeline lineno="4665"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>0.61<sp/><sp/><sp/>bugfixes<sp/>due<sp/>to<sp/>Marc<sp/>LeBlanc,<sp/>Christopher<sp/>Lloyd</highlight></codeline>
<codeline lineno="4666"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>0.60<sp/><sp/><sp/>fix<sp/>compiling<sp/>as<sp/>c++</highlight></codeline>
<codeline lineno="4667"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>0.59<sp/><sp/><sp/>fix<sp/>warnings:<sp/>merge<sp/>Dave<sp/>Moore&apos;s<sp/>-Wall<sp/>fixes</highlight></codeline>
<codeline lineno="4668"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>0.58<sp/><sp/><sp/>fix<sp/>bug:<sp/>zlib<sp/>uncompressed<sp/>mode<sp/>len/nlen<sp/>was<sp/>wrong<sp/>endian</highlight></codeline>
<codeline lineno="4669"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>0.57<sp/><sp/><sp/>fix<sp/>bug:<sp/>jpg<sp/>last<sp/>huffman<sp/>symbol<sp/>before<sp/>marker<sp/>was<sp/>&gt;9<sp/>bits<sp/>but<sp/>less<sp/>than<sp/>16<sp/>available</highlight></codeline>
<codeline lineno="4670"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>0.56<sp/><sp/><sp/>fix<sp/>bug:<sp/>zlib<sp/>uncompressed<sp/>mode<sp/>len<sp/>vs.<sp/>nlen</highlight></codeline>
<codeline lineno="4671"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>0.55<sp/><sp/><sp/>fix<sp/>bug:<sp/>restart_interval<sp/>not<sp/>initialized<sp/>to<sp/>0</highlight></codeline>
<codeline lineno="4672"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>0.54<sp/><sp/><sp/>allow<sp/>NULL<sp/>for<sp/>&apos;int<sp/>*comp&apos;</highlight></codeline>
<codeline lineno="4673"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>0.53<sp/><sp/><sp/>fix<sp/>bug<sp/>in<sp/>png<sp/>3-&gt;4;<sp/>speedup<sp/>png<sp/>decoding</highlight></codeline>
<codeline lineno="4674"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>0.52<sp/><sp/><sp/>png<sp/>handles<sp/>req_comp=3,4<sp/>directly;<sp/>minor<sp/>cleanup;<sp/>jpeg<sp/>comments</highlight></codeline>
<codeline lineno="4675"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>0.51<sp/><sp/><sp/>obey<sp/>req_comp<sp/>requests,<sp/>1-component<sp/>jpegs<sp/>return<sp/>as<sp/>1-component,</highlight></codeline>
<codeline lineno="4676"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>on<sp/>&apos;test&apos;<sp/>only<sp/>check<sp/>type,<sp/>not<sp/>whether<sp/>we<sp/>support<sp/>this<sp/>variant</highlight></codeline>
<codeline lineno="4677"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>0.50<sp/><sp/><sp/>first<sp/>released<sp/>version</highlight></codeline>
<codeline lineno="4678"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb_image.c"/>
  </compounddef>
</doxygen>
