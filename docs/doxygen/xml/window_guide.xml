<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="window_guide" kind="page">
    <compoundname>window_guide</compoundname>
    <title>Window guide</title>
    <tableofcontents>
      <tocsect>
        <name>Window objects</name>
        <reference>window_guide_1window_object</reference>
    <tableofcontents>
      <tocsect>
        <name>Window creation</name>
        <reference>window_guide_1window_creation</reference>
    <tableofcontents>
      <tocsect>
        <name>Full screen windows</name>
        <reference>window_guide_1window_full_screen</reference>
    </tocsect>
      <tocsect>
        <name>&quot;Windowed full screen&quot; windows</name>
        <reference>window_guide_1window_windowed_full_screen</reference>
    </tocsect>
    </tableofcontents>
    </tocsect>
      <tocsect>
        <name>Window destruction</name>
        <reference>window_guide_1window_destruction</reference>
    </tocsect>
      <tocsect>
        <name>Window creation hints</name>
        <reference>window_guide_1window_hints</reference>
    <tableofcontents>
      <tocsect>
        <name>Hard and soft constraints</name>
        <reference>window_guide_1window_hints_hard</reference>
    </tocsect>
      <tocsect>
        <name>Window related hints</name>
        <reference>window_guide_1window_hints_wnd</reference>
    </tocsect>
      <tocsect>
        <name>Framebuffer related hints</name>
        <reference>window_guide_1window_hints_fb</reference>
    </tocsect>
      <tocsect>
        <name>Monitor related hints</name>
        <reference>window_guide_1window_hints_mtr</reference>
    </tocsect>
      <tocsect>
        <name>Context related hints</name>
        <reference>window_guide_1window_hints_ctx</reference>
    </tocsect>
      <tocsect>
        <name>Windows specific window hints</name>
        <reference>window_guide_1window_hints_win32</reference>
    </tocsect>
      <tocsect>
        <name>macOS specific window hints</name>
        <reference>window_guide_1window_hints_osx</reference>
    </tocsect>
      <tocsect>
        <name>X11 specific window hints</name>
        <reference>window_guide_1window_hints_x11</reference>
    </tocsect>
      <tocsect>
        <name>Supported and default values</name>
        <reference>window_guide_1window_hints_values</reference>
    </tocsect>
    </tableofcontents>
    </tocsect>
    </tableofcontents>
    </tocsect>
      <tocsect>
        <name>Window event processing</name>
        <reference>window_guide_1window_events</reference>
    </tocsect>
      <tocsect>
        <name>Window properties and events</name>
        <reference>window_guide_1window_properties</reference>
    <tableofcontents>
      <tocsect>
        <name>User pointer</name>
        <reference>window_guide_1window_userptr</reference>
    </tocsect>
      <tocsect>
        <name>Window closing and close flag</name>
        <reference>window_guide_1window_close</reference>
    </tocsect>
      <tocsect>
        <name>Window size</name>
        <reference>window_guide_1window_size</reference>
    </tocsect>
      <tocsect>
        <name>Framebuffer size</name>
        <reference>window_guide_1window_fbsize</reference>
    </tocsect>
      <tocsect>
        <name>Window content scale</name>
        <reference>window_guide_1window_scale</reference>
    </tocsect>
      <tocsect>
        <name>Window size limits</name>
        <reference>window_guide_1window_sizelimits</reference>
    </tocsect>
      <tocsect>
        <name>Window position</name>
        <reference>window_guide_1window_pos</reference>
    </tocsect>
      <tocsect>
        <name>Window title</name>
        <reference>window_guide_1window_title</reference>
    </tocsect>
      <tocsect>
        <name>Window icon</name>
        <reference>window_guide_1window_icon</reference>
    </tocsect>
      <tocsect>
        <name>Window monitor</name>
        <reference>window_guide_1window_monitor</reference>
    </tocsect>
      <tocsect>
        <name>Window iconification</name>
        <reference>window_guide_1window_iconify</reference>
    </tocsect>
      <tocsect>
        <name>Window maximization</name>
        <reference>window_guide_1window_maximize</reference>
    </tocsect>
      <tocsect>
        <name>Window visibility</name>
        <reference>window_guide_1window_hide</reference>
    </tocsect>
      <tocsect>
        <name>Window input focus</name>
        <reference>window_guide_1window_focus</reference>
    </tocsect>
      <tocsect>
        <name>Window attention request</name>
        <reference>window_guide_1window_attention</reference>
    </tocsect>
      <tocsect>
        <name>Window damage and refresh</name>
        <reference>window_guide_1window_refresh</reference>
    </tocsect>
      <tocsect>
        <name>Window transparency</name>
        <reference>window_guide_1window_transparency</reference>
    </tocsect>
      <tocsect>
        <name>Window attributes</name>
        <reference>window_guide_1window_attribs</reference>
    <tableofcontents>
      <tocsect>
        <name>Window related attributes</name>
        <reference>window_guide_1window_attribs_wnd</reference>
    </tocsect>
      <tocsect>
        <name>Context related attributes</name>
        <reference>window_guide_1window_attribs_ctx</reference>
    </tocsect>
      <tocsect>
        <name>Framebuffer related attributes</name>
        <reference>window_guide_1window_attribs_fb</reference>
    </tocsect>
    </tableofcontents>
    </tocsect>
    </tableofcontents>
    </tocsect>
      <tocsect>
        <name>Buffer swapping</name>
        <reference>window_guide_1buffer_swap</reference>
    </tocsect>
    </tableofcontents>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This guide introduces the window related functions of GLFW. For details on a specific function in this category, see the <ref refid="group__window" kindref="compound">Window reference</ref>. There are also guides for the other areas of GLFW.</para>
<para><itemizedlist>
<listitem><para><ref refid="intro_guide" kindref="compound">Introduction to the API</ref></para>
</listitem><listitem><para><ref refid="context_guide" kindref="compound">Context guide</ref></para>
</listitem><listitem><para><ref refid="vulkan_guide" kindref="compound">Vulkan guide</ref></para>
</listitem><listitem><para><ref refid="monitor_guide" kindref="compound">Monitor guide</ref></para>
</listitem><listitem><para><ref refid="input_guide" kindref="compound">Input guide</ref></para>
</listitem></itemizedlist>
</para>
<sect1 id="window_guide_1window_object">
<title>Window objects</title>
<para>The <ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> object encapsulates both a window and a context. They are created with <ref refid="group__window_1gaaccd00fafe81e2db94e8cdf55721e055" kindref="member">glfwCreateWindow</ref> and destroyed with <ref refid="group__window_1ga806747476b7247d292be3711c323ea10" kindref="member">glfwDestroyWindow</ref>, or <ref refid="group__init_1gafd90e6fd4819ea9e22e5e739519a6504" kindref="member">glfwTerminate</ref>, if any remain. As the window and context are inseparably linked, the object pointer is used as both a context and window handle.</para>
<para>To see the event stream provided to the various window related callbacks, run the <computeroutput>events</computeroutput> test program.</para>
<sect2 id="window_guide_1window_creation">
<title>Window creation</title>
<para>A window and its OpenGL or OpenGL ES context are created with <ref refid="group__window_1gaaccd00fafe81e2db94e8cdf55721e055" kindref="member">glfwCreateWindow</ref>, which returns a handle to the created window object. For example, this creates a 640 by 480 windowed mode window:</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>window<sp/>=<sp/><ref refid="group__window_1gaaccd00fafe81e2db94e8cdf55721e055" kindref="member">glfwCreateWindow</ref>(640,<sp/>480,<sp/></highlight><highlight class="stringliteral">&quot;My<sp/>Title&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>NULL);</highlight></codeline>
</programlisting></para>
<para>If window creation fails, <computeroutput>NULL</computeroutput> will be returned, so it is necessary to check the return value.</para>
<para>The window handle is passed to all window related functions and is provided to along with all input events, so event handlers can tell which window received the event.</para>
<sect3 id="window_guide_1window_full_screen">
<title>Full screen windows</title>
<para>To create a full screen window, you need to specify which monitor the window should use. In most cases, the user&apos;s primary monitor is a good choice. For more information about retrieving monitors, see <ref refid="monitor_guide_1monitor_monitors" kindref="member">Retrieving monitors</ref>.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>window<sp/>=<sp/><ref refid="group__window_1gaaccd00fafe81e2db94e8cdf55721e055" kindref="member">glfwCreateWindow</ref>(640,<sp/>480,<sp/></highlight><highlight class="stringliteral">&quot;My<sp/>Title&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__monitor_1ga34befff4f9f0fae09dd8de6fb0eb4f3e" kindref="member">glfwGetPrimaryMonitor</ref>(),<sp/>NULL);</highlight></codeline>
</programlisting></para>
<para>Full screen windows cover the entire display area of a monitor, have no border or decorations.</para>
<para>Windowed mode windows can be made full screen by setting a monitor with <ref refid="group__window_1ga12fabf78575e59c00f822f323ae0b6ae" kindref="member">glfwSetWindowMonitor</ref>, and full screen ones can be made windowed by unsetting it with the same function.</para>
<para>Each field of the <ref refid="struct_g_l_f_wvidmode" kindref="compound">GLFWvidmode</ref> structure corresponds to a function parameter or window hint and combine to form the <emphasis>desired video mode</emphasis> for that window. The supported video mode most closely matching the desired video mode will be set for the chosen monitor as long as the window has input focus. For more information about retrieving video modes, see <ref refid="monitor_guide_1monitor_modes" kindref="member">Video modes</ref>.</para>
<para><table rows="7" cols="2"><row>
<entry thead="yes"><para>Video mode field   </para>
</entry><entry thead="yes"><para>Corresponds to    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="struct_g_l_f_wvidmode_1a698dcb200562051a7249cb6ae154c71d" kindref="member">GLFWvidmode.width</ref>   </para>
</entry><entry thead="no"><para><computeroutput>width</computeroutput> parameter of <ref refid="group__window_1gaaccd00fafe81e2db94e8cdf55721e055" kindref="member">glfwCreateWindow</ref>    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="struct_g_l_f_wvidmode_1ac65942a5f6981695517437a9d571d03c" kindref="member">GLFWvidmode.height</ref>   </para>
</entry><entry thead="no"><para><computeroutput>height</computeroutput> parameter of <ref refid="group__window_1gaaccd00fafe81e2db94e8cdf55721e055" kindref="member">glfwCreateWindow</ref>    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="struct_g_l_f_wvidmode_1a6066c4ecd251098700062d3b735dba1b" kindref="member">GLFWvidmode.redBits</ref>   </para>
</entry><entry thead="no"><para><ref refid="window_guide_1GLFW_RED_BITS" kindref="member">GLFW_RED_BITS</ref> hint    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="struct_g_l_f_wvidmode_1a292fdd281f3485fb3ff102a5bda43faa" kindref="member">GLFWvidmode.greenBits</ref>   </para>
</entry><entry thead="no"><para><ref refid="window_guide_1GLFW_GREEN_BITS" kindref="member">GLFW_GREEN_BITS</ref> hint    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="struct_g_l_f_wvidmode_1af310977f58d2e3b188175b6e3d314047" kindref="member">GLFWvidmode.blueBits</ref>   </para>
</entry><entry thead="no"><para><ref refid="window_guide_1GLFW_BLUE_BITS" kindref="member">GLFW_BLUE_BITS</ref> hint    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="struct_g_l_f_wvidmode_1a791bdd6c7697b09f7e9c97054bf05649" kindref="member">GLFWvidmode.refreshRate</ref>   </para>
</entry><entry thead="no"><para><ref refid="window_guide_1GLFW_REFRESH_RATE" kindref="member">GLFW_REFRESH_RATE</ref> hint   </para>
</entry></row>
</table>
</para>
<para>Once you have a full screen window, you can change its resolution, refresh rate and monitor with <ref refid="group__window_1ga12fabf78575e59c00f822f323ae0b6ae" kindref="member">glfwSetWindowMonitor</ref>. If you only need change its resolution you can also call <ref refid="group__window_1gae54d1f4915ded15e267ddd3f41496cd2" kindref="member">glfwSetWindowSize</ref>. In all cases, the new video mode will be selected the same way as the video mode chosen by <ref refid="group__window_1gaaccd00fafe81e2db94e8cdf55721e055" kindref="member">glfwCreateWindow</ref>. If the window has an OpenGL or OpenGL ES context, it will be unaffected.</para>
<para>By default, the original video mode of the monitor will be restored and the window iconified if it loses input focus, to allow the user to switch back to the desktop. This behavior can be disabled with the <ref refid="window_guide_1GLFW_AUTO_ICONIFY_hint" kindref="member">GLFW_AUTO_ICONIFY</ref> window hint, for example if you wish to simultaneously cover multiple monitors with full screen windows.</para>
<para>If a monitor is disconnected, all windows that are full screen on that monitor will be switched to windowed mode. See <ref refid="monitor_guide_1monitor_event" kindref="member">Monitor configuration changes</ref> for more information.</para>
</sect3>
<sect3 id="window_guide_1window_windowed_full_screen">
<title>&quot;Windowed full screen&quot; windows</title>
<para>If the closest match for the desired video mode is the current one, the video mode will not be changed, making window creation faster and application switching much smoother. This is sometimes called <emphasis>windowed full screen</emphasis> or <emphasis>borderless full screen</emphasis> window and counts as a full screen window. To create such a window, request the current video mode.</para>
<para><programlisting><codeline><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_g_l_f_wvidmode" kindref="compound">GLFWvidmode</ref>*<sp/>mode<sp/>=<sp/><ref refid="group__monitor_1ga21f7f60de4f4d0fa360c7ad159b75c9e" kindref="member">glfwGetVideoMode</ref>(monitor);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__window_1ga69c40728499720bef8a49aa925ea0efa" kindref="member">glfwWindowHint</ref>(<ref refid="group__window_1gaf78ed8e417dbcc1e354906cc2708c982" kindref="member">GLFW_RED_BITS</ref>,<sp/>mode-&gt;redBits);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__window_1ga69c40728499720bef8a49aa925ea0efa" kindref="member">glfwWindowHint</ref>(<ref refid="group__window_1gafba3b72638c914e5fb8a237dd4c50d4d" kindref="member">GLFW_GREEN_BITS</ref>,<sp/>mode-&gt;greenBits);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__window_1ga69c40728499720bef8a49aa925ea0efa" kindref="member">glfwWindowHint</ref>(<ref refid="group__window_1gab292ea403db6d514537b515311bf9ae3" kindref="member">GLFW_BLUE_BITS</ref>,<sp/>mode-&gt;blueBits);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__window_1ga69c40728499720bef8a49aa925ea0efa" kindref="member">glfwWindowHint</ref>(<ref refid="group__window_1ga0f20825e6e47ee8ba389024519682212" kindref="member">GLFW_REFRESH_RATE</ref>,<sp/>mode-&gt;refreshRate);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>window<sp/>=<sp/><ref refid="group__window_1gaaccd00fafe81e2db94e8cdf55721e055" kindref="member">glfwCreateWindow</ref>(mode-&gt;width,<sp/>mode-&gt;height,<sp/></highlight><highlight class="stringliteral">&quot;My<sp/>Title&quot;</highlight><highlight class="normal">,<sp/>monitor,<sp/>NULL);</highlight></codeline>
</programlisting></para>
<para>This also works for windowed mode windows that are made full screen.</para>
<para><programlisting><codeline><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_g_l_f_wvidmode" kindref="compound">GLFWvidmode</ref>*<sp/>mode<sp/>=<sp/><ref refid="group__monitor_1ga21f7f60de4f4d0fa360c7ad159b75c9e" kindref="member">glfwGetVideoMode</ref>(monitor);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__window_1ga12fabf78575e59c00f822f323ae0b6ae" kindref="member">glfwSetWindowMonitor</ref>(window,<sp/>monitor,<sp/>0,<sp/>0,<sp/>mode-&gt;width,<sp/>mode-&gt;height,<sp/>mode-&gt;refreshRate);</highlight></codeline>
</programlisting></para>
<para>Note that <ref refid="group__monitor_1ga21f7f60de4f4d0fa360c7ad159b75c9e" kindref="member">glfwGetVideoMode</ref> returns the <emphasis>current</emphasis> video mode of a monitor, so if you already have a full screen window on that monitor that you want to make windowed full screen, you need to have saved the desktop resolution before.</para>
</sect3>
</sect2>
<sect2 id="window_guide_1window_destruction">
<title>Window destruction</title>
<para>When a window is no longer needed, destroy it with <ref refid="group__window_1ga806747476b7247d292be3711c323ea10" kindref="member">glfwDestroyWindow</ref>.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1ga806747476b7247d292be3711c323ea10" kindref="member">glfwDestroyWindow</ref>(window);</highlight></codeline>
</programlisting></para>
<para>Window destruction always succeeds. Before the actual destruction, all callbacks are removed so no further events will be delivered for the window. All windows remaining when <ref refid="group__init_1gafd90e6fd4819ea9e22e5e739519a6504" kindref="member">glfwTerminate</ref> is called are destroyed as well.</para>
<para>When a full screen window is destroyed, the original video mode of its monitor is restored, but the gamma ramp is left untouched.</para>
</sect2>
<sect2 id="window_guide_1window_hints">
<title>Window creation hints</title>
<para>There are a number of hints that can be set before the creation of a window and context. Some affect the window itself, others affect the framebuffer or context. These hints are set to their default values each time the library is initialized with <ref refid="group__init_1gab41771f0215a2e0afb4cf1cf98082d40" kindref="member">glfwInit</ref>. Integer value hints can be set individually with <ref refid="group__window_1ga69c40728499720bef8a49aa925ea0efa" kindref="member">glfwWindowHint</ref> and string value hints with <ref refid="group__window_1ga3c2270562d7ba13d92680ba1090adafe" kindref="member">glfwWindowHintString</ref>. You can reset all at once to their defaults with <ref refid="group__window_1ga8050ddceed9dc6bd9d3aa35666195cd4" kindref="member">glfwDefaultWindowHints</ref>.</para>
<para>Some hints are platform specific. These are always valid to set on any platform but they will only affect their specific platform. Other platforms will ignore them. Setting these hints requires no platform specific headers or calls.</para>
<para><simplesect kind="note"><para>Window hints need to be set before the creation of the window and context you wish to have the specified attributes. They function as additional arguments to <ref refid="group__window_1gaaccd00fafe81e2db94e8cdf55721e055" kindref="member">glfwCreateWindow</ref>.</para>
</simplesect>
</para>
<sect3 id="window_guide_1window_hints_hard">
<title>Hard and soft constraints</title>
<para>Some window hints are hard constraints. These must match the available capabilities <emphasis>exactly</emphasis> for window and context creation to succeed. Hints that are not hard constraints are matched as closely as possible, but the resulting context and framebuffer may differ from what these hints requested.</para>
<para>The following hints are always hard constraints:<itemizedlist>
<listitem><para><ref refid="window_guide_1GLFW_STEREO" kindref="member">GLFW_STEREO</ref></para>
</listitem><listitem><para><ref refid="window_guide_1GLFW_DOUBLEBUFFER" kindref="member">GLFW_DOUBLEBUFFER</ref></para>
</listitem><listitem><para><ref refid="window_guide_1GLFW_CLIENT_API_hint" kindref="member">GLFW_CLIENT_API</ref></para>
</listitem><listitem><para><ref refid="window_guide_1GLFW_CONTEXT_CREATION_API_hint" kindref="member">GLFW_CONTEXT_CREATION_API</ref></para>
</listitem></itemizedlist>
</para>
<para>The following additional hints are hard constraints when requesting an OpenGL context, but are ignored when requesting an OpenGL ES context:<itemizedlist>
<listitem><para><ref refid="window_guide_1GLFW_OPENGL_FORWARD_COMPAT_hint" kindref="member">GLFW_OPENGL_FORWARD_COMPAT</ref></para>
</listitem><listitem><para><ref refid="window_guide_1GLFW_OPENGL_PROFILE_hint" kindref="member">GLFW_OPENGL_PROFILE</ref></para>
</listitem></itemizedlist>
</para>
</sect3>
<sect3 id="window_guide_1window_hints_wnd">
<title>Window related hints</title>
<para><anchor id="window_guide_1GLFW_RESIZABLE_hint"/><bold>GLFW_RESIZABLE</bold> specifies whether the windowed mode window will be resizable <emphasis>by the user</emphasis>. The window will still be resizable using the <ref refid="group__window_1gae54d1f4915ded15e267ddd3f41496cd2" kindref="member">glfwSetWindowSize</ref> function. Possible values are <computeroutput>GLFW_TRUE</computeroutput> and <computeroutput>GLFW_FALSE</computeroutput>. This hint is ignored for full screen and undecorated windows.</para>
<para><anchor id="window_guide_1GLFW_VISIBLE_hint"/><bold>GLFW_VISIBLE</bold> specifies whether the windowed mode window will be initially visible. Possible values are <computeroutput>GLFW_TRUE</computeroutput> and <computeroutput>GLFW_FALSE</computeroutput>. This hint is ignored for full screen windows.</para>
<para><anchor id="window_guide_1GLFW_DECORATED_hint"/><bold>GLFW_DECORATED</bold> specifies whether the windowed mode window will have window decorations such as a border, a close widget, etc. An undecorated window will not be resizable by the user but will still allow the user to generate close events on some platforms. Possible values are <computeroutput>GLFW_TRUE</computeroutput> and <computeroutput>GLFW_FALSE</computeroutput>. This hint is ignored for full screen windows.</para>
<para><anchor id="window_guide_1GLFW_FOCUSED_hint"/><bold>GLFW_FOCUSED</bold> specifies whether the windowed mode window will be given input focus when created. Possible values are <computeroutput>GLFW_TRUE</computeroutput> and <computeroutput>GLFW_FALSE</computeroutput>. This hint is ignored for full screen and initially hidden windows.</para>
<para><anchor id="window_guide_1GLFW_AUTO_ICONIFY_hint"/><bold>GLFW_AUTO_ICONIFY</bold> specifies whether the full screen window will automatically iconify and restore the previous video mode on input focus loss. Possible values are <computeroutput>GLFW_TRUE</computeroutput> and <computeroutput>GLFW_FALSE</computeroutput>. This hint is ignored for windowed mode windows.</para>
<para><anchor id="window_guide_1GLFW_FLOATING_hint"/><bold>GLFW_FLOATING</bold> specifies whether the windowed mode window will be floating above other regular windows, also called topmost or always-on-top. This is intended primarily for debugging purposes and cannot be used to implement proper full screen windows. Possible values are <computeroutput>GLFW_TRUE</computeroutput> and <computeroutput>GLFW_FALSE</computeroutput>. This hint is ignored for full screen windows.</para>
<para><anchor id="window_guide_1GLFW_MAXIMIZED_hint"/><bold>GLFW_MAXIMIZED</bold> specifies whether the windowed mode window will be maximized when created. Possible values are <computeroutput>GLFW_TRUE</computeroutput> and <computeroutput>GLFW_FALSE</computeroutput>. This hint is ignored for full screen windows.</para>
<para><anchor id="window_guide_1GLFW_CENTER_CURSOR_hint"/><bold>GLFW_CENTER_CURSOR</bold> specifies whether the cursor should be centered over newly created full screen windows. Possible values are <computeroutput>GLFW_TRUE</computeroutput> and <computeroutput>GLFW_FALSE</computeroutput>. This hint is ignored for windowed mode windows.</para>
<para><anchor id="window_guide_1GLFW_TRANSPARENT_FRAMEBUFFER_hint"/><bold>GLFW_TRANSPARENT_FRAMEBUFFER</bold> specifies whether the window framebuffer will be transparent. If enabled and supported by the system, the window framebuffer alpha channel will be used to combine the framebuffer with the background. This does not affect window decorations. Possible values are <computeroutput>GLFW_TRUE</computeroutput> and <computeroutput>GLFW_FALSE</computeroutput>.</para>
<para><anchor id="window_guide_1GLFW_FOCUS_ON_SHOW_hint"/><bold>GLFW_FOCUS_ON_SHOW</bold> specifies whether the window will be given input focus when <ref refid="group__window_1ga7945bcdff9e5e058cf36505d6873ed8c" kindref="member">glfwShowWindow</ref> is called. Possible values are <computeroutput>GLFW_TRUE</computeroutput> and <computeroutput>GLFW_FALSE</computeroutput>.</para>
<para><anchor id="window_guide_1GLFW_SCALE_TO_MONITOR"/><bold>GLFW_SCALE_TO_MONITOR</bold> specified whether the window content area should be resized based on the <ref refid="monitor_guide_1monitor_scale" kindref="member">monitor content scale</ref> of any monitor it is placed on. This includes the initial placement when the window is created. Possible values are <computeroutput>GLFW_TRUE</computeroutput> and <computeroutput>GLFW_FALSE</computeroutput>.</para>
<para>This hint only has an effect on platforms where screen coordinates and pixels always map 1:1 such as Windows and X11. On platforms like macOS the resolution of the framebuffer is changed independently of the window size.</para>
<para><anchor id="window_guide_1GLFW_MOUSE_PASSTHROUGH_hint"/><bold>GLFW_MOUSE_PASSTHROUGH</bold> specifies whether the window is transparent to mouse input, letting any mouse events pass through to whatever window is behind it. This is only supported for undecorated windows. Decorated windows with this enabled will behave differently between platforms. Possible values are <computeroutput>GLFW_TRUE</computeroutput> and <computeroutput>GLFW_FALSE</computeroutput>.</para>
</sect3>
<sect3 id="window_guide_1window_hints_fb">
<title>Framebuffer related hints</title>
<para><anchor id="window_guide_1GLFW_RED_BITS"/><anchor id="window_guide_1GLFW_GREEN_BITS"/><anchor id="window_guide_1GLFW_BLUE_BITS"/><anchor id="window_guide_1GLFW_ALPHA_BITS"/><anchor id="window_guide_1GLFW_DEPTH_BITS"/><anchor id="window_guide_1GLFW_STENCIL_BITS"/><bold>GLFW_RED_BITS</bold>, <bold>GLFW_GREEN_BITS</bold>, <bold>GLFW_BLUE_BITS</bold>, <bold>GLFW_ALPHA_BITS</bold>, <bold>GLFW_DEPTH_BITS</bold> and <bold>GLFW_STENCIL_BITS</bold> specify the desired bit depths of the various components of the default framebuffer. A value of <computeroutput>GLFW_DONT_CARE</computeroutput> means the application has no preference.</para>
<para><anchor id="window_guide_1GLFW_ACCUM_RED_BITS"/><anchor id="window_guide_1GLFW_ACCUM_GREEN_BITS"/><anchor id="window_guide_1GLFW_ACCUM_BLUE_BITS"/><anchor id="window_guide_1GLFW_ACCUM_ALPHA_BITS"/><bold>GLFW_ACCUM_RED_BITS</bold>, <bold>GLFW_ACCUM_GREEN_BITS</bold>, <bold>GLFW_ACCUM_BLUE_BITS</bold> and <bold>GLFW_ACCUM_ALPHA_BITS</bold> specify the desired bit depths of the various components of the accumulation buffer. A value of <computeroutput>GLFW_DONT_CARE</computeroutput> means the application has no preference.</para>
<para><simplesect kind="par"><title></title><para>Accumulation buffers are a legacy OpenGL feature and should not be used in new code.</para>
</simplesect>
<anchor id="window_guide_1GLFW_AUX_BUFFERS"/><bold>GLFW_AUX_BUFFERS</bold> specifies the desired number of auxiliary buffers. A value of <computeroutput>GLFW_DONT_CARE</computeroutput> means the application has no preference.</para>
<para><simplesect kind="par"><title></title><para>Auxiliary buffers are a legacy OpenGL feature and should not be used in new code.</para>
</simplesect>
<anchor id="window_guide_1GLFW_STEREO"/><bold>GLFW_STEREO</bold> specifies whether to use OpenGL stereoscopic rendering. Possible values are <computeroutput>GLFW_TRUE</computeroutput> and <computeroutput>GLFW_FALSE</computeroutput>. This is a hard constraint.</para>
<para><anchor id="window_guide_1GLFW_SAMPLES"/><bold>GLFW_SAMPLES</bold> specifies the desired number of samples to use for multisampling. Zero disables multisampling. A value of <computeroutput>GLFW_DONT_CARE</computeroutput> means the application has no preference.</para>
<para><anchor id="window_guide_1GLFW_SRGB_CAPABLE"/><bold>GLFW_SRGB_CAPABLE</bold> specifies whether the framebuffer should be sRGB capable. Possible values are <computeroutput>GLFW_TRUE</computeroutput> and <computeroutput>GLFW_FALSE</computeroutput>.</para>
<para><simplesect kind="par"><title></title><para><bold>OpenGL:</bold> If enabled and supported by the system, the <computeroutput>GL_FRAMEBUFFER_SRGB</computeroutput> enable will control sRGB rendering. By default, sRGB rendering will be disabled.</para>
</simplesect>
<simplesect kind="par"><title></title><para><bold>OpenGL ES:</bold> If enabled and supported by the system, the context will always have sRGB rendering enabled.</para>
</simplesect>
<anchor id="window_guide_1GLFW_DOUBLEBUFFER"/><bold>GLFW_DOUBLEBUFFER</bold> specifies whether the framebuffer should be double buffered. You nearly always want to use double buffering. This is a hard constraint. Possible values are <computeroutput>GLFW_TRUE</computeroutput> and <computeroutput>GLFW_FALSE</computeroutput>.</para>
</sect3>
<sect3 id="window_guide_1window_hints_mtr">
<title>Monitor related hints</title>
<para><anchor id="window_guide_1GLFW_REFRESH_RATE"/><bold>GLFW_REFRESH_RATE</bold> specifies the desired refresh rate for full screen windows. A value of <computeroutput>GLFW_DONT_CARE</computeroutput> means the highest available refresh rate will be used. This hint is ignored for windowed mode windows.</para>
</sect3>
<sect3 id="window_guide_1window_hints_ctx">
<title>Context related hints</title>
<para><anchor id="window_guide_1GLFW_CLIENT_API_hint"/><bold>GLFW_CLIENT_API</bold> specifies which client API to create the context for. Possible values are <computeroutput>GLFW_OPENGL_API</computeroutput>, <computeroutput>GLFW_OPENGL_ES_API</computeroutput> and <computeroutput>GLFW_NO_API</computeroutput>. This is a hard constraint.</para>
<para><anchor id="window_guide_1GLFW_CONTEXT_CREATION_API_hint"/><bold>GLFW_CONTEXT_CREATION_API</bold> specifies which context creation API to use to create the context. Possible values are <computeroutput>GLFW_NATIVE_CONTEXT_API</computeroutput>, <computeroutput>GLFW_EGL_CONTEXT_API</computeroutput> and <computeroutput>GLFW_OSMESA_CONTEXT_API</computeroutput>. This is a hard constraint. If no client API is requested, this hint is ignored.</para>
<para><simplesect kind="par"><title></title><para>@macos The EGL API is not available on this platform and requests to use it will fail.</para>
</simplesect>
<simplesect kind="par"><title></title><para><bold>Wayland:</bold> The EGL API <emphasis>is</emphasis> the native context creation API, so this hint will have no effect.</para>
</simplesect>
<simplesect kind="par"><title></title><para><bold>OSMesa:</bold> As its name implies, an OpenGL context created with OSMesa does not update the window contents when its buffers are swapped. Use OpenGL functions or the OSMesa native access functions glfwGetOSMesaColorBuffer and glfwGetOSMesaDepthBuffer to retrieve the framebuffer contents.</para>
</simplesect>
<simplesect kind="note"><para>An OpenGL extension loader library that assumes it knows which context creation API is used on a given platform may fail if you change this hint. This can be resolved by having it load via <ref refid="group__context_1ga0e8af175218929615c16e74938c10f2a" kindref="member">glfwGetProcAddress</ref>, which always uses the selected API.</para>
</simplesect>
<xrefsect id="bug_1_bug000001"><xreftitle>Bug</xreftitle><xrefdescription><para>On some Linux systems, creating contexts via both the native and EGL APIs in a single process will cause the application to segfault. Stick to one API or the other on Linux for now.</para>
</xrefdescription></xrefsect></para>
<para><anchor id="window_guide_1GLFW_CONTEXT_VERSION_MAJOR_hint"/><anchor id="window_guide_1GLFW_CONTEXT_VERSION_MINOR_hint"/><bold>GLFW_CONTEXT_VERSION_MAJOR</bold> and <bold>GLFW_CONTEXT_VERSION_MINOR</bold> specify the client API version that the created context must be compatible with. The exact behavior of these hints depend on the requested client API.</para>
<para><simplesect kind="note"><para>Do not confuse these hints with <computeroutput>GLFW_VERSION_MAJOR</computeroutput> and <computeroutput>GLFW_VERSION_MINOR</computeroutput>, which provide the API version of the GLFW header.</para>
</simplesect>
<simplesect kind="par"><title></title><para><bold>OpenGL:</bold> These hints are not hard constraints, but creation will fail if the OpenGL version of the created context is less than the one requested. It is therefore perfectly safe to use the default of version 1.0 for legacy code and you will still get backwards-compatible contexts of version 3.0 and above when available.</para>
</simplesect>
<simplesect kind="par"><title></title><para>While there is no way to ask the driver for a context of the highest supported version, GLFW will attempt to provide this when you ask for a version 1.0 context, which is the default for these hints.</para>
</simplesect>
<simplesect kind="par"><title></title><para><bold>OpenGL ES:</bold> These hints are not hard constraints, but creation will fail if the OpenGL ES version of the created context is less than the one requested. Additionally, OpenGL ES 1.x cannot be returned if 2.0 or later was requested, and vice versa. This is because OpenGL ES 3.x is backward compatible with 2.0, but OpenGL ES 2.0 is not backward compatible with 1.x.</para>
</simplesect>
<simplesect kind="note"><para>@macos The OS only supports core profile contexts for OpenGL versions 3.2 and later. Before creating an OpenGL context of version 3.2 or later you must set the <ref refid="window_guide_1GLFW_OPENGL_PROFILE_hint" kindref="member">GLFW_OPENGL_PROFILE</ref> hint accordingly. OpenGL 3.0 and 3.1 contexts are not supported at all on macOS.</para>
</simplesect>
<anchor id="window_guide_1GLFW_OPENGL_FORWARD_COMPAT_hint"/><bold>GLFW_OPENGL_FORWARD_COMPAT</bold> specifies whether the OpenGL context should be forward-compatible, i.e. one where all functionality deprecated in the requested version of OpenGL is removed. This must only be used if the requested OpenGL version is 3.0 or above. If OpenGL ES is requested, this hint is ignored.</para>
<para><simplesect kind="par"><title></title><para>Forward-compatibility is described in detail in the <ulink url="https://www.opengl.org/registry/">OpenGL Reference Manual</ulink>.</para>
</simplesect>
<anchor id="window_guide_1GLFW_CONTEXT_DEBUG_hint"/><anchor id="window_guide_1GLFW_OPENGL_DEBUG_CONTEXT_hint"/><bold>GLFW_CONTEXT_DEBUG</bold> specifies whether the context should be created in debug mode, which may provide additional error and diagnostic reporting functionality. Possible values are <computeroutput>GLFW_TRUE</computeroutput> and <computeroutput>GLFW_FALSE</computeroutput>.</para>
<para><simplesect kind="par"><title></title><para>Debug contexts for OpenGL and OpenGL ES are described in detail by the <ulink url="https://www.khronos.org/registry/OpenGL/extensions/KHR/KHR_debug.txt">GL_KHR_debug</ulink> extension.</para>
</simplesect>
<simplesect kind="par"><title></title><para>This is the new name, introduced in GLFW 3.4. The older <computeroutput>GLFW_OPENGL_DEBUG_CONTEXT</computeroutput> name is also available for compatibility.</para>
</simplesect>
<anchor id="window_guide_1GLFW_OPENGL_PROFILE_hint"/><bold>GLFW_OPENGL_PROFILE</bold> specifies which OpenGL profile to create the context for. Possible values are one of <computeroutput>GLFW_OPENGL_CORE_PROFILE</computeroutput> or <computeroutput>GLFW_OPENGL_COMPAT_PROFILE</computeroutput>, or <computeroutput>GLFW_OPENGL_ANY_PROFILE</computeroutput> to not request a specific profile. If requesting an OpenGL version below 3.2, <computeroutput>GLFW_OPENGL_ANY_PROFILE</computeroutput> must be used. If OpenGL ES is requested, this hint is ignored.</para>
<para><simplesect kind="par"><title></title><para>OpenGL profiles are described in detail in the <ulink url="https://www.opengl.org/registry/">OpenGL Reference Manual</ulink>.</para>
</simplesect>
<anchor id="window_guide_1GLFW_CONTEXT_ROBUSTNESS_hint"/><bold>GLFW_CONTEXT_ROBUSTNESS</bold> specifies the robustness strategy to be used by the context. This can be one of <computeroutput>GLFW_NO_RESET_NOTIFICATION</computeroutput> or <computeroutput>GLFW_LOSE_CONTEXT_ON_RESET</computeroutput>, or <computeroutput>GLFW_NO_ROBUSTNESS</computeroutput> to not request a robustness strategy.</para>
<para><anchor id="window_guide_1GLFW_CONTEXT_RELEASE_BEHAVIOR_hint"/><bold>GLFW_CONTEXT_RELEASE_BEHAVIOR</bold> specifies the release behavior to be used by the context. Possible values are one of <computeroutput>GLFW_ANY_RELEASE_BEHAVIOR</computeroutput>, <computeroutput>GLFW_RELEASE_BEHAVIOR_FLUSH</computeroutput> or <computeroutput>GLFW_RELEASE_BEHAVIOR_NONE</computeroutput>. If the behavior is <computeroutput>GLFW_ANY_RELEASE_BEHAVIOR</computeroutput>, the default behavior of the context creation API will be used. If the behavior is <computeroutput>GLFW_RELEASE_BEHAVIOR_FLUSH</computeroutput>, the pipeline will be flushed whenever the context is released from being the current one. If the behavior is <computeroutput>GLFW_RELEASE_BEHAVIOR_NONE</computeroutput>, the pipeline will not be flushed on release.</para>
<para><simplesect kind="par"><title></title><para>Context release behaviors are described in detail by the <ulink url="https://www.opengl.org/registry/specs/KHR/context_flush_control.txt">GL_KHR_context_flush_control</ulink> extension.</para>
</simplesect>
<anchor id="window_guide_1GLFW_CONTEXT_NO_ERROR_hint"/><bold>GLFW_CONTEXT_NO_ERROR</bold> specifies whether errors should be generated by the context. Possible values are <computeroutput>GLFW_TRUE</computeroutput> and <computeroutput>GLFW_FALSE</computeroutput>. If enabled, situations that would have generated errors instead cause undefined behavior.</para>
<para><simplesect kind="par"><title></title><para>The no error mode for OpenGL and OpenGL ES is described in detail by the <ulink url="https://www.opengl.org/registry/specs/KHR/no_error.txt">GL_KHR_no_error</ulink> extension.</para>
</simplesect>
</para>
</sect3>
<sect3 id="window_guide_1window_hints_win32">
<title>Windows specific window hints</title>
<para><anchor id="window_guide_1GLFW_WIN32_KEYBOARD_MENU_hint"/><bold>GLFW_WIN32_KEYBOARD_MENU</bold> specifies whether to allow access to the window menu via the Alt+Space and Alt-and-then-Space keyboard shortcuts. This is ignored on other platforms.</para>
</sect3>
<sect3 id="window_guide_1window_hints_osx">
<title>macOS specific window hints</title>
<para><anchor id="window_guide_1GLFW_COCOA_RETINA_FRAMEBUFFER_hint"/><bold>GLFW_COCOA_RETINA_FRAMEBUFFER</bold> specifies whether to use full resolution framebuffers on Retina displays. Possible values are <computeroutput>GLFW_TRUE</computeroutput> and <computeroutput>GLFW_FALSE</computeroutput>. This is ignored on other platforms.</para>
<para><anchor id="window_guide_1GLFW_COCOA_FRAME_NAME_hint"/><bold>GLFW_COCOA_FRAME_NAME</bold> specifies the UTF-8 encoded name to use for autosaving the window frame, or if empty disables frame autosaving for the window. This is ignored on other platforms. This is set with <ref refid="group__window_1ga3c2270562d7ba13d92680ba1090adafe" kindref="member">glfwWindowHintString</ref>.</para>
<para><anchor id="window_guide_1GLFW_COCOA_GRAPHICS_SWITCHING_hint"/><bold>GLFW_COCOA_GRAPHICS_SWITCHING</bold> specifies whether to in Automatic Graphics Switching, i.e. to allow the system to choose the integrated GPU for the OpenGL context and move it between GPUs if necessary or whether to force it to always run on the discrete GPU. This only affects systems with both integrated and discrete GPUs. Possible values are <computeroutput>GLFW_TRUE</computeroutput> and <computeroutput>GLFW_FALSE</computeroutput>. This is ignored on other platforms.</para>
<para><simplesect kind="par"><title></title><para>Simpler programs and tools may want to enable this to save power, while games and other applications performing advanced rendering will want to leave it disabled.</para>
</simplesect>
<simplesect kind="par"><title></title><para>A bundled application that wishes to participate in Automatic Graphics Switching should also declare this in its <computeroutput>Info.plist</computeroutput> by setting the <computeroutput>NSSupportsAutomaticGraphicsSwitching</computeroutput> key to <computeroutput>true</computeroutput>.</para>
</simplesect>
</para>
</sect3>
<sect3 id="window_guide_1window_hints_x11">
<title>X11 specific window hints</title>
<para><anchor id="window_guide_1GLFW_X11_CLASS_NAME_hint"/><anchor id="window_guide_1GLFW_X11_INSTANCE_NAME_hint"/><bold>GLFW_X11_CLASS_NAME</bold> and <bold>GLFW_X11_INSTANCE_NAME</bold> specifies the desired ASCII encoded class and instance parts of the ICCCM <computeroutput>WM_CLASS</computeroutput> window property. These are set with <ref refid="group__window_1ga3c2270562d7ba13d92680ba1090adafe" kindref="member">glfwWindowHintString</ref>.</para>
</sect3>
<sect3 id="window_guide_1window_hints_values">
<title>Supported and default values</title>
<para><table rows="44" cols="3"><row>
<entry thead="yes"><para>Window hint   </para>
</entry><entry thead="yes"><para>Default value   </para>
</entry><entry thead="yes"><para>Supported values    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_RESIZABLE   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_TRUE</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_TRUE</computeroutput> or <computeroutput>GLFW_FALSE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_VISIBLE   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_TRUE</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_TRUE</computeroutput> or <computeroutput>GLFW_FALSE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_DECORATED   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_TRUE</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_TRUE</computeroutput> or <computeroutput>GLFW_FALSE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_FOCUSED   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_TRUE</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_TRUE</computeroutput> or <computeroutput>GLFW_FALSE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_AUTO_ICONIFY   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_TRUE</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_TRUE</computeroutput> or <computeroutput>GLFW_FALSE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_FLOATING   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_FALSE</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_TRUE</computeroutput> or <computeroutput>GLFW_FALSE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_MAXIMIZED   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_FALSE</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_TRUE</computeroutput> or <computeroutput>GLFW_FALSE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_CENTER_CURSOR   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_TRUE</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_TRUE</computeroutput> or <computeroutput>GLFW_FALSE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_TRANSPARENT_FRAMEBUFFER   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_FALSE</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_TRUE</computeroutput> or <computeroutput>GLFW_FALSE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_FOCUS_ON_SHOW   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_TRUE</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_TRUE</computeroutput> or <computeroutput>GLFW_FALSE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_SCALE_TO_MONITOR   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_FALSE</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_TRUE</computeroutput> or <computeroutput>GLFW_FALSE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_MOUSE_PASSTHROUGH   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_FALSE</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_TRUE</computeroutput> or <computeroutput>GLFW_FALSE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_RED_BITS   </para>
</entry><entry thead="no"><para>8   </para>
</entry><entry thead="no"><para>0 to <computeroutput>INT_MAX</computeroutput> or <computeroutput>GLFW_DONT_CARE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_GREEN_BITS   </para>
</entry><entry thead="no"><para>8   </para>
</entry><entry thead="no"><para>0 to <computeroutput>INT_MAX</computeroutput> or <computeroutput>GLFW_DONT_CARE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_BLUE_BITS   </para>
</entry><entry thead="no"><para>8   </para>
</entry><entry thead="no"><para>0 to <computeroutput>INT_MAX</computeroutput> or <computeroutput>GLFW_DONT_CARE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_ALPHA_BITS   </para>
</entry><entry thead="no"><para>8   </para>
</entry><entry thead="no"><para>0 to <computeroutput>INT_MAX</computeroutput> or <computeroutput>GLFW_DONT_CARE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_DEPTH_BITS   </para>
</entry><entry thead="no"><para>24   </para>
</entry><entry thead="no"><para>0 to <computeroutput>INT_MAX</computeroutput> or <computeroutput>GLFW_DONT_CARE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_STENCIL_BITS   </para>
</entry><entry thead="no"><para>8   </para>
</entry><entry thead="no"><para>0 to <computeroutput>INT_MAX</computeroutput> or <computeroutput>GLFW_DONT_CARE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_ACCUM_RED_BITS   </para>
</entry><entry thead="no"><para>0   </para>
</entry><entry thead="no"><para>0 to <computeroutput>INT_MAX</computeroutput> or <computeroutput>GLFW_DONT_CARE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_ACCUM_GREEN_BITS   </para>
</entry><entry thead="no"><para>0   </para>
</entry><entry thead="no"><para>0 to <computeroutput>INT_MAX</computeroutput> or <computeroutput>GLFW_DONT_CARE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_ACCUM_BLUE_BITS   </para>
</entry><entry thead="no"><para>0   </para>
</entry><entry thead="no"><para>0 to <computeroutput>INT_MAX</computeroutput> or <computeroutput>GLFW_DONT_CARE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_ACCUM_ALPHA_BITS   </para>
</entry><entry thead="no"><para>0   </para>
</entry><entry thead="no"><para>0 to <computeroutput>INT_MAX</computeroutput> or <computeroutput>GLFW_DONT_CARE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_AUX_BUFFERS   </para>
</entry><entry thead="no"><para>0   </para>
</entry><entry thead="no"><para>0 to <computeroutput>INT_MAX</computeroutput> or <computeroutput>GLFW_DONT_CARE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_SAMPLES   </para>
</entry><entry thead="no"><para>0   </para>
</entry><entry thead="no"><para>0 to <computeroutput>INT_MAX</computeroutput> or <computeroutput>GLFW_DONT_CARE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_REFRESH_RATE   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_DONT_CARE</computeroutput>   </para>
</entry><entry thead="no"><para>0 to <computeroutput>INT_MAX</computeroutput> or <computeroutput>GLFW_DONT_CARE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_STEREO   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_FALSE</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_TRUE</computeroutput> or <computeroutput>GLFW_FALSE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_SRGB_CAPABLE   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_FALSE</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_TRUE</computeroutput> or <computeroutput>GLFW_FALSE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_DOUBLEBUFFER   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_TRUE</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_TRUE</computeroutput> or <computeroutput>GLFW_FALSE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_CLIENT_API   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_OPENGL_API</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_OPENGL_API</computeroutput>, <computeroutput>GLFW_OPENGL_ES_API</computeroutput> or <computeroutput>GLFW_NO_API</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_CONTEXT_CREATION_API   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_NATIVE_CONTEXT_API</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_NATIVE_CONTEXT_API</computeroutput>, <computeroutput>GLFW_EGL_CONTEXT_API</computeroutput> or <computeroutput>GLFW_OSMESA_CONTEXT_API</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_CONTEXT_VERSION_MAJOR   </para>
</entry><entry thead="no"><para>1   </para>
</entry><entry thead="no"><para>Any valid major version number of the chosen client API    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_CONTEXT_VERSION_MINOR   </para>
</entry><entry thead="no"><para>0   </para>
</entry><entry thead="no"><para>Any valid minor version number of the chosen client API    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_CONTEXT_ROBUSTNESS   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_NO_ROBUSTNESS</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_NO_ROBUSTNESS</computeroutput>, <computeroutput>GLFW_NO_RESET_NOTIFICATION</computeroutput> or <computeroutput>GLFW_LOSE_CONTEXT_ON_RESET</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_CONTEXT_RELEASE_BEHAVIOR   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_ANY_RELEASE_BEHAVIOR</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_ANY_RELEASE_BEHAVIOR</computeroutput>, <computeroutput>GLFW_RELEASE_BEHAVIOR_FLUSH</computeroutput> or <computeroutput>GLFW_RELEASE_BEHAVIOR_NONE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_OPENGL_FORWARD_COMPAT   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_FALSE</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_TRUE</computeroutput> or <computeroutput>GLFW_FALSE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_CONTEXT_DEBUG   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_FALSE</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_TRUE</computeroutput> or <computeroutput>GLFW_FALSE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_OPENGL_PROFILE   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_OPENGL_ANY_PROFILE</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_OPENGL_ANY_PROFILE</computeroutput>, <computeroutput>GLFW_OPENGL_COMPAT_PROFILE</computeroutput> or <computeroutput>GLFW_OPENGL_CORE_PROFILE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_WIN32_KEYBOARD_MENU   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_FALSE</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_TRUE</computeroutput> or <computeroutput>GLFW_FALSE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_COCOA_RETINA_FRAMEBUFFER   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_TRUE</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_TRUE</computeroutput> or <computeroutput>GLFW_FALSE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_COCOA_FRAME_NAME   </para>
</entry><entry thead="no"><para><computeroutput>&quot;&quot;</computeroutput>   </para>
</entry><entry thead="no"><para>A UTF-8 encoded frame autosave name    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_COCOA_GRAPHICS_SWITCHING   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_FALSE</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_TRUE</computeroutput> or <computeroutput>GLFW_FALSE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_X11_CLASS_NAME   </para>
</entry><entry thead="no"><para><computeroutput>&quot;&quot;</computeroutput>   </para>
</entry><entry thead="no"><para>An ASCII encoded <computeroutput>WM_CLASS</computeroutput> class name    </para>
</entry></row>
<row>
<entry thead="no"><para>GLFW_X11_INSTANCE_NAME   </para>
</entry><entry thead="no"><para><computeroutput>&quot;&quot;</computeroutput>   </para>
</entry><entry thead="no"><para>An ASCII encoded <computeroutput>WM_CLASS</computeroutput> instance name   </para>
</entry></row>
</table>
</para>
</sect3>
</sect2>
</sect1>
<sect1 id="window_guide_1window_events">
<title>Window event processing</title>
<para>See <ref refid="input_guide_1events" kindref="member">Event processing</ref>.</para>
</sect1>
<sect1 id="window_guide_1window_properties">
<title>Window properties and events</title>
<sect2 id="window_guide_1window_userptr">
<title>User pointer</title>
<para>Each window has a user pointer that can be set with <ref refid="group__window_1gacc9e68faee3c1763b54cd9bc405cf43e" kindref="member">glfwSetWindowUserPointer</ref> and queried with <ref refid="group__window_1gad07c1ae8809c4f47e55ad8cc3f60e794" kindref="member">glfwGetWindowUserPointer</ref>. This can be used for any purpose you need and will not be modified by GLFW throughout the life-time of the window.</para>
<para>The initial value of the pointer is <computeroutput>NULL</computeroutput>.</para>
</sect2>
<sect2 id="window_guide_1window_close">
<title>Window closing and close flag</title>
<para>When the user attempts to close the window, for example by clicking the close widget or using a key chord like Alt+F4, the <emphasis>close flag</emphasis> of the window is set. The window is however not actually destroyed and, unless you watch for this state change, nothing further happens.</para>
<para>The current state of the close flag is returned by <ref refid="group__window_1gaa6162f67dfa38b8beda2fea623649332" kindref="member">glfwWindowShouldClose</ref> and can be set or cleared directly with <ref refid="group__window_1ga1cadeda7a1e2f224e06a8415d30741aa" kindref="member">glfwSetWindowShouldClose</ref>. A common pattern is to use the close flag as a main loop condition.</para>
<para><programlisting><codeline><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!<ref refid="group__window_1gaa6162f67dfa38b8beda2fea623649332" kindref="member">glfwWindowShouldClose</ref>(window))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>render(window);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__window_1gafb827800eedbfcbc97b1e5408df668d7" kindref="member">glfwSwapBuffers</ref>(window);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__window_1ga872d16e4c77f58c0436f356255920cfc" kindref="member">glfwPollEvents</ref>();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>If you wish to be notified when the user attempts to close a window, set a close callback.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1ga693d778815971a06e1a5a7bcdeff3d36" kindref="member">glfwSetWindowCloseCallback</ref>(window,<sp/>window_close_callback);</highlight></codeline>
</programlisting></para>
<para>The callback function is called directly <emphasis>after</emphasis> the close flag has been set. It can be used for example to filter close requests and clear the close flag again unless certain conditions are met.</para>
<para><programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>window_close_callback(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>window)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!time_to_close)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__window_1ga1cadeda7a1e2f224e06a8415d30741aa" kindref="member">glfwSetWindowShouldClose</ref>(window,<sp/><ref refid="group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5" kindref="member">GLFW_FALSE</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="window_guide_1window_size">
<title>Window size</title>
<para>The size of a window can be changed with <ref refid="group__window_1gae54d1f4915ded15e267ddd3f41496cd2" kindref="member">glfwSetWindowSize</ref>. For windowed mode windows, this sets the size, in <ref refid="intro_guide_1coordinate_systems" kindref="member">screen coordinates</ref> of the <emphasis>content area</emphasis> or <emphasis>content area</emphasis> of the window. The window system may impose limits on window size.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1gae54d1f4915ded15e267ddd3f41496cd2" kindref="member">glfwSetWindowSize</ref>(window,<sp/>640,<sp/>480);</highlight></codeline>
</programlisting></para>
<para>For full screen windows, the specified size becomes the new resolution of the window&apos;s desired video mode. The video mode most closely matching the new desired video mode is set immediately. The window is resized to fit the resolution of the set video mode.</para>
<para>If you wish to be notified when a window is resized, whether by the user, the system or your own code, set a size callback.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1gab0754f8d5c7c4d5cae2a9937a0e00bc5" kindref="member">glfwSetWindowSizeCallback</ref>(window,<sp/>window_size_callback);</highlight></codeline>
</programlisting></para>
<para>The callback function receives the new size, in screen coordinates, of the content area of the window when the window is resized.</para>
<para><programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>window_size_callback(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>window,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>There is also <ref refid="group__window_1ga7feb769ebb3f3d21579b5a3fb07be76e" kindref="member">glfwGetWindowSize</ref> for directly retrieving the current size of a window.</para>
<para><programlisting><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/>height;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__window_1ga7feb769ebb3f3d21579b5a3fb07be76e" kindref="member">glfwGetWindowSize</ref>(window,<sp/>&amp;width,<sp/>&amp;height);</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Do not pass the window size to <computeroutput>glViewport</computeroutput> or other pixel-based OpenGL calls. The window size is in screen coordinates, not pixels. Use the <ref refid="window_guide_1window_fbsize" kindref="member">framebuffer size</ref>, which is in pixels, for pixel-based calls.</para>
</simplesect>
The above functions work with the size of the content area, but decorated windows typically have title bars and window frames around this rectangle. You can retrieve the extents of these with <ref refid="group__window_1gaad46cdaae2eb732f68d3a1499a7c5409" kindref="member">glfwGetWindowFrameSize</ref>.</para>
<para><programlisting><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>left,<sp/>top,<sp/>right,<sp/>bottom;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__window_1gaad46cdaae2eb732f68d3a1499a7c5409" kindref="member">glfwGetWindowFrameSize</ref>(window,<sp/>&amp;left,<sp/>&amp;top,<sp/>&amp;right,<sp/>&amp;bottom);</highlight></codeline>
</programlisting></para>
<para>The returned values are the distances, in screen coordinates, from the edges of the content area to the corresponding edges of the full window. As they are distances and not coordinates, they are always zero or positive.</para>
</sect2>
<sect2 id="window_guide_1window_fbsize">
<title>Framebuffer size</title>
<para>While the size of a window is measured in screen coordinates, OpenGL works with pixels. The size you pass into <computeroutput>glViewport</computeroutput>, for example, should be in pixels. On some machines screen coordinates and pixels are the same, but on others they will not be. There is a second set of functions to retrieve the size, in pixels, of the framebuffer of a window.</para>
<para>If you wish to be notified when the framebuffer of a window is resized, whether by the user or the system, set a size callback.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1ga41d69f9f263d7b33ea03cf58772b4ea0" kindref="member">glfwSetFramebufferSizeCallback</ref>(window,<sp/>framebuffer_size_callback);</highlight></codeline>
</programlisting></para>
<para>The callback function receives the new size of the framebuffer when it is resized, which can for example be used to update the OpenGL viewport.</para>
<para><programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>framebuffer_size_callback(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>window,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>glViewport(0,<sp/>0,<sp/>width,<sp/>height);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>There is also <ref refid="group__window_1gaf7d17f3534b4b6dc9a6f905e3a240b7e" kindref="member">glfwGetFramebufferSize</ref> for directly retrieving the current size of the framebuffer of a window.</para>
<para><programlisting><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/>height;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__window_1gaf7d17f3534b4b6dc9a6f905e3a240b7e" kindref="member">glfwGetFramebufferSize</ref>(window,<sp/>&amp;width,<sp/>&amp;height);</highlight></codeline>
<codeline><highlight class="normal">glViewport(0,<sp/>0,<sp/>width,<sp/>height);</highlight></codeline>
</programlisting></para>
<para>The size of a framebuffer may change independently of the size of a window, for example if the window is dragged between a regular monitor and a high-DPI one.</para>
</sect2>
<sect2 id="window_guide_1window_scale">
<title>Window content scale</title>
<para>The content scale for a window can be retrieved with <ref refid="group__window_1ga72718c983a9fffaa27f786bfe7d1c9ee" kindref="member">glfwGetWindowContentScale</ref>.</para>
<para><programlisting><codeline><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>xscale,<sp/>yscale;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__window_1ga72718c983a9fffaa27f786bfe7d1c9ee" kindref="member">glfwGetWindowContentScale</ref>(window,<sp/>&amp;xscale,<sp/>&amp;yscale);</highlight></codeline>
</programlisting></para>
<para>The content scale is the ratio between the current DPI and the platform&apos;s default DPI. This is especially important for text and any UI elements. If the pixel dimensions of your UI scaled by this look appropriate on your machine then it should appear at a reasonable size on other machines regardless of their DPI and scaling settings. This relies on the system DPI and scaling settings being somewhat correct.</para>
<para>On systems where each monitors can have its own content scale, the window content scale will depend on which monitor the system considers the window to be on.</para>
<para>If you wish to be notified when the content scale of a window changes, whether because of a system setting change or because it was moved to a monitor with a different scale, set a content scale callback.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1gac6edcddbe785445d0d2b7b7be500836e" kindref="member">glfwSetWindowContentScaleCallback</ref>(window,<sp/>window_content_scale_callback);</highlight></codeline>
</programlisting></para>
<para>The callback function receives the new content scale of the window.</para>
<para><programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>window_content_scale_callback(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>window,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>xscale,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>yscale)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>set_interface_scale(xscale,<sp/>yscale);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>On platforms where pixels and screen coordinates always map 1:1, the window will need to be resized to appear the same size when it is moved to a monitor with a different content scale. To have this done automatically both when the window is created and when its content scale later changes, set the <ref refid="window_guide_1GLFW_SCALE_TO_MONITOR" kindref="member">GLFW_SCALE_TO_MONITOR</ref> window hint.</para>
</sect2>
<sect2 id="window_guide_1window_sizelimits">
<title>Window size limits</title>
<para>The minimum and maximum size of the content area of a windowed mode window can be enforced with <ref refid="group__window_1ga8af814fc98d786d1de2505b40b707de8" kindref="member">glfwSetWindowSizeLimits</ref>. The user may resize the window to any size and aspect ratio within the specified limits, unless the aspect ratio is also set.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1ga8af814fc98d786d1de2505b40b707de8" kindref="member">glfwSetWindowSizeLimits</ref>(window,<sp/>200,<sp/>200,<sp/>400,<sp/>400);</highlight></codeline>
</programlisting></para>
<para>To specify only a minimum size or only a maximum one, set the other pair to <computeroutput>GLFW_DONT_CARE</computeroutput>.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1ga8af814fc98d786d1de2505b40b707de8" kindref="member">glfwSetWindowSizeLimits</ref>(window,<sp/>640,<sp/>480,<sp/>GLFW_DONT_CARE,<sp/>GLFW_DONT_CARE);</highlight></codeline>
</programlisting></para>
<para>To disable size limits for a window, set them all to <computeroutput>GLFW_DONT_CARE</computeroutput>.</para>
<para>The aspect ratio of the content area of a windowed mode window can be enforced with <ref refid="group__window_1gad2ae94a2c5ee1c46a36e13a8f4ac68ac" kindref="member">glfwSetWindowAspectRatio</ref>. The user may resize the window freely unless size limits are also set, but the size will be constrained to maintain the aspect ratio.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1gad2ae94a2c5ee1c46a36e13a8f4ac68ac" kindref="member">glfwSetWindowAspectRatio</ref>(window,<sp/>16,<sp/>9);</highlight></codeline>
</programlisting></para>
<para>The aspect ratio is specified as a numerator and denominator, corresponding to the width and height, respectively. If you want a window to maintain its current aspect ratio, use its current size as the ratio.</para>
<para><programlisting><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/>height;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__window_1ga7feb769ebb3f3d21579b5a3fb07be76e" kindref="member">glfwGetWindowSize</ref>(window,<sp/>&amp;width,<sp/>&amp;height);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__window_1gad2ae94a2c5ee1c46a36e13a8f4ac68ac" kindref="member">glfwSetWindowAspectRatio</ref>(window,<sp/>width,<sp/>height);</highlight></codeline>
</programlisting></para>
<para>To disable the aspect ratio limit for a window, set both terms to <computeroutput>GLFW_DONT_CARE</computeroutput>.</para>
<para>You can have both size limits and aspect ratio set for a window, but the results are undefined if they conflict.</para>
</sect2>
<sect2 id="window_guide_1window_pos">
<title>Window position</title>
<para>The position of a windowed-mode window can be changed with <ref refid="group__window_1ga0dc8d880a0d87be16d3ea8114561f6f0" kindref="member">glfwSetWindowPos</ref>. This moves the window so that the upper-left corner of its content area has the specified <ref refid="intro_guide_1coordinate_systems" kindref="member">screen coordinates</ref>. The window system may put limitations on window placement.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1ga0dc8d880a0d87be16d3ea8114561f6f0" kindref="member">glfwSetWindowPos</ref>(window,<sp/>100,<sp/>100);</highlight></codeline>
</programlisting></para>
<para>If you wish to be notified when a window is moved, whether by the user, the system or your own code, set a position callback.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1ga517b6e80b982efa06e9b8ca89d4a75a6" kindref="member">glfwSetWindowPosCallback</ref>(window,<sp/>window_pos_callback);</highlight></codeline>
</programlisting></para>
<para>The callback function receives the new position, in screen coordinates, of the upper-left corner of the content area when the window is moved.</para>
<para><programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>window_pos_callback(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>window,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xpos,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ypos)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>There is also <ref refid="group__window_1ga0076a8591ef7494d359730cf2250b45b" kindref="member">glfwGetWindowPos</ref> for directly retrieving the current position of the content area of the window.</para>
<para><programlisting><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xpos,<sp/>ypos;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__window_1ga0076a8591ef7494d359730cf2250b45b" kindref="member">glfwGetWindowPos</ref>(window,<sp/>&amp;xpos,<sp/>&amp;ypos);</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="window_guide_1window_title">
<title>Window title</title>
<para>All GLFW windows have a title, although undecorated or full screen windows may not display it or only display it in a task bar or similar interface. You can set a UTF-8 encoded window title with <ref refid="group__window_1ga861ed3414ab8120e2f74151a666ed1dc" kindref="member">glfwSetWindowTitle</ref>.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1ga861ed3414ab8120e2f74151a666ed1dc" kindref="member">glfwSetWindowTitle</ref>(window,<sp/></highlight><highlight class="stringliteral">&quot;My<sp/>Window&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>The specified string is copied before the function returns, so there is no need to keep it around.</para>
<para>As long as your source file is encoded as UTF-8, you can use any Unicode characters directly in the source.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1ga861ed3414ab8120e2f74151a666ed1dc" kindref="member">glfwSetWindowTitle</ref>(window,<sp/></highlight><highlight class="stringliteral">&quot;ラストエグザイル&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>If you are using C++11 or C11, you can use a UTF-8 string literal.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1ga861ed3414ab8120e2f74151a666ed1dc" kindref="member">glfwSetWindowTitle</ref>(window,<sp/><ref refid="group__gtc__type__precision_1ga5e3dc67373d5068997d2d9f41c9024d2" kindref="member">u8</ref></highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>always<sp/>a<sp/>UTF-8<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="window_guide_1window_icon">
<title>Window icon</title>
<para>Decorated windows have icons on some platforms. You can set this icon by specifying a list of candidate images with <ref refid="group__window_1ga182987a1a62a41a924842b9473d560df" kindref="member">glfwSetWindowIcon</ref>.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="struct_g_l_f_wimage" kindref="compound">GLFWimage</ref><sp/>images[2];</highlight></codeline>
<codeline><highlight class="normal">images[0]<sp/>=<sp/>load_icon(</highlight><highlight class="stringliteral">&quot;my_icon.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">images[1]<sp/>=<sp/>load_icon(</highlight><highlight class="stringliteral">&quot;my_icon_small.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__window_1ga182987a1a62a41a924842b9473d560df" kindref="member">glfwSetWindowIcon</ref>(window,<sp/>2,<sp/>images);</highlight></codeline>
</programlisting></para>
<para>The image data is 32-bit, little-endian, non-premultiplied RGBA, i.e. eight bits per channel with the red channel first. The pixels are arranged canonically as sequential rows, starting from the top-left corner.</para>
<para>To revert to the default window icon, pass in an empty image array.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1ga182987a1a62a41a924842b9473d560df" kindref="member">glfwSetWindowIcon</ref>(window,<sp/>0,<sp/>NULL);</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="window_guide_1window_monitor">
<title>Window monitor</title>
<para>Full screen windows are associated with a specific monitor. You can get the handle for this monitor with <ref refid="group__window_1gad441645a53bc9274a0ee163d40f0c637" kindref="member">glfwGetWindowMonitor</ref>.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3" kindref="member">GLFWmonitor</ref>*<sp/>monitor<sp/>=<sp/><ref refid="group__window_1gad441645a53bc9274a0ee163d40f0c637" kindref="member">glfwGetWindowMonitor</ref>(window);</highlight></codeline>
</programlisting></para>
<para>This monitor handle is one of those returned by <ref refid="group__monitor_1ga8c78e5db186ee10d00c053faf81998af" kindref="member">glfwGetMonitors</ref>.</para>
<para>For windowed mode windows, this function returns <computeroutput>NULL</computeroutput>. This is how to tell full screen windows from windowed mode windows.</para>
<para>You can move windows between monitors or between full screen and windowed mode with <ref refid="group__window_1ga12fabf78575e59c00f822f323ae0b6ae" kindref="member">glfwSetWindowMonitor</ref>. When making a window full screen on the same or on a different monitor, specify the desired monitor, resolution and refresh rate. The position arguments are ignored.</para>
<para><programlisting><codeline><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_g_l_f_wvidmode" kindref="compound">GLFWvidmode</ref>*<sp/>mode<sp/>=<sp/><ref refid="group__monitor_1ga21f7f60de4f4d0fa360c7ad159b75c9e" kindref="member">glfwGetVideoMode</ref>(monitor);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__window_1ga12fabf78575e59c00f822f323ae0b6ae" kindref="member">glfwSetWindowMonitor</ref>(window,<sp/>monitor,<sp/>0,<sp/>0,<sp/>mode-&gt;width,<sp/>mode-&gt;height,<sp/>mode-&gt;refreshRate);</highlight></codeline>
</programlisting></para>
<para>When making the window windowed, specify the desired position and size. The refresh rate argument is ignored.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1ga12fabf78575e59c00f822f323ae0b6ae" kindref="member">glfwSetWindowMonitor</ref>(window,<sp/>NULL,<sp/>xpos,<sp/>ypos,<sp/>width,<sp/>height,<sp/>0);</highlight></codeline>
</programlisting></para>
<para>This restores any previous window settings such as whether it is decorated, floating, resizable, has size or aspect ratio limits, etc.. To restore a window that was originally windowed to its original size and position, save these before making it full screen and then pass them in as above.</para>
</sect2>
<sect2 id="window_guide_1window_iconify">
<title>Window iconification</title>
<para>Windows can be iconified (i.e. minimized) with <ref refid="group__window_1ga24274e3c6ecd44e11fec5e6b66e4d7f3" kindref="member">glfwIconifyWindow</ref>.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1ga24274e3c6ecd44e11fec5e6b66e4d7f3" kindref="member">glfwIconifyWindow</ref>(window);</highlight></codeline>
</programlisting></para>
<para>When a full screen window is iconified, the original video mode of its monitor is restored until the user or application restores the window.</para>
<para>Iconified windows can be restored with <ref refid="group__window_1ga1e29caf0b819f578b04db52fff17256c" kindref="member">glfwRestoreWindow</ref>. This function also restores windows from maximization.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1ga1e29caf0b819f578b04db52fff17256c" kindref="member">glfwRestoreWindow</ref>(window);</highlight></codeline>
</programlisting></para>
<para>When a full screen window is restored, the desired video mode is restored to its monitor as well.</para>
<para>If you wish to be notified when a window is iconified or restored, whether by the user, system or your own code, set an iconify callback.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1ga3e9f355edb6b9247149ddea2335eda69" kindref="member">glfwSetWindowIconifyCallback</ref>(window,<sp/>window_iconify_callback);</highlight></codeline>
</programlisting></para>
<para>The callback function receives changes in the iconification state of the window.</para>
<para><programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>window_iconify_callback(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>window,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iconified)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iconified)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>window<sp/>was<sp/>iconified</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>window<sp/>was<sp/>restored</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>You can also get the current iconification state with <ref refid="group__window_1ga1bb0c7e100418e284dbb800789c63d40" kindref="member">glfwGetWindowAttrib</ref>.</para>
<para><programlisting><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iconified<sp/>=<sp/><ref refid="group__window_1ga1bb0c7e100418e284dbb800789c63d40" kindref="member">glfwGetWindowAttrib</ref>(window,<sp/><ref refid="group__window_1ga39d44b7c056e55e581355a92d240b58a" kindref="member">GLFW_ICONIFIED</ref>);</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="window_guide_1window_maximize">
<title>Window maximization</title>
<para>Windows can be maximized (i.e. zoomed) with <ref refid="group__window_1ga4f825a55367d3fabde3d06e7f30128e8" kindref="member">glfwMaximizeWindow</ref>.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1ga4f825a55367d3fabde3d06e7f30128e8" kindref="member">glfwMaximizeWindow</ref>(window);</highlight></codeline>
</programlisting></para>
<para>Full screen windows cannot be maximized and passing a full screen window to this function does nothing.</para>
<para>Maximized windows can be restored with <ref refid="group__window_1ga1e29caf0b819f578b04db52fff17256c" kindref="member">glfwRestoreWindow</ref>. This function also restores windows from iconification.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1ga1e29caf0b819f578b04db52fff17256c" kindref="member">glfwRestoreWindow</ref>(window);</highlight></codeline>
</programlisting></para>
<para>If you wish to be notified when a window is maximized or restored, whether by the user, system or your own code, set a maximize callback.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1gae77b3960dcd40514fb7b2b8a6eb98137" kindref="member">glfwSetWindowMaximizeCallback</ref>(window,<sp/>window_maximize_callback);</highlight></codeline>
</programlisting></para>
<para>The callback function receives changes in the maximization state of the window.</para>
<para><programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>window_maximize_callback(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>window,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maximized)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maximized)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>window<sp/>was<sp/>maximized</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>window<sp/>was<sp/>restored</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>You can also get the current maximization state with <ref refid="group__window_1ga1bb0c7e100418e284dbb800789c63d40" kindref="member">glfwGetWindowAttrib</ref>.</para>
<para><programlisting><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maximized<sp/>=<sp/><ref refid="group__window_1ga1bb0c7e100418e284dbb800789c63d40" kindref="member">glfwGetWindowAttrib</ref>(window,<sp/><ref refid="group__window_1gad8ccb396253ad0b72c6d4c917eb38a03" kindref="member">GLFW_MAXIMIZED</ref>);</highlight></codeline>
</programlisting></para>
<para>By default, newly created windows are not maximized. You can change this behavior by setting the <ref refid="window_guide_1GLFW_MAXIMIZED_hint" kindref="member">GLFW_MAXIMIZED</ref> window hint before creating the window.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1ga69c40728499720bef8a49aa925ea0efa" kindref="member">glfwWindowHint</ref>(<ref refid="group__window_1gad8ccb396253ad0b72c6d4c917eb38a03" kindref="member">GLFW_MAXIMIZED</ref>,<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref>);</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="window_guide_1window_hide">
<title>Window visibility</title>
<para>Windowed mode windows can be hidden with <ref refid="group__window_1gaa17e287d521544bdeceafa09ac036e20" kindref="member">glfwHideWindow</ref>.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1gaa17e287d521544bdeceafa09ac036e20" kindref="member">glfwHideWindow</ref>(window);</highlight></codeline>
</programlisting></para>
<para>This makes the window completely invisible to the user, including removing it from the task bar, dock or window list. Full screen windows cannot be hidden and calling <ref refid="group__window_1gaa17e287d521544bdeceafa09ac036e20" kindref="member">glfwHideWindow</ref> on a full screen window does nothing.</para>
<para>Hidden windows can be shown with <ref refid="group__window_1ga7945bcdff9e5e058cf36505d6873ed8c" kindref="member">glfwShowWindow</ref>.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1ga7945bcdff9e5e058cf36505d6873ed8c" kindref="member">glfwShowWindow</ref>(window);</highlight></codeline>
</programlisting></para>
<para>By default, this function will also set the input focus to that window. Set the <ref refid="window_guide_1GLFW_FOCUS_ON_SHOW_hint" kindref="member">GLFW_FOCUS_ON_SHOW</ref> window hint to change this behavior for all newly created windows, or change the behavior for an existing window with <ref refid="group__window_1gad39f43f07856efcf3d656426a9284c75" kindref="member">glfwSetWindowAttrib</ref>.</para>
<para>You can also get the current visibility state with <ref refid="group__window_1ga1bb0c7e100418e284dbb800789c63d40" kindref="member">glfwGetWindowAttrib</ref>.</para>
<para><programlisting><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>visible<sp/>=<sp/><ref refid="group__window_1ga1bb0c7e100418e284dbb800789c63d40" kindref="member">glfwGetWindowAttrib</ref>(window,<sp/><ref refid="group__window_1gafb3cdc45297e06d8f1eb13adc69ca6c4" kindref="member">GLFW_VISIBLE</ref>);</highlight></codeline>
</programlisting></para>
<para>By default, newly created windows are visible. You can change this behavior by setting the <ref refid="window_guide_1GLFW_VISIBLE_hint" kindref="member">GLFW_VISIBLE</ref> window hint before creating the window.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1ga69c40728499720bef8a49aa925ea0efa" kindref="member">glfwWindowHint</ref>(<ref refid="group__window_1gafb3cdc45297e06d8f1eb13adc69ca6c4" kindref="member">GLFW_VISIBLE</ref>,<sp/><ref refid="group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5" kindref="member">GLFW_FALSE</ref>);</highlight></codeline>
</programlisting></para>
<para>Windows created hidden are completely invisible to the user until shown. This can be useful if you need to set up your window further before showing it, for example moving it to a specific location.</para>
</sect2>
<sect2 id="window_guide_1window_focus">
<title>Window input focus</title>
<para>Windows can be given input focus and brought to the front with <ref refid="group__window_1ga0da0e3daaa2d100f44a115c09077b510" kindref="member">glfwFocusWindow</ref>.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1ga0da0e3daaa2d100f44a115c09077b510" kindref="member">glfwFocusWindow</ref>(window);</highlight></codeline>
</programlisting></para>
<para>Keep in mind that it can be very disruptive to the user when a window is forced to the top. For a less disruptive way of getting the user&apos;s attention, see <ref refid="window_guide_1window_attention" kindref="member">attention requests</ref>.</para>
<para>If you wish to be notified when a window gains or loses input focus, whether by the user, system or your own code, set a focus callback.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1gacce1c4dd273b5c4c60b05599f8725b4e" kindref="member">glfwSetWindowFocusCallback</ref>(window,<sp/>window_focus_callback);</highlight></codeline>
</programlisting></para>
<para>The callback function receives changes in the input focus state of the window.</para>
<para><programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>window_focus_callback(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>window,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>focused)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(focused)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>window<sp/>gained<sp/>input<sp/>focus</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>window<sp/>lost<sp/>input<sp/>focus</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>You can also get the current input focus state with <ref refid="group__window_1ga1bb0c7e100418e284dbb800789c63d40" kindref="member">glfwGetWindowAttrib</ref>.</para>
<para><programlisting><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>focused<sp/>=<sp/><ref refid="group__window_1ga1bb0c7e100418e284dbb800789c63d40" kindref="member">glfwGetWindowAttrib</ref>(window,<sp/><ref refid="group__window_1ga54ddb14825a1541a56e22afb5f832a9e" kindref="member">GLFW_FOCUSED</ref>);</highlight></codeline>
</programlisting></para>
<para>By default, newly created windows are given input focus. You can change this behavior by setting the <ref refid="window_guide_1GLFW_FOCUSED_hint" kindref="member">GLFW_FOCUSED</ref> window hint before creating the window.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1ga69c40728499720bef8a49aa925ea0efa" kindref="member">glfwWindowHint</ref>(<ref refid="group__window_1ga54ddb14825a1541a56e22afb5f832a9e" kindref="member">GLFW_FOCUSED</ref>,<sp/><ref refid="group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5" kindref="member">GLFW_FALSE</ref>);</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="window_guide_1window_attention">
<title>Window attention request</title>
<para>If you wish to notify the user of an event without interrupting, you can request attention with <ref refid="group__window_1gad0c9629abb49447bedd28080642b8538" kindref="member">glfwRequestWindowAttention</ref>.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1gad0c9629abb49447bedd28080642b8538" kindref="member">glfwRequestWindowAttention</ref>(window);</highlight></codeline>
</programlisting></para>
<para>The system will highlight the specified window, or on platforms where this is not supported, the application as a whole. Once the user has given it attention, the system will automatically end the request.</para>
</sect2>
<sect2 id="window_guide_1window_refresh">
<title>Window damage and refresh</title>
<para>If you wish to be notified when the contents of a window is damaged and needs to be refreshed, set a window refresh callback.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1ga62bfa902c07a03b8ad9be37da31a4be7" kindref="member">glfwSetWindowRefreshCallback</ref>(m_handle,<sp/>window_refresh_callback);</highlight></codeline>
</programlisting></para>
<para>The callback function is called when the contents of the window needs to be refreshed.</para>
<para><programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>window_refresh_callback(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>window)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>draw_editor_ui(window);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__window_1gafb827800eedbfcbc97b1e5408df668d7" kindref="member">glfwSwapBuffers</ref>(window);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>On compositing window systems such as Aero, Compiz or Aqua, where the window contents are saved off-screen, this callback might only be called when the window or framebuffer is resized.</para>
</simplesect>
</para>
</sect2>
<sect2 id="window_guide_1window_transparency">
<title>Window transparency</title>
<para>GLFW supports two kinds of transparency for windows; framebuffer transparency and whole window transparency. A single window may not use both methods. The results of doing this are undefined.</para>
<para>Both methods require the platform to support it and not every version of every platform GLFW supports does this, so there are mechanisms to check whether the window really is transparent.</para>
<para>Window framebuffers can be made transparent on a per-pixel per-frame basis with the <ref refid="window_guide_1GLFW_TRANSPARENT_FRAMEBUFFER_hint" kindref="member">GLFW_TRANSPARENT_FRAMEBUFFER</ref> window hint.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1ga69c40728499720bef8a49aa925ea0efa" kindref="member">glfwWindowHint</ref>(<ref refid="group__window_1ga60a0578c3b9449027d683a9c6abb9f14" kindref="member">GLFW_TRANSPARENT_FRAMEBUFFER</ref>,<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref>);</highlight></codeline>
</programlisting></para>
<para>If supported by the system, the window content area will be composited with the background using the framebuffer per-pixel alpha channel. This requires desktop compositing to be enabled on the system. It does not affect window decorations.</para>
<para>You can check whether the window framebuffer was successfully made transparent with the <ref refid="window_guide_1GLFW_TRANSPARENT_FRAMEBUFFER_attrib" kindref="member">GLFW_TRANSPARENT_FRAMEBUFFER</ref> window attribute.</para>
<para><programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__window_1ga1bb0c7e100418e284dbb800789c63d40" kindref="member">glfwGetWindowAttrib</ref>(window,<sp/><ref refid="group__window_1ga60a0578c3b9449027d683a9c6abb9f14" kindref="member">GLFW_TRANSPARENT_FRAMEBUFFER</ref>))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>window<sp/>framebuffer<sp/>is<sp/>currently<sp/>transparent</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>GLFW comes with an example that enabled framebuffer transparency called <computeroutput>gears</computeroutput>.</para>
<para>The opacity of the whole window, including any decorations, can be set with <ref refid="group__window_1ga62a784fe328f227727cbcd0d07480ff3" kindref="member">glfwSetWindowOpacity</ref>.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1ga62a784fe328f227727cbcd0d07480ff3" kindref="member">glfwSetWindowOpacity</ref>(window,<sp/>0.5f);</highlight></codeline>
</programlisting></para>
<para>The opacity (or alpha) value is a positive finite number between zero and one, where 0 (zero) is fully transparent and 1 (one) is fully opaque. The initial opacity value for newly created windows is 1.</para>
<para>The current opacity of a window can be queried with <ref refid="group__window_1gad124d57a1c1c519f60c9765cd0c2a89c" kindref="member">glfwGetWindowOpacity</ref>.</para>
<para><programlisting><codeline><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>opacity<sp/>=<sp/><ref refid="group__window_1gad124d57a1c1c519f60c9765cd0c2a89c" kindref="member">glfwGetWindowOpacity</ref>(window);</highlight></codeline>
</programlisting></para>
<para>If the system does not support whole window transparency, this function always returns one.</para>
<para>GLFW comes with a test program that lets you control whole window transparency at run-time called <computeroutput>window</computeroutput>.</para>
<para>If you want to use either of these transparency methods to display a temporary overlay like for example a notification, the <ref refid="group__window_1ga7fb0be51407783b41adbf5bec0b09d80" kindref="member">GLFW_FLOATING</ref> and <ref refid="group__window_1ga88981797d29800808ec242274ab5c03a" kindref="member">GLFW_MOUSE_PASSTHROUGH</ref> window hints and attributes may be useful.</para>
</sect2>
<sect2 id="window_guide_1window_attribs">
<title>Window attributes</title>
<para>Windows have a number of attributes that can be returned using <ref refid="group__window_1ga1bb0c7e100418e284dbb800789c63d40" kindref="member">glfwGetWindowAttrib</ref>. Some reflect state that may change as a result of user interaction, (e.g. whether it has input focus), while others reflect inherent properties of the window (e.g. what kind of border it has). Some are related to the window and others to its OpenGL or OpenGL ES context.</para>
<para><programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__window_1ga1bb0c7e100418e284dbb800789c63d40" kindref="member">glfwGetWindowAttrib</ref>(window,<sp/><ref refid="group__window_1ga54ddb14825a1541a56e22afb5f832a9e" kindref="member">GLFW_FOCUSED</ref>))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>window<sp/>has<sp/>input<sp/>focus</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>The <ref refid="window_guide_1GLFW_DECORATED_attrib" kindref="member">GLFW_DECORATED</ref>, <ref refid="window_guide_1GLFW_RESIZABLE_attrib" kindref="member">GLFW_RESIZABLE</ref>, <ref refid="window_guide_1GLFW_FLOATING_attrib" kindref="member">GLFW_FLOATING</ref>, <ref refid="window_guide_1GLFW_AUTO_ICONIFY_attrib" kindref="member">GLFW_AUTO_ICONIFY</ref> and <ref refid="window_guide_1GLFW_FOCUS_ON_SHOW_attrib" kindref="member">GLFW_FOCUS_ON_SHOW</ref> window attributes can be changed with <ref refid="group__window_1gad39f43f07856efcf3d656426a9284c75" kindref="member">glfwSetWindowAttrib</ref>.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1gad39f43f07856efcf3d656426a9284c75" kindref="member">glfwSetWindowAttrib</ref>(window,<sp/><ref refid="group__window_1gadba13c7a1b3aa40831eb2beedbd5bd1d" kindref="member">GLFW_RESIZABLE</ref>,<sp/><ref refid="group__init_1gac877fe3b627d21ef3a0a23e0a73ba8c5" kindref="member">GLFW_FALSE</ref>);</highlight></codeline>
</programlisting></para>
<sect3 id="window_guide_1window_attribs_wnd">
<title>Window related attributes</title>
<para><anchor id="window_guide_1GLFW_FOCUSED_attrib"/><bold>GLFW_FOCUSED</bold> indicates whether the specified window has input focus. See <ref refid="window_guide_1window_focus" kindref="member">Window input focus</ref> for details.</para>
<para><anchor id="window_guide_1GLFW_ICONIFIED_attrib"/><bold>GLFW_ICONIFIED</bold> indicates whether the specified window is iconified. See <ref refid="window_guide_1window_iconify" kindref="member">Window iconification</ref> for details.</para>
<para><anchor id="window_guide_1GLFW_MAXIMIZED_attrib"/><bold>GLFW_MAXIMIZED</bold> indicates whether the specified window is maximized. See <ref refid="window_guide_1window_maximize" kindref="member">Window maximization</ref> for details.</para>
<para><anchor id="window_guide_1GLFW_HOVERED_attrib"/><bold>GLFW_HOVERED</bold> indicates whether the cursor is currently directly over the content area of the window, with no other windows between. See <ref refid="input_guide_1cursor_enter" kindref="member">Cursor enter/leave events</ref> for details.</para>
<para><anchor id="window_guide_1GLFW_VISIBLE_attrib"/><bold>GLFW_VISIBLE</bold> indicates whether the specified window is visible. See <ref refid="window_guide_1window_hide" kindref="member">Window visibility</ref> for details.</para>
<para><anchor id="window_guide_1GLFW_RESIZABLE_attrib"/><bold>GLFW_RESIZABLE</bold> indicates whether the specified window is resizable <emphasis>by the user</emphasis>. This can be set before creation with the <ref refid="window_guide_1GLFW_RESIZABLE_hint" kindref="member">GLFW_RESIZABLE</ref> window hint or after with <ref refid="group__window_1gad39f43f07856efcf3d656426a9284c75" kindref="member">glfwSetWindowAttrib</ref>.</para>
<para><anchor id="window_guide_1GLFW_DECORATED_attrib"/><bold>GLFW_DECORATED</bold> indicates whether the specified window has decorations such as a border, a close widget, etc. This can be set before creation with the <ref refid="window_guide_1GLFW_DECORATED_hint" kindref="member">GLFW_DECORATED</ref> window hint or after with <ref refid="group__window_1gad39f43f07856efcf3d656426a9284c75" kindref="member">glfwSetWindowAttrib</ref>.</para>
<para><anchor id="window_guide_1GLFW_AUTO_ICONIFY_attrib"/><bold>GLFW_AUTO_ICONIFY</bold> indicates whether the specified full screen window is iconified on focus loss, a close widget, etc. This can be set before creation with the <ref refid="window_guide_1GLFW_AUTO_ICONIFY_hint" kindref="member">GLFW_AUTO_ICONIFY</ref> window hint or after with <ref refid="group__window_1gad39f43f07856efcf3d656426a9284c75" kindref="member">glfwSetWindowAttrib</ref>.</para>
<para><anchor id="window_guide_1GLFW_FLOATING_attrib"/><bold>GLFW_FLOATING</bold> indicates whether the specified window is floating, also called topmost or always-on-top. This can be set before creation with the <ref refid="window_guide_1GLFW_FLOATING_hint" kindref="member">GLFW_FLOATING</ref> window hint or after with <ref refid="group__window_1gad39f43f07856efcf3d656426a9284c75" kindref="member">glfwSetWindowAttrib</ref>.</para>
<para><anchor id="window_guide_1GLFW_TRANSPARENT_FRAMEBUFFER_attrib"/><bold>GLFW_TRANSPARENT_FRAMEBUFFER</bold> indicates whether the specified window has a transparent framebuffer, i.e. the window contents is composited with the background using the window framebuffer alpha channel. See <ref refid="window_guide_1window_transparency" kindref="member">Window transparency</ref> for details.</para>
<para><anchor id="window_guide_1GLFW_FOCUS_ON_SHOW_attrib"/><bold>GLFW_FOCUS_ON_SHOW</bold> specifies whether the window will be given input focus when <ref refid="group__window_1ga7945bcdff9e5e058cf36505d6873ed8c" kindref="member">glfwShowWindow</ref> is called. This can be set before creation with the <ref refid="window_guide_1GLFW_FOCUS_ON_SHOW_hint" kindref="member">GLFW_FOCUS_ON_SHOW</ref> window hint or after with <ref refid="group__window_1gad39f43f07856efcf3d656426a9284c75" kindref="member">glfwSetWindowAttrib</ref>.</para>
<para><anchor id="window_guide_1GLFW_MOUSE_PASSTHROUGH_attrib"/><bold>GLFW_MOUSE_PASSTHROUGH</bold> specifies whether the window is transparent to mouse input, letting any mouse events pass through to whatever window is behind it. This can be set before creation with the <ref refid="window_guide_1GLFW_MOUSE_PASSTHROUGH_hint" kindref="member">GLFW_MOUSE_PASSTHROUGH</ref> window hint or after with <ref refid="group__window_1gad39f43f07856efcf3d656426a9284c75" kindref="member">glfwSetWindowAttrib</ref>. This is only supported for undecorated windows. Decorated windows with this enabled will behave differently between platforms.</para>
</sect3>
<sect3 id="window_guide_1window_attribs_ctx">
<title>Context related attributes</title>
<para><anchor id="window_guide_1GLFW_CLIENT_API_attrib"/><bold>GLFW_CLIENT_API</bold> indicates the client API provided by the window&apos;s context; either <computeroutput>GLFW_OPENGL_API</computeroutput>, <computeroutput>GLFW_OPENGL_ES_API</computeroutput> or <computeroutput>GLFW_NO_API</computeroutput>.</para>
<para><anchor id="window_guide_1GLFW_CONTEXT_CREATION_API_attrib"/><bold>GLFW_CONTEXT_CREATION_API</bold> indicates the context creation API used to create the window&apos;s context; either <computeroutput>GLFW_NATIVE_CONTEXT_API</computeroutput>, <computeroutput>GLFW_EGL_CONTEXT_API</computeroutput> or <computeroutput>GLFW_OSMESA_CONTEXT_API</computeroutput>.</para>
<para><anchor id="window_guide_1GLFW_CONTEXT_VERSION_MAJOR_attrib"/><anchor id="window_guide_1GLFW_CONTEXT_VERSION_MINOR_attrib"/><anchor id="window_guide_1GLFW_CONTEXT_REVISION_attrib"/><bold>GLFW_CONTEXT_VERSION_MAJOR</bold>, <bold>GLFW_CONTEXT_VERSION_MINOR</bold> and <bold>GLFW_CONTEXT_REVISION</bold> indicate the client API version of the window&apos;s context.</para>
<para><simplesect kind="note"><para>Do not confuse these attributes with <computeroutput>GLFW_VERSION_MAJOR</computeroutput>, <computeroutput>GLFW_VERSION_MINOR</computeroutput> and <computeroutput>GLFW_VERSION_REVISION</computeroutput> which provide the API version of the GLFW header.</para>
</simplesect>
<anchor id="window_guide_1GLFW_OPENGL_FORWARD_COMPAT_attrib"/><bold>GLFW_OPENGL_FORWARD_COMPAT</bold> is <computeroutput>GLFW_TRUE</computeroutput> if the window&apos;s context is an OpenGL forward-compatible one, or <computeroutput>GLFW_FALSE</computeroutput> otherwise.</para>
<para><anchor id="window_guide_1GLFW_CONTEXT_DEBUG_attrib"/><anchor id="window_guide_1GLFW_OPENGL_DEBUG_CONTEXT_attrib"/><bold>GLFW_CONTEXT_DEBUG</bold> is <computeroutput>GLFW_TRUE</computeroutput> if the window&apos;s context is in debug mode, or <computeroutput>GLFW_FALSE</computeroutput> otherwise.</para>
<para><simplesect kind="par"><title></title><para>This is the new name, introduced in GLFW 3.4. The older <computeroutput>GLFW_OPENGL_DEBUG_CONTEXT</computeroutput> name is also available for compatibility.</para>
</simplesect>
<anchor id="window_guide_1GLFW_OPENGL_PROFILE_attrib"/><bold>GLFW_OPENGL_PROFILE</bold> indicates the OpenGL profile used by the context. This is <computeroutput>GLFW_OPENGL_CORE_PROFILE</computeroutput> or <computeroutput>GLFW_OPENGL_COMPAT_PROFILE</computeroutput> if the context uses a known profile, or <computeroutput>GLFW_OPENGL_ANY_PROFILE</computeroutput> if the OpenGL profile is unknown or the context is an OpenGL ES context. Note that the returned profile may not match the profile bits of the context flags, as GLFW will try other means of detecting the profile when no bits are set.</para>
<para><anchor id="window_guide_1GLFW_CONTEXT_RELEASE_BEHAVIOR_attrib"/><bold>GLFW_CONTEXT_RELEASE_BEHAVIOR</bold> indicates the release used by the context. Possible values are one of <computeroutput>GLFW_ANY_RELEASE_BEHAVIOR</computeroutput>, <computeroutput>GLFW_RELEASE_BEHAVIOR_FLUSH</computeroutput> or <computeroutput>GLFW_RELEASE_BEHAVIOR_NONE</computeroutput>. If the behavior is <computeroutput>GLFW_ANY_RELEASE_BEHAVIOR</computeroutput>, the default behavior of the context creation API will be used. If the behavior is <computeroutput>GLFW_RELEASE_BEHAVIOR_FLUSH</computeroutput>, the pipeline will be flushed whenever the context is released from being the current one. If the behavior is <computeroutput>GLFW_RELEASE_BEHAVIOR_NONE</computeroutput>, the pipeline will not be flushed on release.</para>
<para><anchor id="window_guide_1GLFW_CONTEXT_NO_ERROR_attrib"/><bold>GLFW_CONTEXT_NO_ERROR</bold> indicates whether errors are generated by the context. Possible values are <computeroutput>GLFW_TRUE</computeroutput> and <computeroutput>GLFW_FALSE</computeroutput>. If enabled, situations that would have generated errors instead cause undefined behavior.</para>
<para><anchor id="window_guide_1GLFW_CONTEXT_ROBUSTNESS_attrib"/><bold>GLFW_CONTEXT_ROBUSTNESS</bold> indicates the robustness strategy used by the context. This is <computeroutput>GLFW_LOSE_CONTEXT_ON_RESET</computeroutput> or <computeroutput>GLFW_NO_RESET_NOTIFICATION</computeroutput> if the window&apos;s context supports robustness, or <computeroutput>GLFW_NO_ROBUSTNESS</computeroutput> otherwise.</para>
</sect3>
<sect3 id="window_guide_1window_attribs_fb">
<title>Framebuffer related attributes</title>
<para>GLFW does not expose attributes of the default framebuffer (i.e. the framebuffer attached to the window) as these can be queried directly with either OpenGL, OpenGL ES or Vulkan.</para>
<para>If you are using version 3.0 or later of OpenGL or OpenGL ES, the <computeroutput>glGetFramebufferAttachmentParameteriv</computeroutput> function can be used to retrieve the number of bits for the red, green, blue, alpha, depth and stencil buffer channels. Otherwise, the <computeroutput>glGetIntegerv</computeroutput> function can be used.</para>
<para>The number of MSAA samples are always retrieved with <computeroutput>glGetIntegerv</computeroutput>. For contexts supporting framebuffer objects, the number of samples of the currently bound framebuffer is returned.</para>
<para><table rows="8" cols="3"><row>
<entry thead="yes"><para>Attribute   </para>
</entry><entry thead="yes"><para>glGetIntegerv   </para>
</entry><entry thead="yes"><para>glGetFramebufferAttachmentParameteriv    </para>
</entry></row>
<row>
<entry thead="no"><para>Red bits   </para>
</entry><entry thead="no"><para><computeroutput>GL_RED_BITS</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>Green bits   </para>
</entry><entry thead="no"><para><computeroutput>GL_GREEN_BITS</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>Blue bits   </para>
</entry><entry thead="no"><para><computeroutput>GL_BLUE_BITS</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>Alpha bits   </para>
</entry><entry thead="no"><para><computeroutput>GL_ALPHA_BITS</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>Depth bits   </para>
</entry><entry thead="no"><para><computeroutput>GL_DEPTH_BITS</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>Stencil bits   </para>
</entry><entry thead="no"><para><computeroutput>GL_STENCIL_BITS</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para>MSAA samples   </para>
</entry><entry thead="no"><para><computeroutput>GL_SAMPLES</computeroutput>   </para>
</entry><entry thead="no"><para><emphasis>Not provided by this function</emphasis>   </para>
</entry></row>
</table>
</para>
<para>When calling <computeroutput>glGetFramebufferAttachmentParameteriv</computeroutput>, the red, green, blue and alpha sizes are queried from the <computeroutput>GL_BACK_LEFT</computeroutput>, while the depth and stencil sizes are queried from the <computeroutput>GL_DEPTH</computeroutput> and <computeroutput>GL_STENCIL</computeroutput> attachments, respectively.</para>
</sect3>
</sect2>
</sect1>
<sect1 id="window_guide_1buffer_swap">
<title>Buffer swapping</title>
<para>GLFW windows are by default double buffered. That means that you have two rendering buffers; a front buffer and a back buffer. The front buffer is the one being displayed and the back buffer the one you render to.</para>
<para>When the entire frame has been rendered, it is time to swap the back and the front buffers in order to display what has been rendered and begin rendering a new frame. This is done with <ref refid="group__window_1gafb827800eedbfcbc97b1e5408df668d7" kindref="member">glfwSwapBuffers</ref>.</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1gafb827800eedbfcbc97b1e5408df668d7" kindref="member">glfwSwapBuffers</ref>(window);</highlight></codeline>
</programlisting></para>
<para>Sometimes it can be useful to select when the buffer swap will occur. With the function <ref refid="group__context_1ga12a595c06947cec4967c6e1f14210a8a" kindref="member">glfwSwapInterval</ref> it is possible to select the minimum number of monitor refreshes the driver should wait from the time <ref refid="group__window_1gafb827800eedbfcbc97b1e5408df668d7" kindref="member">glfwSwapBuffers</ref> was called before swapping the buffers:</para>
<para><programlisting><codeline><highlight class="normal"><ref refid="group__context_1ga12a595c06947cec4967c6e1f14210a8a" kindref="member">glfwSwapInterval</ref>(1);</highlight></codeline>
</programlisting></para>
<para>If the interval is zero, the swap will take place immediately when <ref refid="group__window_1gafb827800eedbfcbc97b1e5408df668d7" kindref="member">glfwSwapBuffers</ref> is called without waiting for a refresh. Otherwise at least interval retraces will pass between each buffer swap. Using a swap interval of zero can be useful for benchmarking purposes, when it is not desirable to measure the time it takes to wait for the vertical retrace. However, a swap interval of one lets you avoid tearing.</para>
<para>Note that this may not work on all machines, as some drivers have user-controlled settings that override any swap interval the application requests.</para>
<para>A context that supports either the <computeroutput>WGL_EXT_swap_control_tear</computeroutput> or the <computeroutput>GLX_EXT_swap_control_tear</computeroutput> extension also accepts <emphasis>negative</emphasis> swap intervals, which allows the driver to swap immediately even if a frame arrives a little bit late. This trades the risk of visible tears for greater framerate stability. You can check for these extensions with <ref refid="group__context_1ga9a28c712d35f9e43534e1d03b051c04c" kindref="member">glfwExtensionSupported</ref>. </para>
</sect1>
    </detaileddescription>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/docs/window.dox"/>
  </compounddef>
</doxygen>
