<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="triangle-vulkan_8c" kind="file" language="C++">
    <compoundname>triangle-vulkan.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">assert.h</includes>
    <includes local="no">signal.h</includes>
    <includes refid="vulkan_8h" local="no">glad/vulkan.h</includes>
    <includes local="no">GLFW/glfw3.h</includes>
    <incdepgraph>
      <node id="9">
        <label>glfw/deps/glad/vk_platform.h</label>
        <link refid="vk__platform_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>glad/vulkan.h</label>
        <link refid="vulkan_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>stdint.h</label>
        <link refid="stdint_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c</label>
        <link refid="triangle-vulkan_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>GLFW/glfw3.h</label>
      </node>
      <node id="6">
        <label>assert.h</label>
      </node>
      <node id="12">
        <label>limits.h</label>
      </node>
      <node id="7">
        <label>signal.h</label>
      </node>
      <node id="5">
        <label>stdbool.h</label>
      </node>
      <node id="10">
        <label>stddef.h</label>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="4">
        <label>string.h</label>
      </node>
      <node id="13">
        <label>wchar.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structtexture__object" prot="public">texture_object</innerclass>
    <innerclass refid="struct_swapchain_buffers" prot="public">SwapchainBuffers</innerclass>
    <innerclass refid="structdemo" prot="public">demo</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="triangle-vulkan_8c_1a088324ad8995e3eb76024e3e79083d48" prot="public" static="no">
        <name>GLFW_INCLUDE_NONE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="45" column="10" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="triangle-vulkan_8c_1a889c754b96e13c9a94c431b8c10b7153" prot="public" static="no">
        <name>DEMO_TEXTURE_COUNT</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="48" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="triangle-vulkan_8c_1aca6d606eef84a7f729b71b8abad8f074" prot="public" static="no">
        <name>VERTEX_BUFFER_BIND_ID</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="49" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="triangle-vulkan_8c_1ab5541e08a357bb88cd008693b6ffc6db" prot="public" static="no">
        <name>APP_SHORT_NAME</name>
        <initializer>&quot;tri&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="50" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="triangle-vulkan_8c_1a7ddc1be37ecfdff9eaaaa045820a96ad" prot="public" static="no">
        <name>APP_LONG_NAME</name>
        <initializer>&quot;The Vulkan Triangle Demo Program&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="51" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="triangle-vulkan_8c_1a25f003de16c08a4888b69f619d70f427" prot="public" static="no">
        <name>ARRAY_SIZE</name>
        <param><defname>a</defname></param>
        <initializer>(sizeof(a) / sizeof(a[0]))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="53" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="triangle-vulkan_8c_1ab33dabc77056cb02bf8609c97d49716b" prot="public" static="no">
        <name>U_ASSERT_ONLY</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="58" column="10" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="triangle-vulkan_8c_1a28fe14fddb8a99da1b8a644308d1a901" prot="public" static="no">
        <name>ERR_EXIT</name>
        <param><defname>err_msg</defname></param>
        <param><defname>err_class</defname></param>
        <initializer>    do {                                                                       \
        printf(err_msg);                                                       \
        fflush(stdout);                                                        \
        exit(1);                                                               \
    } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="61" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="61" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="triangle-vulkan_8c_1ab52cb635250a98f5ed92ab01beb83a88" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t fragShaderCode[]</definition>
        <argsstring>[]</argsstring>
        <name>fragShaderCode</name>
        <initializer>= {
    0x07230203,0x00010000,0x00080007,0x00000014,0x00000000,0x00020011,0x00000001,0x0006000b,
    0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
    0x0007000f,0x00000004,0x00000004,0x6e69616d,0x00000000,0x00000009,0x00000011,0x00030010,
    0x00000004,0x00000007,0x00030003,0x00000002,0x00000190,0x00090004,0x415f4c47,0x735f4252,
    0x72617065,0x5f657461,0x64616873,0x6f5f7265,0x63656a62,0x00007374,0x00090004,0x415f4c47,
    0x735f4252,0x69646168,0x6c5f676e,0x75676e61,0x5f656761,0x70303234,0x006b6361,0x00040005,
    0x00000004,0x6e69616d,0x00000000,0x00050005,0x00000009,0x61724675,0x6c6f4367,0x0000726f,
    0x00030005,0x0000000d,0x00786574,0x00050005,0x00000011,0x63786574,0x64726f6f,0x00000000,
    0x00040047,0x00000009,0x0000001e,0x00000000,0x00040047,0x0000000d,0x00000022,0x00000000,
    0x00040047,0x0000000d,0x00000021,0x00000000,0x00040047,0x00000011,0x0000001e,0x00000000,
    0x00020013,0x00000002,0x00030021,0x00000003,0x00000002,0x00030016,0x00000006,0x00000020,
    0x00040017,0x00000007,0x00000006,0x00000004,0x00040020,0x00000008,0x00000003,0x00000007,
    0x0004003b,0x00000008,0x00000009,0x00000003,0x00090019,0x0000000a,0x00000006,0x00000001,
    0x00000000,0x00000000,0x00000000,0x00000001,0x00000000,0x0003001b,0x0000000b,0x0000000a,
    0x00040020,0x0000000c,0x00000000,0x0000000b,0x0004003b,0x0000000c,0x0000000d,0x00000000,
    0x00040017,0x0000000f,0x00000006,0x00000002,0x00040020,0x00000010,0x00000001,0x0000000f,
    0x0004003b,0x00000010,0x00000011,0x00000001,0x00050036,0x00000002,0x00000004,0x00000000,
    0x00000003,0x000200f8,0x00000005,0x0004003d,0x0000000b,0x0000000e,0x0000000d,0x0004003d,
    0x0000000f,0x00000012,0x00000011,0x00050057,0x00000007,0x00000013,0x0000000e,0x00000012,
    0x0003003e,0x00000009,0x00000013,0x000100fd,0x00010038
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="73" column="23" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="triangle-vulkan_8c_1aee2e79a86094e0e9a3134d59e695d586" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t vertShaderCode[]</definition>
        <argsstring>[]</argsstring>
        <name>vertShaderCode</name>
        <initializer>= {
    0x07230203,0x00010000,0x00080007,0x00000018,0x00000000,0x00020011,0x00000001,0x0006000b,
    0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
    0x0009000f,0x00000000,0x00000004,0x6e69616d,0x00000000,0x00000009,0x0000000b,0x00000010,
    0x00000014,0x00030003,0x00000002,0x00000190,0x00090004,0x415f4c47,0x735f4252,0x72617065,
    0x5f657461,0x64616873,0x6f5f7265,0x63656a62,0x00007374,0x00090004,0x415f4c47,0x735f4252,
    0x69646168,0x6c5f676e,0x75676e61,0x5f656761,0x70303234,0x006b6361,0x00040005,0x00000004,
    0x6e69616d,0x00000000,0x00050005,0x00000009,0x63786574,0x64726f6f,0x00000000,0x00040005,
    0x0000000b,0x72747461,0x00000000,0x00060005,0x0000000e,0x505f6c67,0x65567265,0x78657472,
    0x00000000,0x00060006,0x0000000e,0x00000000,0x505f6c67,0x7469736f,0x006e6f69,0x00030005,
    0x00000010,0x00000000,0x00030005,0x00000014,0x00736f70,0x00040047,0x00000009,0x0000001e,
    0x00000000,0x00040047,0x0000000b,0x0000001e,0x00000001,0x00050048,0x0000000e,0x00000000,
    0x0000000b,0x00000000,0x00030047,0x0000000e,0x00000002,0x00040047,0x00000014,0x0000001e,
    0x00000000,0x00020013,0x00000002,0x00030021,0x00000003,0x00000002,0x00030016,0x00000006,
    0x00000020,0x00040017,0x00000007,0x00000006,0x00000002,0x00040020,0x00000008,0x00000003,
    0x00000007,0x0004003b,0x00000008,0x00000009,0x00000003,0x00040020,0x0000000a,0x00000001,
    0x00000007,0x0004003b,0x0000000a,0x0000000b,0x00000001,0x00040017,0x0000000d,0x00000006,
    0x00000004,0x0003001e,0x0000000e,0x0000000d,0x00040020,0x0000000f,0x00000003,0x0000000e,
    0x0004003b,0x0000000f,0x00000010,0x00000003,0x00040015,0x00000011,0x00000020,0x00000001,
    0x0004002b,0x00000011,0x00000012,0x00000000,0x00040020,0x00000013,0x00000001,0x0000000d,
    0x0004003b,0x00000013,0x00000014,0x00000001,0x00040020,0x00000016,0x00000003,0x0000000d,
    0x00050036,0x00000002,0x00000004,0x00000000,0x00000003,0x000200f8,0x00000005,0x0004003d,
    0x00000007,0x0000000c,0x0000000b,0x0003003e,0x00000009,0x0000000c,0x0004003d,0x0000000d,
    0x00000015,0x00000014,0x00050041,0x00000016,0x00000017,0x00000010,0x00000012,0x0003003e,
    0x00000017,0x00000015,0x000100fd,0x00010038
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="96" column="23" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="triangle-vulkan_8c_1aa2a7e938c1d845c6a71f43750db0fd07" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int validation_error</definition>
        <argsstring></argsstring>
        <name>validation_error</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="134" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="134" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="triangle-vulkan_8c_1a26ab4abd7e695d27ada5bdd3b062f54c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLADapiproc</type>
        <definition>static GLADapiproc glad_vulkan_callback</definition>
        <argsstring>(const char *name, void *user)</argsstring>
        <name>glad_vulkan_callback</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="68" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1aceb348ca75acc3d014a6b94ac3452e57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VKAPI_ATTR VkBool32 VKAPI_CALL</type>
        <definition>VKAPI_ATTR VkBool32 VKAPI_CALL BreakCallback</definition>
        <argsstring>(VkFlags msgFlags, VkDebugReportObjectTypeEXT objType, uint64_t srcObject, size_t location, int32_t msgCode, const char *pLayerPrefix, const char *pMsg, void *pUserData)</argsstring>
        <name>BreakCallback</name>
        <param>
          <type>VkFlags</type>
          <declname>msgFlags</declname>
        </param>
        <param>
          <type>VkDebugReportObjectTypeEXT</type>
          <declname>objType</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>srcObject</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>location</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>msgCode</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pLayerPrefix</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pMsg</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>pUserData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="137" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="137" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1a4e3e0fcb987c805f9d82039a8af2485c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VKAPI_ATTR VkBool32 VKAPI_CALL</type>
        <definition>VKAPI_ATTR VkBool32 VKAPI_CALL dbgFunc</definition>
        <argsstring>(VkFlags msgFlags, VkDebugReportObjectTypeEXT objType, uint64_t srcObject, size_t location, int32_t msgCode, const char *pLayerPrefix, const char *pMsg, void *pUserData)</argsstring>
        <name>dbgFunc</name>
        <param>
          <type>VkFlags</type>
          <declname>msgFlags</declname>
        </param>
        <param>
          <type>VkDebugReportObjectTypeEXT</type>
          <declname>objType</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>srcObject</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>location</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>msgCode</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pLayerPrefix</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pMsg</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>pUserData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="236" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="236" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1ac51a47d75843a542182cb6c2e997c67a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void demo_resize</definition>
        <argsstring>(struct demo *demo)</argsstring>
        <name>demo_resize</name>
        <param>
          <type>struct <ref refid="structdemo" kindref="compound">demo</ref> *</type>
          <declname>demo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="2068" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="2068" bodyend="2117" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" declline="270" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1aff6bdb11d121e68bf2e3eecc2945ca3b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool memory_type_from_properties</definition>
        <argsstring>(struct demo *demo, uint32_t typeBits, VkFlags requirements_mask, uint32_t *typeIndex)</argsstring>
        <name>memory_type_from_properties</name>
        <param>
          <type>struct <ref refid="structdemo" kindref="compound">demo</ref> *</type>
          <declname>demo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>typeBits</declname>
        </param>
        <param>
          <type>VkFlags</type>
          <declname>requirements_mask</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>typeIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="272" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="272" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1a7a35f4639d32b3ac59dd725668a363ba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void demo_flush_init_cmd</definition>
        <argsstring>(struct demo *demo)</argsstring>
        <name>demo_flush_init_cmd</name>
        <param>
          <type>struct <ref refid="structdemo" kindref="compound">demo</ref> *</type>
          <declname>demo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="292" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="292" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1a78e02f1c21c1ee412b77fe42e0b9f272" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void demo_set_image_layout</definition>
        <argsstring>(struct demo *demo, VkImage image, VkImageAspectFlags aspectMask, VkImageLayout old_image_layout, VkImageLayout new_image_layout, VkAccessFlagBits srcAccessMask)</argsstring>
        <name>demo_set_image_layout</name>
        <param>
          <type>struct <ref refid="structdemo" kindref="compound">demo</ref> *</type>
          <declname>demo</declname>
        </param>
        <param>
          <type>VkImage</type>
          <declname>image</declname>
        </param>
        <param>
          <type>VkImageAspectFlags</type>
          <declname>aspectMask</declname>
        </param>
        <param>
          <type>VkImageLayout</type>
          <declname>old_image_layout</declname>
        </param>
        <param>
          <type>VkImageLayout</type>
          <declname>new_image_layout</declname>
        </param>
        <param>
          <type>VkAccessFlagBits</type>
          <declname>srcAccessMask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="323" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="323" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1af04e914bfcd02ea01e45bcfb0c932ed4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void demo_draw_build_cmd</definition>
        <argsstring>(struct demo *demo)</argsstring>
        <name>demo_draw_build_cmd</name>
        <param>
          <type>struct <ref refid="structdemo" kindref="compound">demo</ref> *</type>
          <declname>demo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="393" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="393" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1a68587107d1c17fe6680e438488b9a616" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void demo_draw</definition>
        <argsstring>(struct demo *demo)</argsstring>
        <name>demo_draw</name>
        <param>
          <type>struct <ref refid="structdemo" kindref="compound">demo</ref> *</type>
          <declname>demo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="489" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="489" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1a0c4cc92dc1a3456d6cca76e3187f2010" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void demo_prepare_buffers</definition>
        <argsstring>(struct demo *demo)</argsstring>
        <name>demo_prepare_buffers</name>
        <param>
          <type>struct <ref refid="structdemo" kindref="compound">demo</ref> *</type>
          <declname>demo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="579" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="579" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1a3569c83afeb4ecc4d8d797af29ce89ed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void demo_prepare_depth</definition>
        <argsstring>(struct demo *demo)</argsstring>
        <name>demo_prepare_depth</name>
        <param>
          <type>struct <ref refid="structdemo" kindref="compound">demo</ref> *</type>
          <declname>demo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="737" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="737" bodyend="810"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1a59f437fe2f984c2b83edefd1c46c235d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void demo_prepare_texture_image</definition>
        <argsstring>(struct demo *demo, const uint32_t *tex_colors, struct texture_object *tex_obj, VkImageTiling tiling, VkImageUsageFlags usage, VkFlags required_props)</argsstring>
        <name>demo_prepare_texture_image</name>
        <param>
          <type>struct <ref refid="structdemo" kindref="compound">demo</ref> *</type>
          <declname>demo</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>tex_colors</declname>
        </param>
        <param>
          <type>struct <ref refid="structtexture__object" kindref="compound">texture_object</ref> *</type>
          <declname>tex_obj</declname>
        </param>
        <param>
          <type>VkImageTiling</type>
          <declname>tiling</declname>
        </param>
        <param>
          <type>VkImageUsageFlags</type>
          <declname>usage</declname>
        </param>
        <param>
          <type>VkFlags</type>
          <declname>required_props</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="813" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="813" bodyend="900"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1a0fa06dc47c11b41c98ad7acd4d9a62a2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void demo_destroy_texture_image</definition>
        <argsstring>(struct demo *demo, struct texture_object *tex_obj)</argsstring>
        <name>demo_destroy_texture_image</name>
        <param>
          <type>struct <ref refid="structdemo" kindref="compound">demo</ref> *</type>
          <declname>demo</declname>
        </param>
        <param>
          <type>struct <ref refid="structtexture__object" kindref="compound">texture_object</ref> *</type>
          <declname>tex_obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="902" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="902" bodyend="907"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1a0316bd7d613330a9963098b02a6396d7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void demo_prepare_textures</definition>
        <argsstring>(struct demo *demo)</argsstring>
        <name>demo_prepare_textures</name>
        <param>
          <type>struct <ref refid="structdemo" kindref="compound">demo</ref> *</type>
          <declname>demo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="909" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="909" bodyend="1031"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1a2860329aece35c414deb54aa4a24d76a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void demo_prepare_vertices</definition>
        <argsstring>(struct demo *demo)</argsstring>
        <name>demo_prepare_vertices</name>
        <param>
          <type>struct <ref refid="structdemo" kindref="compound">demo</ref> *</type>
          <declname>demo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="1033" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="1033" bodyend="1111"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1a36308c10e305d94d63e96fc82be78950" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void demo_prepare_descriptor_layout</definition>
        <argsstring>(struct demo *demo)</argsstring>
        <name>demo_prepare_descriptor_layout</name>
        <param>
          <type>struct <ref refid="structdemo" kindref="compound">demo</ref> *</type>
          <declname>demo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="1113" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="1113" bodyend="1143"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1a4ac6098487e1fc2305847f666891cdec" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void demo_prepare_render_pass</definition>
        <argsstring>(struct demo *demo)</argsstring>
        <name>demo_prepare_render_pass</name>
        <param>
          <type>struct <ref refid="structdemo" kindref="compound">demo</ref> *</type>
          <declname>demo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="1145" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="1145" bodyend="1205"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1ac84b7987a06b675aa5701e61229f7933" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkShaderModule</type>
        <definition>static VkShaderModule demo_prepare_shader_module</definition>
        <argsstring>(struct demo *demo, const void *code, size_t size)</argsstring>
        <name>demo_prepare_shader_module</name>
        <param>
          <type>struct <ref refid="structdemo" kindref="compound">demo</ref> *</type>
          <declname>demo</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>code</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="1208" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="1208" bodyend="1223"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1a655ca24aa4632443170f2ff7f0911027" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkShaderModule</type>
        <definition>static VkShaderModule demo_prepare_vs</definition>
        <argsstring>(struct demo *demo)</argsstring>
        <name>demo_prepare_vs</name>
        <param>
          <type>struct <ref refid="structdemo" kindref="compound">demo</ref> *</type>
          <declname>demo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="1225" column="23" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="1225" bodyend="1232"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1ae0fc6781c15fea0ac17e118b7cc0d183" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkShaderModule</type>
        <definition>static VkShaderModule demo_prepare_fs</definition>
        <argsstring>(struct demo *demo)</argsstring>
        <name>demo_prepare_fs</name>
        <param>
          <type>struct <ref refid="structdemo" kindref="compound">demo</ref> *</type>
          <declname>demo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="1234" column="23" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="1234" bodyend="1241"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1aa80cd8877b6b5d20217c451b207ca9d9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void demo_prepare_pipeline</definition>
        <argsstring>(struct demo *demo)</argsstring>
        <name>demo_prepare_pipeline</name>
        <param>
          <type>struct <ref refid="structdemo" kindref="compound">demo</ref> *</type>
          <declname>demo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="1243" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="1243" bodyend="1359"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1a4ee7f5efc65c5972db015c6be8cda380" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void demo_prepare_descriptor_pool</definition>
        <argsstring>(struct demo *demo)</argsstring>
        <name>demo_prepare_descriptor_pool</name>
        <param>
          <type>struct <ref refid="structdemo" kindref="compound">demo</ref> *</type>
          <declname>demo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="1361" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="1361" bodyend="1378"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1ac1957f225fabd1755a0064169fa5f6ba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void demo_prepare_descriptor_set</definition>
        <argsstring>(struct demo *demo)</argsstring>
        <name>demo_prepare_descriptor_set</name>
        <param>
          <type>struct <ref refid="structdemo" kindref="compound">demo</ref> *</type>
          <declname>demo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="1380" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="1380" bodyend="1410"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1a3a72610dc44a370494307b568ef3abd6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void demo_prepare_framebuffers</definition>
        <argsstring>(struct demo *demo)</argsstring>
        <name>demo_prepare_framebuffers</name>
        <param>
          <type>struct <ref refid="structdemo" kindref="compound">demo</ref> *</type>
          <declname>demo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="1412" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="1412" bodyend="1439"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1a0fcfc933d495ab4fcf98493677e3d8da" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void demo_prepare</definition>
        <argsstring>(struct demo *demo)</argsstring>
        <name>demo_prepare</name>
        <param>
          <type>struct <ref refid="structdemo" kindref="compound">demo</ref> *</type>
          <declname>demo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="1441" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="1441" bodyend="1476"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1a7ac99d89c1312d264710fef9afbc7cb5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void demo_error_callback</definition>
        <argsstring>(int error, const char *description)</argsstring>
        <name>demo_error_callback</name>
        <param>
          <type>int</type>
          <declname>error</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>description</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="1478" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="1478" bodyend="1481"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1abafba04969893b1e332523a832a2de50" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void demo_key_callback</definition>
        <argsstring>(GLFWwindow *window, int key, int scancode, int action, int mods)</argsstring>
        <name>demo_key_callback</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <param>
          <type>int</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scancode</declname>
        </param>
        <param>
          <type>int</type>
          <declname>action</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mods</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="1483" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="1483" bodyend="1486"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1afff67e0133aac850adef8e8a7c56198b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void demo_refresh_callback</definition>
        <argsstring>(GLFWwindow *window)</argsstring>
        <name>demo_refresh_callback</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="1488" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="1488" bodyend="1491"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1a9a1adfc84e14dabc49f42b0e0b360181" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void demo_resize_callback</definition>
        <argsstring>(GLFWwindow *window, int width, int height)</argsstring>
        <name>demo_resize_callback</name>
        <param>
          <type><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref> *</type>
          <declname>window</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="1493" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="1493" bodyend="1498"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1a8fb1a4c54cb4307dda563a41fb31459b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void demo_run</definition>
        <argsstring>(struct demo *demo)</argsstring>
        <name>demo_run</name>
        <param>
          <type>struct <ref refid="structdemo" kindref="compound">demo</ref> *</type>
          <declname>demo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="1500" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="1500" bodyend="1519"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1a3553c2367998ea3c060aa8f3d64ed155" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void demo_create_window</definition>
        <argsstring>(struct demo *demo)</argsstring>
        <name>demo_create_window</name>
        <param>
          <type>struct <ref refid="structdemo" kindref="compound">demo</ref> *</type>
          <declname>demo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="1521" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="1521" bodyend="1540"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1a4fc675c127f32887d2c2fa96d76da356" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkBool32</type>
        <definition>static VkBool32 demo_check_layers</definition>
        <argsstring>(uint32_t check_count, const char **check_names, uint32_t layer_count, VkLayerProperties *layers)</argsstring>
        <name>demo_check_layers</name>
        <param>
          <type>uint32_t</type>
          <declname>check_count</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>check_names</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>layer_count</declname>
        </param>
        <param>
          <type><ref refid="struct_vk_layer_properties" kindref="compound">VkLayerProperties</ref> *</type>
          <declname>layers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="1546" column="17" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="1546" bodyend="1564"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1abdcd6d1f2fdbb957fd5c0337d86a286c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void demo_init_vk</definition>
        <argsstring>(struct demo *demo)</argsstring>
        <name>demo_init_vk</name>
        <param>
          <type>struct <ref refid="structdemo" kindref="compound">demo</ref> *</type>
          <declname>demo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="1566" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="1566" bodyend="1823"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1a2520bf47e8473ffd978c3aea1e9e02d2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void demo_init_device</definition>
        <argsstring>(struct demo *demo)</argsstring>
        <name>demo_init_device</name>
        <param>
          <type>struct <ref refid="structdemo" kindref="compound">demo</ref> *</type>
          <declname>demo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="1825" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="1825" bodyend="1857"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1ab8af4815cac383b0436928fe474b98b3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void demo_init_vk_swapchain</definition>
        <argsstring>(struct demo *demo)</argsstring>
        <name>demo_init_vk_swapchain</name>
        <param>
          <type>struct <ref refid="structdemo" kindref="compound">demo</ref> *</type>
          <declname>demo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="1859" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="1859" bodyend="1952"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1ad89af5ea893ea45fdcd5478c0eb8edde" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void demo_init_connection</definition>
        <argsstring>(struct demo *demo)</argsstring>
        <name>demo_init_connection</name>
        <param>
          <type>struct <ref refid="structdemo" kindref="compound">demo</ref> *</type>
          <declname>demo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="1954" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="1954" bodyend="1970"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1adbd1eb5442da829aaa7cef4233e01e97" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void demo_init</definition>
        <argsstring>(struct demo *demo, const int argc, const char *argv[])</argsstring>
        <name>demo_init</name>
        <param>
          <type>struct <ref refid="structdemo" kindref="compound">demo</ref> *</type>
          <declname>demo</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="1972" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="1972" bodyend="2012"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1ae1040d749c8bf35f9b48f04879e65928" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void demo_cleanup</definition>
        <argsstring>(struct demo *demo)</argsstring>
        <name>demo_cleanup</name>
        <param>
          <type>struct <ref refid="structdemo" kindref="compound">demo</ref> *</type>
          <declname>demo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="2014" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="2014" bodyend="2066"/>
      </memberdef>
      <memberdef kind="function" id="triangle-vulkan_8c_1ad53223b8779f25caeddb70a3b9172967" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(const int argc, const char *argv[])</argsstring>
        <name>main</name>
        <param>
          <type>const int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" line="2119" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c" bodystart="2119" bodyend="2132"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015-2016<sp/>The<sp/>Khronos<sp/>Group<sp/>Inc.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015-2016<sp/>Valve<sp/>Corporation</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015-2016<sp/>LunarG,<sp/>Inc.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>Author:<sp/>Chia-I<sp/>Wu<sp/>&lt;olvaffe@gmail.com&gt;</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>Author:<sp/>Cody<sp/>Northrop<sp/>&lt;cody@lunarg.com&gt;</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>Author:<sp/>Courtney<sp/>Goeltzenleuchter<sp/>&lt;courtney@LunarG.com&gt;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>Author:<sp/>Ian<sp/>Elliott<sp/>&lt;ian@LunarG.com&gt;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>Author:<sp/>Jon<sp/>Ashburn<sp/>&lt;jon@lunarg.com&gt;</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>Author:<sp/>Piers<sp/>Daniell<sp/>&lt;pdaniell@nvidia.com&gt;</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>Author:<sp/>Gwan-gyeong<sp/>Mun<sp/>&lt;elongbug@gmail.com&gt;</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>Porter:<sp/>Camilla<sp/>Löwy<sp/>&lt;elmindreda@glfw.org&gt;</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>Draw<sp/>a<sp/>textured<sp/>triangle<sp/>with<sp/>depth<sp/>testing.<sp/><sp/>This<sp/>is<sp/>written<sp/>against<sp/>Intel</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>ICD.<sp/><sp/>It<sp/>does<sp/>not<sp/>do<sp/>state<sp/>transition<sp/>nor<sp/>object<sp/>memory<sp/>binding<sp/>like<sp/>it</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>should.<sp/><sp/>It<sp/>also<sp/>does<sp/>no<sp/>error<sp/>checking.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;glad/vulkan.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GLFW_INCLUDE_NONE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;GLFW/glfw3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEMO_TEXTURE_COUNT<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VERTEX_BUFFER_BIND_ID<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>APP_SHORT_NAME<sp/>&quot;tri&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>APP_LONG_NAME<sp/>&quot;The<sp/>Vulkan<sp/>Triangle<sp/>Demo<sp/>Program&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARRAY_SIZE(a)<sp/>(sizeof(a)<sp/>/<sp/>sizeof(a[0]))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NDEBUG)<sp/>&amp;&amp;<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>U_ASSERT_ONLY<sp/>__attribute__((unused))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>U_ASSERT_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ERR_EXIT(err_msg,<sp/>err_class)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(err_msg);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fflush(stdout);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GLADapiproc<sp/>glad_vulkan_callback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user)</highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>glfwGetInstanceProcAddress((VkInstance)<sp/>user,<sp/>name);</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>fragShaderCode[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>0x07230203,0x00010000,0x00080007,0x00000014,0x00000000,0x00020011,0x00000001,0x0006000b,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>0x0007000f,0x00000004,0x00000004,0x6e69616d,0x00000000,0x00000009,0x00000011,0x00030010,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000004,0x00000007,0x00030003,0x00000002,0x00000190,0x00090004,0x415f4c47,0x735f4252,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>0x72617065,0x5f657461,0x64616873,0x6f5f7265,0x63656a62,0x00007374,0x00090004,0x415f4c47,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>0x735f4252,0x69646168,0x6c5f676e,0x75676e61,0x5f656761,0x70303234,0x006b6361,0x00040005,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000004,0x6e69616d,0x00000000,0x00050005,0x00000009,0x61724675,0x6c6f4367,0x0000726f,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00030005,0x0000000d,0x00786574,0x00050005,0x00000011,0x63786574,0x64726f6f,0x00000000,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00040047,0x00000009,0x0000001e,0x00000000,0x00040047,0x0000000d,0x00000022,0x00000000,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00040047,0x0000000d,0x00000021,0x00000000,0x00040047,0x00000011,0x0000001e,0x00000000,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00020013,0x00000002,0x00030021,0x00000003,0x00000002,0x00030016,0x00000006,0x00000020,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00040017,0x00000007,0x00000006,0x00000004,0x00040020,0x00000008,0x00000003,0x00000007,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>0x0004003b,0x00000008,0x00000009,0x00000003,0x00090019,0x0000000a,0x00000006,0x00000001,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000000,0x00000000,0x00000000,0x00000001,0x00000000,0x0003001b,0x0000000b,0x0000000a,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00040020,0x0000000c,0x00000000,0x0000000b,0x0004003b,0x0000000c,0x0000000d,0x00000000,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00040017,0x0000000f,0x00000006,0x00000002,0x00040020,0x00000010,0x00000001,0x0000000f,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>0x0004003b,0x00000010,0x00000011,0x00000001,0x00050036,0x00000002,0x00000004,0x00000000,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000003,0x000200f8,0x00000005,0x0004003d,0x0000000b,0x0000000e,0x0000000d,0x0004003d,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>0x0000000f,0x00000012,0x00000011,0x00050057,0x00000007,0x00000013,0x0000000e,0x00000012,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>0x0003003e,0x00000009,0x00000013,0x000100fd,0x00010038</highlight></codeline>
<codeline lineno="94"><highlight class="normal">};</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>vertShaderCode[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>0x07230203,0x00010000,0x00080007,0x00000018,0x00000000,0x00020011,0x00000001,0x0006000b,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>0x0009000f,0x00000000,0x00000004,0x6e69616d,0x00000000,0x00000009,0x0000000b,0x00000010,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000014,0x00030003,0x00000002,0x00000190,0x00090004,0x415f4c47,0x735f4252,0x72617065,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>0x5f657461,0x64616873,0x6f5f7265,0x63656a62,0x00007374,0x00090004,0x415f4c47,0x735f4252,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>0x69646168,0x6c5f676e,0x75676e61,0x5f656761,0x70303234,0x006b6361,0x00040005,0x00000004,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>0x6e69616d,0x00000000,0x00050005,0x00000009,0x63786574,0x64726f6f,0x00000000,0x00040005,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>0x0000000b,0x72747461,0x00000000,0x00060005,0x0000000e,0x505f6c67,0x65567265,0x78657472,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000000,0x00060006,0x0000000e,0x00000000,0x505f6c67,0x7469736f,0x006e6f69,0x00030005,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000010,0x00000000,0x00030005,0x00000014,0x00736f70,0x00040047,0x00000009,0x0000001e,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000000,0x00040047,0x0000000b,0x0000001e,0x00000001,0x00050048,0x0000000e,0x00000000,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>0x0000000b,0x00000000,0x00030047,0x0000000e,0x00000002,0x00040047,0x00000014,0x0000001e,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000000,0x00020013,0x00000002,0x00030021,0x00000003,0x00000002,0x00030016,0x00000006,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000020,0x00040017,0x00000007,0x00000006,0x00000002,0x00040020,0x00000008,0x00000003,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000007,0x0004003b,0x00000008,0x00000009,0x00000003,0x00040020,0x0000000a,0x00000001,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000007,0x0004003b,0x0000000a,0x0000000b,0x00000001,0x00040017,0x0000000d,0x00000006,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000004,0x0003001e,0x0000000e,0x0000000d,0x00040020,0x0000000f,0x00000003,0x0000000e,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>0x0004003b,0x0000000f,0x00000010,0x00000003,0x00040015,0x00000011,0x00000020,0x00000001,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>0x0004002b,0x00000011,0x00000012,0x00000000,0x00040020,0x00000013,0x00000001,0x0000000d,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>0x0004003b,0x00000013,0x00000014,0x00000001,0x00040020,0x00000016,0x00000003,0x0000000d,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00050036,0x00000002,0x00000004,0x00000000,0x00000003,0x000200f8,0x00000005,0x0004003d,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000007,0x0000000c,0x0000000b,0x0003003e,0x00000009,0x0000000c,0x0004003d,0x0000000d,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000015,0x00000014,0x00050041,0x00000016,0x00000017,0x00000010,0x00000012,0x0003003e,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000017,0x00000015,0x000100fd,0x00010038</highlight></codeline>
<codeline lineno="121"><highlight class="normal">};</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="structtexture__object" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtexture__object" kindref="compound">texture_object</ref><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSampler<sp/>sampler;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImage<sp/>image;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImageLayout<sp/>imageLayout;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDeviceMemory<sp/>mem;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImageView<sp/><ref refid="structview" kindref="compound">view</ref>;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>tex_width,<sp/>tex_height;</highlight></codeline>
<codeline lineno="132"><highlight class="normal">};</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>validation_error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal">VKAPI_ATTR<sp/>VkBool32<sp/>VKAPI_CALL</highlight></codeline>
<codeline lineno="137"><highlight class="normal">BreakCallback(VkFlags<sp/>msgFlags,<sp/>VkDebugReportObjectTypeEXT<sp/>objType,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>srcObject,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>location,<sp/>int32_t<sp/>msgCode,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pLayerPrefix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pMsg,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pUserData)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>DebugBreak();</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">raise</highlight><highlight class="normal">(SIGTRAP);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="struct_swapchain_buffers" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImage<sp/>image;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandBuffer<sp/>cmd;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImageView<sp/><ref refid="structview" kindref="compound">view</ref>;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}<sp/><ref refid="struct_swapchain_buffers" kindref="compound">SwapchainBuffers</ref>;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="structdemo" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdemo" kindref="compound">demo</ref><sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>window;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSurfaceKHR<sp/>surface;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_staging_buffer;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>VkInstance<sp/>inst;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPhysicalDevice<sp/>gpu;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDevice<sp/>device;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>VkQueue<sp/>queue;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_physical_device_properties" kindref="compound">VkPhysicalDeviceProperties</ref><sp/>gpu_props;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_physical_device_features" kindref="compound">VkPhysicalDeviceFeatures</ref><sp/>gpu_features;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_queue_family_properties" kindref="compound">VkQueueFamilyProperties</ref><sp/>*queue_props;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>graphics_queue_node_index;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>enabled_extension_count;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>enabled_layer_count;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*extension_names[64];</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*enabled_layers[64];</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/>height;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>VkFormat<sp/>format;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>VkColorSpaceKHR<sp/>color_space;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>swapchainImageCount;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSwapchainKHR<sp/>swapchain;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_swapchain_buffers" kindref="compound">SwapchainBuffers</ref><sp/>*buffers;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandPool<sp/>cmd_pool;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkFormat<sp/>format;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkImage<sp/>image;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkDeviceMemory<sp/>mem;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkImageView<sp/><ref refid="structview" kindref="compound">view</ref>;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>depth;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtexture__object" kindref="compound">texture_object</ref><sp/>textures[DEMO_TEXTURE_COUNT];</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkBuffer<sp/>buf;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkDeviceMemory<sp/>mem;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_pipeline_vertex_input_state_create_info" kindref="compound">VkPipelineVertexInputStateCreateInfo</ref><sp/>vi;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_vertex_input_binding_description" kindref="compound">VkVertexInputBindingDescription</ref><sp/>vi_bindings[1];</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_vertex_input_attribute_description" kindref="compound">VkVertexInputAttributeDescription</ref><sp/>vi_attrs[2];</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>vertices;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandBuffer<sp/>setup_cmd;<sp/></highlight><highlight class="comment">//<sp/>Command<sp/>Buffer<sp/>for<sp/>initialization<sp/>commands</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>VkCommandBuffer<sp/>draw_cmd;<sp/><sp/></highlight><highlight class="comment">//<sp/>Command<sp/>Buffer<sp/>for<sp/>drawing<sp/>commands</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineLayout<sp/>pipeline_layout;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorSetLayout<sp/>desc_layout;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineCache<sp/>pipelineCache;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>VkRenderPass<sp/>render_pass;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipeline<sp/>pipeline;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>VkShaderModule<sp/>vert_shader_module;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>VkShaderModule<sp/>frag_shader_module;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorPool<sp/>desc_pool;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorSet<sp/>desc_set;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>VkFramebuffer<sp/>*framebuffers;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_physical_device_memory_properties" kindref="compound">VkPhysicalDeviceMemoryProperties</ref><sp/>memory_properties;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>curFrame;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>frameCount;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>validate;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_break;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDebugReportCallbackEXT<sp/>msg_callback;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>depthStencil;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>depthIncrement;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>current_buffer;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>queue_count;</highlight></codeline>
<codeline lineno="233"><highlight class="normal">};</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal">VKAPI_ATTR<sp/>VkBool32<sp/>VKAPI_CALL</highlight></codeline>
<codeline lineno="236"><highlight class="normal">dbgFunc(VkFlags<sp/>msgFlags,<sp/>VkDebugReportObjectTypeEXT<sp/>objType,</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>srcObject,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>location,<sp/>int32_t<sp/>msgCode,</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pLayerPrefix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pMsg,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pUserData)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*message<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)malloc(strlen(pMsg)<sp/>+<sp/>100);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(message);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>validation_error<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msgFlags<sp/>&amp;<sp/>VK_DEBUG_REPORT_ERROR_BIT_EXT)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(message,<sp/></highlight><highlight class="stringliteral">&quot;ERROR:<sp/>[%s]<sp/>Code<sp/>%d<sp/>:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>pLayerPrefix,<sp/>msgCode,</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pMsg);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msgFlags<sp/>&amp;<sp/>VK_DEBUG_REPORT_WARNING_BIT_EXT)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(message,<sp/></highlight><highlight class="stringliteral">&quot;WARNING:<sp/>[%s]<sp/>Code<sp/>%d<sp/>:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>pLayerPrefix,<sp/>msgCode,</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pMsg);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>message);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>free(message);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>false<sp/>indicates<sp/>that<sp/>layer<sp/>should<sp/>not<sp/>bail-out<sp/>of<sp/>an</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>API<sp/>call<sp/>that<sp/>had<sp/>validation<sp/>failures.<sp/>This<sp/>may<sp/>mean<sp/>that<sp/>the</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>app<sp/>dies<sp/>inside<sp/>the<sp/>driver<sp/>due<sp/>to<sp/>invalid<sp/>parameter(s).</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>That&apos;s<sp/>what<sp/>would<sp/>happen<sp/>without<sp/>validation<sp/>layers,<sp/>so<sp/>we&apos;ll</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>keep<sp/>that<sp/>behavior<sp/>here.</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Forward<sp/>declaration:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>demo_resize(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdemo" kindref="compound">demo</ref><sp/>*<ref refid="structdemo" kindref="compound">demo</ref>);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>memory_type_from_properties(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdemo" kindref="compound">demo</ref><sp/>*<ref refid="structdemo" kindref="compound">demo</ref>,<sp/>uint32_t<sp/>typeBits,</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkFlags<sp/>requirements_mask,</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*typeIndex)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>i;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Search<sp/>memtypes<sp/>to<sp/>find<sp/>first<sp/>index<sp/>with<sp/>those<sp/>properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>VK_MAX_MEMORY_TYPES;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((typeBits<sp/>&amp;<sp/>1)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Type<sp/>is<sp/>available,<sp/>does<sp/>it<sp/>match<sp/>user<sp/>properties?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="structdemo" kindref="compound">demo</ref>-&gt;memory_properties.memoryTypes[i].propertyFlags<sp/>&amp;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>requirements_mask)<sp/>==<sp/>requirements_mask)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*typeIndex<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typeBits<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>memory<sp/>types<sp/>matched,<sp/>return<sp/>failure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>demo_flush_init_cmd(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdemo" kindref="compound">demo</ref><sp/>*<ref refid="structdemo" kindref="compound">demo</ref>)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>VkResult<sp/>U_ASSERT_ONLY<sp/>err;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;setup_cmd<sp/>==<sp/>VK_NULL_HANDLE)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkEndCommandBuffer(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;setup_cmd);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkCommandBuffer<sp/>cmd_bufs[]<sp/>=<sp/>{<ref refid="structdemo" kindref="compound">demo</ref>-&gt;setup_cmd};</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>VkFence<sp/>nullFence<sp/>=<sp/>{VK_NULL_HANDLE};</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_submit_info" kindref="compound">VkSubmitInfo</ref><sp/>submit_info<sp/>=<sp/>{.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_SUBMIT_INFO,</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pNext<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.waitSemaphoreCount<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pWaitSemaphores<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pWaitDstStageMask<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.commandBufferCount<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pCommandBuffers<sp/>=<sp/>cmd_bufs,</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.signalSemaphoreCount<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pSignalSemaphores<sp/>=<sp/>NULL};</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkQueueSubmit(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;queue,<sp/>1,<sp/>&amp;submit_info,<sp/>nullFence);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkQueueWaitIdle(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;queue);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>vkFreeCommandBuffers(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;cmd_pool,<sp/>1,<sp/>cmd_bufs);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;setup_cmd<sp/>=<sp/>VK_NULL_HANDLE;</highlight></codeline>
<codeline lineno="321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>demo_set_image_layout(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdemo" kindref="compound">demo</ref><sp/>*<ref refid="structdemo" kindref="compound">demo</ref>,<sp/>VkImage<sp/>image,</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkImageAspectFlags<sp/>aspectMask,</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkImageLayout<sp/>old_image_layout,</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkImageLayout<sp/>new_image_layout,</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkAccessFlagBits<sp/>srcAccessMask)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>VkResult<sp/>U_ASSERT_ONLY<sp/>err;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;setup_cmd<sp/>==<sp/>VK_NULL_HANDLE)<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_command_buffer_allocate_info" kindref="compound">VkCommandBufferAllocateInfo</ref><sp/>cmd<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO,</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pNext<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.commandPool<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;cmd_pool,</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.level<sp/>=<sp/>VK_COMMAND_BUFFER_LEVEL_PRIMARY,</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.commandBufferCount<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkAllocateCommandBuffers(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>&amp;cmd,<sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;setup_cmd);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_command_buffer_begin_info" kindref="compound">VkCommandBufferBeginInfo</ref><sp/>cmd_buf_info<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO,</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pNext<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.flags<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pInheritanceInfo<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkBeginCommandBuffer(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;setup_cmd,<sp/>&amp;cmd_buf_info);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_image_memory_barrier" kindref="compound">VkImageMemoryBarrier</ref><sp/>image_memory_barrier<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER,</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pNext<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.srcAccessMask<sp/>=<sp/>srcAccessMask,</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dstAccessMask<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.oldLayout<sp/>=<sp/>old_image_layout,</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.newLayout<sp/>=<sp/>new_image_layout,</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.image<sp/>=<sp/>image,</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.subresourceRange<sp/>=<sp/>{aspectMask,<sp/>0,<sp/>1,<sp/>0,<sp/>1}};</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_image_layout<sp/>==<sp/>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL)<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>sure<sp/>anything<sp/>that<sp/>was<sp/>copying<sp/>from<sp/>this<sp/>image<sp/>has<sp/>completed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image_memory_barrier.dstAccessMask<sp/>=<sp/>VK_ACCESS_TRANSFER_READ_BIT;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_image_layout<sp/>==<sp/>VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL)<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image_memory_barrier.dstAccessMask<sp/>=</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_image_layout<sp/>==<sp/>VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image_memory_barrier.dstAccessMask<sp/>=</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_image_layout<sp/>==<sp/>VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>sure<sp/>any<sp/>Copy<sp/>or<sp/>CPU<sp/>writes<sp/>to<sp/>image<sp/>are<sp/>flushed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image_memory_barrier.dstAccessMask<sp/>=</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_ACCESS_SHADER_READ_BIT<sp/>|<sp/>VK_ACCESS_INPUT_ATTACHMENT_READ_BIT;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_image_memory_barrier" kindref="compound">VkImageMemoryBarrier</ref><sp/>*pmemory_barrier<sp/>=<sp/>&amp;image_memory_barrier;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineStageFlags<sp/>src_stages<sp/>=<sp/>VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineStageFlags<sp/>dest_stages<sp/>=<sp/>VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>vkCmdPipelineBarrier(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;setup_cmd,<sp/>src_stages,<sp/>dest_stages,<sp/>0,<sp/>0,<sp/>NULL,</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>NULL,<sp/>1,<sp/>pmemory_barrier);</highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>demo_draw_build_cmd(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdemo" kindref="compound">demo</ref><sp/>*<ref refid="structdemo" kindref="compound">demo</ref>)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_command_buffer_begin_info" kindref="compound">VkCommandBufferBeginInfo</ref><sp/>cmd_buf_info<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO,</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pNext<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.flags<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pInheritanceInfo<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="union_vk_clear_value" kindref="compound">VkClearValue</ref><sp/>clear_values[2]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[0]<sp/>=<sp/>{.color.float32<sp/>=<sp/>{0.2f,<sp/>0.2f,<sp/>0.2f,<sp/>0.2f}},</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[1]<sp/>=<sp/>{.depthStencil<sp/>=<sp/>{<ref refid="structdemo" kindref="compound">demo</ref>-&gt;depthStencil,<sp/>0}},</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_render_pass_begin_info" kindref="compound">VkRenderPassBeginInfo</ref><sp/>rp_begin<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO,</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pNext<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.renderPass<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;render_pass,</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.framebuffer<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;framebuffers[<ref refid="structdemo" kindref="compound">demo</ref>-&gt;current_buffer],</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.renderArea.offset.x<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.renderArea.offset.y<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.renderArea.extent.width<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;width,</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.renderArea.extent.height<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;height,</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.clearValueCount<sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pClearValues<sp/>=<sp/>clear_values,</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>VkResult<sp/>U_ASSERT_ONLY<sp/>err;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkBeginCommandBuffer(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;draw_cmd,<sp/>&amp;cmd_buf_info);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>LAYOUT_UNDEFINED<sp/>as<sp/>a<sp/>wildcard<sp/>here<sp/>because<sp/>we<sp/>don&apos;t<sp/>care<sp/>what</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>happens<sp/>to<sp/>the<sp/>previous<sp/>contents<sp/>of<sp/>the<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_image_memory_barrier" kindref="compound">VkImageMemoryBarrier</ref><sp/>image_memory_barrier<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER,</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pNext<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.srcAccessMask<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dstAccessMask<sp/>=<sp/>VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT,</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.oldLayout<sp/>=<sp/>VK_IMAGE_LAYOUT_UNDEFINED,</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.newLayout<sp/>=<sp/>VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL,</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.srcQueueFamilyIndex<sp/>=<sp/>VK_QUEUE_FAMILY_IGNORED,</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dstQueueFamilyIndex<sp/>=<sp/>VK_QUEUE_FAMILY_IGNORED,</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.image<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;buffers[<ref refid="structdemo" kindref="compound">demo</ref>-&gt;current_buffer].image,</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.subresourceRange<sp/>=<sp/>{VK_IMAGE_ASPECT_COLOR_BIT,<sp/>0,<sp/>1,<sp/>0,<sp/>1}};</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>vkCmdPipelineBarrier(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;draw_cmd,<sp/>VK_PIPELINE_STAGE_ALL_COMMANDS_BIT,</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT,<sp/>0,<sp/>0,<sp/>NULL,<sp/>0,</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>1,<sp/>&amp;image_memory_barrier);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>vkCmdBeginRenderPass(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;draw_cmd,<sp/>&amp;rp_begin,<sp/>VK_SUBPASS_CONTENTS_INLINE);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>vkCmdBindPipeline(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;draw_cmd,<sp/>VK_PIPELINE_BIND_POINT_GRAPHICS,</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;pipeline);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>vkCmdBindDescriptorSets(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;draw_cmd,<sp/>VK_PIPELINE_BIND_POINT_GRAPHICS,</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;pipeline_layout,<sp/>0,<sp/>1,<sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;desc_set,<sp/>0,</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_viewport" kindref="compound">VkViewport</ref><sp/>viewport;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;viewport,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(viewport));</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>viewport.height<sp/>=<sp/>(float)<ref refid="structdemo" kindref="compound">demo</ref>-&gt;height;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>viewport.width<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<ref refid="structdemo" kindref="compound">demo</ref>-&gt;width;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>viewport.minDepth<sp/>=<sp/>(float)0.0f;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>viewport.maxDepth<sp/>=<sp/>(float)1.0f;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>vkCmdSetViewport(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;draw_cmd,<sp/>0,<sp/>1,<sp/>&amp;viewport);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_rect2_d" kindref="compound">VkRect2D</ref><sp/>scissor;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;scissor,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(scissor));</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>scissor.extent.width<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;width;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>scissor.extent.height<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;height;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>scissor.offset.x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>scissor.offset.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>vkCmdSetScissor(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;draw_cmd,<sp/>0,<sp/>1,<sp/>&amp;scissor);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDeviceSize<sp/>offsets[1]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>vkCmdBindVertexBuffers(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;draw_cmd,<sp/>VERTEX_BUFFER_BIND_ID,<sp/>1,</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;vertices.buf,<sp/>offsets);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>vkCmdDraw(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;draw_cmd,<sp/>3,<sp/>1,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>vkCmdEndRenderPass(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;draw_cmd);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_image_memory_barrier" kindref="compound">VkImageMemoryBarrier</ref><sp/>prePresentBarrier<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER,</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pNext<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.srcAccessMask<sp/>=<sp/>VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT,</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dstAccessMask<sp/>=<sp/>VK_ACCESS_MEMORY_READ_BIT,</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.oldLayout<sp/>=<sp/>VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL,</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.newLayout<sp/>=<sp/>VK_IMAGE_LAYOUT_PRESENT_SRC_KHR,</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.srcQueueFamilyIndex<sp/>=<sp/>VK_QUEUE_FAMILY_IGNORED,</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dstQueueFamilyIndex<sp/>=<sp/>VK_QUEUE_FAMILY_IGNORED,</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.subresourceRange<sp/>=<sp/>{VK_IMAGE_ASPECT_COLOR_BIT,<sp/>0,<sp/>1,<sp/>0,<sp/>1}};</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>prePresentBarrier.image<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;buffers[<ref refid="structdemo" kindref="compound">demo</ref>-&gt;current_buffer].image;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_image_memory_barrier" kindref="compound">VkImageMemoryBarrier</ref><sp/>*pmemory_barrier<sp/>=<sp/>&amp;prePresentBarrier;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>vkCmdPipelineBarrier(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;draw_cmd,<sp/>VK_PIPELINE_STAGE_ALL_COMMANDS_BIT,</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT,<sp/>0,<sp/>0,<sp/>NULL,<sp/>0,</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>1,<sp/>pmemory_barrier);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkEndCommandBuffer(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;draw_cmd);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>demo_draw(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdemo" kindref="compound">demo</ref><sp/>*<ref refid="structdemo" kindref="compound">demo</ref>)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>VkResult<sp/>U_ASSERT_ONLY<sp/>err;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSemaphore<sp/>imageAcquiredSemaphore,<sp/>drawCompleteSemaphore;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_semaphore_create_info" kindref="compound">VkSemaphoreCreateInfo</ref><sp/>semaphoreCreateInfo<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO,</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pNext<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.flags<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkCreateSemaphore(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>&amp;semaphoreCreateInfo,</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>&amp;imageAcquiredSemaphore);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkCreateSemaphore(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>&amp;semaphoreCreateInfo,</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>&amp;drawCompleteSemaphore);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>index<sp/>of<sp/>the<sp/>next<sp/>available<sp/>swapchain<sp/>image:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkAcquireNextImageKHR(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;swapchain,<sp/>UINT64_MAX,</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imageAcquiredSemaphore,</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(VkFence)0,<sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Show<sp/>use<sp/>of<sp/>fence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;current_buffer);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>==<sp/>VK_ERROR_OUT_OF_DATE_KHR)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>demo-&gt;swapchain<sp/>is<sp/>out<sp/>of<sp/>date<sp/>(e.g.<sp/>the<sp/>window<sp/>was<sp/>resized)<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>must<sp/>be<sp/>recreated:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>demo_resize(<ref refid="structdemo" kindref="compound">demo</ref>);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>demo_draw(<ref refid="structdemo" kindref="compound">demo</ref>);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkDestroySemaphore(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>imageAcquiredSemaphore,<sp/>NULL);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkDestroySemaphore(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>drawCompleteSemaphore,<sp/>NULL);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>==<sp/>VK_SUBOPTIMAL_KHR)<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>demo-&gt;swapchain<sp/>is<sp/>not<sp/>as<sp/>optimal<sp/>as<sp/>it<sp/>could<sp/>be,<sp/>but<sp/>the<sp/>platform&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>presentation<sp/>engine<sp/>will<sp/>still<sp/>present<sp/>the<sp/>image<sp/>correctly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>demo_flush_init_cmd(<ref refid="structdemo" kindref="compound">demo</ref>);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>the<sp/>present<sp/>complete<sp/>semaphore<sp/>to<sp/>be<sp/>signaled<sp/>to<sp/>ensure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>the<sp/>image<sp/>won&apos;t<sp/>be<sp/>rendered<sp/>to<sp/>until<sp/>the<sp/>presentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>engine<sp/>has<sp/>fully<sp/>released<sp/>ownership<sp/>to<sp/>the<sp/>application,<sp/>and<sp/>it<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>okay<sp/>to<sp/>render<sp/>to<sp/>the<sp/>image.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>demo_draw_build_cmd(<ref refid="structdemo" kindref="compound">demo</ref>);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>VkFence<sp/>nullFence<sp/>=<sp/>VK_NULL_HANDLE;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineStageFlags<sp/>pipe_stage_flags<sp/>=</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_submit_info" kindref="compound">VkSubmitInfo</ref><sp/>submit_info<sp/>=<sp/>{.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_SUBMIT_INFO,</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pNext<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.waitSemaphoreCount<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pWaitSemaphores<sp/>=<sp/>&amp;imageAcquiredSemaphore,</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pWaitDstStageMask<sp/>=<sp/>&amp;pipe_stage_flags,</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.commandBufferCount<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pCommandBuffers<sp/>=<sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;draw_cmd,</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.signalSemaphoreCount<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pSignalSemaphores<sp/>=<sp/>&amp;drawCompleteSemaphore};</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkQueueSubmit(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;queue,<sp/>1,<sp/>&amp;submit_info,<sp/>nullFence);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_present_info_k_h_r" kindref="compound">VkPresentInfoKHR</ref><sp/>present<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PRESENT_INFO_KHR,</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pNext<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.waitSemaphoreCount<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pWaitSemaphores<sp/>=<sp/>&amp;drawCompleteSemaphore,</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.swapchainCount<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pSwapchains<sp/>=<sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;swapchain,</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pImageIndices<sp/>=<sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;current_buffer,</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkQueuePresentKHR(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;queue,<sp/>&amp;present);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>==<sp/>VK_ERROR_OUT_OF_DATE_KHR)<sp/>{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>demo-&gt;swapchain<sp/>is<sp/>out<sp/>of<sp/>date<sp/>(e.g.<sp/>the<sp/>window<sp/>was<sp/>resized)<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>must<sp/>be<sp/>recreated:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>demo_resize(<ref refid="structdemo" kindref="compound">demo</ref>);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>==<sp/>VK_SUBOPTIMAL_KHR)<sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>demo-&gt;swapchain<sp/>is<sp/>not<sp/>as<sp/>optimal<sp/>as<sp/>it<sp/>could<sp/>be,<sp/>but<sp/>the<sp/>platform&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>presentation<sp/>engine<sp/>will<sp/>still<sp/>present<sp/>the<sp/>image<sp/>correctly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkQueueWaitIdle(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;queue);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(err<sp/>==<sp/>VK_SUCCESS);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroySemaphore(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>imageAcquiredSemaphore,<sp/>NULL);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroySemaphore(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>drawCompleteSemaphore,<sp/>NULL);</highlight></codeline>
<codeline lineno="577"><highlight class="normal">}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>demo_prepare_buffers(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdemo" kindref="compound">demo</ref><sp/>*<ref refid="structdemo" kindref="compound">demo</ref>)<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>VkResult<sp/>U_ASSERT_ONLY<sp/>err;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSwapchainKHR<sp/>oldSwapchain<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;swapchain;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>the<sp/>surface<sp/>capabilities<sp/>and<sp/>formats</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_surface_capabilities_k_h_r" kindref="compound">VkSurfaceCapabilitiesKHR</ref><sp/>surfCapabilities;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkGetPhysicalDeviceSurfaceCapabilitiesKHR(</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;gpu,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;surface,<sp/>&amp;surfCapabilities);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>presentModeCount;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkGetPhysicalDeviceSurfacePresentModesKHR(</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;gpu,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;surface,<sp/>&amp;presentModeCount,<sp/>NULL);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPresentModeKHR<sp/>*presentModes<sp/>=</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(VkPresentModeKHR<sp/>*)malloc(presentModeCount<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(VkPresentModeKHR));</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(presentModes);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkGetPhysicalDeviceSurfacePresentModesKHR(</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;gpu,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;surface,<sp/>&amp;presentModeCount,<sp/>presentModes);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_extent2_d" kindref="compound">VkExtent2D</ref><sp/>swapchainExtent;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>width<sp/>and<sp/>height<sp/>are<sp/>either<sp/>both<sp/>0xFFFFFFFF,<sp/>or<sp/>both<sp/>not<sp/>0xFFFFFFFF.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(surfCapabilities.currentExtent.width<sp/>==<sp/>0xFFFFFFFF)<sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>surface<sp/>size<sp/>is<sp/>undefined,<sp/>the<sp/>size<sp/>is<sp/>set<sp/>to<sp/>the<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>images<sp/>requested,<sp/>which<sp/>must<sp/>fit<sp/>within<sp/>the<sp/>minimum<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>maximum<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swapchainExtent.width<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;width;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swapchainExtent.height<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;height;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(swapchainExtent.width<sp/>&lt;<sp/>surfCapabilities.minImageExtent.width)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swapchainExtent.width<sp/>=<sp/>surfCapabilities.minImageExtent.width;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(swapchainExtent.width<sp/>&gt;<sp/>surfCapabilities.maxImageExtent.width)<sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swapchainExtent.width<sp/>=<sp/>surfCapabilities.maxImageExtent.width;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(swapchainExtent.height<sp/>&lt;<sp/>surfCapabilities.minImageExtent.height)<sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swapchainExtent.height<sp/>=<sp/>surfCapabilities.minImageExtent.height;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(swapchainExtent.height<sp/>&gt;<sp/>surfCapabilities.maxImageExtent.height)<sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swapchainExtent.height<sp/>=<sp/>surfCapabilities.maxImageExtent.height;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>surface<sp/>size<sp/>is<sp/>defined,<sp/>the<sp/>swap<sp/>chain<sp/>size<sp/>must<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swapchainExtent<sp/>=<sp/>surfCapabilities.currentExtent;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;width<sp/>=<sp/>surfCapabilities.currentExtent.width;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;height<sp/>=<sp/>surfCapabilities.currentExtent.height;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPresentModeKHR<sp/>swapchainPresentMode<sp/>=<sp/>VK_PRESENT_MODE_FIFO_KHR;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>the<sp/>number<sp/>of<sp/>VkImage&apos;s<sp/>to<sp/>use<sp/>in<sp/>the<sp/>swap<sp/>chain.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Application<sp/>desires<sp/>to<sp/>only<sp/>acquire<sp/>1<sp/>image<sp/>at<sp/>a<sp/>time<sp/>(which<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;surfCapabilities.minImageCount&quot;).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>desiredNumOfSwapchainImages<sp/>=<sp/>surfCapabilities.minImageCount;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>maxImageCount<sp/>is<sp/>0,<sp/>we<sp/>can<sp/>ask<sp/>for<sp/>as<sp/>many<sp/>images<sp/>as<sp/>we<sp/>want;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise<sp/>we&apos;re<sp/>limited<sp/>to<sp/>maxImageCount</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((surfCapabilities.maxImageCount<sp/>&gt;<sp/>0)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(desiredNumOfSwapchainImages<sp/>&gt;<sp/>surfCapabilities.maxImageCount))<sp/>{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Application<sp/>must<sp/>settle<sp/>for<sp/>fewer<sp/>images<sp/>than<sp/>desired:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desiredNumOfSwapchainImages<sp/>=<sp/>surfCapabilities.maxImageCount;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSurfaceTransformFlagsKHR<sp/>preTransform;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(surfCapabilities.supportedTransforms<sp/>&amp;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR)<sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>preTransform<sp/>=<sp/>VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>preTransform<sp/>=<sp/>surfCapabilities.currentTransform;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_swapchain_create_info_k_h_r" kindref="compound">VkSwapchainCreateInfoKHR</ref><sp/>swapchain<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR,</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pNext<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.surface<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;surface,</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.minImageCount<sp/>=<sp/>desiredNumOfSwapchainImages,</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.imageFormat<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;format,</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.imageColorSpace<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;color_space,</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.imageExtent<sp/>=</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.width<sp/>=<sp/>swapchainExtent.width,<sp/>.height<sp/>=<sp/>swapchainExtent.height,</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.imageUsage<sp/>=<sp/>VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT,</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.preTransform<sp/>=<sp/>preTransform,</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.compositeAlpha<sp/>=<sp/>VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR,</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.imageArrayLayers<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.imageSharingMode<sp/>=<sp/>VK_SHARING_MODE_EXCLUSIVE,</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.queueFamilyIndexCount<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pQueueFamilyIndices<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.presentMode<sp/>=<sp/>swapchainPresentMode,</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.oldSwapchain<sp/>=<sp/>oldSwapchain,</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.clipped<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>i;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkCreateSwapchainKHR(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>&amp;swapchain,<sp/>NULL,<sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;swapchain);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>just<sp/>re-created<sp/>an<sp/>existing<sp/>swapchain,<sp/>we<sp/>should<sp/>destroy<sp/>the<sp/>old</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>swapchain<sp/>at<sp/>this<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>destroying<sp/>the<sp/>swapchain<sp/>also<sp/>cleans<sp/>up<sp/>all<sp/>its<sp/>associated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>presentable<sp/>images<sp/>once<sp/>the<sp/>platform<sp/>is<sp/>done<sp/>with<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oldSwapchain<sp/>!=<sp/>VK_NULL_HANDLE)<sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkDestroySwapchainKHR(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>oldSwapchain,<sp/>NULL);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkGetSwapchainImagesKHR(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;swapchain,</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;swapchainImageCount,<sp/>NULL);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImage<sp/>*swapchainImages<sp/>=</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(VkImage<sp/>*)malloc(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;swapchainImageCount<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(VkImage));</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(swapchainImages);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkGetSwapchainImagesKHR(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;swapchain,</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;swapchainImageCount,</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swapchainImages);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;buffers<sp/>=<sp/>(<ref refid="struct_swapchain_buffers" kindref="compound">SwapchainBuffers</ref><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_swapchain_buffers" kindref="compound">SwapchainBuffers</ref>)<sp/>*</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;swapchainImageCount);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;buffers);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;swapchainImageCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_image_view_create_info" kindref="compound">VkImageViewCreateInfo</ref><sp/>color_attachment_view<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO,</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pNext<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.format<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;format,</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.components<sp/>=</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.r<sp/>=<sp/>VK_COMPONENT_SWIZZLE_R,</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.g<sp/>=<sp/>VK_COMPONENT_SWIZZLE_G,</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.b<sp/>=<sp/>VK_COMPONENT_SWIZZLE_B,</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.a<sp/>=<sp/>VK_COMPONENT_SWIZZLE_A,</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.subresourceRange<sp/>=<sp/>{.aspectMask<sp/>=<sp/>VK_IMAGE_ASPECT_COLOR_BIT,</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.baseMipLevel<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.levelCount<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.baseArrayLayer<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.layerCount<sp/>=<sp/>1},</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.viewType<sp/>=<sp/>VK_IMAGE_VIEW_TYPE_2D,</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.flags<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;buffers[i].image<sp/>=<sp/>swapchainImages[i];</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color_attachment_view.image<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;buffers[i].image;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkCreateImageView(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>&amp;color_attachment_view,<sp/>NULL,</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;buffers[i].view);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;current_buffer<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULL<sp/>!=<sp/>presentModes)<sp/>{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(presentModes);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="735"><highlight class="normal">}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>demo_prepare_depth(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdemo" kindref="compound">demo</ref><sp/>*<ref refid="structdemo" kindref="compound">demo</ref>)<sp/>{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkFormat<sp/>depth_format<sp/>=<sp/>VK_FORMAT_D16_UNORM;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_image_create_info" kindref="compound">VkImageCreateInfo</ref><sp/>image<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO,</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pNext<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.imageType<sp/>=<sp/>VK_IMAGE_TYPE_2D,</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.format<sp/>=<sp/>depth_format,</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.extent<sp/>=<sp/>{<ref refid="structdemo" kindref="compound">demo</ref>-&gt;width,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;height,<sp/>1},</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.mipLevels<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.arrayLayers<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.samples<sp/>=<sp/>VK_SAMPLE_COUNT_1_BIT,</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.tiling<sp/>=<sp/>VK_IMAGE_TILING_OPTIMAL,</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.usage<sp/>=<sp/>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT,</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.flags<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_memory_allocate_info" kindref="compound">VkMemoryAllocateInfo</ref><sp/>mem_alloc<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO,</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pNext<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.allocationSize<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.memoryTypeIndex<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_image_view_create_info" kindref="compound">VkImageViewCreateInfo</ref><sp/><ref refid="structview" kindref="compound">view</ref><sp/>=<sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO,</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pNext<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.image<sp/>=<sp/>VK_NULL_HANDLE,</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.format<sp/>=<sp/>depth_format,</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.subresourceRange<sp/>=<sp/>{.aspectMask<sp/>=<sp/>VK_IMAGE_ASPECT_DEPTH_BIT,</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.baseMipLevel<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.levelCount<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.baseArrayLayer<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.layerCount<sp/>=<sp/>1},</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.flags<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.viewType<sp/>=<sp/>VK_IMAGE_VIEW_TYPE_2D,</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_memory_requirements" kindref="compound">VkMemoryRequirements</ref><sp/>mem_reqs;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>VkResult<sp/>U_ASSERT_ONLY<sp/>err;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>U_ASSERT_ONLY<sp/>pass;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;depth.format<sp/>=<sp/>depth_format;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>create<sp/>image<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkCreateImage(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>&amp;image,<sp/>NULL,<sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;depth.image);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>memory<sp/>requirements<sp/>for<sp/>this<sp/>object<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>vkGetImageMemoryRequirements(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;depth.image,<sp/>&amp;mem_reqs);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>select<sp/>memory<sp/>size<sp/>and<sp/>type<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>mem_alloc.allocationSize<sp/>=<sp/>mem_reqs.size;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>pass<sp/>=<sp/>memory_type_from_properties(<ref refid="structdemo" kindref="compound">demo</ref>,<sp/>mem_reqs.memoryTypeBits,</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/></highlight><highlight class="comment">/*<sp/>No<sp/>requirements<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;mem_alloc.memoryTypeIndex);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(pass);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>allocate<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkAllocateMemory(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>&amp;mem_alloc,<sp/>NULL,<sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;depth.mem);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bind<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkBindImageMemory(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;depth.image,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;depth.mem,<sp/>0);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>demo_set_image_layout(<ref refid="structdemo" kindref="compound">demo</ref>,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;depth.image,<sp/>VK_IMAGE_ASPECT_DEPTH_BIT,</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_IMAGE_LAYOUT_UNDEFINED,</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL,</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>create<sp/>image<sp/>view<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structview" kindref="compound">view</ref>.image<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;depth.image;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkCreateImageView(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>&amp;<ref refid="structview" kindref="compound">view</ref>,<sp/>NULL,<sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;depth.view);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="810"><highlight class="normal">}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal">demo_prepare_texture_image(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdemo" kindref="compound">demo</ref><sp/>*<ref refid="structdemo" kindref="compound">demo</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*tex_colors,</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtexture__object" kindref="compound">texture_object</ref><sp/>*tex_obj,<sp/>VkImageTiling<sp/>tiling,</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkImageUsageFlags<sp/>usage,<sp/>VkFlags<sp/>required_props)<sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkFormat<sp/>tex_format<sp/>=<sp/>VK_FORMAT_B8G8R8A8_UNORM;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>tex_width<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>tex_height<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>VkResult<sp/>U_ASSERT_ONLY<sp/>err;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>U_ASSERT_ONLY<sp/>pass;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>tex_obj-&gt;tex_width<sp/>=<sp/>tex_width;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>tex_obj-&gt;tex_height<sp/>=<sp/>tex_height;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_image_create_info" kindref="compound">VkImageCreateInfo</ref><sp/>image_create_info<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO,</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pNext<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.imageType<sp/>=<sp/>VK_IMAGE_TYPE_2D,</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.format<sp/>=<sp/>tex_format,</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.extent<sp/>=<sp/>{tex_width,<sp/>tex_height,<sp/>1},</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.mipLevels<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.arrayLayers<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.samples<sp/>=<sp/>VK_SAMPLE_COUNT_1_BIT,</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.tiling<sp/>=<sp/>tiling,</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.usage<sp/>=<sp/>usage,</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.flags<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.initialLayout<sp/>=<sp/>VK_IMAGE_LAYOUT_PREINITIALIZED</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_memory_allocate_info" kindref="compound">VkMemoryAllocateInfo</ref><sp/>mem_alloc<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO,</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pNext<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.allocationSize<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.memoryTypeIndex<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_memory_requirements" kindref="compound">VkMemoryRequirements</ref><sp/>mem_reqs;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkCreateImage(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>&amp;image_create_info,<sp/>NULL,<sp/>&amp;tex_obj-&gt;image);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>vkGetImageMemoryRequirements(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>tex_obj-&gt;image,<sp/>&amp;mem_reqs);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>mem_alloc.allocationSize<sp/>=<sp/>mem_reqs.size;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>pass<sp/>=</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memory_type_from_properties(<ref refid="structdemo" kindref="compound">demo</ref>,<sp/>mem_reqs.memoryTypeBits,</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>required_props,<sp/>&amp;mem_alloc.memoryTypeIndex);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(pass);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>allocate<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkAllocateMemory(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>&amp;mem_alloc,<sp/>NULL,<sp/>&amp;tex_obj-&gt;mem);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bind<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkBindImageMemory(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>tex_obj-&gt;image,<sp/>tex_obj-&gt;mem,<sp/>0);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(required_props<sp/>&amp;<sp/>VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT)<sp/>{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_image_subresource" kindref="compound">VkImageSubresource</ref><sp/>subres<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.aspectMask<sp/>=<sp/>VK_IMAGE_ASPECT_COLOR_BIT,</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.mipLevel<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.arrayLayer<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_subresource_layout" kindref="compound">VkSubresourceLayout</ref><sp/>layout;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkGetImageSubresourceLayout(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>tex_obj-&gt;image,<sp/>&amp;subres,</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;layout);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkMapMemory(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>tex_obj-&gt;mem,<sp/>0,</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mem_alloc.allocationSize,<sp/>0,<sp/>&amp;data);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>tex_height;<sp/>y++)<sp/>{</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*row<sp/>=<sp/>(uint32_t<sp/>*)((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data<sp/>+<sp/>layout.rowPitch<sp/>*<sp/>y);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>tex_width;<sp/>x++)</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row[x]<sp/>=<sp/>tex_colors[(x<sp/>&amp;<sp/>1)<sp/>^<sp/>(y<sp/>&amp;<sp/>1)];</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkUnmapMemory(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>tex_obj-&gt;mem);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/>tex_obj-&gt;imageLayout<sp/>=<sp/>VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>demo_set_image_layout(<ref refid="structdemo" kindref="compound">demo</ref>,<sp/>tex_obj-&gt;image,<sp/>VK_IMAGE_ASPECT_COLOR_BIT,</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_IMAGE_LAYOUT_PREINITIALIZED,<sp/>tex_obj-&gt;imageLayout,</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_ACCESS_HOST_WRITE_BIT);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>setting<sp/>the<sp/>image<sp/>layout<sp/>does<sp/>not<sp/>reference<sp/>the<sp/>actual<sp/>memory<sp/>so<sp/>no<sp/>need</highlight></codeline>
<codeline lineno="899"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>to<sp/>add<sp/>a<sp/>mem<sp/>ref<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal">}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>demo_destroy_texture_image(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdemo" kindref="compound">demo</ref><sp/>*<ref refid="structdemo" kindref="compound">demo</ref>,</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtexture__object" kindref="compound">texture_object</ref><sp/>*tex_obj)<sp/>{</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>clean<sp/>up<sp/>staging<sp/>resources<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyImage(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>tex_obj-&gt;image,<sp/>NULL);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>vkFreeMemory(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>tex_obj-&gt;mem,<sp/>NULL);</highlight></codeline>
<codeline lineno="907"><highlight class="normal">}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>demo_prepare_textures(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdemo" kindref="compound">demo</ref><sp/>*<ref refid="structdemo" kindref="compound">demo</ref>)<sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkFormat<sp/>tex_format<sp/>=<sp/>VK_FORMAT_B8G8R8A8_UNORM;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_format_properties" kindref="compound">VkFormatProperties</ref><sp/>props;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>tex_colors[DEMO_TEXTURE_COUNT][2]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0xffff0000,<sp/>0xff00ff00},</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>i;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>VkResult<sp/>U_ASSERT_ONLY<sp/>err;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/>vkGetPhysicalDeviceFormatProperties(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;gpu,<sp/>tex_format,<sp/>&amp;props);</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>DEMO_TEXTURE_COUNT;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((props.linearTilingFeatures<sp/>&amp;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="structdemo" kindref="compound">demo</ref>-&gt;use_staging_buffer)<sp/>{</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Device<sp/>can<sp/>texture<sp/>using<sp/>linear<sp/>textures<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>demo_prepare_texture_image(</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>,<sp/>tex_colors[i],<sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;textures[i],<sp/>VK_IMAGE_TILING_LINEAR,</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_IMAGE_USAGE_SAMPLED_BIT,</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT<sp/>|</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_MEMORY_PROPERTY_HOST_COHERENT_BIT);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(props.optimalTilingFeatures<sp/>&amp;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT)<sp/>{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Must<sp/>use<sp/>staging<sp/>buffer<sp/>to<sp/>copy<sp/>linear<sp/>texture<sp/>to<sp/>optimized<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtexture__object" kindref="compound">texture_object</ref><sp/>staging_texture;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(&amp;staging_texture,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(staging_texture));</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>demo_prepare_texture_image(</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>,<sp/>tex_colors[i],<sp/>&amp;staging_texture,<sp/>VK_IMAGE_TILING_LINEAR,</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_IMAGE_USAGE_TRANSFER_SRC_BIT,</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT<sp/>|</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_MEMORY_PROPERTY_HOST_COHERENT_BIT);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>demo_prepare_texture_image(</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>,<sp/>tex_colors[i],<sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;textures[i],</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_IMAGE_TILING_OPTIMAL,</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(VK_IMAGE_USAGE_TRANSFER_DST_BIT<sp/>|<sp/>VK_IMAGE_USAGE_SAMPLED_BIT),</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>demo_set_image_layout(<ref refid="structdemo" kindref="compound">demo</ref>,<sp/>staging_texture.image,</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_IMAGE_ASPECT_COLOR_BIT,</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>staging_texture.imageLayout,</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL,</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0);</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>demo_set_image_layout(<ref refid="structdemo" kindref="compound">demo</ref>,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;textures[i].image,</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_IMAGE_ASPECT_COLOR_BIT,</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;textures[i].imageLayout,</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL,</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_image_copy" kindref="compound">VkImageCopy</ref><sp/>copy_region<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.srcSubresource<sp/>=<sp/>{VK_IMAGE_ASPECT_COLOR_BIT,<sp/>0,<sp/>0,<sp/>1},</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.srcOffset<sp/>=<sp/>{0,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dstSubresource<sp/>=<sp/>{VK_IMAGE_ASPECT_COLOR_BIT,<sp/>0,<sp/>0,<sp/>1},</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dstOffset<sp/>=<sp/>{0,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.extent<sp/>=<sp/>{staging_texture.tex_width,</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>staging_texture.tex_height,<sp/>1},</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkCmdCopyImage(</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;setup_cmd,<sp/>staging_texture.image,</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;textures[i].image,</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL,<sp/>1,<sp/>&amp;copy_region);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>demo_set_image_layout(<ref refid="structdemo" kindref="compound">demo</ref>,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;textures[i].image,</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_IMAGE_ASPECT_COLOR_BIT,</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL,</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;textures[i].imageLayout,</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>demo_flush_init_cmd(<ref refid="structdemo" kindref="compound">demo</ref>);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>demo_destroy_texture_image(<ref refid="structdemo" kindref="compound">demo</ref>,<sp/>&amp;staging_texture);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Can&apos;t<sp/>support<sp/>VK_FORMAT_B8G8R8A8_UNORM<sp/>!?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(!</highlight><highlight class="stringliteral">&quot;No<sp/>support<sp/>for<sp/>B8G8R8A8_UNORM<sp/>as<sp/>texture<sp/>image<sp/>format&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_sampler_create_info" kindref="compound">VkSamplerCreateInfo</ref><sp/>sampler<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO,</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pNext<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.magFilter<sp/>=<sp/>VK_FILTER_NEAREST,</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.minFilter<sp/>=<sp/>VK_FILTER_NEAREST,</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.mipmapMode<sp/>=<sp/>VK_SAMPLER_MIPMAP_MODE_NEAREST,</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.addressModeU<sp/>=<sp/>VK_SAMPLER_ADDRESS_MODE_REPEAT,</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.addressModeV<sp/>=<sp/>VK_SAMPLER_ADDRESS_MODE_REPEAT,</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.addressModeW<sp/>=<sp/>VK_SAMPLER_ADDRESS_MODE_REPEAT,</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.mipLodBias<sp/>=<sp/>0.0f,</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.anisotropyEnable<sp/>=<sp/>VK_FALSE,</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.maxAnisotropy<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.compareOp<sp/>=<sp/>VK_COMPARE_OP_NEVER,</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.minLod<sp/>=<sp/>0.0f,</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.maxLod<sp/>=<sp/>0.0f,</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.borderColor<sp/>=<sp/>VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE,</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.unnormalizedCoordinates<sp/>=<sp/>VK_FALSE,</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_image_view_create_info" kindref="compound">VkImageViewCreateInfo</ref><sp/><ref refid="structview" kindref="compound">view</ref><sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO,</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pNext<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.image<sp/>=<sp/>VK_NULL_HANDLE,</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.viewType<sp/>=<sp/>VK_IMAGE_VIEW_TYPE_2D,</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.format<sp/>=<sp/>tex_format,</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.components<sp/>=</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_COMPONENT_SWIZZLE_R,<sp/>VK_COMPONENT_SWIZZLE_G,</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_COMPONENT_SWIZZLE_B,<sp/>VK_COMPONENT_SWIZZLE_A,</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.subresourceRange<sp/>=<sp/>{VK_IMAGE_ASPECT_COLOR_BIT,<sp/>0,<sp/>1,<sp/>0,<sp/>1},</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.flags<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>create<sp/>sampler<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkCreateSampler(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>&amp;sampler,<sp/>NULL,</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;textures[i].sampler);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>create<sp/>image<sp/>view<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structview" kindref="compound">view</ref>.image<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;textures[i].image;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkCreateImageView(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>&amp;<ref refid="structview" kindref="compound">view</ref>,<sp/>NULL,</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;textures[i].view);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1031"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>demo_prepare_vertices(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdemo" kindref="compound">demo</ref><sp/>*<ref refid="structdemo" kindref="compound">demo</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>vb[3][5]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/>position<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>texcoord<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>-1.0f,<sp/>-1.0f,<sp/><sp/>0.25f,<sp/><sp/><sp/><sp/><sp/>0.0f,<sp/>0.0f<sp/>},</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/>1.0f,<sp/>-1.0f,<sp/><sp/>0.25f,<sp/><sp/><sp/><sp/><sp/>1.0f,<sp/>0.0f<sp/>},</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/>0.0f,<sp/><sp/>1.0f,<sp/><sp/>1.0f,<sp/><sp/><sp/><sp/><sp/><sp/>0.5f,<sp/>1.0f<sp/>},</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_buffer_create_info" kindref="compound">VkBufferCreateInfo</ref><sp/>buf_info<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO,</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pNext<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(vb),</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.usage<sp/>=<sp/>VK_BUFFER_USAGE_VERTEX_BUFFER_BIT,</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.flags<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_memory_allocate_info" kindref="compound">VkMemoryAllocateInfo</ref><sp/>mem_alloc<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO,</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pNext<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.allocationSize<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.memoryTypeIndex<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_memory_requirements" kindref="compound">VkMemoryRequirements</ref><sp/>mem_reqs;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/>VkResult<sp/>U_ASSERT_ONLY<sp/>err;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>U_ASSERT_ONLY<sp/>pass;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;vertices,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;vertices));</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkCreateBuffer(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>&amp;buf_info,<sp/>NULL,<sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;vertices.buf);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/>vkGetBufferMemoryRequirements(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;vertices.buf,<sp/>&amp;mem_reqs);</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>mem_alloc.allocationSize<sp/>=<sp/>mem_reqs.size;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/>pass<sp/>=<sp/>memory_type_from_properties(<ref refid="structdemo" kindref="compound">demo</ref>,<sp/>mem_reqs.memoryTypeBits,</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT<sp/>|</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_MEMORY_PROPERTY_HOST_COHERENT_BIT,</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;mem_alloc.memoryTypeIndex);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(pass);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkAllocateMemory(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>&amp;mem_alloc,<sp/>NULL,<sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;vertices.mem);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkMapMemory(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;vertices.mem,<sp/>0,</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mem_alloc.allocationSize,<sp/>0,<sp/>&amp;data);</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(data,<sp/>vb,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(vb));</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>vkUnmapMemory(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;vertices.mem);</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkBindBufferMemory(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;vertices.buf,</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;vertices.mem,<sp/>0);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;vertices.vi.sType<sp/>=</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO;</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;vertices.vi.pNext<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;vertices.vi.vertexBindingDescriptionCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;vertices.vi.pVertexBindingDescriptions<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;vertices.vi_bindings;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;vertices.vi.vertexAttributeDescriptionCount<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;vertices.vi.pVertexAttributeDescriptions<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;vertices.vi_attrs;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;vertices.vi_bindings[0].binding<sp/>=<sp/>VERTEX_BUFFER_BIND_ID;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;vertices.vi_bindings[0].stride<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(vb[0]);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;vertices.vi_bindings[0].inputRate<sp/>=<sp/>VK_VERTEX_INPUT_RATE_VERTEX;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;vertices.vi_attrs[0].binding<sp/>=<sp/>VERTEX_BUFFER_BIND_ID;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;vertices.vi_attrs[0].location<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;vertices.vi_attrs[0].format<sp/>=<sp/>VK_FORMAT_R32G32B32_SFLOAT;</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;vertices.vi_attrs[0].offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;vertices.vi_attrs[1].binding<sp/>=<sp/>VERTEX_BUFFER_BIND_ID;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;vertices.vi_attrs[1].location<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;vertices.vi_attrs[1].format<sp/>=<sp/>VK_FORMAT_R32G32_SFLOAT;</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;vertices.vi_attrs[1].offset<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float)<sp/>*<sp/>3;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>demo_prepare_descriptor_layout(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdemo" kindref="compound">demo</ref><sp/>*<ref refid="structdemo" kindref="compound">demo</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_descriptor_set_layout_binding" kindref="compound">VkDescriptorSetLayoutBinding</ref><sp/>layout_binding<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.binding<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.descriptorType<sp/>=<sp/>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER,</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.descriptorCount<sp/>=<sp/>DEMO_TEXTURE_COUNT,</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.stageFlags<sp/>=<sp/>VK_SHADER_STAGE_FRAGMENT_BIT,</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pImmutableSamplers<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_descriptor_set_layout_create_info" kindref="compound">VkDescriptorSetLayoutCreateInfo</ref><sp/>descriptor_layout<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO,</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pNext<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.bindingCount<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pBindings<sp/>=<sp/>&amp;layout_binding,</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/>VkResult<sp/>U_ASSERT_ONLY<sp/>err;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkCreateDescriptorSetLayout(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>&amp;descriptor_layout,<sp/>NULL,</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;desc_layout);</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_pipeline_layout_create_info" kindref="compound">VkPipelineLayoutCreateInfo</ref><sp/>pPipelineLayoutCreateInfo<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO,</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pNext<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.setLayoutCount<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pSetLayouts<sp/>=<sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;desc_layout,</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkCreatePipelineLayout(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>&amp;pPipelineLayoutCreateInfo,<sp/>NULL,</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;pipeline_layout);</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="1143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>demo_prepare_render_pass(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdemo" kindref="compound">demo</ref><sp/>*<ref refid="structdemo" kindref="compound">demo</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_attachment_description" kindref="compound">VkAttachmentDescription</ref><sp/>attachments[2]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[0]<sp/>=</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.format<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;format,</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.samples<sp/>=<sp/>VK_SAMPLE_COUNT_1_BIT,</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.loadOp<sp/>=<sp/>VK_ATTACHMENT_LOAD_OP_CLEAR,</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.storeOp<sp/>=<sp/>VK_ATTACHMENT_STORE_OP_STORE,</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.stencilLoadOp<sp/>=<sp/>VK_ATTACHMENT_LOAD_OP_DONT_CARE,</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.stencilStoreOp<sp/>=<sp/>VK_ATTACHMENT_STORE_OP_DONT_CARE,</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.initialLayout<sp/>=<sp/>VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL,</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.finalLayout<sp/>=<sp/>VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL,</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[1]<sp/>=</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.format<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;depth.format,</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.samples<sp/>=<sp/>VK_SAMPLE_COUNT_1_BIT,</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.loadOp<sp/>=<sp/>VK_ATTACHMENT_LOAD_OP_CLEAR,</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.storeOp<sp/>=<sp/>VK_ATTACHMENT_STORE_OP_DONT_CARE,</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.stencilLoadOp<sp/>=<sp/>VK_ATTACHMENT_LOAD_OP_DONT_CARE,</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.stencilStoreOp<sp/>=<sp/>VK_ATTACHMENT_STORE_OP_DONT_CARE,</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.initialLayout<sp/>=</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL,</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.finalLayout<sp/>=</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL,</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_attachment_reference" kindref="compound">VkAttachmentReference</ref><sp/>color_reference<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.attachment<sp/>=<sp/>0,<sp/>.layout<sp/>=<sp/>VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL,</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_attachment_reference" kindref="compound">VkAttachmentReference</ref><sp/>depth_reference<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.attachment<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.layout<sp/>=<sp/>VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL,</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_subpass_description" kindref="compound">VkSubpassDescription</ref><sp/>subpass<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pipelineBindPoint<sp/>=<sp/>VK_PIPELINE_BIND_POINT_GRAPHICS,</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.flags<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.inputAttachmentCount<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pInputAttachments<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.colorAttachmentCount<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pColorAttachments<sp/>=<sp/>&amp;color_reference,</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pResolveAttachments<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pDepthStencilAttachment<sp/>=<sp/>&amp;depth_reference,</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.preserveAttachmentCount<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pPreserveAttachments<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_render_pass_create_info" kindref="compound">VkRenderPassCreateInfo</ref><sp/>rp_info<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO,</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pNext<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.attachmentCount<sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pAttachments<sp/>=<sp/>attachments,</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.subpassCount<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pSubpasses<sp/>=<sp/>&amp;subpass,</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dependencyCount<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pDependencies<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/>VkResult<sp/>U_ASSERT_ONLY<sp/>err;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkCreateRenderPass(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>&amp;rp_info,<sp/>NULL,<sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;render_pass);</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="1205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>VkShaderModule</highlight></codeline>
<codeline lineno="1208"><highlight class="normal">demo_prepare_shader_module(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdemo" kindref="compound">demo</ref><sp/>*<ref refid="structdemo" kindref="compound">demo</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*code,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_shader_module_create_info" kindref="compound">VkShaderModuleCreateInfo</ref><sp/>moduleCreateInfo;</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/>VkShaderModule<sp/>module;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/>VkResult<sp/>U_ASSERT_ONLY<sp/>err;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/>moduleCreateInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/>moduleCreateInfo.pNext<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/>moduleCreateInfo.codeSize<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/>moduleCreateInfo.pCode<sp/>=<sp/>code;</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/>moduleCreateInfo.flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkCreateShaderModule(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>&amp;moduleCreateInfo,<sp/>NULL,<sp/>&amp;module);</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>module;</highlight></codeline>
<codeline lineno="1223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>VkShaderModule<sp/>demo_prepare_vs(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdemo" kindref="compound">demo</ref><sp/>*<ref refid="structdemo" kindref="compound">demo</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(vertShaderCode);</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;vert_shader_module<sp/>=</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>demo_prepare_shader_module(<ref refid="structdemo" kindref="compound">demo</ref>,<sp/>vertShaderCode,<sp/>size);</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;vert_shader_module;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>VkShaderModule<sp/>demo_prepare_fs(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdemo" kindref="compound">demo</ref><sp/>*<ref refid="structdemo" kindref="compound">demo</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(fragShaderCode);</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;frag_shader_module<sp/>=</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>demo_prepare_shader_module(<ref refid="structdemo" kindref="compound">demo</ref>,<sp/>fragShaderCode,<sp/>size);</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;frag_shader_module;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>demo_prepare_pipeline(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdemo" kindref="compound">demo</ref><sp/>*<ref refid="structdemo" kindref="compound">demo</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_graphics_pipeline_create_info" kindref="compound">VkGraphicsPipelineCreateInfo</ref><sp/>pipeline;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_pipeline_cache_create_info" kindref="compound">VkPipelineCacheCreateInfo</ref><sp/>pipelineCache;</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_pipeline_vertex_input_state_create_info" kindref="compound">VkPipelineVertexInputStateCreateInfo</ref><sp/>vi;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_pipeline_input_assembly_state_create_info" kindref="compound">VkPipelineInputAssemblyStateCreateInfo</ref><sp/>ia;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_pipeline_rasterization_state_create_info" kindref="compound">VkPipelineRasterizationStateCreateInfo</ref><sp/>rs;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_pipeline_color_blend_state_create_info" kindref="compound">VkPipelineColorBlendStateCreateInfo</ref><sp/>cb;</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_pipeline_depth_stencil_state_create_info" kindref="compound">VkPipelineDepthStencilStateCreateInfo</ref><sp/>ds;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_pipeline_viewport_state_create_info" kindref="compound">VkPipelineViewportStateCreateInfo</ref><sp/>vp;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_pipeline_multisample_state_create_info" kindref="compound">VkPipelineMultisampleStateCreateInfo</ref><sp/>ms;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDynamicState<sp/>dynamicStateEnables[VK_DYNAMIC_STATE_RANGE_SIZE];</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_pipeline_dynamic_state_create_info" kindref="compound">VkPipelineDynamicStateCreateInfo</ref><sp/>dynamicState;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/>VkResult<sp/>U_ASSERT_ONLY<sp/>err;</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(dynamicStateEnables,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>dynamicStateEnables);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;dynamicState,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>dynamicState);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/>dynamicState.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/>dynamicState.pDynamicStates<sp/>=<sp/>dynamicStateEnables;</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;pipeline,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pipeline));</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/>pipeline.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/>pipeline.layout<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;pipeline_layout;</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/>vi<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;vertices.vi;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;ia,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ia));</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/>ia.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/>ia.topology<sp/>=<sp/>VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST;</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;rs,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rs));</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/>rs.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO;</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/>rs.polygonMode<sp/>=<sp/>VK_POLYGON_MODE_FILL;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/>rs.cullMode<sp/>=<sp/>VK_CULL_MODE_BACK_BIT;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/>rs.frontFace<sp/>=<sp/>VK_FRONT_FACE_CLOCKWISE;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/>rs.depthClampEnable<sp/>=<sp/>VK_FALSE;</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/>rs.rasterizerDiscardEnable<sp/>=<sp/>VK_FALSE;</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/>rs.depthBiasEnable<sp/>=<sp/>VK_FALSE;</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/>rs.lineWidth<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;cb,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cb));</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/>cb.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_pipeline_color_blend_attachment_state" kindref="compound">VkPipelineColorBlendAttachmentState</ref><sp/>att_state[1];</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(att_state,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(att_state));</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>att_state[0].colorWriteMask<sp/>=<sp/>0xf;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/>att_state[0].blendEnable<sp/>=<sp/>VK_FALSE;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/>cb.attachmentCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/>cb.pAttachments<sp/>=<sp/>att_state;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;vp,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(vp));</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/>vp.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO;</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/>vp.viewportCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/>dynamicStateEnables[dynamicState.dynamicStateCount++]<sp/>=</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_DYNAMIC_STATE_VIEWPORT;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/>vp.scissorCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/>dynamicStateEnables[dynamicState.dynamicStateCount++]<sp/>=</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_DYNAMIC_STATE_SCISSOR;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;ds,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ds));</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/>ds.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO;</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/>ds.depthTestEnable<sp/>=<sp/>VK_TRUE;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/>ds.depthWriteEnable<sp/>=<sp/>VK_TRUE;</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/>ds.depthCompareOp<sp/>=<sp/>VK_COMPARE_OP_LESS_OR_EQUAL;</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/>ds.depthBoundsTestEnable<sp/>=<sp/>VK_FALSE;</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/>ds.back.failOp<sp/>=<sp/>VK_STENCIL_OP_KEEP;</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/>ds.back.passOp<sp/>=<sp/>VK_STENCIL_OP_KEEP;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/>ds.back.compareOp<sp/>=<sp/>VK_COMPARE_OP_ALWAYS;</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/>ds.stencilTestEnable<sp/>=<sp/>VK_FALSE;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/>ds.front<sp/>=<sp/>ds.back;</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;ms,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ms));</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/>ms.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO;</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/>ms.pSampleMask<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/>ms.rasterizationSamples<sp/>=<sp/>VK_SAMPLE_COUNT_1_BIT;</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Two<sp/>stages:<sp/>vs<sp/>and<sp/>fs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/>pipeline.stageCount<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_pipeline_shader_stage_create_info" kindref="compound">VkPipelineShaderStageCreateInfo</ref><sp/>shaderStages[2];</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;shaderStages,<sp/>0,<sp/>2<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_vk_pipeline_shader_stage_create_info" kindref="compound">VkPipelineShaderStageCreateInfo</ref>));</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/>shaderStages[0].sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/>shaderStages[0].stage<sp/>=<sp/>VK_SHADER_STAGE_VERTEX_BIT;</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/>shaderStages[0].module<sp/>=<sp/>demo_prepare_vs(<ref refid="structdemo" kindref="compound">demo</ref>);</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/>shaderStages[0].pName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;main&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/>shaderStages[1].sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/>shaderStages[1].stage<sp/>=<sp/>VK_SHADER_STAGE_FRAGMENT_BIT;</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/>shaderStages[1].module<sp/>=<sp/>demo_prepare_fs(<ref refid="structdemo" kindref="compound">demo</ref>);</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/>shaderStages[1].pName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;main&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/>pipeline.pVertexInputState<sp/>=<sp/>&amp;vi;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/>pipeline.pInputAssemblyState<sp/>=<sp/>&amp;ia;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/>pipeline.pRasterizationState<sp/>=<sp/>&amp;rs;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/>pipeline.pColorBlendState<sp/>=<sp/>&amp;cb;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/>pipeline.pMultisampleState<sp/>=<sp/>&amp;ms;</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/>pipeline.pViewportState<sp/>=<sp/>&amp;vp;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/>pipeline.pDepthStencilState<sp/>=<sp/>&amp;ds;</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/>pipeline.pStages<sp/>=<sp/>shaderStages;</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/>pipeline.renderPass<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;render_pass;</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/>pipeline.pDynamicState<sp/>=<sp/>&amp;dynamicState;</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;pipelineCache,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pipelineCache));</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/>pipelineCache.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO;</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkCreatePipelineCache(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>&amp;pipelineCache,<sp/>NULL,</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;pipelineCache);</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkCreateGraphicsPipelines(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;pipelineCache,<sp/>1,</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;pipeline,<sp/>NULL,<sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;pipeline);</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyPipelineCache(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;pipelineCache,<sp/>NULL);</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyShaderModule(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;frag_shader_module,<sp/>NULL);</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyShaderModule(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;vert_shader_module,<sp/>NULL);</highlight></codeline>
<codeline lineno="1359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>demo_prepare_descriptor_pool(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdemo" kindref="compound">demo</ref><sp/>*<ref refid="structdemo" kindref="compound">demo</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_descriptor_pool_size" kindref="compound">VkDescriptorPoolSize</ref><sp/>type_count<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type<sp/>=<sp/>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER,</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.descriptorCount<sp/>=<sp/>DEMO_TEXTURE_COUNT,</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_descriptor_pool_create_info" kindref="compound">VkDescriptorPoolCreateInfo</ref><sp/>descriptor_pool<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO,</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pNext<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.maxSets<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.poolSizeCount<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pPoolSizes<sp/>=<sp/>&amp;type_count,</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/>VkResult<sp/>U_ASSERT_ONLY<sp/>err;</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkCreateDescriptorPool(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>&amp;descriptor_pool,<sp/>NULL,</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;desc_pool);</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="1378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>demo_prepare_descriptor_set(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdemo" kindref="compound">demo</ref><sp/>*<ref refid="structdemo" kindref="compound">demo</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_descriptor_image_info" kindref="compound">VkDescriptorImageInfo</ref><sp/>tex_descs[DEMO_TEXTURE_COUNT];</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_write_descriptor_set" kindref="compound">VkWriteDescriptorSet</ref><sp/>write;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/>VkResult<sp/>U_ASSERT_ONLY<sp/>err;</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>i;</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_descriptor_set_allocate_info" kindref="compound">VkDescriptorSetAllocateInfo</ref><sp/>alloc_info<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO,</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pNext<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.descriptorPool<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;desc_pool,</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.descriptorSetCount<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pSetLayouts<sp/>=<sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;desc_layout};</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkAllocateDescriptorSets(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>&amp;alloc_info,<sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;desc_set);</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;tex_descs,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(tex_descs));</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>DEMO_TEXTURE_COUNT;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex_descs[i].sampler<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;textures[i].sampler;</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex_descs[i].imageView<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;textures[i].view;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tex_descs[i].imageLayout<sp/>=<sp/>VK_IMAGE_LAYOUT_GENERAL;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;write,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(write));</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/>write.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/>write.dstSet<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;desc_set;</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/>write.descriptorCount<sp/>=<sp/>DEMO_TEXTURE_COUNT;</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/>write.descriptorType<sp/>=<sp/>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER;</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/>write.pImageInfo<sp/>=<sp/>tex_descs;</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/>vkUpdateDescriptorSets(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>1,<sp/>&amp;write,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="1410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>demo_prepare_framebuffers(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdemo" kindref="compound">demo</ref><sp/>*<ref refid="structdemo" kindref="compound">demo</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImageView<sp/>attachments[2];</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/>attachments[1]<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;depth.view;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_framebuffer_create_info" kindref="compound">VkFramebufferCreateInfo</ref><sp/>fb_info<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO,</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pNext<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.renderPass<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;render_pass,</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.attachmentCount<sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pAttachments<sp/>=<sp/>attachments,</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.width<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;width,</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.height<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;height,</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.layers<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/>VkResult<sp/>U_ASSERT_ONLY<sp/>err;</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>i;</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;framebuffers<sp/>=<sp/>(VkFramebuffer<sp/>*)malloc(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;swapchainImageCount<sp/>*</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(VkFramebuffer));</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;framebuffers);</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;swapchainImageCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attachments[0]<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;buffers[i].view;</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkCreateFramebuffer(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>&amp;fb_info,<sp/>NULL,</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;framebuffers[i]);</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>demo_prepare(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdemo" kindref="compound">demo</ref><sp/>*<ref refid="structdemo" kindref="compound">demo</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/>VkResult<sp/>U_ASSERT_ONLY<sp/>err;</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_command_pool_create_info" kindref="compound">VkCommandPoolCreateInfo</ref><sp/>cmd_pool_info<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO,</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pNext<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.queueFamilyIndex<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;graphics_queue_node_index,</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.flags<sp/>=<sp/>VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT,</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkCreateCommandPool(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>&amp;cmd_pool_info,<sp/>NULL,</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;cmd_pool);</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_command_buffer_allocate_info" kindref="compound">VkCommandBufferAllocateInfo</ref><sp/>cmd<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO,</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pNext<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.commandPool<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;cmd_pool,</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.level<sp/>=<sp/>VK_COMMAND_BUFFER_LEVEL_PRIMARY,</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.commandBufferCount<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkAllocateCommandBuffers(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>&amp;cmd,<sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;draw_cmd);</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/>demo_prepare_buffers(<ref refid="structdemo" kindref="compound">demo</ref>);</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/>demo_prepare_depth(<ref refid="structdemo" kindref="compound">demo</ref>);</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/>demo_prepare_textures(<ref refid="structdemo" kindref="compound">demo</ref>);</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/>demo_prepare_vertices(<ref refid="structdemo" kindref="compound">demo</ref>);</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/>demo_prepare_descriptor_layout(<ref refid="structdemo" kindref="compound">demo</ref>);</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/>demo_prepare_render_pass(<ref refid="structdemo" kindref="compound">demo</ref>);</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/>demo_prepare_pipeline(<ref refid="structdemo" kindref="compound">demo</ref>);</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/>demo_prepare_descriptor_pool(<ref refid="structdemo" kindref="compound">demo</ref>);</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/>demo_prepare_descriptor_set(<ref refid="structdemo" kindref="compound">demo</ref>);</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/>demo_prepare_framebuffers(<ref refid="structdemo" kindref="compound">demo</ref>);</highlight></codeline>
<codeline lineno="1476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>demo_error_callback(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>description)<sp/>{</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;GLFW<sp/>error:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>description);</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="1481"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>demo_key_callback(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>window,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scancode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>action,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mods)<sp/>{</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>GLFW_KEY_ESCAPE<sp/>&amp;&amp;<sp/>action<sp/>==<sp/><ref refid="group__input_1gada11d965c4da13090ad336e030e4d11f" kindref="member">GLFW_RELEASE</ref>)</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__window_1ga1cadeda7a1e2f224e06a8415d30741aa" kindref="member">glfwSetWindowShouldClose</ref>(window,<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref>);</highlight></codeline>
<codeline lineno="1486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>demo_refresh_callback(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>window)<sp/>{</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdemo" kindref="compound">demo</ref>*<sp/><ref refid="structdemo" kindref="compound">demo</ref><sp/>=<sp/><ref refid="group__window_1gad07c1ae8809c4f47e55ad8cc3f60e794" kindref="member">glfwGetWindowUserPointer</ref>(window);</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/>demo_draw(<ref refid="structdemo" kindref="compound">demo</ref>);</highlight></codeline>
<codeline lineno="1491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>demo_resize_callback(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>window,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height)<sp/>{</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdemo" kindref="compound">demo</ref>*<sp/><ref refid="structdemo" kindref="compound">demo</ref><sp/>=<sp/><ref refid="group__window_1gad07c1ae8809c4f47e55ad8cc3f60e794" kindref="member">glfwGetWindowUserPointer</ref>(window);</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;width<sp/>=<sp/>width;</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;height<sp/>=<sp/>height;</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/>demo_resize(<ref refid="structdemo" kindref="compound">demo</ref>);</highlight></codeline>
<codeline lineno="1498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>demo_run(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdemo" kindref="compound">demo</ref><sp/>*<ref refid="structdemo" kindref="compound">demo</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!<ref refid="group__window_1gaa6162f67dfa38b8beda2fea623649332" kindref="member">glfwWindowShouldClose</ref>(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;window))<sp/>{</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__window_1ga872d16e4c77f58c0436f356255920cfc" kindref="member">glfwPollEvents</ref>();</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>demo_draw(<ref refid="structdemo" kindref="compound">demo</ref>);</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;depthStencil<sp/>&gt;<sp/>0.99f)</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;depthIncrement<sp/>=<sp/>-0.001f;</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;depthStencil<sp/>&lt;<sp/>0.8f)</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;depthIncrement<sp/>=<sp/>0.001f;</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;depthStencil<sp/>+=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;depthIncrement;</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>for<sp/>work<sp/>to<sp/>finish<sp/>before<sp/>updating<sp/>MVP.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkDeviceWaitIdle(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device);</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;curFrame++;</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;frameCount<sp/>!=<sp/>INT32_MAX<sp/>&amp;&amp;<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;curFrame<sp/>==<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;frameCount)</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__window_1ga1cadeda7a1e2f224e06a8415d30741aa" kindref="member">glfwSetWindowShouldClose</ref>(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;window,<sp/><ref refid="group__init_1ga2744fbb29b5631bb28802dbe0cf36eba" kindref="member">GLFW_TRUE</ref>);</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>demo_create_window(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdemo" kindref="compound">demo</ref><sp/>*<ref refid="structdemo" kindref="compound">demo</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__window_1ga69c40728499720bef8a49aa925ea0efa" kindref="member">glfwWindowHint</ref>(<ref refid="group__window_1ga649309cf72a3d3de5b1348ca7936c95b" kindref="member">GLFW_CLIENT_API</ref>,<sp/>GLFW_NO_API);</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;window<sp/>=<sp/><ref refid="group__window_1gaaccd00fafe81e2db94e8cdf55721e055" kindref="member">glfwCreateWindow</ref>(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;width,</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;height,</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>APP_LONG_NAME,</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="structdemo" kindref="compound">demo</ref>-&gt;window)<sp/>{</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>didn&apos;t<sp/>work,<sp/>so<sp/>try<sp/>to<sp/>give<sp/>a<sp/>useful<sp/>error:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>create<sp/>a<sp/>window<sp/>in<sp/>which<sp/>to<sp/>draw!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__window_1gacc9e68faee3c1763b54cd9bc405cf43e" kindref="member">glfwSetWindowUserPointer</ref>(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;window,<sp/><ref refid="structdemo" kindref="compound">demo</ref>);</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__window_1ga62bfa902c07a03b8ad9be37da31a4be7" kindref="member">glfwSetWindowRefreshCallback</ref>(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;window,<sp/>demo_refresh_callback);</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__window_1ga41d69f9f263d7b33ea03cf58772b4ea0" kindref="member">glfwSetFramebufferSizeCallback</ref>(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;window,<sp/>demo_resize_callback);</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__input_1gaa4cbcb81b939b8800e44cea971ddae47" kindref="member">glfwSetKeyCallback</ref>(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;window,<sp/>demo_key_callback);</highlight></codeline>
<codeline lineno="1540"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1543"><highlight class="comment"><sp/>*<sp/>Return<sp/>1<sp/>(true)<sp/>if<sp/>all<sp/>layer<sp/>names<sp/>specified<sp/>in<sp/>check_names</highlight></codeline>
<codeline lineno="1544"><highlight class="comment"><sp/>*<sp/>can<sp/>be<sp/>found<sp/>in<sp/>given<sp/>layer<sp/>properties.</highlight></codeline>
<codeline lineno="1545"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>VkBool32<sp/>demo_check_layers(uint32_t<sp/>check_count,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**check_names,</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>layer_count,</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_layer_properties" kindref="compound">VkLayerProperties</ref><sp/>*layers)<sp/>{</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>check_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkBool32<sp/>found<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>layer_count;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(check_names[i],<sp/>layers[j].layerName))<sp/>{</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found)<sp/>{</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>find<sp/>layer:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>check_names[i]);</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1564"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>demo_init_vk(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdemo" kindref="compound">demo</ref><sp/>*<ref refid="structdemo" kindref="compound">demo</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/>VkResult<sp/>err;</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>required_extension_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>instance_extension_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>instance_layer_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>validation_layer_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**required_extensions<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**instance_validation_layers<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;enabled_extension_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;enabled_layer_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*instance_validation_layers_alt1[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;VK_LAYER_LUNARG_standard_validation&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*instance_validation_layers_alt2[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;VK_LAYER_GOOGLE_threading&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;VK_LAYER_LUNARG_parameter_validation&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;VK_LAYER_LUNARG_object_tracker&quot;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="stringliteral">&quot;VK_LAYER_LUNARG_image&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;VK_LAYER_LUNARG_core_validation&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;VK_LAYER_LUNARG_swapchain&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;VK_LAYER_GOOGLE_unique_objects&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"></highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Look<sp/>for<sp/>validation<sp/>layers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/>VkBool32<sp/>validation_found<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;validate)<sp/>{</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkEnumerateInstanceLayerProperties(&amp;instance_layer_count,<sp/>NULL);</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instance_validation_layers<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)<sp/>instance_validation_layers_alt1;</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(instance_layer_count<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_layer_properties" kindref="compound">VkLayerProperties</ref><sp/>*instance_layers<sp/>=</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(<ref refid="struct_vk_layer_properties" kindref="compound">VkLayerProperties</ref>)<sp/>*<sp/>instance_layer_count);</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkEnumerateInstanceLayerProperties(&amp;instance_layer_count,</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instance_layers);</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>validation_found<sp/>=<sp/>demo_check_layers(</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARRAY_SIZE(instance_validation_layers_alt1),</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instance_validation_layers,<sp/>instance_layer_count,</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instance_layers);</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(validation_found)<sp/>{</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;enabled_layer_count<sp/>=<sp/>ARRAY_SIZE(instance_validation_layers_alt1);</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;enabled_layers[0]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;VK_LAYER_LUNARG_standard_validation&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>validation_layer_count<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>alternative<sp/>set<sp/>of<sp/>validation<sp/>layers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instance_validation_layers<sp/>=</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)<sp/>instance_validation_layers_alt2;</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;enabled_layer_count<sp/>=<sp/>ARRAY_SIZE(instance_validation_layers_alt2);</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>validation_found<sp/>=<sp/>demo_check_layers(</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARRAY_SIZE(instance_validation_layers_alt2),</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instance_validation_layers,<sp/>instance_layer_count,</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instance_layers);</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>validation_layer_count<sp/>=</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARRAY_SIZE(instance_validation_layers_alt2);</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>validation_layer_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;enabled_layers[i]<sp/>=<sp/>instance_validation_layers[i];</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(instance_layers);</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!validation_found)<sp/>{</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ERR_EXIT(</highlight><highlight class="stringliteral">&quot;vkEnumerateInstanceLayerProperties<sp/>failed<sp/>to<sp/>find<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;required<sp/>validation<sp/>layer.\n\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Please<sp/>look<sp/>at<sp/>the<sp/>Getting<sp/>Started<sp/>guide<sp/>for<sp/>additional<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;information.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;vkCreateInstance<sp/>Failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Look<sp/>for<sp/>instance<sp/>extensions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/>required_extensions<sp/>=<sp/><ref refid="group__vulkan_1gada152edc5bbbd0c2138728878632fd9c" kindref="member">glfwGetRequiredInstanceExtensions</ref>(&amp;required_extension_count);</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!required_extensions)<sp/>{</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ERR_EXIT(</highlight><highlight class="stringliteral">&quot;glfwGetRequiredInstanceExtensions<sp/>failed<sp/>to<sp/>find<sp/>the<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;platform<sp/>surface<sp/>extensions.\n\nDo<sp/>you<sp/>have<sp/>a<sp/>compatible<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Vulkan<sp/>installable<sp/>client<sp/>driver<sp/>(ICD)<sp/>installed?\nPlease<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;look<sp/>at<sp/>the<sp/>Getting<sp/>Started<sp/>guide<sp/>for<sp/>additional<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;information.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;vkCreateInstance<sp/>Failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>required_extension_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;extension_names[<ref refid="structdemo" kindref="compound">demo</ref>-&gt;enabled_extension_count++]<sp/>=<sp/>required_extensions[i];</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;enabled_extension_count<sp/>&lt;<sp/>64);</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkEnumerateInstanceExtensionProperties(</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>&amp;instance_extension_count,<sp/>NULL);</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(instance_extension_count<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_extension_properties" kindref="compound">VkExtensionProperties</ref><sp/>*instance_extensions<sp/>=</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_vk_extension_properties" kindref="compound">VkExtensionProperties</ref>)<sp/>*<sp/>instance_extension_count);</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkEnumerateInstanceExtensionProperties(</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>&amp;instance_extension_count,<sp/>instance_extensions);</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>instance_extension_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(VK_EXT_DEBUG_REPORT_EXTENSION_NAME,</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instance_extensions[i].extensionName))<sp/>{</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;validate)<sp/>{</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;extension_names[<ref refid="structdemo" kindref="compound">demo</ref>-&gt;enabled_extension_count++]<sp/>=</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_EXT_DEBUG_REPORT_EXTENSION_NAME;</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;enabled_extension_count<sp/>&lt;<sp/>64);</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(instance_extensions);</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_application_info" kindref="compound">VkApplicationInfo</ref><sp/>app<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_APPLICATION_INFO,</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pNext<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pApplicationName<sp/>=<sp/>APP_SHORT_NAME,</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.applicationVersion<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pEngineName<sp/>=<sp/>APP_SHORT_NAME,</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.engineVersion<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.apiVersion<sp/>=<sp/>VK_API_VERSION_1_0,</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_instance_create_info" kindref="compound">VkInstanceCreateInfo</ref><sp/>inst_info<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO,</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pNext<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pApplicationInfo<sp/>=<sp/>&amp;app,</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.enabledLayerCount<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;enabled_layer_count,</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ppEnabledLayerNames<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*)instance_validation_layers,</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.enabledExtensionCount<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;enabled_extension_count,</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ppEnabledExtensionNames<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*)<ref refid="structdemo" kindref="compound">demo</ref>-&gt;extension_names,</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"></highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>gpu_count;</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkCreateInstance(&amp;inst_info,<sp/>NULL,<sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;inst);</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>==<sp/>VK_ERROR_INCOMPATIBLE_DRIVER)<sp/>{</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ERR_EXIT(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>find<sp/>a<sp/>compatible<sp/>Vulkan<sp/>installable<sp/>client<sp/>driver<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(ICD).\n\nPlease<sp/>look<sp/>at<sp/>the<sp/>Getting<sp/>Started<sp/>guide<sp/>for<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;additional<sp/>information.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;vkCreateInstance<sp/>Failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>==<sp/>VK_ERROR_EXTENSION_NOT_PRESENT)<sp/>{</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ERR_EXIT(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>find<sp/>a<sp/>specified<sp/>extension<sp/>library&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.\nMake<sp/>sure<sp/>your<sp/>layers<sp/>path<sp/>is<sp/>set<sp/>appropriately\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;vkCreateInstance<sp/>Failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err)<sp/>{</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ERR_EXIT(</highlight><highlight class="stringliteral">&quot;vkCreateInstance<sp/>failed.\n\nDo<sp/>you<sp/>have<sp/>a<sp/>compatible<sp/>Vulkan<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;installable<sp/>client<sp/>driver<sp/>(ICD)<sp/>installed?\nPlease<sp/>look<sp/>at<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>Getting<sp/>Started<sp/>guide<sp/>for<sp/>additional<sp/>information.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;vkCreateInstance<sp/>Failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/>gladLoadVulkanUserPtr(NULL,<sp/>glad_vulkan_callback,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;inst);</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"></highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>initial<sp/>call<sp/>to<sp/>query<sp/>gpu_count,<sp/>then<sp/>second<sp/>call<sp/>for<sp/>gpu<sp/>info*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkEnumeratePhysicalDevices(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;inst,<sp/>&amp;gpu_count,<sp/>NULL);</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err<sp/>&amp;&amp;<sp/>gpu_count<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gpu_count<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkPhysicalDevice<sp/>*physical_devices<sp/>=</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(VkPhysicalDevice)<sp/>*<sp/>gpu_count);</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkEnumeratePhysicalDevices(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;inst,<sp/>&amp;gpu_count,</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>physical_devices);</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>tri<sp/>demo<sp/>we<sp/>just<sp/>grab<sp/>the<sp/>first<sp/>physical<sp/>device<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;gpu<sp/>=<sp/>physical_devices[0];</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(physical_devices);</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ERR_EXIT(</highlight><highlight class="stringliteral">&quot;vkEnumeratePhysicalDevices<sp/>reported<sp/>zero<sp/>accessible<sp/>devices.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n\nDo<sp/>you<sp/>have<sp/>a<sp/>compatible<sp/>Vulkan<sp/>installable<sp/>client&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>driver<sp/>(ICD)<sp/>installed?\nPlease<sp/>look<sp/>at<sp/>the<sp/>Getting<sp/>Started&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>guide<sp/>for<sp/>additional<sp/>information.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;vkEnumeratePhysicalDevices<sp/>Failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"></highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/>gladLoadVulkanUserPtr(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;gpu,<sp/>glad_vulkan_callback,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;inst);</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"></highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Look<sp/>for<sp/>device<sp/>extensions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>device_extension_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/>VkBool32<sp/>swapchainExtFound<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;enabled_extension_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"></highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkEnumerateDeviceExtensionProperties(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;gpu,<sp/>NULL,</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;device_extension_count,<sp/>NULL);</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"></highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(device_extension_count<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_extension_properties" kindref="compound">VkExtensionProperties</ref><sp/>*device_extensions<sp/>=</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_vk_extension_properties" kindref="compound">VkExtensionProperties</ref>)<sp/>*<sp/>device_extension_count);</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkEnumerateDeviceExtensionProperties(</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;gpu,<sp/>NULL,<sp/>&amp;device_extension_count,<sp/>device_extensions);</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"></highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>device_extension_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(VK_KHR_SWAPCHAIN_EXTENSION_NAME,</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device_extensions[i].extensionName))<sp/>{</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swapchainExtFound<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;extension_names[<ref refid="structdemo" kindref="compound">demo</ref>-&gt;enabled_extension_count++]<sp/>=</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_KHR_SWAPCHAIN_EXTENSION_NAME;</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;enabled_extension_count<sp/>&lt;<sp/>64);</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(device_extensions);</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!swapchainExtFound)<sp/>{</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ERR_EXIT(</highlight><highlight class="stringliteral">&quot;vkEnumerateDeviceExtensionProperties<sp/>failed<sp/>to<sp/>find<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>&quot;</highlight><highlight class="normal"><sp/>VK_KHR_SWAPCHAIN_EXTENSION_NAME</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>extension.\n\nDo<sp/>you<sp/>have<sp/>a<sp/>compatible<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Vulkan<sp/>installable<sp/>client<sp/>driver<sp/>(ICD)<sp/>installed?\nPlease<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;look<sp/>at<sp/>the<sp/>Getting<sp/>Started<sp/>guide<sp/>for<sp/>additional<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;information.\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;vkCreateInstance<sp/>Failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"></highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;validate)<sp/>{</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_debug_report_callback_create_info_e_x_t" kindref="compound">VkDebugReportCallbackCreateInfoEXT</ref><sp/>dbgCreateInfo;</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbgCreateInfo.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT;</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbgCreateInfo.flags<sp/>=</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VK_DEBUG_REPORT_ERROR_BIT_EXT<sp/>|<sp/>VK_DEBUG_REPORT_WARNING_BIT_EXT;</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbgCreateInfo.pfnCallback<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;use_break<sp/>?<sp/>BreakCallback<sp/>:<sp/>dbgFunc;</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbgCreateInfo.pUserData<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>;</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbgCreateInfo.pNext<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkCreateDebugReportCallbackEXT(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;inst,<sp/>&amp;dbgCreateInfo,<sp/>NULL,</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;msg_callback);</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(err)<sp/>{</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VK_SUCCESS:</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VK_ERROR_OUT_OF_HOST_MEMORY:</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ERR_EXIT(</highlight><highlight class="stringliteral">&quot;CreateDebugReportCallback:<sp/>out<sp/>of<sp/>host<sp/>memory\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;CreateDebugReportCallback<sp/>Failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ERR_EXIT(</highlight><highlight class="stringliteral">&quot;CreateDebugReportCallback:<sp/>unknown<sp/>failure\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;CreateDebugReportCallback<sp/>Failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"></highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/>vkGetPhysicalDeviceProperties(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;gpu,<sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;gpu_props);</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"></highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Query<sp/>with<sp/>NULL<sp/>data<sp/>to<sp/>get<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/>vkGetPhysicalDeviceQueueFamilyProperties(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;gpu,<sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;queue_count,</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL);</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;queue_props<sp/>=<sp/>(<ref refid="struct_vk_queue_family_properties" kindref="compound">VkQueueFamilyProperties</ref><sp/>*)malloc(</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;queue_count<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_vk_queue_family_properties" kindref="compound">VkQueueFamilyProperties</ref>));</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/>vkGetPhysicalDeviceQueueFamilyProperties(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;gpu,<sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;queue_count,</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;queue_props);</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;queue_count<sp/>&gt;=<sp/>1);</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/>vkGetPhysicalDeviceFeatures(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;gpu,<sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;gpu_features);</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Graphics<sp/>queue<sp/>and<sp/>MemMgr<sp/>queue<sp/>can<sp/>be<sp/>separate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Add<sp/>support<sp/>for<sp/>separate<sp/>queues,<sp/>including<sp/>synchronization,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>appropriate<sp/>tracking<sp/>for<sp/>QueueSubmit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1823"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>demo_init_device(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdemo" kindref="compound">demo</ref><sp/>*<ref refid="structdemo" kindref="compound">demo</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/>VkResult<sp/>U_ASSERT_ONLY<sp/>err;</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"></highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>queue_priorities[1]<sp/>=<sp/>{0.0};</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_device_queue_create_info" kindref="compound">VkDeviceQueueCreateInfo</ref><sp/>queue<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO,</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pNext<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.queueFamilyIndex<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;graphics_queue_node_index,</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.queueCount<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pQueuePriorities<sp/>=<sp/>queue_priorities};</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"></highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_physical_device_features" kindref="compound">VkPhysicalDeviceFeatures</ref><sp/>features;</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;features,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(features));</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;gpu_features.shaderClipDistance)<sp/>{</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>features.shaderClipDistance<sp/>=<sp/>VK_TRUE;</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_device_create_info" kindref="compound">VkDeviceCreateInfo</ref><sp/>device<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO,</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pNext<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.queueCreateInfoCount<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pQueueCreateInfos<sp/>=<sp/>&amp;queue,</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.enabledLayerCount<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ppEnabledLayerNames<sp/>=<sp/>NULL,</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.enabledExtensionCount<sp/>=<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;enabled_extension_count,</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.ppEnabledExtensionNames<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*)<ref refid="structdemo" kindref="compound">demo</ref>-&gt;extension_names,</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pEnabledFeatures<sp/>=<sp/>&amp;features,</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkCreateDevice(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;gpu,<sp/>&amp;device,<sp/>NULL,<sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device);</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="1857"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"></highlight></codeline>
<codeline lineno="1859"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>demo_init_vk_swapchain(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdemo" kindref="compound">demo</ref><sp/>*<ref refid="structdemo" kindref="compound">demo</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/>VkResult<sp/>U_ASSERT_ONLY<sp/>err;</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>i;</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>WSI<sp/>surface<sp/>for<sp/>the<sp/>window:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/>glfwCreateWindowSurface(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;inst,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;window,<sp/>NULL,<sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;surface);</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>over<sp/>each<sp/>queue<sp/>to<sp/>learn<sp/>whether<sp/>it<sp/>supports<sp/>presenting:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/>VkBool32<sp/>*supportsPresent<sp/>=</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(VkBool32<sp/>*)malloc(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;queue_count<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(VkBool32));</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;queue_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkGetPhysicalDeviceSurfaceSupportKHR(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;gpu,<sp/>i,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;surface,</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;supportsPresent[i]);</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"></highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Search<sp/>for<sp/>a<sp/>graphics<sp/>and<sp/>a<sp/>present<sp/>queue<sp/>in<sp/>the<sp/>array<sp/>of<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>families,<sp/>try<sp/>to<sp/>find<sp/>one<sp/>that<sp/>supports<sp/>both</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>graphicsQueueNodeIndex<sp/>=<sp/>UINT32_MAX;</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>presentQueueNodeIndex<sp/>=<sp/>UINT32_MAX;</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;queue_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="structdemo" kindref="compound">demo</ref>-&gt;queue_props[i].queueFlags<sp/>&amp;<sp/>VK_QUEUE_GRAPHICS_BIT)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(graphicsQueueNodeIndex<sp/>==<sp/>UINT32_MAX)<sp/>{</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graphicsQueueNodeIndex<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(supportsPresent[i]<sp/>==<sp/>VK_TRUE)<sp/>{</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graphicsQueueNodeIndex<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>presentQueueNodeIndex<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(presentQueueNodeIndex<sp/>==<sp/>UINT32_MAX)<sp/>{</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>didn&apos;t<sp/>find<sp/>a<sp/>queue<sp/>that<sp/>supports<sp/>both<sp/>graphics<sp/>and<sp/>present,<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>a<sp/>separate<sp/>present<sp/>queue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;queue_count;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(supportsPresent[i]<sp/>==<sp/>VK_TRUE)<sp/>{</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>presentQueueNodeIndex<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/>free(supportsPresent);</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"></highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>error<sp/>if<sp/>could<sp/>not<sp/>find<sp/>both<sp/>a<sp/>graphics<sp/>and<sp/>a<sp/>present<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(graphicsQueueNodeIndex<sp/>==<sp/>UINT32_MAX<sp/>||</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>presentQueueNodeIndex<sp/>==<sp/>UINT32_MAX)<sp/>{</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ERR_EXIT(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>find<sp/>a<sp/>graphics<sp/>and<sp/>a<sp/>present<sp/>queue\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Swapchain<sp/>Initialization<sp/>Failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"></highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Add<sp/>support<sp/>for<sp/>separate<sp/>queues,<sp/>including<sp/>presentation,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>synchronization,<sp/>and<sp/>appropriate<sp/>tracking<sp/>for<sp/>QueueSubmit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>While<sp/>it<sp/>is<sp/>possible<sp/>for<sp/>an<sp/>application<sp/>to<sp/>use<sp/>a<sp/>separate<sp/>graphics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>a<sp/>present<sp/>queues,<sp/>this<sp/>demo<sp/>program<sp/>assumes<sp/>it<sp/>is<sp/>only<sp/>using</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>one:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(graphicsQueueNodeIndex<sp/>!=<sp/>presentQueueNodeIndex)<sp/>{</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ERR_EXIT(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>find<sp/>a<sp/>common<sp/>graphics<sp/>and<sp/>a<sp/>present<sp/>queue\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Swapchain<sp/>Initialization<sp/>Failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"></highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;graphics_queue_node_index<sp/>=<sp/>graphicsQueueNodeIndex;</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"></highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/>demo_init_device(<ref refid="structdemo" kindref="compound">demo</ref>);</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"></highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/>vkGetDeviceQueue(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;graphics_queue_node_index,<sp/>0,</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;queue);</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"></highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>list<sp/>of<sp/>VkFormat&apos;s<sp/>that<sp/>are<sp/>supported:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>formatCount;</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkGetPhysicalDeviceSurfaceFormatsKHR(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;gpu,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;surface,</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;formatCount,<sp/>NULL);</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_surface_format_k_h_r" kindref="compound">VkSurfaceFormatKHR</ref><sp/>*surfFormats<sp/>=</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="struct_vk_surface_format_k_h_r" kindref="compound">VkSurfaceFormatKHR</ref><sp/>*)malloc(formatCount<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_vk_surface_format_k_h_r" kindref="compound">VkSurfaceFormatKHR</ref>));</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkGetPhysicalDeviceSurfaceFormatsKHR(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;gpu,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;surface,</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;formatCount,<sp/>surfFormats);</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!err);</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>format<sp/>list<sp/>includes<sp/>just<sp/>one<sp/>entry<sp/>of<sp/>VK_FORMAT_UNDEFINED,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>surface<sp/>has<sp/>no<sp/>preferred<sp/>format.<sp/><sp/>Otherwise,<sp/>at<sp/>least<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>supported<sp/>format<sp/>will<sp/>be<sp/>returned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(formatCount<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>surfFormats[0].format<sp/>==<sp/>VK_FORMAT_UNDEFINED)<sp/>{</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;format<sp/>=<sp/>VK_FORMAT_B8G8R8A8_UNORM;</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(formatCount<sp/>&gt;=<sp/>1);</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;format<sp/>=<sp/>surfFormats[0].format;</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;color_space<sp/>=<sp/>surfFormats[0].colorSpace;</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"></highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;curFrame<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"></highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>Memory<sp/>information<sp/>and<sp/>properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/>vkGetPhysicalDeviceMemoryProperties(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;gpu,<sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;memory_properties);</highlight></codeline>
<codeline lineno="1952"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"></highlight></codeline>
<codeline lineno="1954"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>demo_init_connection(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdemo" kindref="compound">demo</ref><sp/>*<ref refid="structdemo" kindref="compound">demo</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__init_1ga746e2757d069eaea423349aca6ae097a" kindref="member">glfwSetErrorCallback</ref>(demo_error_callback);</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"></highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__init_1gab41771f0215a2e0afb4cf1cf98082d40" kindref="member">glfwInit</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>initialize<sp/>GLFW.\nExiting<sp/>...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"></highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__vulkan_1ga72e7c3757d9ff2333181a5569bb7c403" kindref="member">glfwVulkanSupported</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;GLFW<sp/>failed<sp/>to<sp/>find<sp/>the<sp/>Vulkan<sp/>loader.\nExiting<sp/>...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"></highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/>gladLoadVulkanUserPtr(NULL,<sp/>glad_vulkan_callback,<sp/>NULL);</highlight></codeline>
<codeline lineno="1970"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"></highlight></codeline>
<codeline lineno="1972"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>demo_init(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdemo" kindref="compound">demo</ref><sp/>*<ref refid="structdemo" kindref="compound">demo</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[])</highlight></codeline>
<codeline lineno="1973"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<ref refid="structdemo" kindref="compound">demo</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*<ref refid="structdemo" kindref="compound">demo</ref>));</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;frameCount<sp/>=<sp/>INT32_MAX;</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"></highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>argc;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(argv[i],<sp/></highlight><highlight class="stringliteral">&quot;--use_staging&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;use_staging_buffer<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(argv[i],<sp/></highlight><highlight class="stringliteral">&quot;--break&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;use_break<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(argv[i],<sp/></highlight><highlight class="stringliteral">&quot;--validate&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;validate<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(argv[i],<sp/></highlight><highlight class="stringliteral">&quot;--c&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0<sp/>&amp;&amp;<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;frameCount<sp/>==<sp/>INT32_MAX<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>&lt;<sp/>argc<sp/>-<sp/>1<sp/>&amp;&amp;<sp/>sscanf(argv[i<sp/>+<sp/>1],<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;frameCount)<sp/>==<sp/>1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;frameCount<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"></highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Usage:\n<sp/><sp/>%s<sp/>[--use_staging]<sp/>[--validate]<sp/>[--break]<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[--c<sp/>&lt;framecount&gt;]\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>APP_SHORT_NAME);</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fflush(stderr);</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"></highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/>demo_init_connection(<ref refid="structdemo" kindref="compound">demo</ref>);</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/>demo_init_vk(<ref refid="structdemo" kindref="compound">demo</ref>);</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"></highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;width<sp/>=<sp/>300;</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;height<sp/>=<sp/>300;</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;depthStencil<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;depthIncrement<sp/>=<sp/>-0.01f;</highlight></codeline>
<codeline lineno="2012"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"></highlight></codeline>
<codeline lineno="2014"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>demo_cleanup(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdemo" kindref="compound">demo</ref><sp/>*<ref refid="structdemo" kindref="compound">demo</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>i;</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;swapchainImageCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkDestroyFramebuffer(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;framebuffers[i],<sp/>NULL);</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/>free(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;framebuffers);</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyDescriptorPool(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;desc_pool,<sp/>NULL);</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"></highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;setup_cmd)<sp/>{</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkFreeCommandBuffers(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;cmd_pool,<sp/>1,<sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;setup_cmd);</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/>vkFreeCommandBuffers(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;cmd_pool,<sp/>1,<sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;draw_cmd);</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyCommandPool(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;cmd_pool,<sp/>NULL);</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"></highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyPipeline(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;pipeline,<sp/>NULL);</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyRenderPass(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;render_pass,<sp/>NULL);</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyPipelineLayout(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;pipeline_layout,<sp/>NULL);</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyDescriptorSetLayout(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;desc_layout,<sp/>NULL);</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"></highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyBuffer(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;vertices.buf,<sp/>NULL);</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/>vkFreeMemory(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;vertices.mem,<sp/>NULL);</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"></highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>DEMO_TEXTURE_COUNT;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkDestroyImageView(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;textures[i].view,<sp/>NULL);</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkDestroyImage(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;textures[i].image,<sp/>NULL);</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkFreeMemory(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;textures[i].mem,<sp/>NULL);</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkDestroySampler(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;textures[i].sampler,<sp/>NULL);</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"></highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;swapchainImageCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkDestroyImageView(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;buffers[i].view,<sp/>NULL);</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"></highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyImageView(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;depth.view,<sp/>NULL);</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyImage(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;depth.image,<sp/>NULL);</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/>vkFreeMemory(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;depth.mem,<sp/>NULL);</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"></highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroySwapchainKHR(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;swapchain,<sp/>NULL);</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/>free(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;buffers);</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"></highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyDevice(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/>NULL);</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;validate)<sp/>{</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkDestroyDebugReportCallbackEXT(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;inst,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;msg_callback,<sp/>NULL);</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroySurfaceKHR(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;inst,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;surface,<sp/>NULL);</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyInstance(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;inst,<sp/>NULL);</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"></highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/>free(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;queue_props);</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__window_1ga806747476b7247d292be3711c323ea10" kindref="member">glfwDestroyWindow</ref>(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;window);</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__init_1gafd90e6fd4819ea9e22e5e739519a6504" kindref="member">glfwTerminate</ref>();</highlight></codeline>
<codeline lineno="2066"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"></highlight></codeline>
<codeline lineno="2068"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>demo_resize(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdemo" kindref="compound">demo</ref><sp/>*<ref refid="structdemo" kindref="compound">demo</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>i;</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"></highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>order<sp/>to<sp/>properly<sp/>resize<sp/>the<sp/>window,<sp/>we<sp/>must<sp/>re-create<sp/>the<sp/>swapchain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AND<sp/>redo<sp/>the<sp/>command<sp/>buffers,<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>perform<sp/>part<sp/>of<sp/>the<sp/>demo_cleanup()<sp/>function:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"></highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;swapchainImageCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkDestroyFramebuffer(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;framebuffers[i],<sp/>NULL);</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/>free(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;framebuffers);</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyDescriptorPool(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;desc_pool,<sp/>NULL);</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"></highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;setup_cmd)<sp/>{</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkFreeCommandBuffers(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;cmd_pool,<sp/>1,<sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;setup_cmd);</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;setup_cmd<sp/>=<sp/>VK_NULL_HANDLE;</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/>vkFreeCommandBuffers(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;cmd_pool,<sp/>1,<sp/>&amp;<ref refid="structdemo" kindref="compound">demo</ref>-&gt;draw_cmd);</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyCommandPool(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;cmd_pool,<sp/>NULL);</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyPipeline(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;pipeline,<sp/>NULL);</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyRenderPass(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;render_pass,<sp/>NULL);</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyPipelineLayout(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;pipeline_layout,<sp/>NULL);</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyDescriptorSetLayout(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;desc_layout,<sp/>NULL);</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"></highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyBuffer(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;vertices.buf,<sp/>NULL);</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/>vkFreeMemory(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;vertices.mem,<sp/>NULL);</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"></highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>DEMO_TEXTURE_COUNT;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkDestroyImageView(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;textures[i].view,<sp/>NULL);</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkDestroyImage(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;textures[i].image,<sp/>NULL);</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkFreeMemory(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;textures[i].mem,<sp/>NULL);</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkDestroySampler(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;textures[i].sampler,<sp/>NULL);</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"></highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;swapchainImageCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkDestroyImageView(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;buffers[i].view,<sp/>NULL);</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyImageView(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;depth.view,<sp/>NULL);</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyImage(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;depth.image,<sp/>NULL);</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/>vkFreeMemory(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;device,<sp/><ref refid="structdemo" kindref="compound">demo</ref>-&gt;depth.mem,<sp/>NULL);</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/>free(<ref refid="structdemo" kindref="compound">demo</ref>-&gt;buffers);</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"></highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Second,<sp/>re-perform<sp/>the<sp/>demo_prepare()<sp/>function,<sp/>which<sp/>will<sp/>re-create<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>swapchain:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/>demo_prepare(<ref refid="structdemo" kindref="compound">demo</ref>);</highlight></codeline>
<codeline lineno="2117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"></highlight></codeline>
<codeline lineno="2119"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[])<sp/>{</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdemo" kindref="compound">demo</ref><sp/><ref refid="structdemo" kindref="compound">demo</ref>;</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"></highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/>demo_init(&amp;<ref refid="structdemo" kindref="compound">demo</ref>,<sp/>argc,<sp/>argv);</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/>demo_create_window(&amp;<ref refid="structdemo" kindref="compound">demo</ref>);</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/>demo_init_vk_swapchain(&amp;<ref refid="structdemo" kindref="compound">demo</ref>);</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"></highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/>demo_prepare(&amp;<ref refid="structdemo" kindref="compound">demo</ref>);</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/>demo_run(&amp;<ref refid="structdemo" kindref="compound">demo</ref>);</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"></highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/>demo_cleanup(&amp;<ref refid="structdemo" kindref="compound">demo</ref>);</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"></highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>validation_error;</highlight></codeline>
<codeline lineno="2132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/triangle-vulkan.c"/>
  </compounddef>
</doxygen>
