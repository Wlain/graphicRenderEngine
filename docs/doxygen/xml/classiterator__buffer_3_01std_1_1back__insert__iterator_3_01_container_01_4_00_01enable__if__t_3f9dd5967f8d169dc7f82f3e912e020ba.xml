<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="classiterator__buffer_3_01std_1_1back__insert__iterator_3_01_container_01_4_00_01enable__if__t_3f9dd5967f8d169dc7f82f3e912e020ba" kind="class" language="C++" prot="public" final="yes">
    <compoundname>iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;</compoundname>
    <basecompoundref refid="classbuffer" prot="public" virt="non-virtual">buffer&lt; Container::value_type &gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>typename Container</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classiterator__buffer_3_01std_1_1back__insert__iterator_3_01_container_01_4_00_01enable__if__t_3f9dd5967f8d169dc7f82f3e912e020ba_1a2d6334155716faf4c5628b483c13a78a" prot="private" static="no" mutable="no">
        <type>Container &amp;</type>
        <definition>Container&amp; iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;::container_</definition>
        <argsstring></argsstring>
        <name>container_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="983" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="983" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classiterator__buffer_3_01std_1_1back__insert__iterator_3_01_container_01_4_00_01enable__if__t_3f9dd5967f8d169dc7f82f3e912e020ba_1adadd2153610bc6f2af3d24c72bb4cc07" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>FMT_CONSTEXPR20 void</type>
        <definition>FMT_CONSTEXPR20 void iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;::grow</definition>
        <argsstring>(size_t capacity) override</argsstring>
        <name>grow</name>
        <reimplements refid="classbuffer_1a98dcf71107dcb329422606c9ff0b3369">grow</reimplements>
        <param>
          <type>size_t</type>
          <declname>capacity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Increases the buffer capacity to hold at least <emphasis>capacity</emphasis> elements. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="986" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="986" bodyend="989"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classiterator__buffer_3_01std_1_1back__insert__iterator_3_01_container_01_4_00_01enable__if__t_3f9dd5967f8d169dc7f82f3e912e020ba_1aa0b8ac8c3949d901a0948cbe32a9ffdd" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;::iterator_buffer</definition>
        <argsstring>(Container &amp;c)</argsstring>
        <name>iterator_buffer</name>
        <param>
          <type>Container &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="992" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="992" bodyend="993"/>
      </memberdef>
      <memberdef kind="function" id="classiterator__buffer_3_01std_1_1back__insert__iterator_3_01_container_01_4_00_01enable__if__t_3f9dd5967f8d169dc7f82f3e912e020ba_1ae7c84206fe21c619b3c003186aaa7709" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;::iterator_buffer</definition>
        <argsstring>(std::back_insert_iterator&lt; Container &gt; out, size_t=0)</argsstring>
        <name>iterator_buffer</name>
        <param>
          <type>std::back_insert_iterator&lt; Container &gt;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>size_t</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="994" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="994" bodyend="995"/>
      </memberdef>
      <memberdef kind="function" id="classiterator__buffer_3_01std_1_1back__insert__iterator_3_01_container_01_4_00_01enable__if__t_3f9dd5967f8d169dc7f82f3e912e020ba_1af1fb37a5fa0b453c6d7fe7184e56b7b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;::out</definition>
        <argsstring>() -&gt; std::back_insert_iterator&lt; Container &gt;</argsstring>
        <name>out</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="996" column="8" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="996" bodyend="998"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>buffer&lt; Container::value_type &gt;</label>
        <link refid="classbuffer"/>
      </node>
      <node id="1">
        <label>iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;</label>
        <link refid="classiterator__buffer_3_01std_1_1back__insert__iterator_3_01_container_01_4_00_01enable__if__t_3f9dd5967f8d169dc7f82f3e912e020ba"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>buffer&lt; Container::value_type &gt;</label>
        <link refid="classbuffer"/>
      </node>
      <node id="1">
        <label>iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;</label>
        <link refid="classiterator__buffer_3_01std_1_1back__insert__iterator_3_01_container_01_4_00_01enable__if__t_3f9dd5967f8d169dc7f82f3e912e020ba"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="978" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="981" bodyend="999"/>
    <listofallmembers>
      <member refid="classbuffer_1a85153eafa666890bc7d531ed4ebb3ecc" prot="public" virt="non-virtual"><scope>iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;</scope><name>append</name></member>
      <member refid="classbuffer_1a638c05d24e320c79ce982c7f6ca0b737" prot="public" virt="non-virtual"><scope>iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;</scope><name>begin</name></member>
      <member refid="classbuffer_1afaa67849c70ebcc79a606c30109d4cbf" prot="public" virt="non-virtual"><scope>iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;</scope><name>begin</name></member>
      <member refid="classbuffer_1ae710fbcbadc1bbac0381a22ddd50427e" prot="protected" virt="non-virtual"><scope>iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;</scope><name>buffer</name></member>
      <member refid="classbuffer_1a7d44eb91eb1b78caf701fcb6177a248c" prot="protected" virt="non-virtual"><scope>iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;</scope><name>buffer</name></member>
      <member refid="classbuffer_1aef0776a0b899bf6fd19d7daa5ebb0e59" prot="protected" virt="non-virtual"><scope>iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;</scope><name>buffer</name></member>
      <member refid="classbuffer_1a399f45355c545a4ca30006a71b9f8f17" prot="public" virt="non-virtual"><scope>iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;</scope><name>buffer</name></member>
      <member refid="classbuffer_1a43a14b8b348aed58d76766eb59dd6578" prot="public" virt="non-virtual"><scope>iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;</scope><name>capacity</name></member>
      <member refid="classbuffer_1a46672f0d8544fc2b27544928cd6408df" prot="public" virt="non-virtual"><scope>iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;</scope><name>clear</name></member>
      <member refid="classbuffer_1a97413ac53e108e16335eb910a0c9e512" prot="public" virt="non-virtual"><scope>iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;</scope><name>const_reference</name></member>
      <member refid="classiterator__buffer_3_01std_1_1back__insert__iterator_3_01_container_01_4_00_01enable__if__t_3f9dd5967f8d169dc7f82f3e912e020ba_1a2d6334155716faf4c5628b483c13a78a" prot="private" virt="non-virtual"><scope>iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;</scope><name>container_</name></member>
      <member refid="classbuffer_1ae42a4b4e65620def1fc0c5e4be5d3a86" prot="public" virt="non-virtual"><scope>iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;</scope><name>data</name></member>
      <member refid="classbuffer_1adacd68ee6427f5fe3861bb87c58043b7" prot="public" virt="non-virtual"><scope>iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;</scope><name>data</name></member>
      <member refid="classbuffer_1a11ca559b70ffa9ce0d3a52b41f3acd45" prot="public" virt="non-virtual"><scope>iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;</scope><name>end</name></member>
      <member refid="classbuffer_1a297e5208927dd364c2c999928a426f7f" prot="public" virt="non-virtual"><scope>iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;</scope><name>end</name></member>
      <member refid="classiterator__buffer_3_01std_1_1back__insert__iterator_3_01_container_01_4_00_01enable__if__t_3f9dd5967f8d169dc7f82f3e912e020ba_1adadd2153610bc6f2af3d24c72bb4cc07" prot="protected" virt="virtual"><scope>iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;</scope><name>grow</name></member>
      <member refid="classiterator__buffer_3_01std_1_1back__insert__iterator_3_01_container_01_4_00_01enable__if__t_3f9dd5967f8d169dc7f82f3e912e020ba_1aa0b8ac8c3949d901a0948cbe32a9ffdd" prot="public" virt="non-virtual"><scope>iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;</scope><name>iterator_buffer</name></member>
      <member refid="classiterator__buffer_3_01std_1_1back__insert__iterator_3_01_container_01_4_00_01enable__if__t_3f9dd5967f8d169dc7f82f3e912e020ba_1ae7c84206fe21c619b3c003186aaa7709" prot="public" virt="non-virtual"><scope>iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;</scope><name>iterator_buffer</name></member>
      <member refid="classbuffer_1ad6255f8f7c118dad6ee4165405f9a7f3" prot="public" virt="non-virtual"><scope>iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;</scope><name>operator=</name></member>
      <member refid="classbuffer_1a6c52bfa09437215d761d1deb04e75cf8" prot="public" virt="non-virtual"><scope>iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;</scope><name>operator[]</name></member>
      <member refid="classbuffer_1a855aaf4ebd6361db54bb4d5da5a28cc8" prot="public" virt="non-virtual"><scope>iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;</scope><name>operator[]</name></member>
      <member refid="classiterator__buffer_3_01std_1_1back__insert__iterator_3_01_container_01_4_00_01enable__if__t_3f9dd5967f8d169dc7f82f3e912e020ba_1af1fb37a5fa0b453c6d7fe7184e56b7b0" prot="public" virt="non-virtual"><scope>iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;</scope><name>out</name></member>
      <member refid="classbuffer_1a4e8bdda043e9dfdd9e77c7ce7bcc3c9c" prot="public" virt="non-virtual"><scope>iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;</scope><name>push_back</name></member>
      <member refid="classbuffer_1a4a777af6a90beeac06af14d9f2939611" prot="protected" virt="non-virtual"><scope>iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;</scope><name>set</name></member>
      <member refid="classbuffer_1abef013fc250411a71bd271e27cbcfa5d" prot="public" virt="non-virtual"><scope>iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;</scope><name>size</name></member>
      <member refid="classbuffer_1a338e18c57e5ae37d68179d9f816d9e9d" prot="public" virt="non-virtual"><scope>iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;</scope><name>try_reserve</name></member>
      <member refid="classbuffer_1ac885e661c567f2ae935e7fc53314d156" prot="public" virt="non-virtual"><scope>iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;</scope><name>try_resize</name></member>
      <member refid="classbuffer_1ab2058f213dced4dbda7a0b301fbcab97" prot="public" virt="non-virtual"><scope>iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;</scope><name>value_type</name></member>
      <member refid="classbuffer_1a180d76d5a9c29b1c88496b176a6c1e35" prot="protected" virt="non-virtual"><scope>iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;</scope><name>~buffer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
