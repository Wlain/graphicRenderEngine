<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="bundled_2ranges_8h" kind="file" language="C++">
    <compoundname>ranges.h</compoundname>
    <includes local="no">initializer_list</includes>
    <includes local="no">tuple</includes>
    <includes local="no">type_traits</includes>
    <includes refid="format_8h" local="yes">format.h</includes>
    <includedby refid="ranges_8h" local="no">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/ranges.h</includedby>
    <incdepgraph>
      <node id="13">
        <label>core.h</label>
        <link refid="core_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>format.h</label>
        <link refid="format_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/ranges.h</label>
        <link refid="bundled_2ranges_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>cmath</label>
      </node>
      <node id="14">
        <label>cstddef</label>
      </node>
      <node id="7">
        <label>cstdint</label>
      </node>
      <node id="15">
        <label>cstdio</label>
      </node>
      <node id="16">
        <label>cstring</label>
      </node>
      <node id="2">
        <label>initializer_list</label>
      </node>
      <node id="17">
        <label>iterator</label>
      </node>
      <node id="8">
        <label>limits</label>
      </node>
      <node id="9">
        <label>memory</label>
      </node>
      <node id="10">
        <label>stdexcept</label>
      </node>
      <node id="18">
        <label>string</label>
      </node>
      <node id="11">
        <label>system_error</label>
      </node>
      <node id="3">
        <label>tuple</label>
      </node>
      <node id="4">
        <label>type_traits</label>
      </node>
      <node id="12">
        <label>utility</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/example/example.cpp</label>
        <link refid="example_8cpp_source"/>
      </node>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/ranges.h</label>
        <link refid="bundled_2ranges_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/ranges.h</label>
        <link refid="ranges_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classdetail_1_1is__std__string__like" prot="public">detail::is_std_string_like</innerclass>
    <innerclass refid="structdetail_1_1is__std__string__like_3_01fmt_1_1basic__string__view_3_01_char_01_4_01_4" prot="public">detail::is_std_string_like&lt; fmt::basic_string_view&lt; Char &gt; &gt;</innerclass>
    <innerclass refid="classdetail_1_1is__map" prot="public">detail::is_map</innerclass>
    <innerclass refid="classdetail_1_1is__set" prot="public">detail::is_set</innerclass>
    <innerclass refid="structdetail_1_1conditional__helper" prot="public">detail::conditional_helper</innerclass>
    <innerclass refid="structdetail_1_1is__range__" prot="public">detail::is_range_</innerclass>
    <innerclass refid="structdetail_1_1has__member__fn__begin__end__t" prot="public">detail::has_member_fn_begin_end_t</innerclass>
    <innerclass refid="structdetail_1_1has__member__fn__begin__end__t_3_01_t_00_01void__t_3_01decltype_07std_1_1declval2d279443b63d262c3d0c3ea7654a8b24" prot="public">detail::has_member_fn_begin_end_t&lt; T, void_t&lt; decltype(std::declval&lt; T &gt;().begin()), decltype(std::declval&lt; T &gt;().end())&gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1has__const__begin__end" prot="public">detail::has_const_begin_end</innerclass>
    <innerclass refid="structdetail_1_1has__mutable__begin__end" prot="public">detail::has_mutable_begin_end</innerclass>
    <innerclass refid="structdetail_1_1has__const__begin__end_3_01_t_00_01void__t_3_01decltype_07detail_1_1range__begin4d0cf3c56adb617747d1750d2b5598ac" prot="public">detail::has_const_begin_end&lt; T, void_t&lt; decltype(detail::range_begin(std::declval&lt; const remove_cvref_t&lt; T &gt; &amp; &gt;())), decltype(detail::range_end(std::declval&lt; const remove_cvref_t&lt; T &gt; &amp; &gt;()))&gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1has__mutable__begin__end_3_01_t_00_01void__t_3_01decltype_07detail_1_1range__begd5f2729531552232d214cda8da44d539" prot="public">detail::has_mutable_begin_end&lt; T, void_t&lt; decltype(detail::range_begin(std::declval&lt; T &gt;())), decltype(detail::range_end(std::declval&lt; T &gt;())), enable_if_t&lt; std::is_copy_constructible&lt; T &gt;::value &gt; &gt; &gt;</innerclass>
    <innerclass refid="structdetail_1_1is__range___3_01_t_00_01void_01_4" prot="public">detail::is_range_&lt; T, void &gt;</innerclass>
    <innerclass refid="classdetail_1_1is__tuple__like__" prot="public">detail::is_tuple_like_</innerclass>
    <innerclass refid="structdetail_1_1integer__sequence" prot="public">detail::integer_sequence</innerclass>
    <innerclass refid="structdetail_1_1make__integer__sequence" prot="public">detail::make_integer_sequence</innerclass>
    <innerclass refid="structdetail_1_1make__integer__sequence_3_01_t_00_010_00_01_ns_8_8_8_01_4" prot="public">detail::make_integer_sequence&lt; T, 0, Ns... &gt;</innerclass>
    <innerclass refid="structdetail_1_1singleton" prot="public">detail::singleton</innerclass>
    <innerclass refid="structdetail_1_1find__escape__result" prot="public">detail::find_escape_result</innerclass>
    <innerclass refid="structis__tuple__like" prot="public">is_tuple_like</innerclass>
    <innerclass refid="structformatter_3_01_tuple_t_00_01_char_00_01enable__if__t_3_01fmt_1_1is__tuple__like_3_01_tuple_t_01_4_1_1value_01_4_01_4" prot="public">formatter&lt; TupleT, Char, enable_if_t&lt; fmt::is_tuple_like&lt; TupleT &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structformatter_3_01_tuple_t_00_01_char_00_01enable__if__t_3_01fmt_1_1is__tuple__like_3_01_tuple1c588778884d7ecdb64976c2cd1bb77c" prot="private">formatter&lt; TupleT, Char, enable_if_t&lt; fmt::is_tuple_like&lt; TupleT &gt;::value &gt; &gt;::format_each</innerclass>
    <innerclass refid="structis__range" prot="public">is_range</innerclass>
    <innerclass refid="structformatter_3_01_t_00_01_char_00_01enable__if__t_3_01fmt_1_1is__range_3_01_t_00_01_char_01_4cba26440f94df2f142946ab02c9c1c06" prot="public">formatter&lt; T, Char, enable_if_t&lt; fmt::is_range&lt; T, Char &gt;::value &amp;&amp;(is_formattable&lt; detail::value_type&lt; T &gt;, Char &gt;::value||detail::has_fallback_formatter&lt; detail::value_type&lt; T &gt;, Char &gt;::value) &gt; &gt;</innerclass>
    <innerclass refid="structformatter_3_01_t_00_01_char_00_01enable__if__t_3_01detail_1_1is__map_3_01_t_01_4_1_1value_53212af8d40eae8d53388dcc2cfe05ab" prot="public">formatter&lt; T, Char, enable_if_t&lt; detail::is_map&lt; T &gt;::value &amp;&amp;(is_formattable&lt; detail::value_type&lt; T &gt;, Char &gt;::value||detail::has_fallback_formatter&lt; detail::value_type&lt; T &gt;, Char &gt;::value) &gt; &gt;</innerclass>
    <innerclass refid="structtuple__join__view" prot="public">tuple_join_view</innerclass>
    <innerclass refid="structformatter_3_01tuple__join__view_3_01_char_00_01_t_8_8_8_01_4_00_01_char_01_4" prot="public">formatter&lt; tuple_join_view&lt; Char, T... &gt;, Char &gt;</innerclass>
    <innernamespace refid="namespacedetail">detail</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="bundled_2ranges_8h_1a19537c5bd4967014ccb1a8e3d396bd13" prot="public" static="no">
        <name>FMT_DECLTYPE_RETURN</name>
        <param><defname>val</defname></param>
        <initializer>    -&gt;decltype(val) { return val; } \
    static_assert(                  \
        true, &quot;&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/ranges.h" line="99" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/ranges.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bundled_2ranges_8h_1aba6b5efedb1c0f13aab07315758062d5" prot="public" static="no">
        <name>FMT_TUPLE_JOIN_SPECIFIERS</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/ranges.h" line="682" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/ranges.h" bodystart="682" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="bundled_2ranges_8h_1a8920b749a50a22be883802b82c420d23" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structtuple__join__view" kindref="compound">tuple_join_view</ref>&lt; Char, T... &gt;</type>
        <definition>using tuple_arg_join =  tuple_join_view&lt;Char, T...&gt;</definition>
        <argsstring></argsstring>
        <name>tuple_arg_join</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/ranges.h" line="676" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/ranges.h" bodystart="676" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="bundled_2ranges_8h_1aeb2cbc0f59eb6ed496738f5e9fa68005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>FMT_MODULE_EXPORT_BEGIN FMT_CONSTEXPR auto</type>
        <definition>FMT_MODULE_EXPORT_BEGIN FMT_CONSTEXPR auto join</definition>
        <argsstring>(const std::tuple&lt; T... &gt; &amp;tuple, string_view sep) -&gt; tuple_join_view&lt; char, T... &gt;</argsstring>
        <name>join</name>
        <param>
          <type>const std::tuple&lt; T... &gt; &amp;</type>
          <declname>tuple</declname>
        </param>
        <param>
          <type><ref refid="classbasic__string__view" kindref="compound">string_view</ref></type>
          <declname>sep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Returns an object that formats <computeroutput>tuple</computeroutput> with elements separated by <computeroutput>sep</computeroutput>.</para>
<para>Example**::</para>
<para>std::tuple&lt;int, char&gt; t = {1, &apos;a&apos;}; fmt::print(&quot;{}&quot;, fmt::join(t, &quot;, &quot;)); Output: &quot;1, a&quot; \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/ranges.h" line="761" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/ranges.h" bodystart="761" bodyend="764"/>
      </memberdef>
      <memberdef kind="function" id="bundled_2ranges_8h_1ac0973a76516aa6938da15e829e50273a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>FMT_CONSTEXPR auto</type>
        <definition>FMT_CONSTEXPR auto join</definition>
        <argsstring>(const std::tuple&lt; T... &gt; &amp;tuple, basic_string_view&lt; wchar_t &gt; sep) -&gt; tuple_join_view&lt; wchar_t, T... &gt;</argsstring>
        <name>join</name>
        <param>
          <type>const std::tuple&lt; T... &gt; &amp;</type>
          <declname>tuple</declname>
        </param>
        <param>
          <type><ref refid="classbasic__string__view" kindref="compound">basic_string_view</ref>&lt; wchar_t &gt;</type>
          <declname>sep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/ranges.h" line="767" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/ranges.h" bodystart="767" bodyend="771"/>
      </memberdef>
      <memberdef kind="function" id="bundled_2ranges_8h_1ac0daba1ce2545256b1e818f3e0446332" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto join</definition>
        <argsstring>(std::initializer_list&lt; T &gt; list, string_view sep) -&gt; join_view&lt; const T *, const T * &gt;</argsstring>
        <name>join</name>
        <param>
          <type>std::initializer_list&lt; T &gt;</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="classbasic__string__view" kindref="compound">string_view</ref></type>
          <declname>sep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Returns an object that formats <computeroutput>initializer_list</computeroutput> with elements separated by <computeroutput>sep</computeroutput>.</para>
<para>Example**::</para>
<para>fmt::print(&quot;{}&quot;, fmt::join({1, 2, 3}, &quot;, &quot;)); Output: &quot;1, 2, 3&quot; \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/ranges.h" line="785" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/ranges.h" bodystart="785" bodyend="788"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Formatting<sp/>library<sp/>for<sp/>C++<sp/>-<sp/>experimental<sp/>range<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2012<sp/>-<sp/>present,<sp/>Victor<sp/>Zverovich</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>the<sp/>license<sp/>information<sp/>refer<sp/>to<sp/>format.h.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2018<sp/>-<sp/>present,<sp/>Remotion<sp/>(Igor<sp/>Schulz)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>Rights<sp/>Reserved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{fmt}<sp/>support<sp/>for<sp/>ranges,<sp/>containers<sp/>and<sp/>types<sp/>tuple<sp/>interface.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_RANGES_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_RANGES_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;initializer_list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;format.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal">FMT_BEGIN_NAMESPACE</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RangeT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIterator&gt;</highlight></codeline>
<codeline lineno="26"><highlight class="normal">OutputIterator<sp/>copy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RangeT&amp;<sp/>range,<sp/>OutputIterator<sp/>out)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>range.begin(),<sp/>end<sp/>=<sp/>range.end();<sp/>it<sp/>!=<sp/>end;<sp/>++it)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIterator&gt;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">OutputIterator<sp/>copy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/>OutputIterator<sp/>out)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*str)<sp/>*out++<sp/>=<sp/>*str++;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIterator&gt;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">OutputIterator<sp/>copy(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch,<sp/>OutputIterator<sp/>out)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>*out++<sp/>=<sp/>ch;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIterator&gt;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">OutputIterator<sp/>copy(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>ch,<sp/>OutputIterator<sp/>out)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>*out++<sp/>=<sp/>ch;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>T<sp/>has<sp/>a<sp/>std::string-like<sp/>interface,<sp/>like<sp/>std::string_view.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="classdetail_1_1is__std__string__like" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdetail_1_1is__std__string__like" kindref="compound">is_std_string_like</ref><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>check(U*<sp/>p)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">((void)p-&gt;find(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">),<sp/>p-&gt;length(),<sp/>(void)p-&gt;data(),<sp/>int());</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check(...);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FMT_CONSTEXPR_DECL<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>=</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structis__string" kindref="compound">is_string&lt;T&gt;::value</ref><sp/>||</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::is_convertible&lt;T,<sp/>std_string_view&lt;char&gt;&gt;<ref refid="classvalue" kindref="compound">::value</ref><sp/>||</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_void&lt;decltype(check&lt;T&gt;(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">))&gt;::<ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="62"><highlight class="normal">};</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="65" refid="structdetail_1_1is__std__string__like_3_01fmt_1_1basic__string__view_3_01_char_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="classdetail_1_1is__std__string__like" kindref="compound">is_std_string_like</ref>&lt;fmt::<ref refid="classbasic__string__view" kindref="compound">basic_string_view</ref>&lt;Char&gt;&gt;<sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="classdetail_1_1is__map" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdetail_1_1is__map" kindref="compound">is_map</ref><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>check(U*)<sp/>-&gt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U::mapped_type;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check(...);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FMT_FORMAT_MAP_AS_LIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FMT_CONSTEXPR_DECL<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FMT_CONSTEXPR_DECL<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>=</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_void&lt;decltype(check&lt;T&gt;(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">))&gt;::<ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="classdetail_1_1is__set" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdetail_1_1is__set" kindref="compound">is_set</ref><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>check(U*)<sp/>-&gt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U::key_type;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check(...);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FMT_FORMAT_SET_AS_LIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FMT_CONSTEXPR_DECL<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FMT_CONSTEXPR_DECL<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>=</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_void&lt;decltype(check&lt;T&gt;(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">))&gt;::<ref refid="classvalue" kindref="compound">value</ref><sp/>&amp;&amp;<sp/>!<ref refid="classdetail_1_1is__map" kindref="compound">is_map&lt;T&gt;::value</ref>;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal">};</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="structdetail_1_1conditional__helper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1conditional__helper" kindref="compound">conditional_helper</ref><sp/>{};</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="structdetail_1_1is__range__" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1is__range__" kindref="compound">is_range_</ref><sp/>:<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!FMT_MSC_VER<sp/>||<sp/>FMT_MSC_VER<sp/>&gt;<sp/>1800</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_DECLTYPE_RETURN(val)<sp/><sp/>\</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>-&gt;decltype(val)<sp/>{<sp/>return<sp/>val;<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="101"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static_assert(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>true,<sp/>&quot;&quot;</highlight><highlight class="normal">)<sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>makes<sp/>it<sp/>so<sp/>that<sp/>a<sp/>semicolon<sp/>is<sp/>required<sp/>after<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>macro,<sp/>which<sp/>helps<sp/>clang-format<sp/>handle<sp/>the<sp/>formatting.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>array<sp/>overload</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>range_begin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>(&amp;arr)[N])<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arr;</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>range_end(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>(&amp;arr)[N])<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arr<sp/>+<sp/>N;</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Enable<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="116" refid="structdetail_1_1has__member__fn__begin__end__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1has__member__fn__begin__end__t" kindref="compound">has_member_fn_begin_end_t</ref><sp/>:<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="119" refid="structdetail_1_1has__member__fn__begin__end__t_3_01_t_00_01void__t_3_01decltype_07std_1_1declval2d279443b63d262c3d0c3ea7654a8b24" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1has__member__fn__begin__end__t" kindref="compound">has_member_fn_begin_end_t</ref>&lt;T,<sp/>void_t&lt;decltype(std::declval&lt;T&gt;().begin()),</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decltype(std::declval&lt;T&gt;().end())&gt;&gt;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Member<sp/>function<sp/>overload</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>range_begin(T&amp;&amp;<sp/>rng)<sp/>FMT_DECLTYPE_RETURN(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T&amp;&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rng).begin());</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>range_end(T&amp;&amp;<sp/>rng)<sp/>FMT_DECLTYPE_RETURN(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T&amp;&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rng).end());</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ADL<sp/>overload.<sp/>Only<sp/>participates<sp/>in<sp/>overload<sp/>resolution<sp/>if<sp/>member<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>are<sp/>not<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>range_begin(T&amp;&amp;<sp/>rng)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/>enable_if_t&lt;!has_member_fn_begin_end_t&lt;T&amp;&amp;&gt;::value,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(begin(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T&amp;&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rng)))&gt;<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T&amp;&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rng));</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>range_end(T&amp;&amp;<sp/>rng)<sp/>-&gt;<sp/>enable_if_t&lt;!has_member_fn_begin_end_t&lt;T&amp;&amp;&gt;::value,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(end(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T&amp;&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rng)))&gt;<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>end(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T&amp;&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rng));</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Enable<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="144" refid="structdetail_1_1has__const__begin__end" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1has__const__begin__end" kindref="compound">has_const_begin_end</ref><sp/>:<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Enable<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="146" refid="structdetail_1_1has__mutable__begin__end" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1has__mutable__begin__end" kindref="compound">has_mutable_begin_end</ref><sp/>:<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="149" refid="structdetail_1_1has__const__begin__end_3_01_t_00_01void__t_3_01decltype_07detail_1_1range__begin4d0cf3c56adb617747d1750d2b5598ac" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1has__const__begin__end" kindref="compound">has_const_begin_end</ref>&lt;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>T,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>void_t&lt;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decltype(detail::range_begin(std::declval&lt;const<sp/>remove_cvref_t&lt;T&gt;&amp;&gt;())),</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decltype(detail::range_end(std::declval&lt;const<sp/>remove_cvref_t&lt;T&gt;&amp;&gt;()))&gt;&gt;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="157" refid="structdetail_1_1has__mutable__begin__end_3_01_t_00_01void__t_3_01decltype_07detail_1_1range__begd5f2729531552232d214cda8da44d539" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1has__mutable__begin__end" kindref="compound">has_mutable_begin_end</ref>&lt;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>T,<sp/>void_t&lt;decltype(detail::range_begin(std::declval&lt;T&gt;())),</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decltype(detail::range_end(std::declval&lt;T&gt;())),</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;std::is_copy_constructible&lt;T&gt;::value&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="164" refid="structdetail_1_1is__range___3_01_t_00_01void_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1is__range__" kindref="compound">is_range_</ref>&lt;T,<sp/>void&gt;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>std::integral_constant&lt;bool,<sp/>(has_const_begin_end&lt;T&gt;::value<sp/>||</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>has_mutable_begin_end&lt;T&gt;::value)&gt;<sp/>{};</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/>FMT_DECLTYPE_RETURN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">//<sp/>tuple_size<sp/>and<sp/>tuple_element<sp/>check.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="classdetail_1_1is__tuple__like__" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdetail_1_1is__tuple__like__" kindref="compound">is_tuple_like_</ref><sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>check(U*<sp/>p)<sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(std::tuple_size&lt;U&gt;::value,<sp/>int());</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check(...);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FMT_CONSTEXPR_DECL<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>=</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_void&lt;decltype(check&lt;T&gt;(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">))&gt;::<ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="179"><highlight class="normal">};</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>integer_sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__cpp_lib_integer_sequence)<sp/>||<sp/>FMT_MSC_VER<sp/>&gt;=<sp/>1900</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>T...<sp/>N&gt;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1integer__sequence" kindref="compound">integer_sequence</ref><sp/>=<sp/>std::integer_sequence&lt;T,<sp/>N...&gt;;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>N&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1integer__sequence" kindref="compound">index_sequence</ref><sp/>=<sp/>std::index_sequence&lt;N...&gt;;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1make__integer__sequence" kindref="compound">make_index_sequence</ref><sp/>=<sp/>std::make_index_sequence&lt;N&gt;;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="structdetail_1_1integer__sequence" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>T...<sp/>N&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1integer__sequence" kindref="compound">integer_sequence</ref><sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>value_type<sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(N);<sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal">};</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>N&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1integer__sequence" kindref="compound">index_sequence</ref><sp/>=<sp/><ref refid="structdetail_1_1integer__sequence" kindref="compound">integer_sequence</ref>&lt;size_t,<sp/>N...&gt;;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N,<sp/>T...<sp/>Ns&gt;</highlight></codeline>
<codeline lineno="197" refid="structdetail_1_1make__integer__sequence" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1make__integer__sequence" kindref="compound">make_integer_sequence</ref><sp/>:<sp/><ref refid="structdetail_1_1make__integer__sequence" kindref="compound">make_integer_sequence</ref>&lt;T,<sp/>N<sp/>-<sp/>1,<sp/>N<sp/>-<sp/>1,<sp/>Ns...&gt;<sp/>{};</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>T...<sp/>Ns&gt;</highlight></codeline>
<codeline lineno="199" refid="structdetail_1_1make__integer__sequence_3_01_t_00_010_00_01_ns_8_8_8_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1make__integer__sequence" kindref="compound">make_integer_sequence</ref>&lt;T,<sp/>0,<sp/>Ns...&gt;<sp/>:<sp/><ref refid="structdetail_1_1integer__sequence" kindref="compound">integer_sequence</ref>&lt;T,<sp/>Ns...&gt;<sp/>{};</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1make__integer__sequence" kindref="compound">make_index_sequence</ref><sp/>=<sp/><ref refid="structdetail_1_1make__integer__sequence" kindref="compound">make_integer_sequence&lt;size_t, N&gt;</ref>;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Tuple,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">F,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>Is&gt;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>for_each(<ref refid="structdetail_1_1integer__sequence" kindref="compound">index_sequence&lt;Is...&gt;</ref>,<sp/>Tuple&amp;&amp;<sp/>tup,<sp/>F&amp;&amp;<sp/>f)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::get;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>using<sp/>free<sp/>function<sp/>get&lt;I&gt;(T)<sp/>now.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_[]<sp/>=<sp/>{0,<sp/>((void)f(get&lt;Is&gt;(tup)),<sp/>0)...};</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>(void)_;<sp/><sp/></highlight><highlight class="comment">//<sp/>blocks<sp/>warnings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="214"><highlight class="normal">FMT_CONSTEXPR<sp/>make_index_sequence&lt;std::tuple_size&lt;T&gt;::value&gt;<sp/>get_indexes(</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Tuple,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>for_each(Tuple&amp;&amp;<sp/>tup,<sp/>F&amp;&amp;<sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>indexes<sp/>=<sp/>get_indexes(tup);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>for_each(indexes,<sp/>std::forward&lt;Tuple&gt;(tup),<sp/>std::forward&lt;F&gt;(f));</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Range&gt;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>value_type<sp/>=</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>remove_cvref_t&lt;decltype(*detail::range_begin(std::declval&lt;Range&gt;()))&gt;;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt&gt;<sp/>OutputIt<sp/>write_delimiter(OutputIt<sp/>out)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>*out++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>*out++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234" refid="structdetail_1_1singleton" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1singleton" kindref="compound">singleton</ref><sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>upper;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>lower_count;</highlight></codeline>
<codeline lineno="237"><highlight class="normal">};</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>is_printable(uint16_t<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1singleton" kindref="compound">singleton</ref>*<sp/>singletons,</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>singletons_size,</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>singleton_lowers,</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>normal,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>normal_size)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>upper<sp/>=<sp/>x<sp/>&gt;&gt;<sp/>8;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lower_start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>singletons_size;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>singletons[i];</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lower_end<sp/>=<sp/>lower_start<sp/>+<sp/>s.lower_count;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(upper<sp/>&lt;<sp/>s.upper)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(upper<sp/>==<sp/>s.upper)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>lower_start;<sp/>j<sp/>&lt;<sp/>lower_end;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(singleton_lowers[j]<sp/>==<sp/>(x<sp/>&amp;<sp/>0xff))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>lower_start<sp/>=<sp/>lower_end;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>xsigned<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(x);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>current<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>normal_size;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(normal[i]);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>(v<sp/>&amp;<sp/>0x80)<sp/>!=<sp/>0<sp/>?<sp/>(v<sp/>&amp;<sp/>0x7f)<sp/>&lt;&lt;<sp/>8<sp/>|<sp/>normal[++i]<sp/>:<sp/>v;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>xsigned<sp/>-=<sp/>len;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xsigned<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/>!current;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current;</highlight></codeline>
<codeline lineno="268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>code<sp/>point<sp/>cp<sp/>is<sp/>printable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>code<sp/>is<sp/>generated<sp/>by<sp/>support/printable.py.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>is_printable(uint32_t<sp/>cp)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>singleton<sp/>singletons0[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x00,<sp/>1},<sp/><sp/>{0x03,<sp/>5},<sp/><sp/>{0x05,<sp/>6},<sp/><sp/>{0x06,<sp/>3},<sp/><sp/>{0x07,<sp/>6},<sp/><sp/>{0x08,<sp/>8},</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x09,<sp/>17},<sp/>{0x0a,<sp/>28},<sp/>{0x0b,<sp/>25},<sp/>{0x0c,<sp/>20},<sp/>{0x0d,<sp/>16},<sp/>{0x0e,<sp/>13},</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x0f,<sp/>4},<sp/><sp/>{0x10,<sp/>3},<sp/><sp/>{0x12,<sp/>18},<sp/>{0x13,<sp/>9},<sp/><sp/>{0x16,<sp/>1},<sp/><sp/>{0x17,<sp/>5},</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x18,<sp/>2},<sp/><sp/>{0x19,<sp/>3},<sp/><sp/>{0x1a,<sp/>7},<sp/><sp/>{0x1c,<sp/>2},<sp/><sp/>{0x1d,<sp/>1},<sp/><sp/>{0x1f,<sp/>22},</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x20,<sp/>3},<sp/><sp/>{0x2b,<sp/>3},<sp/><sp/>{0x2c,<sp/>2},<sp/><sp/>{0x2d,<sp/>11},<sp/>{0x2e,<sp/>1},<sp/><sp/>{0x30,<sp/>3},</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x31,<sp/>2},<sp/><sp/>{0x32,<sp/>1},<sp/><sp/>{0xa7,<sp/>2},<sp/><sp/>{0xa9,<sp/>2},<sp/><sp/>{0xaa,<sp/>4},<sp/><sp/>{0xab,<sp/>8},</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xfa,<sp/>2},<sp/><sp/>{0xfb,<sp/>5},<sp/><sp/>{0xfd,<sp/>4},<sp/><sp/>{0xfe,<sp/>3},<sp/><sp/>{0xff,<sp/>9},</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>singletons0_lower[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xad,<sp/>0x78,<sp/>0x79,<sp/>0x8b,<sp/>0x8d,<sp/>0xa2,<sp/>0x30,<sp/>0x57,<sp/>0x58,<sp/>0x8b,<sp/>0x8c,<sp/>0x90,</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x1c,<sp/>0x1d,<sp/>0xdd,<sp/>0x0e,<sp/>0x0f,<sp/>0x4b,<sp/>0x4c,<sp/>0xfb,<sp/>0xfc,<sp/>0x2e,<sp/>0x2f,<sp/>0x3f,</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x5c,<sp/>0x5d,<sp/>0x5f,<sp/>0xb5,<sp/>0xe2,<sp/>0x84,<sp/>0x8d,<sp/>0x8e,<sp/>0x91,<sp/>0x92,<sp/>0xa9,<sp/>0xb1,</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xba,<sp/>0xbb,<sp/>0xc5,<sp/>0xc6,<sp/>0xc9,<sp/>0xca,<sp/>0xde,<sp/>0xe4,<sp/>0xe5,<sp/>0xff,<sp/>0x00,<sp/>0x04,</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x11,<sp/>0x12,<sp/>0x29,<sp/>0x31,<sp/>0x34,<sp/>0x37,<sp/>0x3a,<sp/>0x3b,<sp/>0x3d,<sp/>0x49,<sp/>0x4a,<sp/>0x5d,</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x84,<sp/>0x8e,<sp/>0x92,<sp/>0xa9,<sp/>0xb1,<sp/>0xb4,<sp/>0xba,<sp/>0xbb,<sp/>0xc6,<sp/>0xca,<sp/>0xce,<sp/>0xcf,</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xe4,<sp/>0xe5,<sp/>0x00,<sp/>0x04,<sp/>0x0d,<sp/>0x0e,<sp/>0x11,<sp/>0x12,<sp/>0x29,<sp/>0x31,<sp/>0x34,<sp/>0x3a,</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x3b,<sp/>0x45,<sp/>0x46,<sp/>0x49,<sp/>0x4a,<sp/>0x5e,<sp/>0x64,<sp/>0x65,<sp/>0x84,<sp/>0x91,<sp/>0x9b,<sp/>0x9d,</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xc9,<sp/>0xce,<sp/>0xcf,<sp/>0x0d,<sp/>0x11,<sp/>0x29,<sp/>0x45,<sp/>0x49,<sp/>0x57,<sp/>0x64,<sp/>0x65,<sp/>0x8d,</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x91,<sp/>0xa9,<sp/>0xb4,<sp/>0xba,<sp/>0xbb,<sp/>0xc5,<sp/>0xc9,<sp/>0xdf,<sp/>0xe4,<sp/>0xe5,<sp/>0xf0,<sp/>0x0d,</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x11,<sp/>0x45,<sp/>0x49,<sp/>0x64,<sp/>0x65,<sp/>0x80,<sp/>0x84,<sp/>0xb2,<sp/>0xbc,<sp/>0xbe,<sp/>0xbf,<sp/>0xd5,</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xd7,<sp/>0xf0,<sp/>0xf1,<sp/>0x83,<sp/>0x85,<sp/>0x8b,<sp/>0xa4,<sp/>0xa6,<sp/>0xbe,<sp/>0xbf,<sp/>0xc5,<sp/>0xc7,</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xce,<sp/>0xcf,<sp/>0xda,<sp/>0xdb,<sp/>0x48,<sp/>0x98,<sp/>0xbd,<sp/>0xcd,<sp/>0xc6,<sp/>0xce,<sp/>0xcf,<sp/>0x49,</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x4e,<sp/>0x4f,<sp/>0x57,<sp/>0x59,<sp/>0x5e,<sp/>0x5f,<sp/>0x89,<sp/>0x8e,<sp/>0x8f,<sp/>0xb1,<sp/>0xb6,<sp/>0xb7,</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xbf,<sp/>0xc1,<sp/>0xc6,<sp/>0xc7,<sp/>0xd7,<sp/>0x11,<sp/>0x16,<sp/>0x17,<sp/>0x5b,<sp/>0x5c,<sp/>0xf6,<sp/>0xf7,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xfe,<sp/>0xff,<sp/>0x80,<sp/>0x0d,<sp/>0x6d,<sp/>0x71,<sp/>0xde,<sp/>0xdf,<sp/>0x0e,<sp/>0x0f,<sp/>0x1f,<sp/>0x6e,</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x6f,<sp/>0x1c,<sp/>0x1d,<sp/>0x5f,<sp/>0x7d,<sp/>0x7e,<sp/>0xae,<sp/>0xaf,<sp/>0xbb,<sp/>0xbc,<sp/>0xfa,<sp/>0x16,</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x17,<sp/>0x1e,<sp/>0x1f,<sp/>0x46,<sp/>0x47,<sp/>0x4e,<sp/>0x4f,<sp/>0x58,<sp/>0x5a,<sp/>0x5c,<sp/>0x5e,<sp/>0x7e,</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x7f,<sp/>0xb5,<sp/>0xc5,<sp/>0xd4,<sp/>0xd5,<sp/>0xdc,<sp/>0xf0,<sp/>0xf1,<sp/>0xf5,<sp/>0x72,<sp/>0x73,<sp/>0x8f,</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x74,<sp/>0x75,<sp/>0x96,<sp/>0x2f,<sp/>0x5f,<sp/>0x26,<sp/>0x2e,<sp/>0x2f,<sp/>0xa7,<sp/>0xaf,<sp/>0xb7,<sp/>0xbf,</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xc7,<sp/>0xcf,<sp/>0xd7,<sp/>0xdf,<sp/>0x9a,<sp/>0x40,<sp/>0x97,<sp/>0x98,<sp/>0x30,<sp/>0x8f,<sp/>0x1f,<sp/>0xc0,</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xc1,<sp/>0xce,<sp/>0xff,<sp/>0x4e,<sp/>0x4f,<sp/>0x5a,<sp/>0x5b,<sp/>0x07,<sp/>0x08,<sp/>0x0f,<sp/>0x10,<sp/>0x27,</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x2f,<sp/>0xee,<sp/>0xef,<sp/>0x6e,<sp/>0x6f,<sp/>0x37,<sp/>0x3d,<sp/>0x3f,<sp/>0x42,<sp/>0x45,<sp/>0x90,<sp/>0x91,</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xfe,<sp/>0xff,<sp/>0x53,<sp/>0x67,<sp/>0x75,<sp/>0xc8,<sp/>0xc9,<sp/>0xd0,<sp/>0xd1,<sp/>0xd8,<sp/>0xd9,<sp/>0xe7,</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xfe,<sp/>0xff,</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>singleton<sp/>singletons1[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x00,<sp/>6},<sp/><sp/>{0x01,<sp/>1},<sp/>{0x03,<sp/>1},<sp/><sp/>{0x04,<sp/>2},<sp/>{0x08,<sp/>8},<sp/><sp/>{0x09,<sp/>2},</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x0a,<sp/>5},<sp/><sp/>{0x0b,<sp/>2},<sp/>{0x0e,<sp/>4},<sp/><sp/>{0x10,<sp/>1},<sp/>{0x11,<sp/>2},<sp/><sp/>{0x12,<sp/>5},</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x13,<sp/>17},<sp/>{0x14,<sp/>1},<sp/>{0x15,<sp/>2},<sp/><sp/>{0x17,<sp/>2},<sp/>{0x19,<sp/>13},<sp/>{0x1c,<sp/>5},</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x1d,<sp/>8},<sp/><sp/>{0x24,<sp/>1},<sp/>{0x6a,<sp/>3},<sp/><sp/>{0x6b,<sp/>2},<sp/>{0xbc,<sp/>2},<sp/><sp/>{0xd1,<sp/>2},</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd4,<sp/>12},<sp/>{0xd5,<sp/>9},<sp/>{0xd6,<sp/>2},<sp/><sp/>{0xd7,<sp/>2},<sp/>{0xda,<sp/>1},<sp/><sp/>{0xe0,<sp/>5},</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe1,<sp/>2},<sp/><sp/>{0xe8,<sp/>2},<sp/>{0xee,<sp/>32},<sp/>{0xf0,<sp/>4},<sp/>{0xf8,<sp/>2},<sp/><sp/>{0xf9,<sp/>2},</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xfa,<sp/>2},<sp/><sp/>{0xfb,<sp/>1},</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>singletons1_lower[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x0c,<sp/>0x27,<sp/>0x3b,<sp/>0x3e,<sp/>0x4e,<sp/>0x4f,<sp/>0x8f,<sp/>0x9e,<sp/>0x9e,<sp/>0x9f,<sp/>0x06,<sp/>0x07,</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x09,<sp/>0x36,<sp/>0x3d,<sp/>0x3e,<sp/>0x56,<sp/>0xf3,<sp/>0xd0,<sp/>0xd1,<sp/>0x04,<sp/>0x14,<sp/>0x18,<sp/>0x36,</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x37,<sp/>0x56,<sp/>0x57,<sp/>0x7f,<sp/>0xaa,<sp/>0xae,<sp/>0xaf,<sp/>0xbd,<sp/>0x35,<sp/>0xe0,<sp/>0x12,<sp/>0x87,</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x89,<sp/>0x8e,<sp/>0x9e,<sp/>0x04,<sp/>0x0d,<sp/>0x0e,<sp/>0x11,<sp/>0x12,<sp/>0x29,<sp/>0x31,<sp/>0x34,<sp/>0x3a,</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x45,<sp/>0x46,<sp/>0x49,<sp/>0x4a,<sp/>0x4e,<sp/>0x4f,<sp/>0x64,<sp/>0x65,<sp/>0x5c,<sp/>0xb6,<sp/>0xb7,<sp/>0x1b,</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x1c,<sp/>0x07,<sp/>0x08,<sp/>0x0a,<sp/>0x0b,<sp/>0x14,<sp/>0x17,<sp/>0x36,<sp/>0x39,<sp/>0x3a,<sp/>0xa8,<sp/>0xa9,</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xd8,<sp/>0xd9,<sp/>0x09,<sp/>0x37,<sp/>0x90,<sp/>0x91,<sp/>0xa8,<sp/>0x07,<sp/>0x0a,<sp/>0x3b,<sp/>0x3e,<sp/>0x66,</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x69,<sp/>0x8f,<sp/>0x92,<sp/>0x6f,<sp/>0x5f,<sp/>0xee,<sp/>0xef,<sp/>0x5a,<sp/>0x62,<sp/>0x9a,<sp/>0x9b,<sp/>0x27,</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x28,<sp/>0x55,<sp/>0x9d,<sp/>0xa0,<sp/>0xa1,<sp/>0xa3,<sp/>0xa4,<sp/>0xa7,<sp/>0xa8,<sp/>0xad,<sp/>0xba,<sp/>0xbc,</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xc4,<sp/>0x06,<sp/>0x0b,<sp/>0x0c,<sp/>0x15,<sp/>0x1d,<sp/>0x3a,<sp/>0x3f,<sp/>0x45,<sp/>0x51,<sp/>0xa6,<sp/>0xa7,</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xcc,<sp/>0xcd,<sp/>0xa0,<sp/>0x07,<sp/>0x19,<sp/>0x1a,<sp/>0x22,<sp/>0x25,<sp/>0x3e,<sp/>0x3f,<sp/>0xc5,<sp/>0xc6,</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x04,<sp/>0x20,<sp/>0x23,<sp/>0x25,<sp/>0x26,<sp/>0x28,<sp/>0x33,<sp/>0x38,<sp/>0x3a,<sp/>0x48,<sp/>0x4a,<sp/>0x4c,</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x50,<sp/>0x53,<sp/>0x55,<sp/>0x56,<sp/>0x58,<sp/>0x5a,<sp/>0x5c,<sp/>0x5e,<sp/>0x60,<sp/>0x63,<sp/>0x65,<sp/>0x66,</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x6b,<sp/>0x73,<sp/>0x78,<sp/>0x7d,<sp/>0x7f,<sp/>0x8a,<sp/>0xa4,<sp/>0xaa,<sp/>0xaf,<sp/>0xb0,<sp/>0xc0,<sp/>0xd0,</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xae,<sp/>0xaf,<sp/>0x79,<sp/>0xcc,<sp/>0x6e,<sp/>0x6f,<sp/>0x93,</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>normal0[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x00,<sp/>0x20,<sp/>0x5f,<sp/>0x22,<sp/>0x82,<sp/>0xdf,<sp/>0x04,<sp/>0x82,<sp/>0x44,<sp/>0x08,<sp/>0x1b,<sp/>0x04,</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x06,<sp/>0x11,<sp/>0x81,<sp/>0xac,<sp/>0x0e,<sp/>0x80,<sp/>0xab,<sp/>0x35,<sp/>0x28,<sp/>0x0b,<sp/>0x80,<sp/>0xe0,</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x03,<sp/>0x19,<sp/>0x08,<sp/>0x01,<sp/>0x04,<sp/>0x2f,<sp/>0x04,<sp/>0x34,<sp/>0x04,<sp/>0x07,<sp/>0x03,<sp/>0x01,</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x07,<sp/>0x06,<sp/>0x07,<sp/>0x11,<sp/>0x0a,<sp/>0x50,<sp/>0x0f,<sp/>0x12,<sp/>0x07,<sp/>0x55,<sp/>0x07,<sp/>0x03,</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x04,<sp/>0x1c,<sp/>0x0a,<sp/>0x09,<sp/>0x03,<sp/>0x08,<sp/>0x03,<sp/>0x07,<sp/>0x03,<sp/>0x02,<sp/>0x03,<sp/>0x03,</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x03,<sp/>0x0c,<sp/>0x04,<sp/>0x05,<sp/>0x03,<sp/>0x0b,<sp/>0x06,<sp/>0x01,<sp/>0x0e,<sp/>0x15,<sp/>0x05,<sp/>0x3a,</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x03,<sp/>0x11,<sp/>0x07,<sp/>0x06,<sp/>0x05,<sp/>0x10,<sp/>0x07,<sp/>0x57,<sp/>0x07,<sp/>0x02,<sp/>0x07,<sp/>0x15,</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x0d,<sp/>0x50,<sp/>0x04,<sp/>0x43,<sp/>0x03,<sp/>0x2d,<sp/>0x03,<sp/>0x01,<sp/>0x04,<sp/>0x11,<sp/>0x06,<sp/>0x0f,</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x0c,<sp/>0x3a,<sp/>0x04,<sp/>0x1d,<sp/>0x25,<sp/>0x5f,<sp/>0x20,<sp/>0x6d,<sp/>0x04,<sp/>0x6a,<sp/>0x25,<sp/>0x80,</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xc8,<sp/>0x05,<sp/>0x82,<sp/>0xb0,<sp/>0x03,<sp/>0x1a,<sp/>0x06,<sp/>0x82,<sp/>0xfd,<sp/>0x03,<sp/>0x59,<sp/>0x07,</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x15,<sp/>0x0b,<sp/>0x17,<sp/>0x09,<sp/>0x14,<sp/>0x0c,<sp/>0x14,<sp/>0x0c,<sp/>0x6a,<sp/>0x06,<sp/>0x0a,<sp/>0x06,</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x1a,<sp/>0x06,<sp/>0x59,<sp/>0x07,<sp/>0x2b,<sp/>0x05,<sp/>0x46,<sp/>0x0a,<sp/>0x2c,<sp/>0x04,<sp/>0x0c,<sp/>0x04,</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x01,<sp/>0x03,<sp/>0x31,<sp/>0x0b,<sp/>0x2c,<sp/>0x04,<sp/>0x1a,<sp/>0x06,<sp/>0x0b,<sp/>0x03,<sp/>0x80,<sp/>0xac,</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x06,<sp/>0x0a,<sp/>0x06,<sp/>0x21,<sp/>0x3f,<sp/>0x4c,<sp/>0x04,<sp/>0x2d,<sp/>0x03,<sp/>0x74,<sp/>0x08,<sp/>0x3c,</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x03,<sp/>0x0f,<sp/>0x03,<sp/>0x3c,<sp/>0x07,<sp/>0x38,<sp/>0x08,<sp/>0x2b,<sp/>0x05,<sp/>0x82,<sp/>0xff,<sp/>0x11,</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x18,<sp/>0x08,<sp/>0x2f,<sp/>0x11,<sp/>0x2d,<sp/>0x03,<sp/>0x20,<sp/>0x10,<sp/>0x21,<sp/>0x0f,<sp/>0x80,<sp/>0x8c,</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x04,<sp/>0x82,<sp/>0x97,<sp/>0x19,<sp/>0x0b,<sp/>0x15,<sp/>0x88,<sp/>0x94,<sp/>0x05,<sp/>0x2f,<sp/>0x05,<sp/>0x3b,</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x07,<sp/>0x02,<sp/>0x0e,<sp/>0x18,<sp/>0x09,<sp/>0x80,<sp/>0xb3,<sp/>0x2d,<sp/>0x74,<sp/>0x0c,<sp/>0x80,<sp/>0xd6,</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x1a,<sp/>0x0c,<sp/>0x05,<sp/>0x80,<sp/>0xff,<sp/>0x05,<sp/>0x80,<sp/>0xdf,<sp/>0x0c,<sp/>0xee,<sp/>0x0d,<sp/>0x03,</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x84,<sp/>0x8d,<sp/>0x03,<sp/>0x37,<sp/>0x09,<sp/>0x81,<sp/>0x5c,<sp/>0x14,<sp/>0x80,<sp/>0xb8,<sp/>0x08,<sp/>0x80,</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xcb,<sp/>0x2a,<sp/>0x38,<sp/>0x03,<sp/>0x0a,<sp/>0x06,<sp/>0x38,<sp/>0x08,<sp/>0x46,<sp/>0x08,<sp/>0x0c,<sp/>0x06,</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x74,<sp/>0x0b,<sp/>0x1e,<sp/>0x03,<sp/>0x5a,<sp/>0x04,<sp/>0x59,<sp/>0x09,<sp/>0x80,<sp/>0x83,<sp/>0x18,<sp/>0x1c,</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x0a,<sp/>0x16,<sp/>0x09,<sp/>0x4c,<sp/>0x04,<sp/>0x80,<sp/>0x8a,<sp/>0x06,<sp/>0xab,<sp/>0xa4,<sp/>0x0c,<sp/>0x17,</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x04,<sp/>0x31,<sp/>0xa1,<sp/>0x04,<sp/>0x81,<sp/>0xda,<sp/>0x26,<sp/>0x07,<sp/>0x0c,<sp/>0x05,<sp/>0x05,<sp/>0x80,</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xa5,<sp/>0x11,<sp/>0x81,<sp/>0x6d,<sp/>0x10,<sp/>0x78,<sp/>0x28,<sp/>0x2a,<sp/>0x06,<sp/>0x4c,<sp/>0x04,<sp/>0x80,</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x8d,<sp/>0x04,<sp/>0x80,<sp/>0xbe,<sp/>0x03,<sp/>0x1b,<sp/>0x03,<sp/>0x0f,<sp/>0x0d,</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>normal1[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x5e,<sp/>0x22,<sp/>0x7b,<sp/>0x05,<sp/>0x03,<sp/>0x04,<sp/>0x2d,<sp/>0x03,<sp/>0x66,<sp/>0x03,<sp/>0x01,<sp/>0x2f,</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x2e,<sp/>0x80,<sp/>0x82,<sp/>0x1d,<sp/>0x03,<sp/>0x31,<sp/>0x0f,<sp/>0x1c,<sp/>0x04,<sp/>0x24,<sp/>0x09,<sp/>0x1e,</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x05,<sp/>0x2b,<sp/>0x05,<sp/>0x44,<sp/>0x04,<sp/>0x0e,<sp/>0x2a,<sp/>0x80,<sp/>0xaa,<sp/>0x06,<sp/>0x24,<sp/>0x04,</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x24,<sp/>0x04,<sp/>0x28,<sp/>0x08,<sp/>0x34,<sp/>0x0b,<sp/>0x01,<sp/>0x80,<sp/>0x90,<sp/>0x81,<sp/>0x37,<sp/>0x09,</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x16,<sp/>0x0a,<sp/>0x08,<sp/>0x80,<sp/>0x98,<sp/>0x39,<sp/>0x03,<sp/>0x63,<sp/>0x08,<sp/>0x09,<sp/>0x30,<sp/>0x16,</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x05,<sp/>0x21,<sp/>0x03,<sp/>0x1b,<sp/>0x05,<sp/>0x01,<sp/>0x40,<sp/>0x38,<sp/>0x04,<sp/>0x4b,<sp/>0x05,<sp/>0x2f,</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x04,<sp/>0x0a,<sp/>0x07,<sp/>0x09,<sp/>0x07,<sp/>0x40,<sp/>0x20,<sp/>0x27,<sp/>0x04,<sp/>0x0c,<sp/>0x09,<sp/>0x36,</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x03,<sp/>0x3a,<sp/>0x05,<sp/>0x1a,<sp/>0x07,<sp/>0x04,<sp/>0x0c,<sp/>0x07,<sp/>0x50,<sp/>0x49,<sp/>0x37,<sp/>0x33,</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x0d,<sp/>0x33,<sp/>0x07,<sp/>0x2e,<sp/>0x08,<sp/>0x0a,<sp/>0x81,<sp/>0x26,<sp/>0x52,<sp/>0x4e,<sp/>0x28,<sp/>0x08,</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x2a,<sp/>0x56,<sp/>0x1c,<sp/>0x14,<sp/>0x17,<sp/>0x09,<sp/>0x4e,<sp/>0x04,<sp/>0x1e,<sp/>0x0f,<sp/>0x43,<sp/>0x0e,</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x19,<sp/>0x07,<sp/>0x0a,<sp/>0x06,<sp/>0x48,<sp/>0x08,<sp/>0x27,<sp/>0x09,<sp/>0x75,<sp/>0x0b,<sp/>0x3f,<sp/>0x41,</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x2a,<sp/>0x06,<sp/>0x3b,<sp/>0x05,<sp/>0x0a,<sp/>0x06,<sp/>0x51,<sp/>0x06,<sp/>0x01,<sp/>0x05,<sp/>0x10,<sp/>0x03,</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x05,<sp/>0x80,<sp/>0x8b,<sp/>0x62,<sp/>0x1e,<sp/>0x48,<sp/>0x08,<sp/>0x0a,<sp/>0x80,<sp/>0xa6,<sp/>0x5e,<sp/>0x22,</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x45,<sp/>0x0b,<sp/>0x0a,<sp/>0x06,<sp/>0x0d,<sp/>0x13,<sp/>0x39,<sp/>0x07,<sp/>0x0a,<sp/>0x36,<sp/>0x2c,<sp/>0x04,</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x10,<sp/>0x80,<sp/>0xc0,<sp/>0x3c,<sp/>0x64,<sp/>0x53,<sp/>0x0c,<sp/>0x48,<sp/>0x09,<sp/>0x0a,<sp/>0x46,<sp/>0x45,</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x1b,<sp/>0x48,<sp/>0x08,<sp/>0x53,<sp/>0x1d,<sp/>0x39,<sp/>0x81,<sp/>0x07,<sp/>0x46,<sp/>0x0a,<sp/>0x1d,<sp/>0x03,</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x47,<sp/>0x49,<sp/>0x37,<sp/>0x03,<sp/>0x0e,<sp/>0x08,<sp/>0x0a,<sp/>0x06,<sp/>0x39,<sp/>0x07,<sp/>0x0a,<sp/>0x81,</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x36,<sp/>0x19,<sp/>0x80,<sp/>0xb7,<sp/>0x01,<sp/>0x0f,<sp/>0x32,<sp/>0x0d,<sp/>0x83,<sp/>0x9b,<sp/>0x66,<sp/>0x75,</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x0b,<sp/>0x80,<sp/>0xc4,<sp/>0x8a,<sp/>0xbc,<sp/>0x84,<sp/>0x2f,<sp/>0x8f,<sp/>0xd1,<sp/>0x82,<sp/>0x47,<sp/>0xa1,</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xb9,<sp/>0x82,<sp/>0x39,<sp/>0x07,<sp/>0x2a,<sp/>0x04,<sp/>0x02,<sp/>0x60,<sp/>0x26,<sp/>0x0a,<sp/>0x46,<sp/>0x0a,</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x28,<sp/>0x05,<sp/>0x13,<sp/>0x82,<sp/>0xb0,<sp/>0x5b,<sp/>0x65,<sp/>0x4b,<sp/>0x04,<sp/>0x39,<sp/>0x07,<sp/>0x11,</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x40,<sp/>0x05,<sp/>0x0b,<sp/>0x02,<sp/>0x0e,<sp/>0x97,<sp/>0xf8,<sp/>0x08,<sp/>0x84,<sp/>0xd6,<sp/>0x2a,<sp/>0x09,</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xa2,<sp/>0xf7,<sp/>0x81,<sp/>0x1f,<sp/>0x31,<sp/>0x03,<sp/>0x11,<sp/>0x04,<sp/>0x08,<sp/>0x81,<sp/>0x8c,<sp/>0x89,</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x04,<sp/>0x6b,<sp/>0x05,<sp/>0x0d,<sp/>0x03,<sp/>0x09,<sp/>0x07,<sp/>0x10,<sp/>0x93,<sp/>0x60,<sp/>0x80,<sp/>0xf6,</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x0a,<sp/>0x73,<sp/>0x08,<sp/>0x6e,<sp/>0x17,<sp/>0x46,<sp/>0x80,<sp/>0x9a,<sp/>0x14,<sp/>0x0c,<sp/>0x57,<sp/>0x09,</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x19,<sp/>0x80,<sp/>0x87,<sp/>0x81,<sp/>0x47,<sp/>0x03,<sp/>0x85,<sp/>0x42,<sp/>0x0f,<sp/>0x15,<sp/>0x85,<sp/>0x50,</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x2b,<sp/>0x80,<sp/>0xd5,<sp/>0x2d,<sp/>0x03,<sp/>0x1a,<sp/>0x04,<sp/>0x02,<sp/>0x81,<sp/>0x70,<sp/>0x3a,<sp/>0x05,</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x01,<sp/>0x85,<sp/>0x00,<sp/>0x80,<sp/>0xd7,<sp/>0x29,<sp/>0x4c,<sp/>0x04,<sp/>0x0a,<sp/>0x04,<sp/>0x02,<sp/>0x83,</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x11,<sp/>0x44,<sp/>0x4c,<sp/>0x3d,<sp/>0x80,<sp/>0xc2,<sp/>0x3c,<sp/>0x06,<sp/>0x01,<sp/>0x04,<sp/>0x55,<sp/>0x05,</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x1b,<sp/>0x34,<sp/>0x02,<sp/>0x81,<sp/>0x0e,<sp/>0x2c,<sp/>0x04,<sp/>0x64,<sp/>0x0c,<sp/>0x56,<sp/>0x0a,<sp/>0x80,</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xae,<sp/>0x38,<sp/>0x1d,<sp/>0x0d,<sp/>0x2c,<sp/>0x04,<sp/>0x09,<sp/>0x07,<sp/>0x02,<sp/>0x0e,<sp/>0x06,<sp/>0x80,</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x9a,<sp/>0x83,<sp/>0xd8,<sp/>0x08,<sp/>0x0d,<sp/>0x03,<sp/>0x0d,<sp/>0x03,<sp/>0x74,<sp/>0x0c,<sp/>0x59,<sp/>0x07,</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x0c,<sp/>0x14,<sp/>0x0c,<sp/>0x04,<sp/>0x38,<sp/>0x08,<sp/>0x0a,<sp/>0x06,<sp/>0x28,<sp/>0x08,<sp/>0x22,<sp/>0x4e,</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x81,<sp/>0x54,<sp/>0x0c,<sp/>0x15,<sp/>0x03,<sp/>0x03,<sp/>0x05,<sp/>0x07,<sp/>0x09,<sp/>0x19,<sp/>0x07,<sp/>0x07,</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x09,<sp/>0x03,<sp/>0x0d,<sp/>0x07,<sp/>0x29,<sp/>0x80,<sp/>0xcb,<sp/>0x25,<sp/>0x0a,<sp/>0x84,<sp/>0x06,</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lower<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cp);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cp<sp/>&lt;<sp/>0x10000)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is_printable(lower,<sp/>singletons0,</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(singletons0)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*singletons0),</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>singletons0_lower,<sp/>normal0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(normal0));</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cp<sp/>&lt;<sp/>0x20000)<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is_printable(lower,<sp/>singletons1,</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(singletons1)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*singletons1),</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>singletons1_lower,<sp/>normal1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(normal1));</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0x2a6de<sp/>&lt;=<sp/>cp<sp/>&amp;&amp;<sp/>cp<sp/>&lt;<sp/>0x2a700)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0x2b735<sp/>&lt;=<sp/>cp<sp/>&amp;&amp;<sp/>cp<sp/>&lt;<sp/>0x2b740)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0x2b81e<sp/>&lt;=<sp/>cp<sp/>&amp;&amp;<sp/>cp<sp/>&lt;<sp/>0x2b820)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0x2cea2<sp/>&lt;=<sp/>cp<sp/>&amp;&amp;<sp/>cp<sp/>&lt;<sp/>0x2ceb0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0x2ebe1<sp/>&lt;=<sp/>cp<sp/>&amp;&amp;<sp/>cp<sp/>&lt;<sp/>0x2f800)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0x2fa1e<sp/>&lt;=<sp/>cp<sp/>&amp;&amp;<sp/>cp<sp/>&lt;<sp/>0x30000)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0x3134b<sp/>&lt;=<sp/>cp<sp/>&amp;&amp;<sp/>cp<sp/>&lt;<sp/>0xe0100)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0xe01f0<sp/>&lt;=<sp/>cp<sp/>&amp;&amp;<sp/>cp<sp/>&lt;<sp/>0x110000)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cp<sp/>&lt;<sp/>0x110000;</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>needs_escape(uint32_t<sp/>cp)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cp<sp/>&lt;<sp/>0x20<sp/>||<sp/>cp<sp/>==<sp/>0x7f<sp/>||<sp/>cp<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal"><sp/>||<sp/>cp<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!is_printable(cp);</highlight></codeline>
<codeline lineno="425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427" refid="structdetail_1_1find__escape__result" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1find__escape__result" kindref="compound">find_escape_result</ref><sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>begin;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>end;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>uint32_t<sp/>cp;</highlight></codeline>
<codeline lineno="431"><highlight class="normal">};</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>find_escape(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>begin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>end)</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/><ref refid="structdetail_1_1find__escape__result" kindref="compound">find_escape_result&lt;Char&gt;</ref><sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>begin<sp/>!=<sp/>end;<sp/>++begin)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cp<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">typename<sp/>std::make_unsigned&lt;Char&gt;::type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*begin);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Char)<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>cp<sp/>&gt;=<sp/>0x80)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needs_escape(cp))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{begin,<sp/>begin<sp/>+<sp/>1,<sp/>cp};</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{begin,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>0};</highlight></codeline>
<codeline lineno="442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>find_escape(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>begin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>end)</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/>find_escape_result&lt;char&gt;<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_utf8())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>find_escape&lt;char&gt;(begin,<sp/>end);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>find_escape_result&lt;char&gt;{end,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>0};</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>for_each_codepoint(<ref refid="classbasic__string__view" kindref="compound">string_view</ref>(begin,<sp/>to_unsigned(end<sp/>-<sp/>begin)),</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](uint32_t<sp/>cp,<sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>sv)<sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needs_escape(cp))<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>{sv.begin(),<sp/>sv.end(),<sp/>cp};</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt&gt;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>write_range_entry(OutputIt<sp/>out,<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>str)<sp/>-&gt;<sp/>OutputIt<sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>*out++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>begin<sp/>=<sp/>str.begin(),<sp/>end<sp/>=<sp/>str.end();</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>escape<sp/>=<sp/>find_escape(begin,<sp/>end);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>copy_str&lt;Char&gt;(begin,<sp/>escape.begin,<sp/>out);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>begin<sp/>=<sp/>escape.end;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!begin)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(escape.cp);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(escape.cp)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/></highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FMT_FALLTHROUGH;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_utf8())<sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(escape.cp<sp/>&lt;<sp/>0x100)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>format_to(out,<sp/></highlight><highlight class="stringliteral">&quot;\\x{:02x}&quot;</highlight><highlight class="normal">,<sp/>escape.cp);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(escape.cp<sp/>&lt;<sp/>0x10000)<sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>format_to(out,<sp/></highlight><highlight class="stringliteral">&quot;\\u{:04x}&quot;</highlight><highlight class="normal">,<sp/>escape.cp);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(escape.cp<sp/>&lt;<sp/>0x110000)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>format_to(out,<sp/></highlight><highlight class="stringliteral">&quot;\\U{:08x}&quot;</highlight><highlight class="normal">,<sp/>escape.cp);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Char<sp/>escape_char<sp/>:<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref>(</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>escape.begin,<sp/>to_unsigned(escape.end<sp/>-<sp/>escape.begin)))<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>format_to(</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out,<sp/></highlight><highlight class="stringliteral">&quot;\\x{:02x}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">typename<sp/>std::make_unsigned&lt;Char&gt;::type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(escape_char));</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(begin<sp/>!=<sp/>end);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>*out++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="514"><highlight class="normal">}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ENABLE_IF(std::is_convertible&lt;T,<sp/><ref refid="structstd__string__view" kindref="compound">std_string_view&lt;char&gt;</ref>&gt;::<ref refid="classvalue" kindref="compound">value</ref>)&gt;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>write_range_entry(OutputIt<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>str)<sp/>-&gt;<sp/>OutputIt<sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sv<sp/>=<sp/><ref refid="structstd__string__view" kindref="compound">std_string_view&lt;Char&gt;</ref>(str);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>write_range_entry&lt;Char&gt;(out,<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref>(sv));</highlight></codeline>
<codeline lineno="521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Arg,</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ENABLE_IF(std::is_same&lt;Arg,<sp/>Char&gt;::value)&gt;</highlight></codeline>
<codeline lineno="525"><highlight class="normal">OutputIt<sp/>write_range_entry(OutputIt<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Arg<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>*out++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>*out++<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>*out++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Arg,</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_ENABLE_IF(!is_std_string_like&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::decay&lt;Arg&gt;::type&gt;::<ref refid="classvalue" kindref="compound">value</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_same&lt;Arg,<sp/>Char&gt;::value)&gt;</highlight></codeline>
<codeline lineno="536"><highlight class="normal">OutputIt<sp/>write_range_entry(OutputIt<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Arg&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>write&lt;Char&gt;(out,<sp/>v);</highlight></codeline>
<codeline lineno="538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542" refid="structis__tuple__like" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__tuple__like" kindref="compound">is_tuple_like</ref><sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FMT_CONSTEXPR_DECL<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>=</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdetail_1_1is__tuple__like__" kindref="compound">detail::is_tuple_like_&lt;T&gt;::value</ref><sp/>&amp;&amp;<sp/>!<ref refid="structdetail_1_1is__range__" kindref="compound">detail::is_range_&lt;T&gt;::value</ref>;</highlight></codeline>
<codeline lineno="545"><highlight class="normal">};</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TupleT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="548" refid="structformatter_3_01_tuple_t_00_01_char_00_01enable__if__t_3_01fmt_1_1is__tuple__like_3_01_tuple_t_01_4_1_1value_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structformatter" kindref="compound">formatter</ref>&lt;TupleT,<sp/>Char,<sp/>enable_if_t&lt;fmt::<ref refid="structis__tuple__like" kindref="compound">is_tuple_like</ref>&lt;TupleT&gt;<ref refid="classvalue" kindref="compound">::value</ref>&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>C++11<sp/>generic<sp/>lambda<sp/>for<sp/>format().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FormatContext&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">format_each<sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0)<sp/>out<sp/>=<sp/>detail::write_delimiter(out);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>detail::write_range_entry&lt;Char&gt;(out,<sp/>v);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FormatContext::iterator&amp;<sp/>out;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ParseContext&gt;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parse(ParseContext&amp;<sp/>ctx)<sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(ctx.begin())<sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ctx.begin();</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FormatContext<sp/>=<sp/>format_context&gt;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TupleT&amp;<sp/>values,<sp/>FormatContext&amp;<sp/>ctx)<sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(ctx.out())<sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out<sp/>=<sp/>ctx.out();</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::for_each(values,<sp/>format_each&lt;FormatContext&gt;{0,<sp/>out});</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal">};</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577" refid="structis__range" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__range" kindref="compound">is_range</ref><sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FMT_CONSTEXPR_DECL<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>=</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdetail_1_1is__range__" kindref="compound">detail::is_range_&lt;T&gt;::value</ref><sp/>&amp;&amp;<sp/>!<ref refid="classdetail_1_1is__std__string__like" kindref="compound">detail::is_std_string_like&lt;T&gt;::value</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="classdetail_1_1is__map" kindref="compound">detail::is_map&lt;T&gt;::value</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_convertible&lt;T,<sp/>std::basic_string&lt;Char&gt;&gt;<ref refid="classvalue" kindref="compound">::value</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_constructible&lt;detail::std_string_view&lt;Char&gt;,<sp/>T&gt;<ref refid="classvalue" kindref="compound">::value</ref>;</highlight></codeline>
<codeline lineno="583"><highlight class="normal">};</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="586" refid="structformatter_3_01_t_00_01_char_00_01enable__if__t_3_01fmt_1_1is__range_3_01_t_00_01_char_01_4cba26440f94df2f142946ab02c9c1c06" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structformatter" kindref="compound">formatter</ref>&lt;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>T,<sp/>Char,</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>enable_if_t&lt;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt::<ref refid="structis__range" kindref="compound">is_range</ref>&lt;T,<sp/>Char&gt;<ref refid="classvalue" kindref="compound">::value</ref></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Workaround<sp/>a<sp/>bug<sp/>in<sp/>MSVC<sp/>2019<sp/>and<sp/>earlier.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!FMT_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(is_formattable&lt;detail::value_type&lt;T&gt;,<sp/>Char&gt;::value<sp/>||</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::has_fallback_formatter&lt;detail::value_type&lt;T&gt;,<sp/>Char&gt;::value)</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ParseContext&gt;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parse(ParseContext&amp;<sp/>ctx)<sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(ctx.begin())<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ctx.begin();</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FormatContext,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ENABLE_IF(</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;U,<sp/>conditional_t&lt;<ref refid="structdetail_1_1has__const__begin__end" kindref="compound">detail::has_const_begin_end&lt;T&gt;::value</ref>,</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T,<sp/>T&gt;&gt;::<ref refid="classvalue" kindref="compound">value</ref>)&gt;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format(U&amp;<sp/>range,<sp/>FormatContext&amp;<sp/>ctx)<sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(ctx.out())<sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FMT_DEPRECATED_BRACED_RANGES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>Char<sp/>prefix<sp/>=<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>Char<sp/>postfix<sp/>=<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>Char<sp/>prefix<sp/>=<sp/><ref refid="classdetail_1_1is__set" kindref="compound">detail::is_set&lt;T&gt;::value</ref><sp/>?<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>Char<sp/>postfix<sp/>=<sp/><ref refid="classdetail_1_1is__set" kindref="compound">detail::is_set&lt;T&gt;::value</ref><sp/>?<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out<sp/>=<sp/>ctx.out();</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>prefix;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::begin(range);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>std::end(range);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it<sp/>!=<sp/>end;<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0)<sp/>out<sp/>=<sp/>detail::write_delimiter(out);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>detail::write_range_entry&lt;Char&gt;(out,<sp/>*it);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>postfix;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="627"><highlight class="normal">};</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="630" refid="structformatter_3_01_t_00_01_char_00_01enable__if__t_3_01detail_1_1is__map_3_01_t_01_4_1_1value_53212af8d40eae8d53388dcc2cfe05ab" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structformatter" kindref="compound">formatter</ref>&lt;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>T,<sp/>Char,</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>enable_if_t&lt;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::is_map&lt;T&gt;<ref refid="classvalue" kindref="compound">::value</ref></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Workaround<sp/>a<sp/>bug<sp/>in<sp/>MSVC<sp/>2019<sp/>and<sp/>earlier.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!FMT_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(is_formattable&lt;detail::value_type&lt;T&gt;,<sp/>Char&gt;::value<sp/>||</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::has_fallback_formatter&lt;detail::value_type&lt;T&gt;,<sp/>Char&gt;::value)</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ParseContext&gt;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parse(ParseContext&amp;<sp/>ctx)<sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(ctx.begin())<sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ctx.begin();</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FormatContext,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ENABLE_IF(</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;U,<sp/>conditional_t&lt;<ref refid="structdetail_1_1has__const__begin__end" kindref="compound">detail::has_const_begin_end&lt;T&gt;::value</ref>,</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T,<sp/>T&gt;&gt;::<ref refid="classvalue" kindref="compound">value</ref>)&gt;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format(U&amp;<sp/>map,<sp/>FormatContext&amp;<sp/>ctx)<sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(ctx.out())<sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out<sp/>=<sp/>ctx.out();</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>item<sp/>:<sp/>map)<sp/>{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0)<sp/>out<sp/>=<sp/>detail::write_delimiter(out);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>detail::write_range_entry&lt;Char&gt;(out,<sp/>item.first);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>detail::write_range_entry&lt;Char&gt;(out,<sp/>item.second);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="665"><highlight class="normal">};</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667" refid="structtuple__join__view" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtuple__join__view" kindref="compound">tuple_join_view</ref><sp/>:<sp/>detail::view<sp/>{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::tuple&lt;T...&gt;&amp;<sp/>tuple;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>sep;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><ref refid="structtuple__join__view" kindref="compound">tuple_join_view</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::tuple&lt;T...&gt;&amp;<sp/>t,<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>s)</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>tuple(t),<sp/>sep{s}<sp/>{}</highlight></codeline>
<codeline lineno="673"><highlight class="normal">};</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>T&gt;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structtuple__join__view" kindref="compound">tuple_arg_join</ref><sp/>=<sp/><ref refid="structtuple__join__view" kindref="compound">tuple_join_view</ref>&lt;Char,<sp/>T...&gt;;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>FMT_TUPLE_JOIN_SPECIFIERS<sp/>to<sp/>enable<sp/>experimental<sp/>format<sp/>specifiers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="comment">//<sp/>support<sp/>in<sp/>tuple_join.<sp/>It<sp/>is<sp/>disabled<sp/>by<sp/>default<sp/>because<sp/>of<sp/>issues<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>dynamic<sp/>width<sp/>and<sp/>precision.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_TUPLE_JOIN_SPECIFIERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_TUPLE_JOIN_SPECIFIERS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>T&gt;</highlight></codeline>
<codeline lineno="686" refid="structformatter_3_01tuple__join__view_3_01_char_00_01_t_8_8_8_01_4_00_01_char_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structformatter" kindref="compound">formatter</ref>&lt;<ref refid="structtuple__join__view" kindref="compound">tuple_join_view</ref>&lt;Char,<sp/>T...&gt;,<sp/>Char&gt;<sp/>{</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ParseContext&gt;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parse(ParseContext&amp;<sp/>ctx)<sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(ctx.begin())<sp/>{</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>do_parse(ctx,<sp/>std::integral_constant&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(T)&gt;());</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FormatContext&gt;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtuple__join__view" kindref="compound">tuple_join_view&lt;Char, T...&gt;</ref>&amp;<sp/><ref refid="classvalue" kindref="compound">value</ref>,</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatContext&amp;<sp/>ctx)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FormatContext::iterator<sp/>{</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>do_format(<ref refid="classvalue" kindref="compound">value</ref>,<sp/>ctx,</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::integral_constant&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(T)&gt;());</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>std::tuple&lt;formatter&lt;typename<sp/>std::decay&lt;T&gt;::type,<sp/>Char&gt;...&gt;<sp/>formatters_;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ParseContext&gt;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>do_parse(ParseContext&amp;<sp/>ctx,</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::integral_constant&lt;size_t,<sp/>0&gt;)</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(ctx.begin())<sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ctx.begin();</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ParseContext,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>do_parse(ParseContext&amp;<sp/>ctx,</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::integral_constant&lt;size_t,<sp/>N&gt;)</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(ctx.begin())<sp/>{</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>ctx.begin();</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_TUPLE_JOIN_SPECIFIERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>end<sp/>=<sp/>std::get&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(T)<sp/>-<sp/>N&gt;(formatters_).parse(ctx);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end1<sp/>=<sp/>do_parse(ctx,<sp/>std::integral_constant&lt;size_t,<sp/>N<sp/>-<sp/>1&gt;());</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>!=<sp/>end1)</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_THROW(<ref refid="classformat__error" kindref="compound">format_error</ref>(</highlight><highlight class="stringliteral">&quot;incompatible<sp/>format<sp/>specs<sp/>for<sp/>tuple<sp/>elements&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FormatContext&gt;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>do_format(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtuple__join__view" kindref="compound">tuple_join_view&lt;Char, T...&gt;</ref>&amp;,<sp/>FormatContext&amp;<sp/>ctx,</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::integral_constant&lt;size_t,<sp/>0&gt;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FormatContext::iterator<sp/>{</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ctx.out();</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FormatContext,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>do_format(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtuple__join__view" kindref="compound">tuple_join_view&lt;Char, T...&gt;</ref>&amp;<sp/><ref refid="classvalue" kindref="compound">value</ref>,<sp/>FormatContext&amp;<sp/>ctx,</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::integral_constant&lt;size_t,<sp/>N&gt;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FormatContext::iterator<sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out<sp/>=<sp/>std::get&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(T)<sp/>-<sp/>N&gt;(formatters_)</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.format(std::get&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(T)<sp/>-<sp/>N&gt;(<ref refid="classvalue" kindref="compound">value</ref>.tuple),<sp/>ctx);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>std::copy(<ref refid="classvalue" kindref="compound">value</ref>.sep.begin(),<sp/><ref refid="classvalue" kindref="compound">value</ref>.sep.end(),<sp/>out);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctx.advance_to(out);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>do_format(<ref refid="classvalue" kindref="compound">value</ref>,<sp/>ctx,<sp/>std::integral_constant&lt;size_t,<sp/>N<sp/>-<sp/>1&gt;());</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="745"><highlight class="normal">};</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal">FMT_MODULE_EXPORT_BEGIN</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>T&gt;</highlight></codeline>
<codeline lineno="761"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>join(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::tuple&lt;T...&gt;&amp;<sp/>tuple,<sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>sep)</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/><ref refid="structtuple__join__view" kindref="compound">tuple_join_view</ref>&lt;char,<sp/>T...&gt;<sp/>{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{tuple,<sp/>sep};</highlight></codeline>
<codeline lineno="764"><highlight class="normal">}</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>T&gt;</highlight></codeline>
<codeline lineno="767"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>join(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::tuple&lt;T...&gt;&amp;<sp/>tuple,</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;wchar_t&gt;</ref><sp/>sep)</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/><ref refid="structtuple__join__view" kindref="compound">tuple_join_view</ref>&lt;wchar_t,<sp/>T...&gt;<sp/>{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{tuple,<sp/>sep};</highlight></codeline>
<codeline lineno="771"><highlight class="normal">}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>join(std::initializer_list&lt;T&gt;<sp/>list,<sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>sep)</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/><ref refid="structjoin__view" kindref="compound">join_view&lt;const T*, const T*&gt;</ref><sp/>{</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>join(std::begin(list),<sp/>std::end(list),<sp/>sep);</highlight></codeline>
<codeline lineno="788"><highlight class="normal">}</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal">FMT_MODULE_EXPORT_END</highlight></codeline>
<codeline lineno="791"><highlight class="normal">FMT_END_NAMESPACE</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>FMT_RANGES_H_</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/ranges.h"/>
  </compounddef>
</doxygen>
