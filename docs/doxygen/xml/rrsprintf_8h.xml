<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="rrsprintf_8h" kind="file" language="C++">
    <compoundname>rrsprintf.h</compoundname>
    <includes local="no">stdarg.h</includes>
    <incdepgraph>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/rrsprintf.h</label>
        <link refid="rrsprintf_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdarg.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="rrsprintf_8h_1a0ae8c1b956ab58c28283328369e729df" prot="public" static="no">
        <name>RRPUBLIC_DEC</name>
        <initializer>extern</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/rrsprintf.h" line="122" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/rrsprintf.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rrsprintf_8h_1a1688ec91c50a4f2b4f712061116fb072" prot="public" static="no">
        <name>RRPUBLIC_DEF</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/rrsprintf.h" line="123" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/rrsprintf.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rrsprintf_8h_1ac4a36bf5f8c538fbc84763241c604ce8" prot="public" static="no">
        <name>RR_SPRINTF_MIN</name>
        <initializer>512</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/rrsprintf.h" line="130" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/rrsprintf.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rrsprintf_8h_1aab5a5b68d1a9771292e2197702f34c95" prot="public" static="no">
        <name>RR_SPRINTF_DECORATE</name>
        <param><defname>name</defname></param>
        <initializer>rr##name</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/rrsprintf.h" line="135" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/rrsprintf.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="rrsprintf_8h_1a67d2fcd14ce3db8254112de2836fd03b" prot="public" static="no">
        <type>char *</type>
        <definition>typedef char * RRSPRINTFCB(char *buf, void *user, int len)</definition>
        <argsstring>(char *buf, void *user, int len)</argsstring>
        <name>RRSPRINTFCB</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/rrsprintf.h" line="132" column="15" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/rrsprintf.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="rrsprintf_8h_1a3e41f3ed65b0d392da13d3341751b5a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RRPUBLIC_DEF int RR_SPRINTF_DECORATE()</type>
        <definition>RRPUBLIC_DEF int RR_SPRINTF_DECORATE() vsprintf</definition>
        <argsstring>(char *buf, char const *fmt, va_list va)</argsstring>
        <name>vsprintf</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>va</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/rrsprintf.h" line="140" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/rrsprintf.h" declline="140" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="rrsprintf_8h_1a41f45ce4155177a1a55a4260cda655ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RRPUBLIC_DEF int RR_SPRINTF_DECORATE()</type>
        <definition>RRPUBLIC_DEF int RR_SPRINTF_DECORATE() vsnprintf</definition>
        <argsstring>(char *buf, int count, char const *fmt, va_list va)</argsstring>
        <name>vsnprintf</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>va</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/rrsprintf.h" line="141" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/rrsprintf.h" declline="141" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="rrsprintf_8h_1a9b1bcf2b847c7e2a9e4d06b7bb6fa018" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RRPUBLIC_DEF int RR_SPRINTF_DECORATE()</type>
        <definition>RRPUBLIC_DEF int RR_SPRINTF_DECORATE() sprintf</definition>
        <argsstring>(char *buf, char const *fmt,...)</argsstring>
        <name>sprintf</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/rrsprintf.h" line="142" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/rrsprintf.h" declline="142" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="rrsprintf_8h_1afebf4922e1c440094d77aeec3657eb12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RRPUBLIC_DEF int RR_SPRINTF_DECORATE()</type>
        <definition>RRPUBLIC_DEF int RR_SPRINTF_DECORATE() snprintf</definition>
        <argsstring>(char *buf, int count, char const *fmt,...)</argsstring>
        <name>snprintf</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/rrsprintf.h" line="143" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/rrsprintf.h" declline="143" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="rrsprintf_8h_1a64a726f17b4089ac1ffb4a084572ac51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RRPUBLIC_DEF int RR_SPRINTF_DECORATE()</type>
        <definition>RRPUBLIC_DEF int RR_SPRINTF_DECORATE() vsprintfcb</definition>
        <argsstring>(RRSPRINTFCB *callback, void *user, char *buf, char const *fmt, va_list va)</argsstring>
        <name>vsprintfcb</name>
        <param>
          <type>RRSPRINTFCB *</type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>va</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/rrsprintf.h" line="145" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/rrsprintf.h" declline="145" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="rrsprintf_8h_1a95366ff15483cf67eabd0ea9b13ab9b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RRPUBLIC_DEF void RR_SPRINTF_DECORATE()</type>
        <definition>RRPUBLIC_DEF void RR_SPRINTF_DECORATE() setseparators</definition>
        <argsstring>(char comma, char period)</argsstring>
        <name>setseparators</name>
        <param>
          <type>char</type>
          <declname>comma</declname>
        </param>
        <param>
          <type>char</type>
          <declname>period</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/rrsprintf.h" line="146" column="19" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/rrsprintf.h" declline="146" declcolumn="19"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>RR_SPRINTF_H_INCLUDE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RR_SPRINTF_H_INCLUDE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5"><highlight class="comment">Single<sp/>file<sp/>sprintf<sp/>replacement.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">Originally<sp/>written<sp/>by<sp/>Jeff<sp/>Roberts<sp/>at<sp/>RAD<sp/>Game<sp/>Tools<sp/>-<sp/>2015/10/20.<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment">Hereby<sp/>placed<sp/>in<sp/>public<sp/>domain.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment">This<sp/>is<sp/>a<sp/>full<sp/>sprintf<sp/>replacement<sp/>that<sp/>supports<sp/>everything<sp/>that</highlight></codeline>
<codeline lineno="11"><highlight class="comment">the<sp/>C<sp/>runtime<sp/>sprintfs<sp/>support,<sp/>including<sp/>float/double,<sp/>64-bit<sp/>integers,</highlight></codeline>
<codeline lineno="12"><highlight class="comment">hex<sp/>floats,<sp/>field<sp/>parameters<sp/>(%*.*d<sp/>stuff),<sp/>length<sp/>reads<sp/>backs,<sp/>etc.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">Why<sp/>would<sp/>you<sp/>need<sp/>this<sp/>if<sp/>sprintf<sp/>already<sp/>exists?<sp/><sp/>Well,<sp/>first<sp/>off,</highlight></codeline>
<codeline lineno="15"><highlight class="comment">it&apos;s<sp/>*much*<sp/>faster<sp/>(see<sp/>below).<sp/>It&apos;s<sp/>also<sp/>much<sp/>smaller<sp/>than<sp/>the<sp/>CRT</highlight></codeline>
<codeline lineno="16"><highlight class="comment">versions<sp/>code-space-wise.<sp/>We&apos;ve<sp/>also<sp/>added<sp/>some<sp/>simple<sp/>improvements<sp/></highlight></codeline>
<codeline lineno="17"><highlight class="comment">that<sp/>are<sp/>super<sp/>handy<sp/>(commas<sp/>in<sp/>thousands,<sp/>callbacks<sp/>at<sp/>buffer<sp/>full,</highlight></codeline>
<codeline lineno="18"><highlight class="comment">for<sp/>example).<sp/>Finally,<sp/>the<sp/>format<sp/>strings<sp/>for<sp/>MSVC<sp/>and<sp/>GCC<sp/>differ<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment">for<sp/>64-bit<sp/>integers<sp/>(among<sp/>other<sp/>small<sp/>things),<sp/>so<sp/>this<sp/>lets<sp/>you<sp/>use<sp/></highlight></codeline>
<codeline lineno="20"><highlight class="comment">the<sp/>same<sp/>format<sp/>strings<sp/>in<sp/>cross<sp/>platform<sp/>code.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">It<sp/>uses<sp/>the<sp/>standard<sp/>single<sp/>file<sp/>trick<sp/>of<sp/>being<sp/>both<sp/>the<sp/>header<sp/>file</highlight></codeline>
<codeline lineno="23"><highlight class="comment">and<sp/>the<sp/>source<sp/>itself.<sp/>If<sp/>you<sp/>just<sp/>include<sp/>it<sp/>normally,<sp/>you<sp/>just<sp/>get<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="comment">the<sp/>header<sp/>file<sp/>function<sp/>definitions.<sp/>To<sp/>get<sp/>the<sp/>code,<sp/>you<sp/>include</highlight></codeline>
<codeline lineno="25"><highlight class="comment">it<sp/>from<sp/>a<sp/>C<sp/>or<sp/>C++<sp/>file<sp/>and<sp/>define<sp/>RR_SPRINTF_IMPLEMENTATION<sp/>first.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"></highlight></codeline>
<codeline lineno="27"><highlight class="comment">It<sp/>only<sp/>uses<sp/>va_args<sp/>macros<sp/>from<sp/>the<sp/>C<sp/>runtime<sp/>to<sp/>do<sp/>it&apos;s<sp/>work.<sp/>It</highlight></codeline>
<codeline lineno="28"><highlight class="comment">does<sp/>cast<sp/>doubles<sp/>to<sp/>S64s<sp/>and<sp/>shifts<sp/>and<sp/>divides<sp/>U64s,<sp/>which<sp/>does<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="comment">drag<sp/>in<sp/>CRT<sp/>code<sp/>on<sp/>most<sp/>platforms.</highlight></codeline>
<codeline lineno="30"><highlight class="comment"></highlight></codeline>
<codeline lineno="31"><highlight class="comment">It<sp/>compiles<sp/>to<sp/>roughly<sp/>8K<sp/>with<sp/>float<sp/>support,<sp/>and<sp/>4K<sp/>without.</highlight></codeline>
<codeline lineno="32"><highlight class="comment">As<sp/>a<sp/>comparison,<sp/>when<sp/>using<sp/>MSVC<sp/>static<sp/>libs,<sp/>calling<sp/>sprintf<sp/>drags</highlight></codeline>
<codeline lineno="33"><highlight class="comment">in<sp/>16K.</highlight></codeline>
<codeline lineno="34"><highlight class="comment"></highlight></codeline>
<codeline lineno="35"><highlight class="comment">API:</highlight></codeline>
<codeline lineno="36"><highlight class="comment">====</highlight></codeline>
<codeline lineno="37"><highlight class="comment">int<sp/>rrsprintf(<sp/>char<sp/>*<sp/>buf,<sp/>char<sp/>const<sp/>*<sp/>fmt,<sp/>...<sp/>)</highlight></codeline>
<codeline lineno="38"><highlight class="comment">int<sp/>rrsnprintf(<sp/>char<sp/>*<sp/>buf,<sp/>int<sp/>count,<sp/>char<sp/>const<sp/>*<sp/>fmt,<sp/>...<sp/>)</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/>Convert<sp/>an<sp/>arg<sp/>list<sp/>into<sp/>a<sp/>buffer.<sp/><sp/>rrsnprintf<sp/>always<sp/>returns</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/>a<sp/>zero-terminated<sp/>string<sp/>(unlike<sp/>regular<sp/>snprintf).</highlight></codeline>
<codeline lineno="41"><highlight class="comment"></highlight></codeline>
<codeline lineno="42"><highlight class="comment">int<sp/>rrvsprintf(<sp/>char<sp/>*<sp/>buf,<sp/>char<sp/>const<sp/>*<sp/>fmt,<sp/>va_list<sp/>va<sp/>)</highlight></codeline>
<codeline lineno="43"><highlight class="comment">int<sp/>rrvsnprintf(<sp/>char<sp/>*<sp/>buf,<sp/>int<sp/>count,<sp/>char<sp/>const<sp/>*<sp/>fmt,<sp/>va_list<sp/>va<sp/>)</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/>Convert<sp/>a<sp/>va_list<sp/>arg<sp/>list<sp/>into<sp/>a<sp/>buffer.<sp/><sp/>rrvsnprintf<sp/>always<sp/>returns</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/>a<sp/>zero-terminated<sp/>string<sp/>(unlike<sp/>regular<sp/>snprintf).</highlight></codeline>
<codeline lineno="46"><highlight class="comment"></highlight></codeline>
<codeline lineno="47"><highlight class="comment">int<sp/>rrvsprintfcb(<sp/>RRSPRINTFCB<sp/>*<sp/>callback,<sp/>void<sp/>*<sp/>user,<sp/>char<sp/>*<sp/>buf,<sp/>char<sp/>const<sp/>*<sp/>fmt,<sp/>va_list<sp/>va<sp/>)</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/>typedef<sp/>char<sp/>*<sp/>RRSPRINTFCB(<sp/>char<sp/>const<sp/>*<sp/>buf,<sp/>void<sp/>*<sp/>user,<sp/>int<sp/>len<sp/>);</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/>Convert<sp/>into<sp/>a<sp/>buffer,<sp/>calling<sp/>back<sp/>every<sp/>RR_SPRINTF_MIN<sp/>chars.</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/>Your<sp/>callback<sp/>can<sp/>then<sp/>copy<sp/>the<sp/>chars<sp/>out,<sp/>print<sp/>them<sp/>or<sp/>whatever.</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/>This<sp/>function<sp/>is<sp/>actually<sp/>the<sp/>workhorse<sp/>for<sp/>everything<sp/>else.</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/>The<sp/>buffer<sp/>you<sp/>pass<sp/>in<sp/>must<sp/>hold<sp/>at<sp/>least<sp/>RR_SPRINTF_MIN<sp/>characters.</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>you<sp/>return<sp/>the<sp/>next<sp/>buffer<sp/>to<sp/>use<sp/>or<sp/>0<sp/>to<sp/>stop<sp/>converting</highlight></codeline>
<codeline lineno="54"><highlight class="comment"></highlight></codeline>
<codeline lineno="55"><highlight class="comment">void<sp/>rrsetseparators(<sp/>char<sp/>comma,<sp/>char<sp/>period<sp/>)</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/>Set<sp/>the<sp/>comma<sp/>and<sp/>period<sp/>characters<sp/>to<sp/>use.</highlight></codeline>
<codeline lineno="57"><highlight class="comment"></highlight></codeline>
<codeline lineno="58"><highlight class="comment">FLOATS/DOUBLES:</highlight></codeline>
<codeline lineno="59"><highlight class="comment">===============</highlight></codeline>
<codeline lineno="60"><highlight class="comment">This<sp/>code<sp/>uses<sp/>a<sp/>internal<sp/>float-&gt;ascii<sp/>conversion<sp/>method<sp/>that<sp/>uses</highlight></codeline>
<codeline lineno="61"><highlight class="comment">doubles<sp/>with<sp/>error<sp/>correction<sp/>(double-doubles,<sp/>for<sp/>~105<sp/>bits<sp/>of</highlight></codeline>
<codeline lineno="62"><highlight class="comment">precision).<sp/><sp/>This<sp/>conversion<sp/>is<sp/>round-trip<sp/>perfect<sp/>-<sp/>that<sp/>is,<sp/>an<sp/>atof</highlight></codeline>
<codeline lineno="63"><highlight class="comment">of<sp/>the<sp/>values<sp/>output<sp/>here<sp/>will<sp/>give<sp/>you<sp/>the<sp/>bit-exact<sp/>double<sp/>back.</highlight></codeline>
<codeline lineno="64"><highlight class="comment"></highlight></codeline>
<codeline lineno="65"><highlight class="comment">One<sp/>difference<sp/>is<sp/>that<sp/>our<sp/>insignificant<sp/>digits<sp/>will<sp/>be<sp/>different<sp/>than<sp/></highlight></codeline>
<codeline lineno="66"><highlight class="comment">with<sp/>MSVC<sp/>or<sp/>GCC<sp/>(but<sp/>they<sp/>don&apos;t<sp/>match<sp/>each<sp/>other<sp/>either).<sp/><sp/>We<sp/>also<sp/></highlight></codeline>
<codeline lineno="67"><highlight class="comment">don&apos;t<sp/>attempt<sp/>to<sp/>find<sp/>the<sp/>minimum<sp/>length<sp/>matching<sp/>float<sp/>(pre-MSVC15<sp/></highlight></codeline>
<codeline lineno="68"><highlight class="comment">doesn&apos;t<sp/>either).</highlight></codeline>
<codeline lineno="69"><highlight class="comment"></highlight></codeline>
<codeline lineno="70"><highlight class="comment">If<sp/>you<sp/>don&apos;t<sp/>need<sp/>float<sp/>or<sp/>doubles<sp/>at<sp/>all,<sp/>define<sp/>RR_SPRINTF_NOFLOAT</highlight></codeline>
<codeline lineno="71"><highlight class="comment">and<sp/>you&apos;ll<sp/>save<sp/>4K<sp/>of<sp/>code<sp/>space.</highlight></codeline>
<codeline lineno="72"><highlight class="comment"></highlight></codeline>
<codeline lineno="73"><highlight class="comment">64-BIT<sp/>INTS:</highlight></codeline>
<codeline lineno="74"><highlight class="comment">============</highlight></codeline>
<codeline lineno="75"><highlight class="comment">This<sp/>library<sp/>also<sp/>supports<sp/>64-bit<sp/>integers<sp/>and<sp/>you<sp/>can<sp/>use<sp/>MSVC<sp/>style<sp/>or</highlight></codeline>
<codeline lineno="76"><highlight class="comment">GCC<sp/>style<sp/>indicators<sp/>(%I64d<sp/>or<sp/>%lld).<sp/><sp/>It<sp/>supports<sp/>the<sp/>C99<sp/>specifiers</highlight></codeline>
<codeline lineno="77"><highlight class="comment">for<sp/>size_t<sp/>and<sp/>ptr_diff_t<sp/>(%jd<sp/>%zd)<sp/>as<sp/>well.</highlight></codeline>
<codeline lineno="78"><highlight class="comment"></highlight></codeline>
<codeline lineno="79"><highlight class="comment">EXTRAS:</highlight></codeline>
<codeline lineno="80"><highlight class="comment">=======</highlight></codeline>
<codeline lineno="81"><highlight class="comment">Like<sp/>some<sp/>GCCs,<sp/>for<sp/>integers<sp/>and<sp/>floats,<sp/>you<sp/>can<sp/>use<sp/>a<sp/>&apos;<sp/>(single<sp/>quote)</highlight></codeline>
<codeline lineno="82"><highlight class="comment">specifier<sp/>and<sp/>commas<sp/>will<sp/>be<sp/>inserted<sp/>on<sp/>the<sp/>thousands:<sp/>&quot;%&apos;d&quot;<sp/>on<sp/>12345<sp/></highlight></codeline>
<codeline lineno="83"><highlight class="comment">would<sp/>print<sp/>12,345.</highlight></codeline>
<codeline lineno="84"><highlight class="comment"></highlight></codeline>
<codeline lineno="85"><highlight class="comment">For<sp/>integers<sp/>and<sp/>floats,<sp/>you<sp/>can<sp/>use<sp/>a<sp/>&quot;$&quot;<sp/>specifier<sp/>and<sp/>the<sp/>number<sp/></highlight></codeline>
<codeline lineno="86"><highlight class="comment">will<sp/>be<sp/>converted<sp/>to<sp/>float<sp/>and<sp/>then<sp/>divided<sp/>to<sp/>get<sp/>kilo,<sp/>mega,<sp/>giga<sp/>or</highlight></codeline>
<codeline lineno="87"><highlight class="comment">tera<sp/>and<sp/>then<sp/>printed,<sp/>so<sp/>&quot;%$d&quot;<sp/>1024<sp/>is<sp/>&quot;1.0<sp/>k&quot;,<sp/>&quot;%$.2d&quot;<sp/>2536000<sp/>is<sp/></highlight></codeline>
<codeline lineno="88"><highlight class="comment">&quot;2.42<sp/>m&quot;,<sp/>etc.</highlight></codeline>
<codeline lineno="89"><highlight class="comment"></highlight></codeline>
<codeline lineno="90"><highlight class="comment">In<sp/>addition<sp/>to<sp/>octal<sp/>and<sp/>hexadecimal<sp/>conversions,<sp/>you<sp/>can<sp/>print<sp/></highlight></codeline>
<codeline lineno="91"><highlight class="comment">integers<sp/>in<sp/>binary:<sp/>&quot;%b&quot;<sp/>for<sp/>256<sp/>would<sp/>print<sp/>100.</highlight></codeline>
<codeline lineno="92"><highlight class="comment"></highlight></codeline>
<codeline lineno="93"><highlight class="comment">PERFORMANCE<sp/>vs<sp/>MSVC<sp/>2008<sp/>32-/64-bit<sp/>(GCC<sp/>is<sp/>even<sp/>slower<sp/>than<sp/>MSVC):</highlight></codeline>
<codeline lineno="94"><highlight class="comment">===================================================================</highlight></codeline>
<codeline lineno="95"><highlight class="comment">&quot;%d&quot;<sp/>across<sp/>all<sp/>32-bit<sp/>ints<sp/>(4.8x/4.0x<sp/>faster<sp/>than<sp/>32-/64-bit<sp/>MSVC)</highlight></codeline>
<codeline lineno="96"><highlight class="comment">&quot;%24d&quot;<sp/>across<sp/>all<sp/>32-bit<sp/>ints<sp/>(4.5x/4.2x<sp/>faster)</highlight></codeline>
<codeline lineno="97"><highlight class="comment">&quot;%x&quot;<sp/>across<sp/>all<sp/>32-bit<sp/>ints<sp/>(4.5x/3.8x<sp/>faster)</highlight></codeline>
<codeline lineno="98"><highlight class="comment">&quot;%08x&quot;<sp/>across<sp/>all<sp/>32-bit<sp/>ints<sp/>(4.3x/3.8x<sp/>faster)</highlight></codeline>
<codeline lineno="99"><highlight class="comment">&quot;%f&quot;<sp/>across<sp/>e-10<sp/>to<sp/>e+10<sp/>floats<sp/>(7.3x/6.0x<sp/>faster)</highlight></codeline>
<codeline lineno="100"><highlight class="comment">&quot;%e&quot;<sp/>across<sp/>e-10<sp/>to<sp/>e+10<sp/>floats<sp/>(8.1x/6.0x<sp/>faster)</highlight></codeline>
<codeline lineno="101"><highlight class="comment">&quot;%g&quot;<sp/>across<sp/>e-10<sp/>to<sp/>e+10<sp/>floats<sp/>(10.0x/7.1x<sp/>faster)</highlight></codeline>
<codeline lineno="102"><highlight class="comment">&quot;%f&quot;<sp/>for<sp/>values<sp/>near<sp/>e-300<sp/>(7.9x/6.5x<sp/>faster)</highlight></codeline>
<codeline lineno="103"><highlight class="comment">&quot;%f&quot;<sp/>for<sp/>values<sp/>near<sp/>e+300<sp/>(10.0x/9.1x<sp/>faster)</highlight></codeline>
<codeline lineno="104"><highlight class="comment">&quot;%e&quot;<sp/>for<sp/>values<sp/>near<sp/>e-300<sp/>(10.1x/7.0x<sp/>faster)</highlight></codeline>
<codeline lineno="105"><highlight class="comment">&quot;%e&quot;<sp/>for<sp/>values<sp/>near<sp/>e+300<sp/>(9.2x/6.0x<sp/>faster)</highlight></codeline>
<codeline lineno="106"><highlight class="comment">&quot;%.320f&quot;<sp/>for<sp/>values<sp/>near<sp/>e-300<sp/>(12.6x/11.2x<sp/>faster)</highlight></codeline>
<codeline lineno="107"><highlight class="comment">&quot;%a&quot;<sp/>for<sp/>random<sp/>values<sp/>(8.6x/4.3x<sp/>faster)</highlight></codeline>
<codeline lineno="108"><highlight class="comment">&quot;%I64d&quot;<sp/>for<sp/>64-bits<sp/>with<sp/>32-bit<sp/>values<sp/>(4.8x/3.4x<sp/>faster)</highlight></codeline>
<codeline lineno="109"><highlight class="comment">&quot;%I64d&quot;<sp/>for<sp/>64-bits<sp/>&gt;<sp/>32-bit<sp/>values<sp/>(4.9x/5.5x<sp/>faster)</highlight></codeline>
<codeline lineno="110"><highlight class="comment">&quot;%s%s%s&quot;<sp/>for<sp/>64<sp/>char<sp/>strings<sp/>(7.1x/7.3x<sp/>faster)</highlight></codeline>
<codeline lineno="111"><highlight class="comment">&quot;...512<sp/>char<sp/>string...&quot;<sp/>(<sp/>35.0x/32.5x<sp/>faster!)</highlight></codeline>
<codeline lineno="112"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>RR_SPRINTF_STATIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RRPUBLIC_DEC<sp/>static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RRPUBLIC_DEF<sp/>static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RRPUBLIC_DEC<sp/>extern<sp/>&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RRPUBLIC_DEF<sp/>extern<sp/>&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RRPUBLIC_DEC<sp/>extern<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RRPUBLIC_DEF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>va_list()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>RR_SPRINTF_MIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RR_SPRINTF_MIN<sp/>512<sp/></highlight><highlight class="comment">//<sp/>how<sp/>many<sp/>characters<sp/>per<sp/>callback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>RRSPRINTFCB(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>buf,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>user,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>RR_SPRINTF_DECORATE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RR_SPRINTF_DECORATE(name)<sp/>rr##name<sp/><sp/></highlight><highlight class="comment">//<sp/>define<sp/>this<sp/>before<sp/>including<sp/>if<sp/>you<sp/>want<sp/>to<sp/>change<sp/>the<sp/>names</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>RR_SPRINTF_IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal">RRPUBLIC_DEF<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RR_SPRINTF_DECORATE(<sp/>vsprintf<sp/>)(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>buf,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>fmt,<sp/>va_list<sp/>va<sp/>);</highlight></codeline>
<codeline lineno="141"><highlight class="normal">RRPUBLIC_DEF<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RR_SPRINTF_DECORATE(<sp/>vsnprintf<sp/>)(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>fmt,<sp/>va_list<sp/>va<sp/>);</highlight></codeline>
<codeline lineno="142"><highlight class="normal">RRPUBLIC_DEF<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RR_SPRINTF_DECORATE(<sp/>sprintf<sp/>)<sp/>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>buf,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>fmt,<sp/>...<sp/>);</highlight></codeline>
<codeline lineno="143"><highlight class="normal">RRPUBLIC_DEF<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RR_SPRINTF_DECORATE(<sp/>snprintf<sp/>)(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>fmt,<sp/>...<sp/>);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal">RRPUBLIC_DEF<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RR_SPRINTF_DECORATE(<sp/>vsprintfcb<sp/>)(<sp/>RRSPRINTFCB<sp/>*<sp/>callback,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>user,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>buf,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>fmt,<sp/>va_list<sp/>va<sp/>);</highlight></codeline>
<codeline lineno="146"><highlight class="normal">RRPUBLIC_DEF<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RR_SPRINTF_DECORATE(<sp/>setseparators<sp/>)(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>comma,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>period<sp/>);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>va_arg()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rU32<sp/>unsigned<sp/>int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rS32<sp/>signed<sp/>int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rU64<sp/>unsigned<sp/>__int64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rS64<sp/>signed<sp/>__int64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rU64<sp/>unsigned<sp/>long<sp/>long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rS64<sp/>signed<sp/>long<sp/>long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rU16<sp/>unsigned<sp/>short</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>rUINTa<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__ppc64__)<sp/>||<sp/>defined(__aarch64__)<sp/>||<sp/>defined(_M_X64)<sp/>||<sp/>defined(__x86_64__)<sp/>||<sp/>defined(__x86_64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rUINTa<sp/>rU64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rUINTa<sp/>rU32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>RR_SPRINTF_MSVC_MODE<sp/><sp/></highlight><highlight class="comment">//<sp/>used<sp/>for<sp/>MSVC2013<sp/>and<sp/>earlier<sp/>(MSVC2015<sp/>matches<sp/>GCC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>(_MSC_VER&lt;1900)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RR_SPRINTF_MSVC_MODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>RR_SPRINTF_NOUNALIGNED<sp/><sp/></highlight><highlight class="comment">//<sp/>define<sp/>this<sp/>before<sp/>inclusion<sp/>to<sp/>force<sp/>rrsprint<sp/>to<sp/>always<sp/>use<sp/>aligned<sp/>accesses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RR_UNALIGNED(code)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RR_UNALIGNED(code)<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>RR_SPRINTF_NOFLOAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment">//<sp/>internal<sp/>float<sp/>utility<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>rS32<sp/>rrreal_to_str(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>*<sp/>start,<sp/>rU32<sp/>*<sp/>len,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out,<sp/>rS32<sp/>*<sp/>decimal_pos,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>,<sp/>rU32<sp/>frac_digits<sp/>);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>rS32<sp/>rrreal_to_parts(<sp/>rS64<sp/>*<sp/>bits,<sp/>rS32<sp/>*<sp/>expo,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RRSPECIAL<sp/>0x7000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>RRperiod=</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>RRcomma=</highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>rrdiglookup[201]=</highlight><highlight class="stringliteral">&quot;00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal">RRPUBLIC_DEF<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RR_SPRINTF_DECORATE(<sp/>setseparators<sp/>)(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pcomma,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pperiod<sp/>)</highlight></codeline>
<codeline lineno="196"><highlight class="normal">{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>RRperiod=pperiod;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>RRcomma=pcomma;</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal">RRPUBLIC_DEF<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RR_SPRINTF_DECORATE(<sp/>vsprintfcb<sp/>)(<sp/>RRSPRINTFCB<sp/>*<sp/>callback,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>user,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>buf,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>fmt,<sp/>va_list<sp/>va<sp/>)</highlight></codeline>
<codeline lineno="202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>hex[]=</highlight><highlight class="stringliteral">&quot;0123456789abcdefxp&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>hexu[]=</highlight><highlight class="stringliteral">&quot;0123456789ABCDEFXP&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>bf;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>f;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tlen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>bf<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>f<sp/>=<sp/>fmt;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>rS32<sp/>fw,pr,tz;<sp/>rU32<sp/>fl;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>LJ<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>LP<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>LS<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>LX<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>LZ<sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>BI<sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CS<sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>NG<sp/>128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>KI<sp/>256</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>HW<sp/>512</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>macros<sp/>for<sp/>the<sp/>callback<sp/>buffer<sp/>stuff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>chk_cb_bufL(bytes)<sp/>{<sp/>int<sp/>len<sp/>=<sp/>(int)(bf-buf);<sp/>if<sp/>((len+(bytes))&gt;=RR_SPRINTF_MIN)<sp/>{<sp/>tlen+=len;<sp/>if<sp/>(0==(bf=buf=callback(buf,user,len)))<sp/>goto<sp/>done;<sp/>}<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>chk_cb_buf(bytes)<sp/>{<sp/>if<sp/>(<sp/>callback<sp/>)<sp/>{<sp/>chk_cb_bufL(bytes);<sp/>}<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>flush_cb()<sp/>{<sp/>chk_cb_bufL(RR_SPRINTF_MIN-1);<sp/>}<sp/></highlight><highlight class="comment">//flush<sp/>if<sp/>there<sp/>is<sp/>even<sp/>one<sp/>byte<sp/>in<sp/>the<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>cb_buf_clamp(cl,v)<sp/>cl<sp/>=<sp/>v;<sp/>if<sp/>(<sp/>callback<sp/>)<sp/>{<sp/>int<sp/>lg<sp/>=<sp/>RR_SPRINTF_MIN-(int)(bf-buf);<sp/>if<sp/>(cl&gt;lg)<sp/>cl=lg;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fast<sp/>copy<sp/>everything<sp/>up<sp/>to<sp/>the<sp/>next<sp/>%<sp/>(or<sp/>end<sp/>of<sp/>string)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(((rUINTa)f)&amp;3)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>schk1:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f[0]==</highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>scandd;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>schk2:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f[0]==0)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>endfmt;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chk_cb_buf(1);<sp/>*bf++=f[0];<sp/>++f;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rU32<sp/>v,c;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v=*(rU32*)f;<sp/>c=(~v)&amp;0x80808080;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((v-0x26262626)&amp;c)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>schk1;<sp/></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((v-0x01010101)&amp;c)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>schk2;<sp/></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(callback)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((RR_SPRINTF_MIN-(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(bf-buf))&lt;4)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>schk1;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(rU32*)bf=v;<sp/>bf+=4;<sp/>f+=4;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>scandd:</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>++f;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ok,<sp/>we<sp/>have<sp/>a<sp/>percent,<sp/>read<sp/>the<sp/>modifiers<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>fw<sp/>=<sp/>0;<sp/>pr<sp/>=<sp/>-1;<sp/>fl<sp/>=<sp/>0;<sp/>tz<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(f[0])</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>have<sp/>left<sp/>just</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">:<sp/>fl|=LJ;<sp/>++f;<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>have<sp/>leading<sp/>plus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">:<sp/>fl|=LP;<sp/>++f;<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>have<sp/>leading<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">:<sp/>fl|=LS;<sp/>++f;<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>have<sp/>leading<sp/>0x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">:<sp/>fl|=LX;<sp/>++f;<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>have<sp/>thousand<sp/>commas</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">:<sp/>fl|=CS;<sp/>++f;<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>have<sp/>kilo<sp/>marker</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;$&apos;</highlight><highlight class="normal">:<sp/>fl|=KI;<sp/>++f;<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>have<sp/>leading<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">:<sp/>fl|=LZ;<sp/>++f;<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>flags_done;<sp/></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>flags_done;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>flags_done:</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>field<sp/>width</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>f[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal"><sp/>)<sp/>{fw<sp/>=<sp/>va_arg(va,rU32);<sp/>++f;}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((<sp/>f[0]<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>)<sp/>&amp;&amp;<sp/>(<sp/>f[0]<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal"><sp/>))<sp/>{<sp/>fw<sp/>=<sp/>fw<sp/>*<sp/>10<sp/>+<sp/>f[0]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;<sp/>f++;<sp/>}<sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>precision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>f[0]==</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal"><sp/>)<sp/>{<sp/>++f;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>f[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal"><sp/>)<sp/>{pr<sp/>=<sp/>va_arg(va,rU32);<sp/>++f;}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>pr<sp/>=<sp/>0;<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((<sp/>f[0]<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>)<sp/>&amp;&amp;<sp/>(<sp/>f[0]<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal"><sp/>))<sp/>{<sp/>pr<sp/>=<sp/>pr<sp/>*<sp/>10<sp/>+<sp/>f[0]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;<sp/>f++;<sp/>}<sp/>}<sp/>}<sp/></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>integer<sp/>size<sp/>overrides</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(f[0])</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>we<sp/>halfwidth?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;h&apos;</highlight><highlight class="normal">:<sp/>fl|=HW;<sp/>++f;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>we<sp/>64-bit<sp/>(unix<sp/>style)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">:<sp/>++f;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>f[0]==</highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">)<sp/>{<sp/>fl|=BI;<sp/>++f;<sp/>}<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>we<sp/>64-bit<sp/>on<sp/>intmax?<sp/>(c99)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;j&apos;</highlight><highlight class="normal">:<sp/>fl|=BI;<sp/>++f;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>we<sp/>64-bit<sp/>on<sp/>size_t<sp/>or<sp/>ptrdiff_t?<sp/>(c99)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">:<sp/>fl|=((</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)==8)?BI:0);<sp/>++f;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>we<sp/>64-bit<sp/>(msft<sp/>style)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;I&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>f[1]==</highlight><highlight class="charliteral">&apos;6&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(<sp/>f[2]==</highlight><highlight class="charliteral">&apos;4&apos;</highlight><highlight class="normal">)<sp/>)<sp/>{<sp/>fl|=BI;<sp/>f+=3;<sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>f[1]==</highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(<sp/>f[2]==</highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">)<sp/>)<sp/>{<sp/>f+=3;<sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>fl|=((</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)==8)?BI:0);<sp/>++f;<sp/>}<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>each<sp/>replacement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>f[0]<sp/>)</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>NUMSZ<sp/>512<sp/></highlight><highlight class="comment">//<sp/>big<sp/>enough<sp/>for<sp/>e308<sp/>(with<sp/>commas)<sp/>or<sp/>e-307<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>num[NUMSZ];<sp/></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>lead[8];<sp/></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>tail[8];<sp/></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*h;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rU32<sp/>l,n,cs;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rU64<sp/>n64;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#ifndef<sp/>RR_SPRINTF_NOFLOAT<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fv;<sp/></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rS32<sp/>dp;<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>sn;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>va_arg(va,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s==0)<sp/>s<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;null&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sn<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((((rUINTa)sn)&amp;3)==0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lchk:</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sn[0]==0)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>ld;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++sn;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>0xffffffff;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pr&gt;=0)<sp/>{<sp/>n=(rU32)(sn-s);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n&gt;=(rU32)pr)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>ld;<sp/>n=((rU32)(pr-n))&gt;&gt;2;<sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(n)<sp/></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rU32<sp/>v=*(rU32*)sn;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((v-0x01010101)&amp;(~v)&amp;0x80808080UL)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>lchk;<sp/></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sn+=4;<sp/></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--n;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>lchk;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ld:</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>(rU32)<sp/>(<sp/>sn<sp/>-<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clamp<sp/>to<sp/>precision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>l<sp/>&gt;<sp/>(rU32)pr<sp/>)<sp/>l<sp/>=<sp/>pr;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lead[0]=0;<sp/>tail[0]=0;<sp/>pr<sp/>=<sp/>0;<sp/>dp<sp/>=<sp/>0;<sp/>cs<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>string<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>scopy;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>char</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>num<sp/>+<sp/>NUMSZ<sp/>-1;<sp/>*s<sp/>=<sp/>(char)va_arg(va,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lead[0]=0;<sp/>tail[0]=0;<sp/>pr<sp/>=<sp/>0;<sp/>dp<sp/>=<sp/>0;<sp/>cs<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>scopy;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>weird<sp/>write-bytes<sp/>specifier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>d<sp/>=<sp/>va_arg(va,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*d<sp/>=<sp/>tlen<sp/>+<sp/>(int)(<sp/>bf<sp/>-<sp/>buf<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>RR_SPRINTF_NOFLOAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>hex<sp/>float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;G&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;E&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va_arg(va,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>eat<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;No<sp/>float&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lead[0]=0;<sp/>tail[0]=0;<sp/>pr<sp/>=<sp/>0;<sp/>dp<sp/>=<sp/>0;<sp/>cs<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>scopy;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h=hexu;<sp/><sp/></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>hexfloat;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>hex<sp/>float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h=hex;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexfloat:<sp/></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fv<sp/>=<sp/>va_arg(va,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pr==-1)<sp/>pr=6;<sp/></highlight><highlight class="comment">//<sp/>default<sp/>is<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>the<sp/>double<sp/>into<sp/>a<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rrreal_to_parts(<sp/>(rS64*)&amp;n64,<sp/>&amp;dp,<sp/>fv<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fl<sp/>|=<sp/>NG;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>num+64;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lead[0]=0;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fl&amp;NG)<sp/>{<sp/>lead[0]=1;<sp/>lead[1]=</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">;<sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fl&amp;LS)<sp/>{<sp/>lead[0]=1;<sp/>lead[1]=</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;<sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fl&amp;LP)<sp/>{<sp/>lead[0]=1;<sp/>lead[1]=</highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">;<sp/>};</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dp==-1023)<sp/>dp=(n64)?-1022:0;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>n64|=(((rU64)1)&lt;&lt;52);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n64&lt;&lt;=(64-56);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pr&lt;15)<sp/>n64+=((((rU64)8)&lt;&lt;56)&gt;&gt;(pr*4));</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>leading<sp/>chars</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>RR_SPRINTF_MSVC_MODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*s++=</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;*s++=</highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lead[1+lead[0]]=</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;<sp/>lead[2+lead[0]]=</highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">;<sp/>lead[0]+=2;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*s++=h[(n64&gt;&gt;60)&amp;15];<sp/>n64&lt;&lt;=4;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pr<sp/>)<sp/>*s++=RRperiod;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sn<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>the<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>pr;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n&gt;13)<sp/>n<sp/>=<sp/>13;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pr&gt;(rS32)n)<sp/>tz=pr-n;<sp/>pr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(n--)<sp/>{<sp/>*s++=h[(n64&gt;&gt;60)&amp;15];<sp/>n64&lt;&lt;=4;<sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>the<sp/>expo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tail[1]=h[17];</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dp&lt;0)<sp/>{<sp/>tail[2]=</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">;<sp/>dp=-dp;}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>tail[2]=</highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(dp&gt;=1000)?6:((dp&gt;=100)?5:((dp&gt;=10)?4:3));</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tail[0]=(char)n;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)<sp/>{<sp/>tail[n]=</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">+dp%10;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n&lt;=3)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>--n;<sp/>dp/=10;<sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dp<sp/>=<sp/>(int)(s-sn);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>(int)(s-(num+64));</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>num+64;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/>1<sp/>+<sp/>(3&lt;&lt;24);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>scopy;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;G&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h=hexu;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>dosmallfloat;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h=hex;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dosmallfloat:<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fv<sp/>=<sp/>va_arg(va,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pr==-1)<sp/>pr=6;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pr==0)<sp/>pr<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>default<sp/>is<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>the<sp/>double<sp/>into<sp/>a<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rrreal_to_str(<sp/>&amp;sn,<sp/>&amp;l,<sp/>num,<sp/>&amp;dp,<sp/>fv,<sp/>(pr-1)|0x80000000<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fl<sp/>|=<sp/>NG;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clamp<sp/>the<sp/>precision<sp/>and<sp/>delete<sp/>extra<sp/>zeros<sp/>after<sp/>clamp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>pr;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>l<sp/>&gt;<sp/>(rU32)pr<sp/>)<sp/>l<sp/>=<sp/>pr;<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((l&gt;1)&amp;&amp;(pr)&amp;&amp;(sn[l-1]==</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">))<sp/>{<sp/>--pr;<sp/>--l;<sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>we<sp/>use<sp/>%e</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((dp&lt;=-4)||(dp&gt;(rS32)n))</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pr<sp/>&gt;<sp/>(rS32)l<sp/>)<sp/>pr<sp/>=<sp/>l-1;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pr<sp/>)<sp/>--pr;<sp/></highlight><highlight class="comment">//<sp/>when<sp/>using<sp/>%e,<sp/>there<sp/>is<sp/>one<sp/>digit<sp/>before<sp/>the<sp/>decimal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>doexpfromg;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>the<sp/>insane<sp/>action<sp/>to<sp/>get<sp/>the<sp/>pr<sp/>to<sp/>match<sp/>%g<sp/>sematics<sp/>for<sp/>%f</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dp&gt;0)<sp/>{<sp/>pr=(dp&lt;(rS32)l)?l-dp:0;<sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>pr<sp/>=<sp/>-dp+((pr&gt;(rS32)l)?l:pr);<sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>dofloatfromg;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;E&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h=hexu;<sp/><sp/></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>doexp;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h=hex;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doexp:<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fv<sp/>=<sp/>va_arg(va,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pr==-1)<sp/>pr=6;<sp/></highlight><highlight class="comment">//<sp/>default<sp/>is<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>the<sp/>double<sp/>into<sp/>a<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rrreal_to_str(<sp/>&amp;sn,<sp/>&amp;l,<sp/>num,<sp/>&amp;dp,<sp/>fv,<sp/>pr|0x80000000<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fl<sp/>|=<sp/>NG;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doexpfromg:<sp/></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tail[0]=0;<sp/></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lead[0]=0;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fl&amp;NG)<sp/>{<sp/>lead[0]=1;<sp/>lead[1]=</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">;<sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fl&amp;LS)<sp/>{<sp/>lead[0]=1;<sp/>lead[1]=</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;<sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fl&amp;LP)<sp/>{<sp/>lead[0]=1;<sp/>lead[1]=</highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">;<sp/>};</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>dp<sp/>==<sp/>RRSPECIAL<sp/>)<sp/>{<sp/>s=(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)sn;<sp/>cs=0;<sp/>pr=0;<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>scopy;<sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s=num+64;<sp/></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>leading<sp/>chars</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*s++=sn[0];</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pr)<sp/>*s++=RRperiod;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>after<sp/>decimal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((l-1)&gt;(rU32)pr)<sp/>l=pr+1;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(n=1;n&lt;l;n++)<sp/>*s++=sn[n];</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>trailing<sp/>zeros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tz<sp/>=<sp/>pr-(l-1);<sp/>pr=0;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dump<sp/>expo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tail[1]=h[0xe];</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dp<sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dp&lt;0)<sp/>{<sp/>tail[2]=</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">;<sp/>dp=-dp;}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>tail[2]=</highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>RR_SPRINTF_MSVC_MODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(dp&gt;=100)?5:4;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tail[0]=(char)n;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)<sp/>{<sp/>tail[n]=</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">+dp%10;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n&lt;=3)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>--n;<sp/>dp/=10;<sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/>1<sp/>+<sp/>(3&lt;&lt;24);<sp/></highlight><highlight class="comment">//<sp/>how<sp/>many<sp/>tens</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>flt_lead;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fv<sp/>=<sp/>va_arg(va,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doafloat:<sp/></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>kilos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fl&amp;KI)<sp/>{</highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(fl&lt;0x4000000)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fv&lt;1024.0)<sp/>&amp;&amp;<sp/>(fv&gt;-1024.0))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>fv/=1024.0;<sp/>fl+=0x1000000;<sp/>}}<sp/></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pr==-1)<sp/>pr=6;<sp/></highlight><highlight class="comment">//<sp/>default<sp/>is<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>the<sp/>double<sp/>into<sp/>a<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>rrreal_to_str(<sp/>&amp;sn,<sp/>&amp;l,<sp/>num,<sp/>&amp;dp,<sp/>fv,<sp/>pr<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fl<sp/>|=<sp/>NG;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dofloatfromg:</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tail[0]=0;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lead[0]=0;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fl&amp;NG)<sp/>{<sp/>lead[0]=1;<sp/>lead[1]=</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">;<sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fl&amp;LS)<sp/>{<sp/>lead[0]=1;<sp/>lead[1]=</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;<sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fl&amp;LP)<sp/>{<sp/>lead[0]=1;<sp/>lead[1]=</highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">;<sp/>};</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>dp<sp/>==<sp/>RRSPECIAL<sp/>)<sp/>{<sp/>s=(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)sn;<sp/>cs=0;<sp/>pr=0;<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>scopy;<sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s=num+64;<sp/></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>the<sp/>three<sp/>decimal<sp/>varieties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dp&lt;=0)<sp/></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rS32<sp/>i;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>0.000*000xxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*s++=</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pr)<sp/>*s++=RRperiod;<sp/></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n=-dp;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((rS32)n&gt;pr)<sp/>n=pr;<sp/>i=n;<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((((rUINTa)s)&amp;3)==0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>*s++=</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;<sp/>--i;<sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i&gt;=4)<sp/>{<sp/>*(rU32*)s=0x30303030;<sp/>s+=4;<sp/>i-=4;<sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i)<sp/>{<sp/>*s++=</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;<sp/>--i;<sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((rS32)(l+n)&gt;pr)<sp/>l=pr-n;<sp/>i=l;<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i)<sp/>{<sp/>*s++=*sn++;<sp/>--i;<sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tz<sp/>=<sp/>pr-(n+l);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/>1<sp/>+<sp/>(3&lt;&lt;24);<sp/></highlight><highlight class="comment">//<sp/>how<sp/>many<sp/>tens<sp/>did<sp/>we<sp/>write<sp/>(for<sp/>commas<sp/>below)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/>(fl&amp;CS)?((600-(rU32)dp)%3):0;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((rU32)dp&gt;=l)</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>xxxx000*000.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n=0;<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fl&amp;CS)<sp/>&amp;&amp;<sp/>(++cs==4))<sp/>{<sp/>cs<sp/>=<sp/>0;<sp/>*s++=RRcomma;<sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>*s++=sn[n];<sp/>++n;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n&gt;=l)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}<sp/>}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n&lt;(rU32)dp)</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>dp<sp/>-<sp/>n;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fl&amp;CS)==0)<sp/>{<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(n)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((((rUINTa)s)&amp;3)==0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>*s++=</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;<sp/>--n;<sp/>}<sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(n&gt;=4)<sp/>{<sp/>*(rU32*)s=0x30303030;<sp/>s+=4;<sp/>n-=4;<sp/>}<sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(n)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fl&amp;CS)<sp/>&amp;&amp;<sp/>(++cs==4))<sp/>{<sp/>cs<sp/>=<sp/>0;<sp/>*s++=RRcomma;<sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>*s++=</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;<sp/>--n;<sp/>}<sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/>(int)(s-(num+64))<sp/>+<sp/>(3&lt;&lt;24);<sp/></highlight><highlight class="comment">//<sp/>cs<sp/>is<sp/>how<sp/>many<sp/>tens</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pr)<sp/>{<sp/>*s++=RRperiod;<sp/>tz=pr;}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>xxxxx.xxxx000*000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n=0;<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fl&amp;CS)<sp/>&amp;&amp;<sp/>(++cs==4))<sp/>{<sp/>cs<sp/>=<sp/>0;<sp/>*s++=RRcomma;<sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>*s++=sn[n];<sp/>++n;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n&gt;=(rU32)dp)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}<sp/>}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/>(int)(s-(num+64))<sp/>+<sp/>(3&lt;&lt;24);<sp/></highlight><highlight class="comment">//<sp/>cs<sp/>is<sp/>how<sp/>many<sp/>tens</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pr)<sp/>*s++=RRperiod;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((l-dp)&gt;(rU32)pr)<sp/>l=pr+dp;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(n&lt;l)<sp/>{<sp/>*s++=sn[n];<sp/>++n;<sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tz<sp/>=<sp/>pr-(l-dp);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>k,m,g,t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fl&amp;KI)<sp/>{<sp/>tail[0]=1;<sp/>tail[1]=</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fl&gt;&gt;24)<sp/>{<sp/>tail[2]=</highlight><highlight class="stringliteral">&quot;_kmgt&quot;</highlight><highlight class="normal">[fl&gt;&gt;24];<sp/>tail[0]=2;<sp/>}<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flt_lead:</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>length<sp/>that<sp/>we<sp/>copied</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>(rU32)<sp/>(<sp/>s-(num+64)<sp/>);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s=num+64;<sp/></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>scopy;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;B&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>upper<sp/>binary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>hexu;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>binary;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>lower<sp/>binary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>hex;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binary:</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lead[0]=0;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fl&amp;LX)<sp/>{<sp/>lead[0]=2;lead[1]=</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;lead[2]=h[0xb];<sp/>}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l=(8&lt;&lt;4)|(1&lt;&lt;8);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>radixnum;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;o&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>octal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>hexu;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lead[0]=0;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fl&amp;LX)<sp/>{<sp/>lead[0]=1;lead[1]=</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l=(3&lt;&lt;4)|(3&lt;&lt;8);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>radixnum;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;p&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fl<sp/>|=<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)==8)?BI:0;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pr<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)*2;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fl<sp/>&amp;=<sp/>~LZ;<sp/></highlight><highlight class="comment">//<sp/>&apos;p&apos;<sp/>only<sp/>prints<sp/>the<sp/>pointer<sp/>with<sp/>zeros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>drop<sp/>through<sp/>to<sp/>X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;X&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>upper<sp/>binary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>hexu;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>dohexb;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>lower<sp/>binary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>hex;<sp/>dohexb:</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l=(4&lt;&lt;4)|(4&lt;&lt;8);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lead[0]=0;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fl&amp;LX)<sp/>{<sp/>lead[0]=2;lead[1]=</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;lead[2]=h[16];<sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radixnum:<sp/></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>fl&amp;BI<sp/>)</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n64<sp/>=<sp/>va_arg(va,rU64);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n64<sp/>=<sp/>va_arg(va,rU32);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>num<sp/>+<sp/>NUMSZ;<sp/>dp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>tail,<sp/>and<sp/>clear<sp/>leading<sp/>if<sp/>value<sp/>is<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tail[0]=0;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n64==0)<sp/>{<sp/>lead[0]=0;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pr==0)<sp/>{<sp/>l=0;<sp/>cs<sp/>=<sp/>(<sp/>((l&gt;&gt;4)&amp;15))<sp/>&lt;&lt;<sp/>24;<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>scopy;<sp/>}<sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>to<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)<sp/>{<sp/>*--s<sp/>=<sp/>h[n64&amp;((1&lt;&lt;(l&gt;&gt;8))-1)];<sp/>n64&gt;&gt;=(l&gt;&gt;8);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<sp/>(<sp/>(n64)<sp/>||<sp/>((rS32)<sp/>(<sp/>(num+NUMSZ)<sp/>-<sp/>s<sp/>)<sp/>&lt;<sp/>pr<sp/>)<sp/>)<sp/>)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>fl&amp;CS)<sp/>{<sp/>++l;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((l&amp;15)==((l&gt;&gt;4)&amp;15))<sp/>{<sp/>l&amp;=~15;<sp/>*--s=RRcomma;<sp/>}<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>tens<sp/>and<sp/>the<sp/>comma<sp/>pos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/>(rU32)<sp/>(<sp/>(num+NUMSZ)<sp/>-<sp/>s<sp/>)<sp/>+<sp/>(<sp/>(<sp/>((l&gt;&gt;4)&amp;15))<sp/>&lt;&lt;<sp/>24<sp/>);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>length<sp/>that<sp/>we<sp/>copied</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>(rU32)<sp/>(<sp/>(num+NUMSZ)<sp/>-<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>scopy;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;u&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>unsigned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>integer<sp/>and<sp/>abs<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>fl&amp;BI<sp/>)</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rS64<sp/><ref refid="group__gtc__type__precision_1gac7a7eaad46064fc952b06df33689da23" kindref="member">i64</ref><sp/>=<sp/>va_arg(va,rS64);<sp/>n64<sp/>=<sp/>(rU64)<ref refid="group__gtc__type__precision_1gac7a7eaad46064fc952b06df33689da23" kindref="member">i64</ref>;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((f[0]!=</highlight><highlight class="charliteral">&apos;u&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(<ref refid="group__gtc__type__precision_1gac7a7eaad46064fc952b06df33689da23" kindref="member">i64</ref>&lt;0))<sp/>{<sp/>n64=(rU64)-<ref refid="group__gtc__type__precision_1gac7a7eaad46064fc952b06df33689da23" kindref="member">i64</ref>;<sp/>fl|=NG;<sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rS32<sp/>i<sp/>=<sp/>va_arg(va,rS32);<sp/>n64<sp/>=<sp/>(rU32)i;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((f[0]!=</highlight><highlight class="charliteral">&apos;u&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(i&lt;0))<sp/>{<sp/>n64=(rU32)-i;<sp/>fl|=NG;<sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifndef<sp/>RR_SPRINTF_NOFLOAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fl&amp;KI)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n64&lt;1024)<sp/>pr=0;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pr==-1)<sp/>pr=1;<sp/>fv=(double)(rS64)n64;<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>doafloat;<sp/>}<sp/></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>to<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>num+NUMSZ;<sp/>l=0;<sp/></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>in<sp/>32-bit<sp/>chunks<sp/>(avoid<sp/>lots<sp/>of<sp/>64-bit<sp/>divides<sp/>even<sp/>with<sp/>constant<sp/>denominators)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>o=s-8;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n64&gt;=100000000)<sp/>{<sp/>n<sp/>=<sp/>(rU32)(<sp/>n64<sp/>%<sp/>100000000);<sp/><sp/>n64<sp/>/=<sp/>100000000;<sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{n<sp/>=<sp/>(rU32)n64;<sp/>n64<sp/>=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((fl&amp;CS)==0)<sp/>{<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(n)<sp/>{<sp/>s-=2;<sp/>*(rU16*)s=*(rU16*)&amp;rrdiglookup[(n%100)*2];<sp/>n/=100;<sp/>}<sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>fl&amp;CS)<sp/>&amp;&amp;<sp/>(l++==3)<sp/>)<sp/>{<sp/>l=0;<sp/>*--s=RRcomma;<sp/>--o;<sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>*--s=(char)(n%10)+</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;<sp/>n/=10;<sp/>}<sp/>}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n64==0)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((s[0]==</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(s!=(num+NUMSZ)))<sp/>++s;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s!=o)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>fl&amp;CS)<sp/>&amp;&amp;<sp/>(l++==3)<sp/>)<sp/>{<sp/>l=0;<sp/>*--s=RRcomma;<sp/>--o;<sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>*--s=</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tail[0]=0;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lead[0]=0;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fl&amp;NG)<sp/>{<sp/>lead[0]=1;<sp/>lead[1]=</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">;<sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fl&amp;LS)<sp/>{<sp/>lead[0]=1;<sp/>lead[1]=</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;<sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fl&amp;LP)<sp/>{<sp/>lead[0]=1;<sp/>lead[1]=</highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">;<sp/>};</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>length<sp/>that<sp/>we<sp/>copied</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>(rU32)<sp/>(<sp/>(num+NUMSZ)<sp/>-<sp/>s<sp/>);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>l<sp/>==<sp/>0<sp/>)<sp/>{<sp/>*--s=</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;<sp/>l<sp/>=<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/>l<sp/>+<sp/>(3&lt;&lt;24);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pr&lt;0)<sp/>pr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scopy:<sp/></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>fw=leading/trailing<sp/>space,<sp/>pr=leading<sp/>zeros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pr&lt;(rS32)l)<sp/>pr<sp/>=<sp/>l;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>pr<sp/>+<sp/>lead[0]<sp/>+<sp/>tail[0]<sp/>+<sp/>tz;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fw&lt;(rS32)n)<sp/>fw<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fw<sp/>-=<sp/>n;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pr<sp/>-=<sp/>l;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>right<sp/>justify<sp/>and<sp/>leading<sp/>zeros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(fl&amp;LJ)==0<sp/>)</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fl&amp;LZ)<sp/></highlight><highlight class="comment">//<sp/>if<sp/>leading<sp/>zeros,<sp/>everything<sp/>is<sp/>in<sp/>pr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pr<sp/>=<sp/>(fw&gt;pr)?fw:pr;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fw<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fl<sp/>&amp;=<sp/>~CS;<sp/></highlight><highlight class="comment">//<sp/>if<sp/>no<sp/>leading<sp/>zeros,<sp/>then<sp/>no<sp/>commas</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>spaces<sp/>and/or<sp/>zeros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fw+pr)</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rS32<sp/>i;<sp/>rU32<sp/>c;<sp/></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>leading<sp/>spaces<sp/>(or<sp/>when<sp/>doing<sp/>%8.4d<sp/>stuff)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(fl&amp;LJ)==0<sp/>)<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(fw&gt;0)<sp/>{<sp/>cb_buf_clamp(i,fw);<sp/>fw<sp/>-=<sp/>i;<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((((rUINTa)bf)&amp;3)==0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>*bf++=</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;<sp/>--i;<sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i&gt;=4)<sp/>{<sp/>*(rU32*)bf=0x20202020;<sp/>bf+=4;<sp/>i-=4;<sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i)<sp/>{*bf++=</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;<sp/>--i;}<sp/>chk_cb_buf(1);<sp/>}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>leader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sn=lead+1;<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(lead[0])<sp/>{<sp/>cb_buf_clamp(i,lead[0]);<sp/>lead[0]<sp/>-=<sp/>(char)i;<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i)<sp/>{*bf++=*sn++;<sp/>--i;}<sp/>chk_cb_buf(1);<sp/>}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>leading<sp/>zeros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>cs<sp/>&gt;&gt;<sp/>24;<sp/>cs<sp/>&amp;=<sp/>0xffffff;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs<sp/>=<sp/>(fl&amp;CS)?((rU32)(c-((pr+cs)%(c+1)))):0;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(pr&gt;0)<sp/>{<sp/>cb_buf_clamp(i,pr);<sp/>pr<sp/>-=<sp/>i;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((fl&amp;CS)==0)<sp/>{<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((((rUINTa)bf)&amp;3)==0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>*bf++=</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;<sp/>--i;<sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i&gt;=4)<sp/>{<sp/>*(rU32*)bf=0x30303030;<sp/>bf+=4;<sp/>i-=4;<sp/>}<sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((fl&amp;CS)<sp/>&amp;&amp;<sp/>(cs++==c))<sp/>{<sp/>cs<sp/>=<sp/>0;<sp/>*bf++=RRcomma;<sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>*bf++=</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;<sp/>--i;<sp/>}<sp/>chk_cb_buf(1);<sp/>}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>leader<sp/>if<sp/>there<sp/>is<sp/>still<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sn=lead+1;<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(lead[0])<sp/>{<sp/>rS32<sp/>i;<sp/>cb_buf_clamp(i,lead[0]);<sp/>lead[0]<sp/>-=<sp/>(char)i;<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i)<sp/>{*bf++=*sn++;<sp/>--i;}<sp/>chk_cb_buf(1);<sp/>}</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>l;<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n)<sp/>{<sp/>rS32<sp/>i;<sp/>cb_buf_clamp(i,n);<sp/>n-=i;<sp/>RR_UNALIGNED(<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i&gt;=4)<sp/>{<sp/>*(rU32*)bf=*(rU32*)s;<sp/>bf+=4;<sp/>s+=4;<sp/>i-=4;<sp/>}<sp/>)<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i)<sp/>{*bf++=*s++;<sp/>--i;}<sp/>chk_cb_buf(1);<sp/>}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>trailing<sp/>zeros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(tz)<sp/>{<sp/>rS32<sp/>i;<sp/>cb_buf_clamp(i,tz);<sp/>tz<sp/>-=<sp/>i;<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((((rUINTa)bf)&amp;3)==0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>*bf++=</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;<sp/>--i;<sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i&gt;=4)<sp/>{<sp/>*(rU32*)bf=0x30303030;<sp/>bf+=4;<sp/>i-=4;<sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i)<sp/>{*bf++=</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;<sp/>--i;}<sp/>chk_cb_buf(1);<sp/>}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>tail<sp/>if<sp/>there<sp/>is<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sn=tail+1;<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(tail[0])<sp/>{<sp/>rS32<sp/>i;<sp/>cb_buf_clamp(i,tail[0]);<sp/>tail[0]<sp/>-=<sp/>(char)i;<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i)<sp/>{*bf++=*sn++;<sp/>--i;}<sp/>chk_cb_buf(1);<sp/>}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>the<sp/>left<sp/>justify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fl&amp;LJ)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fw&gt;0)<sp/>{<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fw)<sp/>{<sp/>rS32<sp/>i;<sp/>cb_buf_clamp(i,fw);<sp/>fw-=i;<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((((rUINTa)bf)&amp;3)==0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>*bf++=</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;<sp/>--i;<sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(i&gt;=4)<sp/>{<sp/>*(rU32*)bf=0x20202020;<sp/>bf+=4;<sp/>i-=4;<sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i--)<sp/>*bf++=</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;<sp/>chk_cb_buf(1);<sp/>}<sp/>}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>unknown,<sp/>just<sp/>copy<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>num<sp/>+<sp/>NUMSZ<sp/>-1;<sp/>*s<sp/>=<sp/>f[0];</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fw=pr=fl=0;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lead[0]=0;<sp/>tail[0]=0;<sp/>pr<sp/>=<sp/>0;<sp/>dp<sp/>=<sp/>0;<sp/>cs<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>scopy;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>++f;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/>endfmt:</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!callback)<sp/></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>*bf<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>flush_cb();</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/>done:</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tlen<sp/>+<sp/>(int)(bf-buf);</highlight></codeline>
<codeline lineno="724"><highlight class="normal">}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cleanup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>LJ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>LP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>LS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>LX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>LZ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>BI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>CS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>NG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>KI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>NUMSZ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>chk_cb_bufL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>chk_cb_buf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>flush_cb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>cb_buf_clamp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>wrapper<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal">RRPUBLIC_DEF<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RR_SPRINTF_DECORATE(<sp/>sprintf<sp/>)(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>buf,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>fmt,<sp/>...<sp/>)</highlight></codeline>
<codeline lineno="746"><highlight class="normal">{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>va_list<sp/>va;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/>va_start(<sp/>va,<sp/>fmt<sp/>);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RR_SPRINTF_DECORATE(<sp/>vsprintfcb<sp/>)(<sp/>0,<sp/>0,<sp/>buf,<sp/>fmt,<sp/>va<sp/>);</highlight></codeline>
<codeline lineno="750"><highlight class="normal">}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">RRCCS</highlight></codeline>
<codeline lineno="753"><highlight class="normal">{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>buf;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>tmp[<sp/>RR_SPRINTF_MIN<sp/>];</highlight></codeline>
<codeline lineno="757"><highlight class="normal">}<sp/>RRCCS;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>rrclampcallback(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>buf,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>user,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>)</highlight></codeline>
<codeline lineno="760"><highlight class="normal">{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/>RRCCS<sp/>*<sp/>c<sp/>=<sp/>(RRCCS*)user;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>len<sp/>&gt;<sp/>c-&gt;count<sp/>)<sp/>len<sp/>=<sp/>c-&gt;count;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len)</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>buf<sp/>!=<sp/>c-&gt;buf<sp/>)</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>s,<sp/>*<sp/>d,<sp/>*<sp/>se;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>c-&gt;buf;<sp/>s<sp/>=<sp/>buf;<sp/>se<sp/>=<sp/>buf+len;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal">{<sp/>*d++<sp/>=<sp/>*s++;<sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s&lt;se);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>c-&gt;buf<sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>c-&gt;count<sp/>-=<sp/>len;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>c-&gt;count<sp/>&lt;=<sp/>0<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>c-&gt;count<sp/>&gt;=<sp/>RR_SPRINTF_MIN<sp/>)<sp/>?<sp/>c-&gt;buf<sp/>:<sp/>c-&gt;tmp;<sp/></highlight><highlight class="comment">//<sp/>go<sp/>direct<sp/>into<sp/>buffer<sp/>if<sp/>you<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal">}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal">RRPUBLIC_DEF<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RR_SPRINTF_DECORATE(<sp/>vsnprintf<sp/>)(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>fmt,<sp/>va_list<sp/>va<sp/>)</highlight></codeline>
<codeline lineno="782"><highlight class="normal">{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/>RRCCS<sp/>c;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>count<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/>c.buf<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/>c.count<sp/>=<sp/>count;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/>RR_SPRINTF_DECORATE(<sp/>vsprintfcb<sp/>)(<sp/>rrclampcallback,<sp/>&amp;c,<sp/>rrclampcallback(0,&amp;c,0),<sp/>fmt,<sp/>va<sp/>);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>zero-terminate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/>l<sp/>=<sp/>(int)(<sp/>c.buf<sp/>-<sp/>buf<sp/>);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>l<sp/>&gt;=<sp/>count<sp/>)<sp/></highlight><highlight class="comment">//<sp/>should<sp/>never<sp/>be<sp/>greater,<sp/>only<sp/>equal<sp/>(or<sp/>less)<sp/>than<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>l<sp/>=<sp/>count<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/>buf[l]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l;</highlight></codeline>
<codeline lineno="801"><highlight class="normal">}</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal">RRPUBLIC_DEF<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RR_SPRINTF_DECORATE(<sp/>snprintf<sp/>)(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>fmt,<sp/>...<sp/>)</highlight></codeline>
<codeline lineno="804"><highlight class="normal">{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/>va_list<sp/>va;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/>va_start(<sp/>va,<sp/>fmt<sp/>);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RR_SPRINTF_DECORATE(<sp/>vsnprintf<sp/>)(<sp/>buf,<sp/>count,<sp/>fmt,<sp/>va<sp/>);</highlight></codeline>
<codeline lineno="809"><highlight class="normal">}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal">RRPUBLIC_DEF<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RR_SPRINTF_DECORATE(<sp/>vsprintf<sp/>)(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>buf,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>fmt,<sp/>va_list<sp/>va<sp/>)</highlight></codeline>
<codeline lineno="812"><highlight class="normal">{</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RR_SPRINTF_DECORATE(<sp/>vsprintfcb<sp/>)(<sp/>0,<sp/>0,<sp/>buf,<sp/>fmt,<sp/>va<sp/>);</highlight></codeline>
<codeline lineno="814"><highlight class="normal">}</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>low<sp/>level<sp/>float<sp/>utility<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>RR_SPRINTF_NOFLOAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>copies<sp/>d<sp/>to<sp/>bits<sp/>w/<sp/>strict<sp/>aliasing<sp/>(this<sp/>compiles<sp/>to<sp/>nothing<sp/>on<sp/>/Ox)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/>#define<sp/>RRCOPYFP(dest,src)<sp/>{<sp/>int<sp/>cn;<sp/>for(cn=0;cn&lt;8;cn++)<sp/>((char*)&amp;dest)[cn]=((char*)&amp;src)[cn];<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight><highlight class="comment">//<sp/>get<sp/>float<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>rS32<sp/>rrreal_to_parts(<sp/>rS64<sp/>*<sp/>bits,<sp/>rS32<sp/>*<sp/>expo,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>)</highlight></codeline>
<codeline lineno="826"><highlight class="normal">{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/>rS64<sp/>b<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>load<sp/>value<sp/>and<sp/>round<sp/>at<sp/>the<sp/>frac_digits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/>d<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/>RRCOPYFP(<sp/>b,<sp/>d<sp/>);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/>*bits<sp/>=<sp/>b<sp/>&amp;<sp/>((((rU64)1)&lt;&lt;52)-1);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/>*expo<sp/>=<sp/>((b<sp/>&gt;&gt;<sp/>52)<sp/>&amp;<sp/>2047)-1023;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(rS32)(b<sp/>&gt;&gt;<sp/>63);</highlight></codeline>
<codeline lineno="839"><highlight class="normal">}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rrbot[23]={1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+000,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+001,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+002,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+003,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+004,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+005,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+006,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+007,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+008,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+009,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+010,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+011,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+012,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+013,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+014,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+015,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+016,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+017,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+018,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+019,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+020,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+021,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+022};</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rrnegbot[22]={1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-001,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-002,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-003,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-004,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-005,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-006,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-007,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-008,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-009,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-010,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-011,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-012,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-013,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-014,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-015,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-016,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-017,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-018,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-019,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-020,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-021,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-022};</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rrnegboterr[22]={-5.551115123125783e-018,-2.0816681711721684e-019,-2.0816681711721686e-020,-4.7921736023859299e-021,-8.1803053914031305e-022,4.5251888174113741e-023,4.5251888174113739e-024,-2.0922560830128471e-025,-6.2281591457779853e-026,-3.6432197315497743e-027,6.0503030718060191e-028,2.0113352370744385e-029,-3.0373745563400371e-030,1.1806906454401013e-032,-7.7705399876661076e-032,2.0902213275965398e-033,-7.1542424054621921e-034,-7.1542424054621926e-035,2.4754073164739869e-036,5.4846728545790429e-037,9.2462547772103625e-038,-4.8596774326570872e-039};</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rrtop[13]={1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+023,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+046,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+069,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+092,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+115,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+138,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+161,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+184,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+207,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+230,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+253,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+276,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+299};</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rrnegtop[13]={1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-023,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-046,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-069,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-092,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-115,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-138,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-161,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-184,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-207,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-230,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-253,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-276,1<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-299};</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rrtoperr[13]={8388608,6.8601809640529717e+028,-7.253143638152921e+052,-4.3377296974619174e+075,-1.5559416129466825e+098,-3.2841562489204913e+121,-3.7745893248228135e+144,-1.7356668416969134e+167,-3.8893577551088374e+190,-9.9566444326005119e+213,6.3641293062232429e+236,-5.2069140800249813e+259,-5.2504760255204387e+282};</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rrnegtoperr[13]={3.9565301985100693e-040,-2.299904345391321e-063,3.6506201437945798e-086,1.1875228833981544e-109,-5.0644902316928607e-132,-6.7156837247865426e-155,-2.812077463003139e-178,-5.7778912386589953e-201,7.4997100559334532e-224,-4.6439668915134491e-247,-6.3691100762962136e-270,-9.436808465446358e-293,8.0970921678014997e-317};</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>(_MSC_VER&lt;=1200)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>rU64<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rrpot[20]={1,10,100,1000,<sp/>10000,100000,1000000,10000000,<sp/>100000000,1000000000,10000000000,100000000000,<sp/><sp/>1000000000000,10000000000000,100000000000000,1000000000000000,<sp/><sp/>10000000000000000,100000000000000000,1000000000000000000,10000000000000000000U<sp/>};</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rrtento19th<sp/>((rU64)1000000000000000000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>rU64<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rrpot[20]={1,10,100,1000,<sp/>10000,100000,1000000,10000000,<sp/>100000000,1000000000,10000000000ULL,100000000000ULL,<sp/><sp/>1000000000000ULL,10000000000000ULL,100000000000000ULL,1000000000000000ULL,<sp/><sp/>10000000000000000ULL,100000000000000000ULL,1000000000000000000ULL,10000000000000000000ULL<sp/>};</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rrtento19th<sp/>(1000000000000000000ULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rrddmulthi(oh,ol,xh,yh)<sp/>\</highlight></codeline>
<codeline lineno="858"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="859"><highlight class="preprocessor"><sp/><sp/>double<sp/>ahi=0,alo,bhi=0,blo;<sp/>\</highlight></codeline>
<codeline lineno="860"><highlight class="preprocessor"><sp/><sp/>rS64<sp/>bt;<sp/>\</highlight></codeline>
<codeline lineno="861"><highlight class="preprocessor"><sp/><sp/>oh<sp/>=<sp/>xh<sp/>*<sp/>yh;<sp/>\</highlight></codeline>
<codeline lineno="862"><highlight class="preprocessor"><sp/><sp/>RRCOPYFP(bt,xh);<sp/>bt&amp;=((~(rU64)0)&lt;&lt;27);<sp/>RRCOPYFP(ahi,bt);<sp/>alo<sp/>=<sp/>xh-ahi;<sp/>\</highlight></codeline>
<codeline lineno="863"><highlight class="preprocessor"><sp/><sp/>RRCOPYFP(bt,yh);<sp/>bt&amp;=((~(rU64)0)&lt;&lt;27);<sp/>RRCOPYFP(bhi,bt);<sp/>blo<sp/>=<sp/>yh-bhi;<sp/>\</highlight></codeline>
<codeline lineno="864"><highlight class="preprocessor"><sp/><sp/>ol<sp/>=<sp/>((ahi*bhi-oh)+ahi*blo+alo*bhi)+alo*blo;<sp/>\</highlight></codeline>
<codeline lineno="865"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rrddtoS64(ob,xh,xl)<sp/>\</highlight></codeline>
<codeline lineno="868"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="869"><highlight class="preprocessor"><sp/><sp/>double<sp/>ahi=0,alo,vh,t;\</highlight></codeline>
<codeline lineno="870"><highlight class="preprocessor"><sp/><sp/>ob<sp/>=<sp/>(rS64)ph;\</highlight></codeline>
<codeline lineno="871"><highlight class="preprocessor"><sp/><sp/>vh=(double)ob;\</highlight></codeline>
<codeline lineno="872"><highlight class="preprocessor"><sp/><sp/>ahi<sp/>=<sp/>(<sp/>xh<sp/>-<sp/>vh<sp/>);\</highlight></codeline>
<codeline lineno="873"><highlight class="preprocessor"><sp/><sp/>t<sp/>=<sp/>(<sp/>ahi<sp/>-<sp/>xh<sp/>);\</highlight></codeline>
<codeline lineno="874"><highlight class="preprocessor"><sp/><sp/>alo<sp/>=<sp/>(xh-(ahi-t))-(vh+t);\</highlight></codeline>
<codeline lineno="875"><highlight class="preprocessor"><sp/><sp/>ob<sp/>+=<sp/>(rS64)(ahi+alo+xl);\</highlight></codeline>
<codeline lineno="876"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rrddrenorm(oh,ol)<sp/>{<sp/>double<sp/>s;<sp/>s=oh+ol;<sp/>ol=ol-(s-oh);<sp/>oh=s;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rrddmultlo(oh,ol,xh,xl,yh,yl)<sp/>\</highlight></codeline>
<codeline lineno="882"><highlight class="preprocessor"><sp/><sp/>ol<sp/>=<sp/>ol<sp/>+<sp/>(<sp/>xh*yl<sp/>+<sp/>xl*yh<sp/>);<sp/>\</highlight></codeline>
<codeline lineno="883"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rrddmultlos(oh,ol,xh,yl)<sp/>\</highlight></codeline>
<codeline lineno="885"><highlight class="preprocessor"><sp/><sp/>ol<sp/>=<sp/>ol<sp/>+<sp/>(<sp/>xh*yl<sp/>);<sp/>\</highlight></codeline>
<codeline lineno="886"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>rrraise_to_power10(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ohi,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*olo,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d,<sp/>rS32<sp/>power<sp/>)<sp/><sp/></highlight><highlight class="comment">//<sp/>power<sp/>can<sp/>be<sp/>-323<sp/>to<sp/>+350</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal">{</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ph,<sp/>pl;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((power&gt;=0)<sp/>&amp;&amp;<sp/>(power&lt;=22))</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>rrddmulthi(ph,pl,d,rrbot[power]);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>rS32<sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>,et,eb;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p2h,p2l;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>=power;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(power&lt;0)<sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>=-<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>;<sp/></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>et<sp/>=<sp/>(<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>*0x2c9)&gt;&gt;14;</highlight><highlight class="comment">/*<sp/>%23<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(et&gt;13)<sp/>et=13;<sp/>eb<sp/>=<sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-(et*23);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>ph<sp/>=<sp/>d;<sp/>pl<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(power&lt;0)</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eb)<sp/>{<sp/>--eb;<sp/>rrddmulthi(ph,pl,d,rrnegbot[eb]);<sp/>rrddmultlos(ph,pl,d,rrnegboterr[eb]);<sp/>}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(et)</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rrddrenorm(ph,pl);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--et;<sp/>rrddmulthi(p2h,p2l,ph,rrnegtop[et]);<sp/>rrddmultlo(p2h,p2l,ph,pl,rrnegtop[et],rrnegtoperr[et]);<sp/>ph=p2h;pl=p2l;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eb)<sp/></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref><sp/>=<sp/>eb;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eb&gt;22)<sp/>eb=22;<sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref><sp/>-=<sp/>eb;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rrddmulthi(ph,pl,d,rrbot[eb]);<sp/></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref><sp/>)<sp/>{<sp/>rrddrenorm(ph,pl);<sp/>rrddmulthi(p2h,p2l,ph,rrbot[<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>]);<sp/>rrddmultlos(p2h,p2l,rrbot[<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>],pl);<sp/>ph=p2h;pl=p2l;<sp/>}</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(et)</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rrddrenorm(ph,pl);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--et;<sp/>rrddmulthi(p2h,p2l,ph,rrtop[et]);<sp/>rrddmultlo(p2h,p2l,ph,pl,rrtop[et],rrtoperr[et]);<sp/>ph=p2h;pl=p2l;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/>rrddrenorm(ph,pl);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/>*ohi<sp/>=<sp/>ph;<sp/>*olo<sp/>=<sp/>pl;</highlight></codeline>
<codeline lineno="929"><highlight class="normal">}</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight><highlight class="comment">//<sp/>given<sp/>a<sp/>float<sp/>value,<sp/>returns<sp/>the<sp/>significant<sp/>bits<sp/>in<sp/>bits,<sp/>and<sp/>the<sp/>position<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>decimal<sp/>point<sp/>in<sp/>decimal_pos.<sp/><sp/>+/-INF<sp/>and<sp/>NAN<sp/>are<sp/>specified<sp/>by<sp/>special<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>returned<sp/>in<sp/>the<sp/>decimal_pos<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight><highlight class="comment">//<sp/>frac_digits<sp/>is<sp/>absolute<sp/>normally,<sp/>but<sp/>if<sp/>you<sp/>want<sp/>from<sp/>first<sp/>significant<sp/>digits<sp/>(got<sp/>%g<sp/>and<sp/>%e),<sp/>or<sp/>in<sp/>0x80000000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>rS32<sp/>rrreal_to_str(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>*<sp/>start,<sp/>rU32<sp/>*<sp/>len,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out,<sp/>rS32<sp/>*<sp/>decimal_pos,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>,<sp/>rU32<sp/>frac_digits<sp/>)</highlight></codeline>
<codeline lineno="936"><highlight class="normal">{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/>rS64<sp/>bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/>rS32<sp/>expo,<sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>,<sp/>ng,<sp/>tens;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/>d<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/>RRCOPYFP(bits,d);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/>expo<sp/>=<sp/>(bits<sp/>&gt;&gt;<sp/>52)<sp/>&amp;<sp/>2047;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/>ng<sp/>=<sp/>(rS32)(bits<sp/>&gt;&gt;<sp/>63);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ng)<sp/>d=-d;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>expo<sp/>==<sp/>2047<sp/>)<sp/></highlight><highlight class="comment">//<sp/>is<sp/>nan<sp/>or<sp/>inf?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/>*start<sp/>=<sp/>(bits&amp;((((rU64)1)&lt;&lt;52)-1))<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;NaN&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Inf&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>*decimal_pos<sp/>=<sp/><sp/>RRSPECIAL;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/>*len<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ng;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>expo<sp/>==<sp/>0<sp/>)<sp/></highlight><highlight class="comment">//<sp/>is<sp/>zero<sp/>or<sp/>denormal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((bits&lt;&lt;1)==0)<sp/></highlight><highlight class="comment">//<sp/>do<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*decimal_pos<sp/>=<sp/>1;<sp/></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*start<sp/>=<sp/>out;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;<sp/>*len<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ng;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>right<sp/>expo<sp/>for<sp/>denormals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rS64<sp/>v<sp/>=<sp/>((rU64)1)&lt;&lt;51;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((bits&amp;v)==0)<sp/>{<sp/>--expo;<sp/>v<sp/>&gt;&gt;=<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>decimal<sp/>exponent<sp/>as<sp/>well<sp/>as<sp/>the<sp/>decimal<sp/>bits<sp/>of<sp/>the<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ph,pl;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>log10<sp/>estimate<sp/>-<sp/>very<sp/>specifically<sp/>tweaked<sp/>to<sp/>hit<sp/>or<sp/>undershoot<sp/>by<sp/>no<sp/>more<sp/>than<sp/>1<sp/>of<sp/>log10<sp/>of<sp/>all<sp/>expos<sp/>1..2046</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/>tens=expo-1023;<sp/>tens<sp/>=<sp/>(tens&lt;0)?((tens*617)/2048):(((tens*1233)/4096)+1);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>move<sp/>the<sp/>significant<sp/>bits<sp/>into<sp/>position<sp/>and<sp/>stick<sp/>them<sp/>into<sp/>an<sp/>int<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/>rrraise_to_power10(<sp/>&amp;ph,<sp/>&amp;pl,<sp/>d,<sp/>18-tens<sp/>);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>full<sp/>as<sp/>much<sp/>precision<sp/>from<sp/>double-double<sp/>as<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/>rrddtoS64(<sp/>bits,<sp/>ph,pl<sp/>);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>we<sp/>undershot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>((rU64)bits)<sp/>&gt;=<sp/>rrtento19th<sp/>)<sp/>++tens;<sp/></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>do<sp/>the<sp/>rounding<sp/>in<sp/>integer<sp/>land</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/>frac_digits<sp/>=<sp/>(<sp/>frac_digits<sp/>&amp;<sp/>0x80000000<sp/>)<sp/>?<sp/>(<sp/>(frac_digits&amp;0x7ffffff)<sp/>+<sp/>1<sp/>)<sp/>:<sp/>(<sp/>tens<sp/>+<sp/>frac_digits<sp/>);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>frac_digits<sp/>&lt;<sp/>24<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/>rU32<sp/>dg<sp/>=<sp/>1;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((rU64)bits<sp/>&gt;=<sp/>rrpot[9]<sp/>)<sp/>dg=10;<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>(rU64)bits<sp/>&gt;=<sp/>rrpot[dg]<sp/>)<sp/>{<sp/>++dg;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dg==20)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>noround;<sp/>}</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>frac_digits<sp/>&lt;<sp/>dg<sp/>)</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rU64<sp/>r;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>0.5<sp/>at<sp/>the<sp/>right<sp/>position<sp/>and<sp/>round</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref><sp/>=<sp/>dg<sp/>-<sp/>frac_digits;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(rU32)<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref><sp/>&gt;=<sp/>24<sp/>)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>noround;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>rrpot[<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>];</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>bits<sp/>+<sp/>(r/2);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(rU64)bits<sp/>&gt;=<sp/>rrpot[dg]<sp/>)<sp/>++tens;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>/=<sp/>r;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/>noround:;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>kill<sp/>long<sp/>trailing<sp/>runs<sp/>of<sp/>zeros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bits<sp/>)</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/>rU32<sp/>n;<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bits&lt;=0xffffffff<sp/>)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bits%1000)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>donez;<sp/>bits/=1000;<sp/>}<sp/>n<sp/>=<sp/>(rU32)bits;<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((n%1000)==0)<sp/>n/=1000;<sp/>bits=n;<sp/>donez:;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>to<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/>out<sp/>+=<sp/>64;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref><sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/>rU32<sp/>n;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>o<sp/>=<sp/>out-8;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>the<sp/>conversion<sp/>in<sp/>chunks<sp/>of<sp/>U32s<sp/>(avoid<sp/>most<sp/>64-bit<sp/>divides,<sp/>worth<sp/>it,<sp/>constant<sp/>denomiators<sp/>be<sp/>damned)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bits&gt;=100000000)<sp/>{<sp/>n<sp/>=<sp/>(rU32)(<sp/>bits<sp/>%<sp/>100000000);<sp/><sp/>bits<sp/>/=<sp/>100000000;<sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{n<sp/>=<sp/>(rU32)bits;<sp/>bits<sp/>=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(n)<sp/>{<sp/>out-=2;<sp/>*(rU16*)out=*(rU16*)&amp;rrdiglookup[(n%100)*2];<sp/>n/=100;<sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>+=2;<sp/>}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bits==0)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>)<sp/>&amp;&amp;<sp/>(out[0]==</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">))<sp/>{<sp/>++out;<sp/>--<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>;<sp/>}<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>out!=o<sp/>)<sp/>{<sp/>*--out<sp/>=</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;<sp/>++<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/>*decimal_pos<sp/>=<sp/>tens;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/>*start<sp/>=<sp/>out;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/>*len<sp/>=<sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ng;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>rrddmulthi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>rrddrenorm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>rrddmultlo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>rrddmultlos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>RRSPECIAL<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>RRCOPYFP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clean<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>rU16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>rU32<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>rS32<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>rU64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>rS64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>RRPUBLIC_DEC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>RRPUBLIC_DEF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>RR_SPRINTF_DECORATE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>RR_UNALIGNED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/rrsprintf.h"/>
  </compounddef>
</doxygen>
