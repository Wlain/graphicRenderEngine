<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="imgui__impl__sdlrenderer_8cpp" kind="file" language="C++">
    <compoundname>imgui_impl_sdlrenderer.cpp</compoundname>
    <includes refid="imgui_8h" local="yes">imgui.h</includes>
    <includes refid="imgui__impl__sdlrenderer_8h" local="yes">imgui_impl_sdlrenderer.h</includes>
    <includes refid="stdint_8h" local="no">stdint.h</includes>
    <includes local="no">SDL.h</includes>
    <incdepgraph>
      <node id="10">
        <label>stdint.h</label>
        <link refid="stdint_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_sdlrenderer.cpp</label>
        <link refid="imgui__impl__sdlrenderer_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>imgui_impl_sdlrenderer.h</label>
        <link refid="imgui__impl__sdlrenderer_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>imconfig.h</label>
        <link refid="imconfig_8h_source"/>
      </node>
      <node id="2">
        <label>imgui.h</label>
        <link refid="imgui_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>SDL.h</label>
      </node>
      <node id="8">
        <label>assert.h</label>
      </node>
      <node id="4">
        <label>float.h</label>
      </node>
      <node id="11">
        <label>limits.h</label>
      </node>
      <node id="5">
        <label>stdarg.h</label>
      </node>
      <node id="6">
        <label>stddef.h</label>
      </node>
      <node id="7">
        <label>string.h</label>
      </node>
      <node id="12">
        <label>wchar.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_im_gui___impl_s_d_l_renderer___data" prot="public">ImGui_ImplSDLRenderer_Data</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="imgui__impl__sdlrenderer_8cpp_1a619d4278005811c404776f379e749d63" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_im_gui___impl_s_d_l_renderer___data" kindref="compound">ImGui_ImplSDLRenderer_Data</ref> *</type>
        <definition>static ImGui_ImplSDLRenderer_Data * ImGui_ImplSDLRenderer_GetBackendData</definition>
        <argsstring>()</argsstring>
        <name>ImGui_ImplSDLRenderer_GetBackendData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_sdlrenderer.cpp" line="51" column="35" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_sdlrenderer.cpp" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__sdlrenderer_8cpp_1a9c609c1454921735fa6bccbade2a79cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ImGui_ImplSDLRenderer_Init</definition>
        <argsstring>(SDL_Renderer *renderer)</argsstring>
        <name>ImGui_ImplSDLRenderer_Init</name>
        <param>
          <type>SDL_Renderer *</type>
          <declname>renderer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_sdlrenderer.cpp" line="57" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_sdlrenderer.cpp" bodystart="57" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__sdlrenderer_8cpp_1a98be0bcebb6cf977bb1bf21f5cc63765" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImGui_ImplSDLRenderer_Shutdown</definition>
        <argsstring>()</argsstring>
        <name>ImGui_ImplSDLRenderer_Shutdown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_sdlrenderer.cpp" line="74" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_sdlrenderer.cpp" bodystart="74" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__sdlrenderer_8cpp_1ae15c3879adfd59b2cbb727e0249436be" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ImGui_ImplSDLRenderer_SetupRenderState</definition>
        <argsstring>()</argsstring>
        <name>ImGui_ImplSDLRenderer_SetupRenderState</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_sdlrenderer.cpp" line="87" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_sdlrenderer.cpp" bodystart="87" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__sdlrenderer_8cpp_1a897b0f2f750ff8c62caf1ef3314ae796" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImGui_ImplSDLRenderer_NewFrame</definition>
        <argsstring>()</argsstring>
        <name>ImGui_ImplSDLRenderer_NewFrame</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_sdlrenderer.cpp" line="97" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_sdlrenderer.cpp" bodystart="97" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__sdlrenderer_8cpp_1a0db8b857e45dff8f692020297403ec54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImGui_ImplSDLRenderer_RenderDrawData</definition>
        <argsstring>(ImDrawData *draw_data)</argsstring>
        <name>ImGui_ImplSDLRenderer_RenderDrawData</name>
        <param>
          <type><ref refid="struct_im_draw_data" kindref="compound">ImDrawData</ref> *</type>
          <declname>draw_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_sdlrenderer.cpp" line="106" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_sdlrenderer.cpp" bodystart="106" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__sdlrenderer_8cpp_1a8983cfd03fdc1fc01d18cab89cc98713" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ImGui_ImplSDLRenderer_CreateFontsTexture</definition>
        <argsstring>()</argsstring>
        <name>ImGui_ImplSDLRenderer_CreateFontsTexture</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_sdlrenderer.cpp" line="203" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_sdlrenderer.cpp" bodystart="203" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__sdlrenderer_8cpp_1a5f9d937a5ec9d524689f0138c7d0f71f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImGui_ImplSDLRenderer_DestroyFontsTexture</definition>
        <argsstring>()</argsstring>
        <name>ImGui_ImplSDLRenderer_DestroyFontsTexture</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_sdlrenderer.cpp" line="229" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_sdlrenderer.cpp" bodystart="229" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__sdlrenderer_8cpp_1abc4fab3414c291cdce37a28eb97c3827" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ImGui_ImplSDLRenderer_CreateDeviceObjects</definition>
        <argsstring>()</argsstring>
        <name>ImGui_ImplSDLRenderer_CreateDeviceObjects</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_sdlrenderer.cpp" line="241" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_sdlrenderer.cpp" bodystart="241" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__sdlrenderer_8cpp_1aaf0c533fa03499514f79bc6af1a06802" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImGui_ImplSDLRenderer_DestroyDeviceObjects</definition>
        <argsstring>()</argsstring>
        <name>ImGui_ImplSDLRenderer_DestroyDeviceObjects</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_sdlrenderer.cpp" line="246" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_sdlrenderer.cpp" bodystart="246" bodyend="249"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>dear<sp/>imgui:<sp/>Renderer<sp/>Backend<sp/>for<sp/>SDL_Renderer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(Requires:<sp/>SDL<sp/>2.0.17+)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Important<sp/>to<sp/>understand:<sp/>SDL_Renderer<sp/>is<sp/>an<sp/>_optional_<sp/>component<sp/>of<sp/>SDL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>a<sp/>multi-platform<sp/>app<sp/>consider<sp/>using<sp/>e.g.<sp/>SDL+DirectX<sp/>on<sp/>Windows<sp/>and<sp/>SDL+OpenGL<sp/>on<sp/>Linux/OSX.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>your<sp/>application<sp/>will<sp/>want<sp/>to<sp/>render<sp/>any<sp/>non<sp/>trivial<sp/>amount<sp/>of<sp/>graphics<sp/>other<sp/>than<sp/>UI,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>please<sp/>be<sp/>aware<sp/>that<sp/>SDL_Renderer<sp/>offers<sp/>a<sp/>limited<sp/>graphic<sp/>API<sp/>to<sp/>the<sp/>end-user<sp/>and<sp/>it<sp/>might</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>be<sp/>difficult<sp/>to<sp/>step<sp/>out<sp/>of<sp/>those<sp/>boundaries.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>However,<sp/>we<sp/>understand<sp/>it<sp/>is<sp/>a<sp/>convenient<sp/>choice<sp/>to<sp/>get<sp/>an<sp/>app<sp/>started<sp/>easily.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implemented<sp/>features:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>[X]<sp/>Renderer:<sp/>User<sp/>texture<sp/>binding.<sp/>Use<sp/>&apos;SDL_Texture*&apos;<sp/>as<sp/>ImTextureID.<sp/>Read<sp/>the<sp/>FAQ<sp/>about<sp/>ImTextureID!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>[X]<sp/>Renderer:<sp/>Support<sp/>for<sp/>large<sp/>meshes<sp/>(64k+<sp/>vertices)<sp/>with<sp/>16-bit<sp/>indices.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Missing<sp/>features:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>[<sp/>]<sp/>Renderer:<sp/>Multi-viewport<sp/>support<sp/>(multiple<sp/>windows).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>can<sp/>copy<sp/>and<sp/>use<sp/>unmodified<sp/>imgui_impl_*<sp/>files<sp/>in<sp/>your<sp/>project.<sp/>See<sp/>examples/<sp/>folder<sp/>for<sp/>examples<sp/>of<sp/>using<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>you<sp/>are<sp/>new<sp/>to<sp/>Dear<sp/>ImGui,<sp/>read<sp/>documentation<sp/>from<sp/>the<sp/>docs/<sp/>folder<sp/>+<sp/>read<sp/>the<sp/>top<sp/>of<sp/>imgui.cpp.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Read<sp/>online:<sp/>https://github.com/ocornut/imgui/tree/master/docs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CHANGELOG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2021-12-21:<sp/>Update<sp/>SDL_RenderGeometryRaw()<sp/>format<sp/>to<sp/>work<sp/>with<sp/>SDL<sp/>2.0.19.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2021-12-03:<sp/>Added<sp/>support<sp/>for<sp/>large<sp/>mesh<sp/>(64K+<sp/>vertices),<sp/>enable<sp/>ImGuiBackendFlags_RendererHasVtxOffset<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2021-10-06:<sp/>Backup<sp/>and<sp/>restore<sp/>modified<sp/>ClipRect/Viewport.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2021-09-21:<sp/>Initial<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;imgui.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;imgui_impl_sdlrenderer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>_MSC_VER<sp/>&lt;=<sp/>1500<sp/></highlight><highlight class="comment">//<sp/>MSVC<sp/>2008<sp/>or<sp/>earlier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>intptr_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>intptr_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SDL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SDL.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!SDL_VERSION_ATLEAST(2,0,17)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>This<sp/>backend<sp/>requires<sp/>SDL<sp/>2.0.17+<sp/>because<sp/>of<sp/>SDL_RenderGeometry()<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SDL_Renderer<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="struct_im_gui___impl_s_d_l_renderer___data" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_im_gui___impl_s_d_l_renderer___data" kindref="compound">ImGui_ImplSDLRenderer_Data</ref></highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_Renderer*<sp/><sp/><sp/>SDLRenderer;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_Texture*<sp/><sp/><sp/><sp/>FontTexture;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_s_d_l_renderer___data" kindref="compound">ImGui_ImplSDLRenderer_Data</ref>()<sp/>{<sp/>memset(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">));<sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal">};</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Backend<sp/>data<sp/>stored<sp/>in<sp/>io.BackendRendererUserData<sp/>to<sp/>allow<sp/>support<sp/>for<sp/>multiple<sp/>Dear<sp/>ImGui<sp/>contexts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>STRONGLY<sp/>preferred<sp/>that<sp/>you<sp/>use<sp/>docking<sp/>branch<sp/>with<sp/>multi-viewports<sp/>(==<sp/>single<sp/>Dear<sp/>ImGui<sp/>context<sp/>+<sp/>multiple<sp/>windows)<sp/>instead<sp/>of<sp/>multiple<sp/>Dear<sp/>ImGui<sp/>contexts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_im_gui___impl_s_d_l_renderer___data" kindref="compound">ImGui_ImplSDLRenderer_Data</ref>*<sp/>ImGui_ImplSDLRenderer_GetBackendData()</highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ImGui::GetCurrentContext()<sp/>?<sp/>(<ref refid="struct_im_gui___impl_s_d_l_renderer___data" kindref="compound">ImGui_ImplSDLRenderer_Data</ref>*)ImGui::GetIO().BackendRendererUserData<sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ImGui_ImplSDLRenderer_Init(SDL_Renderer*<sp/>renderer)</highlight></codeline>
<codeline lineno="58"><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui_i_o" kindref="compound">ImGuiIO</ref>&amp;<sp/>io<sp/>=<sp/>ImGui::GetIO();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_ASSERT(io.BackendRendererUserData<sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Already<sp/>initialized<sp/>a<sp/>renderer<sp/>backend!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_ASSERT(renderer<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;SDL_Renderer<sp/>not<sp/>initialized!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>backend<sp/>capabilities<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_s_d_l_renderer___data" kindref="compound">ImGui_ImplSDLRenderer_Data</ref>*<sp/>bd<sp/>=<sp/>IM_NEW(<ref refid="struct_im_gui___impl_s_d_l_renderer___data" kindref="compound">ImGui_ImplSDLRenderer_Data</ref>)();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>io.BackendRendererUserData<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)bd;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>io.BackendRendererName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;imgui_impl_sdlrenderer&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>io.BackendFlags<sp/>|=<sp/>ImGuiBackendFlags_RendererHasVtxOffset;<sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>honor<sp/>the<sp/>ImDrawCmd::VtxOffset<sp/>field,<sp/>allowing<sp/>for<sp/>large<sp/>meshes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>bd-&gt;SDLRenderer<sp/>=<sp/>renderer;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplSDLRenderer_Shutdown()</highlight></codeline>
<codeline lineno="75"><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_s_d_l_renderer___data" kindref="compound">ImGui_ImplSDLRenderer_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplSDLRenderer_GetBackendData();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_ASSERT(bd<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>renderer<sp/>backend<sp/>to<sp/>shutdown,<sp/>or<sp/>already<sp/>shutdown?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui_i_o" kindref="compound">ImGuiIO</ref>&amp;<sp/>io<sp/>=<sp/>ImGui::GetIO();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplSDLRenderer_DestroyDeviceObjects();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>io.BackendRendererName<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>io.BackendRendererUserData<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_DELETE(bd);</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplSDLRenderer_SetupRenderState()</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_s_d_l_renderer___data" kindref="compound">ImGui_ImplSDLRenderer_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplSDLRenderer_GetBackendData();</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>out<sp/>any<sp/>viewports<sp/>and<sp/>cliprect<sp/>set<sp/>by<sp/>the<sp/>user</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>Technically<sp/>speaking<sp/>there<sp/>are<sp/>lots<sp/>of<sp/>other<sp/>things<sp/>we<sp/>could<sp/>backup/setup/restore<sp/>during<sp/>our<sp/>render<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_RenderSetViewport(bd-&gt;SDLRenderer,<sp/>NULL);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_RenderSetClipRect(bd-&gt;SDLRenderer,<sp/>NULL);</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplSDLRenderer_NewFrame()</highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_s_d_l_renderer___data" kindref="compound">ImGui_ImplSDLRenderer_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplSDLRenderer_GetBackendData();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_ASSERT(bd<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Did<sp/>you<sp/>call<sp/>ImGui_ImplSDLRenderer_Init()?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bd-&gt;FontTexture)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui_ImplSDLRenderer_CreateDeviceObjects();</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplSDLRenderer_RenderDrawData(<ref refid="struct_im_draw_data" kindref="compound">ImDrawData</ref>*<sp/>draw_data)</highlight></codeline>
<codeline lineno="107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_s_d_l_renderer___data" kindref="compound">ImGui_ImplSDLRenderer_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplSDLRenderer_GetBackendData();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there&apos;s<sp/>a<sp/>scale<sp/>factor<sp/>set<sp/>by<sp/>the<sp/>user,<sp/>use<sp/>that<sp/>instead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>user<sp/>has<sp/>specified<sp/>a<sp/>scale<sp/>factor<sp/>to<sp/>SDL_Renderer<sp/>already<sp/>via<sp/>SDL_RenderSetScale(),<sp/>SDL<sp/>will<sp/>scale<sp/>whatever<sp/>we<sp/>pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>SDL_RenderGeometryRaw()<sp/>by<sp/>that<sp/>scale<sp/>factor.<sp/>In<sp/>that<sp/>case<sp/>we<sp/>don&apos;t<sp/>want<sp/>to<sp/>be<sp/>also<sp/>scaling<sp/>it<sp/>ourselves<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rsx<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rsy<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_RenderGetScale(bd-&gt;SDLRenderer,<sp/>&amp;rsx,<sp/>&amp;rsy);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_vec2" kindref="compound">ImVec2</ref><sp/>render_scale;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>render_scale.x<sp/>=<sp/>(rsx<sp/>==<sp/>1.0f)<sp/>?<sp/>draw_data-&gt;FramebufferScale.x<sp/>:<sp/>1.0f;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>render_scale.y<sp/>=<sp/>(rsy<sp/>==<sp/>1.0f)<sp/>?<sp/>draw_data-&gt;FramebufferScale.y<sp/>:<sp/>1.0f;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>rendering<sp/>when<sp/>minimized,<sp/>scale<sp/>coordinates<sp/>for<sp/>retina<sp/>displays<sp/>(screen<sp/>coordinates<sp/>!=<sp/>framebuffer<sp/>coordinates)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fb_width<sp/>=<sp/>(int)(draw_data-&gt;DisplaySize.x<sp/>*<sp/>render_scale.x);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fb_height<sp/>=<sp/>(int)(draw_data-&gt;DisplaySize.y<sp/>*<sp/>render_scale.y);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fb_width<sp/>==<sp/>0<sp/>||<sp/>fb_height<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Backup<sp/>SDL_Renderer<sp/>state<sp/>that<sp/>will<sp/>be<sp/>modified<sp/>to<sp/>restore<sp/>it<sp/>afterwards</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">BackupSDLRendererState</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDL_Rect<sp/><sp/><sp/><sp/>Viewport;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ClipEnabled;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDL_Rect<sp/><sp/><sp/><sp/>ClipRect;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>BackupSDLRendererState<sp/>old<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>old.ClipEnabled<sp/>=<sp/>SDL_RenderIsClipEnabled(bd-&gt;SDLRenderer)<sp/>==<sp/>SDL_TRUE;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_RenderGetViewport(bd-&gt;SDLRenderer,<sp/>&amp;old.Viewport);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_RenderGetClipRect(bd-&gt;SDLRenderer,<sp/>&amp;old.ClipRect);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Will<sp/>project<sp/>scissor/clipping<sp/>rectangles<sp/>into<sp/>framebuffer<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_vec2" kindref="compound">ImVec2</ref><sp/>clip_off<sp/>=<sp/>draw_data-&gt;DisplayPos;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(0,0)<sp/>unless<sp/>using<sp/>multi-viewports</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_vec2" kindref="compound">ImVec2</ref><sp/>clip_scale<sp/>=<sp/>render_scale;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Render<sp/>command<sp/>lists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplSDLRenderer_SetupRenderState();</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>draw_data-&gt;CmdListsCount;<sp/>n++)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_im_draw_list" kindref="compound">ImDrawList</ref>*<sp/>cmd_list<sp/>=<sp/>draw_data-&gt;CmdLists[n];</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_im_draw_vert" kindref="compound">ImDrawVert</ref>*<sp/>vtx_buffer<sp/>=<sp/>cmd_list-&gt;VtxBuffer.Data;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ImDrawIdx*<sp/>idx_buffer<sp/>=<sp/>cmd_list-&gt;IdxBuffer.Data;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmd_i<sp/>=<sp/>0;<sp/>cmd_i<sp/>&lt;<sp/>cmd_list-&gt;CmdBuffer.Size;<sp/>cmd_i++)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_im_draw_cmd" kindref="compound">ImDrawCmd</ref>*<sp/>pcmd<sp/>=<sp/>&amp;cmd_list-&gt;CmdBuffer[cmd_i];</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pcmd-&gt;UserCallback)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>User<sp/>callback,<sp/>registered<sp/>via<sp/>ImDrawList::AddCallback()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(ImDrawCallback_ResetRenderState<sp/>is<sp/>a<sp/>special<sp/>callback<sp/>value<sp/>used<sp/>by<sp/>the<sp/>user<sp/>to<sp/>request<sp/>the<sp/>renderer<sp/>to<sp/>reset<sp/>render<sp/>state.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pcmd-&gt;UserCallback<sp/>==<sp/>ImDrawCallback_ResetRenderState)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui_ImplSDLRenderer_SetupRenderState();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcmd-&gt;UserCallback(cmd_list,<sp/>pcmd);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Project<sp/>scissor/clipping<sp/>rectangles<sp/>into<sp/>framebuffer<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_im_vec2" kindref="compound">ImVec2</ref><sp/>clip_min((pcmd-&gt;ClipRect.x<sp/>-<sp/>clip_off.x)<sp/>*<sp/>clip_scale.x,<sp/>(pcmd-&gt;ClipRect.y<sp/>-<sp/>clip_off.y)<sp/>*<sp/>clip_scale.y);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_im_vec2" kindref="compound">ImVec2</ref><sp/>clip_max((pcmd-&gt;ClipRect.z<sp/>-<sp/>clip_off.x)<sp/>*<sp/>clip_scale.x,<sp/>(pcmd-&gt;ClipRect.w<sp/>-<sp/>clip_off.y)<sp/>*<sp/>clip_scale.y);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clip_min.x<sp/>&lt;<sp/>0.0f)<sp/>{<sp/>clip_min.x<sp/>=<sp/>0.0f;<sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clip_min.y<sp/>&lt;<sp/>0.0f)<sp/>{<sp/>clip_min.y<sp/>=<sp/>0.0f;<sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clip_max.x<sp/>&gt;<sp/>fb_width)<sp/>{<sp/>clip_max.x<sp/>=<sp/>(float)fb_width;<sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clip_max.y<sp/>&gt;<sp/>fb_height)<sp/>{<sp/>clip_max.y<sp/>=<sp/>(float)fb_height;<sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clip_max.x<sp/>&lt;=<sp/>clip_min.x<sp/>||<sp/>clip_max.y<sp/>&lt;=<sp/>clip_min.y)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDL_Rect<sp/>r<sp/>=<sp/>{<sp/>(int)(clip_min.x),<sp/>(int)(clip_min.y),<sp/>(int)(clip_max.x<sp/>-<sp/>clip_min.x),<sp/>(int)(clip_max.y<sp/>-<sp/>clip_min.y)<sp/>};</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDL_RenderSetClipRect(bd-&gt;SDLRenderer,<sp/>&amp;r);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>xy<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)(vtx_buffer<sp/>+<sp/>pcmd-&gt;VtxOffset)<sp/>+<sp/>IM_OFFSETOF(<ref refid="struct_im_draw_vert" kindref="compound">ImDrawVert</ref>,<sp/>pos));</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>uv<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)(vtx_buffer<sp/>+<sp/>pcmd-&gt;VtxOffset)<sp/>+<sp/>IM_OFFSETOF(<ref refid="struct_im_draw_vert" kindref="compound">ImDrawVert</ref>,<sp/>uv));</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SDL_VERSION_ATLEAST(2,0,19)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SDL_Color*<sp/>color<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SDL_Color*)((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)(vtx_buffer<sp/>+<sp/>pcmd-&gt;VtxOffset)<sp/>+<sp/>IM_OFFSETOF(<ref refid="struct_im_draw_vert" kindref="compound">ImDrawVert</ref>,<sp/>col));<sp/></highlight><highlight class="comment">//<sp/>SDL<sp/>2.0.19+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>color<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)(vtx_buffer<sp/>+<sp/>pcmd-&gt;VtxOffset)<sp/>+<sp/>IM_OFFSETOF(<ref refid="struct_im_draw_vert" kindref="compound">ImDrawVert</ref>,<sp/>col));<sp/></highlight><highlight class="comment">//<sp/>SDL<sp/>2.0.17<sp/>and<sp/>2.0.18</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bind<sp/>texture,<sp/>Draw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDL_Texture*<sp/>tex<sp/>=<sp/>(SDL_Texture*)pcmd-&gt;GetTexID();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDL_RenderGeometryRaw(bd-&gt;SDLRenderer,<sp/>tex,</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xy,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_im_draw_vert" kindref="compound">ImDrawVert</ref>),</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_im_draw_vert" kindref="compound">ImDrawVert</ref>),</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uv,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_im_draw_vert" kindref="compound">ImDrawVert</ref>),</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd_list-&gt;VtxBuffer.Size<sp/>-<sp/>pcmd-&gt;VtxOffset,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx_buffer<sp/>+<sp/>pcmd-&gt;IdxOffset,<sp/>pcmd-&gt;ElemCount,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ImDrawIdx));</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restore<sp/>modified<sp/>SDL_Renderer<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_RenderSetViewport(bd-&gt;SDLRenderer,<sp/>&amp;old.Viewport);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_RenderSetClipRect(bd-&gt;SDLRenderer,<sp/>old.ClipEnabled<sp/>?<sp/>&amp;old.ClipRect<sp/>:<sp/>NULL);</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Called<sp/>by<sp/>Init/NewFrame/Shutdown</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ImGui_ImplSDLRenderer_CreateFontsTexture()</highlight></codeline>
<codeline lineno="204"><highlight class="normal">{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui_i_o" kindref="compound">ImGuiIO</ref>&amp;<sp/>io<sp/>=<sp/>ImGui::GetIO();</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_s_d_l_renderer___data" kindref="compound">ImGui_ImplSDLRenderer_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplSDLRenderer_GetBackendData();</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Build<sp/>texture<sp/>atlas</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pixels;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/>height;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>io.Fonts-&gt;GetTexDataAsRGBA32(&amp;pixels,<sp/>&amp;width,<sp/>&amp;height);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>as<sp/>RGBA<sp/>32-bit<sp/>(75%<sp/>of<sp/>the<sp/>memory<sp/>is<sp/>wasted,<sp/>but<sp/>default<sp/>font<sp/>is<sp/>so<sp/>small)<sp/>because<sp/>it<sp/>is<sp/>more<sp/>likely<sp/>to<sp/>be<sp/>compatible<sp/>with<sp/>user&apos;s<sp/>existing<sp/>shaders.<sp/>If<sp/>your<sp/>ImTextureId<sp/>represent<sp/>a<sp/>higher-level<sp/>concept<sp/>than<sp/>just<sp/>a<sp/>GL<sp/>texture<sp/>id,<sp/>consider<sp/>calling<sp/>GetTexDataAsAlpha8()<sp/>instead<sp/>to<sp/>save<sp/>on<sp/>GPU<sp/>memory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Upload<sp/>texture<sp/>to<sp/>graphics<sp/>system</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>bd-&gt;FontTexture<sp/>=<sp/>SDL_CreateTexture(bd-&gt;SDLRenderer,<sp/>SDL_PIXELFORMAT_RGBA32,<sp/>SDL_TEXTUREACCESS_STATIC,<sp/>width,<sp/>height);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bd-&gt;FontTexture<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDL_Log(</highlight><highlight class="stringliteral">&quot;error<sp/>creating<sp/>texture&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_UpdateTexture(bd-&gt;FontTexture,<sp/>NULL,<sp/>pixels,<sp/>4<sp/>*<sp/>width);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_SetTextureBlendMode(bd-&gt;FontTexture,<sp/>SDL_BLENDMODE_BLEND);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>our<sp/>identifier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>io.Fonts-&gt;SetTexID((ImTextureID)(intptr_t)bd-&gt;FontTexture);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplSDLRenderer_DestroyFontsTexture()</highlight></codeline>
<codeline lineno="230"><highlight class="normal">{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui_i_o" kindref="compound">ImGuiIO</ref>&amp;<sp/>io<sp/>=<sp/>ImGui::GetIO();</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_s_d_l_renderer___data" kindref="compound">ImGui_ImplSDLRenderer_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplSDLRenderer_GetBackendData();</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bd-&gt;FontTexture)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>io.Fonts-&gt;SetTexID(0);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDL_DestroyTexture(bd-&gt;FontTexture);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bd-&gt;FontTexture<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ImGui_ImplSDLRenderer_CreateDeviceObjects()</highlight></codeline>
<codeline lineno="242"><highlight class="normal">{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ImGui_ImplSDLRenderer_CreateFontsTexture();</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplSDLRenderer_DestroyDeviceObjects()</highlight></codeline>
<codeline lineno="247"><highlight class="normal">{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplSDLRenderer_DestroyFontsTexture();</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_sdlrenderer.cpp"/>
  </compounddef>
</doxygen>
