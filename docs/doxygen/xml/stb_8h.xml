<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="stb_8h" kind="file" language="C++">
    <compoundname>stb.h</compoundname>
    <includes local="no">stdarg.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">time.h</includes>
    <includedby refid="cave__main_8c" local="yes">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_main.c</includedby>
    <includedby refid="cave__mesher_8c" local="yes">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_mesher.c</includedby>
    <includedby refid="cave__parse_8c" local="yes">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c</includedby>
    <includedby refid="cave__render_8c" local="yes">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_render.c</includedby>
    <includedby refid="caveview_8h" local="yes">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/caveview.h</includedby>
    <includedby refid="image__test_8c" local="yes">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/image_test.c</includedby>
    <includedby refid="pg__test_8c" local="yes">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/pg_test/pg_test.c</includedby>
    <includedby refid="sdf__test_8c" local="yes">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c</includedby>
    <includedby refid="stb_8c" local="yes">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/stb.c</includedby>
    <includedby refid="stb__cpp_8cpp" local="yes">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/stb_cpp.cpp</includedby>
    <includedby refid="test__vorbis_8c" local="yes">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/test_vorbis.c</includedby>
    <includedby refid="build__matrix_8c" local="yes">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tools/build_matrix.c</includedby>
    <includedby refid="easy__font__maker_8c" local="yes">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tools/easy_font_maker.c</includedby>
    <includedby refid="trailing__whitespace_8c" local="yes">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tools/trailing_whitespace.c</includedby>
    <incdepgraph>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h</label>
        <link refid="stb_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdarg.h</label>
      </node>
      <node id="4">
        <label>stdio.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="5">
        <label>string.h</label>
      </node>
      <node id="6">
        <label>time.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h</label>
        <link refid="stb_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_main.c</label>
        <link refid="cave__main_8c_source"/>
      </node>
      <node id="3">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_mesher.c</label>
        <link refid="cave__mesher_8c_source"/>
      </node>
      <node id="4">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c</label>
        <link refid="cave__parse_8c_source"/>
      </node>
      <node id="5">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_render.c</label>
        <link refid="cave__render_8c_source"/>
      </node>
      <node id="6">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/caveview.h</label>
        <link refid="caveview_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/image_test.c</label>
        <link refid="image__test_8c_source"/>
      </node>
      <node id="8">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/pg_test/pg_test.c</label>
        <link refid="pg__test_8c_source"/>
      </node>
      <node id="9">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c</label>
        <link refid="sdf__test_8c_source"/>
      </node>
      <node id="10">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/stb.c</label>
        <link refid="stb_8c_source"/>
      </node>
      <node id="11">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/stb_cpp.cpp</label>
        <link refid="stb__cpp_8cpp_source"/>
      </node>
      <node id="12">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/test_vorbis.c</label>
        <link refid="test__vorbis_8c_source"/>
      </node>
      <node id="13">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tools/build_matrix.c</label>
        <link refid="build__matrix_8c_source"/>
      </node>
      <node id="14">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tools/easy_font_maker.c</label>
        <link refid="easy__font__maker_8c_source"/>
      </node>
      <node id="15">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tools/trailing_whitespace.c</label>
        <link refid="trailing__whitespace_8c_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="unionstb__uintptr" prot="public">stb_uintptr</innerclass>
    <innerclass refid="structstb__search" prot="public">stb_search</innerclass>
    <innerclass refid="structstb____arr" prot="public">stb__arr</innerclass>
    <innerclass refid="structstb__dirtree2" prot="public">stb_dirtree2</innerclass>
    <innerclass refid="structstb__dupe" prot="public">stb_dupe</innerclass>
    <innerclass refid="structstbfile" prot="public">stbfile</innerclass>
    <innerclass refid="structstb__arith" prot="public">stb_arith</innerclass>
    <innerclass refid="structstb__arith__symstate__item" prot="public">stb_arith_symstate_item</innerclass>
    <innerclass refid="structstb__arith__symstate" prot="public">stb_arith_symstate</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="stb_8h_1a827aa8709bac9bc99fa6f3cfd20546b6" prot="public" static="no">
        <name>STB_VERSION</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="211" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a73dee39068eb479d138cc3f99e1b0a27" prot="public" static="no">
        <name>stb_min</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>((a) &lt; (b) ? (a) : (b))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="288" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="288" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a254a62dfa60c086a020a0fe83d4400e5" prot="public" static="no">
        <name>stb_max</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>((a) &gt; (b) ? (a) : (b))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="289" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1abb702d8b501669a23aa0ab3b281b9384" prot="public" static="no">
        <name>min</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>stb_min(x,y)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="293" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="293" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1ac39d9cef6a5e030ba8d9e11121054268" prot="public" static="no">
        <name>max</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>stb_max(x,y)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="294" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="294" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1ae71449b1cc6e6250b91f539153a7a0d3" prot="public" static="no">
        <name>M_PI</name>
        <initializer>3.14159265358979323846f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="298" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="298" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1aa8cecfc5c5c054d2875c03e77b7be15d" prot="public" static="no">
        <name>TRUE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="302" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="302" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1aa93f0eb578d23995850d61f7d61c55c1" prot="public" static="no">
        <name>FALSE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="303" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="303" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a43b07eb9cc2e64f304184e1161f133d2" prot="public" static="no">
        <name>deg2rad</name>
        <param><defname>a</defname></param>
        <initializer>((a)*(M_PI/180))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="307" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="307" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1aaf48fb864c86581a7e7f6ca3e1ecdab1" prot="public" static="no">
        <name>rad2deg</name>
        <param><defname>a</defname></param>
        <initializer>((a)*(180/M_PI))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="310" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="310" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1af58906fd48ad60ad23c81ebef0f515f9" prot="public" static="no">
        <name>swap</name>
        <param><defname>TYPE</defname></param>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>               do { TYPE stb__t; stb__t = (a); (a) = (b); (b) = stb__t; } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="315" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="315" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a6bd24a4eaa7409e9d07401c47ae8998f" prot="public" static="no">
        <name>STB_TRUE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="343" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="343" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a2ee9f0229ea1228ea8342384643025a1" prot="public" static="no">
        <name>STB_FALSE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="344" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="344" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a1fea5d6378237d416aef74b7b4c51b27" prot="public" static="no">
        <name>STB_IMM_UINT64</name>
        <param><defname>literalui64</defname></param>
        <initializer>(literalui64##ULL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="374" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a34cd116ccb5d8850b656494ed94fdef5" prot="public" static="no">
        <name>STB_IMM_INT64</name>
        <param><defname>literali64</defname></param>
        <initializer>(literali64##LL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="375" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="375" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a40db4e8d14536af27d20fd5a702a126d" prot="public" static="no">
        <name>STB_EXTERN</name>
        <initializer>extern</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="409" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="409" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a6a50ee28e0858e26878b029325a91ad6" prot="public" static="no">
        <name>stb_p_strdup</name>
        <initializer>strdup</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="483" column="10" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="483" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a38846fd22be81f86a6887814af3a9b86" prot="public" static="no">
        <name>stb_p_stricmp</name>
        <initializer>stricmp</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="484" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="484" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a5edfaabec8eadd94fe5f77c6644345c6" prot="public" static="no">
        <name>stb_p_strnicmp</name>
        <initializer>strnicmp</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="485" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="485" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a1c8c7aee580f8ada8fd803d7a38abd0f" prot="public" static="no">
        <name>stb__check</name>
        <param><defname>p</defname></param>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="531" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="531" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1ad4abb131fe3c2c704c5b11be92c1b085" prot="public" static="no">
        <name>stb__fopen</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>stb_p_fopen(x,y)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="994" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="994" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a028f04d94063ec2bce1c8870cee22203" prot="public" static="no">
        <name>stb__windows</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>y</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="995" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="995" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1aa95aea0f2323bccacbcc52ca2edad92a" prot="public" static="no">
        <name>stb_arrcount</name>
        <param><defname>x</defname></param>
        <initializer>(sizeof(x)/sizeof((x)[0]))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1133" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="1133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a30333a03f32ccf06ba8a1cf129c9b6d1" prot="public" static="no">
        <name>STB__DEBUG</name>
        <param><defname>x</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1299" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="1299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1aad5c15b19b7ece6afc98377d92202756" prot="public" static="no">
        <name>stb_temp</name>
        <param><defname>block</defname></param>
        <param><defname>sz</defname></param>
        <initializer>stb__temp(block, sizeof(block), (sz))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1307" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="1307" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a04294576726bb19173a0633324e0b17c" prot="public" static="no">
        <name>stb_lerp</name>
        <param><defname>t</defname></param>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>( (a) + (t) * (float) ((b)-(a)) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1336" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="1336" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a57ed890b61e8730ec5334fafc694af9a" prot="public" static="no">
        <name>stb_unlerp</name>
        <param><defname>t</defname></param>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>( ((t) - (a)) / (float) ((b) - (a)) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1337" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="1337" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1aa2da260fd60eea58549bb266f54a4d85" prot="public" static="no">
        <name>stb_clamp</name>
        <param><defname>x</defname></param>
        <param><defname>xmin</defname></param>
        <param><defname>xmax</defname></param>
        <initializer>((x) &lt; (xmin) ? (xmin) : (x) &gt; (xmax) ? (xmax) : (x))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1339" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="1339" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1ab2a4b1beb0e146a2cd0fed985d185909" prot="public" static="no">
        <name>stb_linear_remap</name>
        <param><defname>t</defname></param>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <param><defname>c</defname></param>
        <param><defname>d</defname></param>
        <initializer>stb_lerp(stb_unlerp(t,a,b),c,d)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1482" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="1482" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a2f922cf7d60eda7ee0bb0c83b04019dc" prot="public" static="no">
        <name>stb_big32</name>
        <param><defname>c</defname></param>
        <initializer>(((c)[0]&lt;&lt;24) + (c)[1]*65536 + (c)[2]*256 + (c)[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1490" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="1490" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a8a1a9acf60670d5cbdfd91964b0e3542" prot="public" static="no">
        <name>stb_little32</name>
        <param><defname>c</defname></param>
        <initializer>(((c)[3]&lt;&lt;24) + (c)[2]*65536 + (c)[1]*256 + (c)[0])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1491" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="1491" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a6d0f455572e20e245d5c7f67e32268e3" prot="public" static="no">
        <name>stb_big16</name>
        <param><defname>c</defname></param>
        <initializer>((c)[0]*256 + (c)[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1492" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="1492" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a068968872edc069c2f88269e2fdabcd2" prot="public" static="no">
        <name>stb_little16</name>
        <param><defname>c</defname></param>
        <initializer>((c)[1]*256 + (c)[0])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1493" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="1493" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1ad276b3dabcb56701955e90ce39ec6662" prot="public" static="no">
        <name>stb_stricmp</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>strcasecmp(a,b)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1620" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="1620" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a6be15f572c1b7a46ee73210abe1bf159" prot="public" static="no">
        <name>stb_strnicmp</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <param><defname>n</defname></param>
        <initializer>strncasecmp(a,b,n)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1621" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="1621" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a82eaf74bf20e5685994988145af14552" prot="public" static="no">
        <name>stb_prefixi</name>
        <param><defname>s</defname></param>
        <param><defname>t</defname></param>
        <initializer>(0==stb_strnicmp((s),(t),strlen(t)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1868" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="1868" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a49ef93d37d142c4cad1dd68570a59ada" prot="public" static="no">
        <name>STB__PARAMS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3134" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a26cb9f1c87bb48979231d4368c0fb068" prot="public" static="no">
        <name>STB__ARGS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3135" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a3b94a4457d0c9045558ee0f633648583" prot="public" static="no">
        <name>stb_arr_empty</name>
        <param><defname>a</defname></param>
        <initializer>(  stb_arr_len(a) == 0 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3150" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a605439b54e7adf3812b6ef308298edeb" prot="public" static="no">
        <name>stb_arr_add</name>
        <param><defname>a</defname></param>
        <initializer>(  stb_arr_addn((a),1) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3151" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a30a089ec00300b0c18918dd60bbd6854" prot="public" static="no">
        <name>stb_arr_push</name>
        <param><defname>a</defname></param>
        <param><defname>v</defname></param>
        <initializer>( *stb_arr_add(a)=(v)  )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3152" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a00962048fafbba9d532bcd24fa4636bf" prot="public" static="no">
        <name>stb_arr_signature</name>
        <initializer>0x51bada7b</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3161" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a9ef925c7719436d51d0b0ad1ff1beeb8" prot="public" static="no">
        <name>stb_arrhead</name>
        <param><defname>a</defname></param>
        <initializer>/*lint --e(826)*/ (((<ref refid="structstb____arr" kindref="compound">stb__arr</ref> *) (a)) - 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3164" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a0e49a3741ab55a49de18ada228901401" prot="public" static="no">
        <name>stb_arrhead2</name>
        <param><defname>a</defname></param>
        <initializer>/*lint --e(826)*/ (((<ref refid="structstb____arr" kindref="compound">stb__arr</ref> *) (a)) - 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3165" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a2d42814a145a12d89cee97e2655db6c7" prot="public" static="no">
        <name>stb_arr_check</name>
        <param><defname>a</defname></param>
        <initializer>((void) 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3171" column="10" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a2b88e5e16d4b261cf3479c28d35fa525" prot="public" static="no">
        <name>stb_arr_check2</name>
        <param><defname>a</defname></param>
        <initializer>((void) 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3172" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a390307ca0fd1c2ae0c633a16a47d3c85" prot="public" static="no">
        <name>stb_arr_len</name>
        <param><defname>a</defname></param>
        <initializer>(a ? stb_arrhead(a)-&gt;len : 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3178" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a53f42b3a9316429ddd40c7017ccd3645" prot="public" static="no">
        <name>stb_arr_len2</name>
        <param><defname>a</defname></param>
        <initializer>((<ref refid="structstb____arr" kindref="compound">stb__arr</ref> *) (a) ? stb_arrhead2(a)-&gt;len : 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3179" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a37426b8189b5af80a4ad70d3ca9cbb2e" prot="public" static="no">
        <name>stb_arr_lastn</name>
        <param><defname>a</defname></param>
        <initializer>(stb_arr_len(a)-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3180" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1ae960234a0e490c04854b72a05625d9f1" prot="public" static="no">
        <name>stb_arr_valid</name>
        <param><defname>a</defname></param>
        <param><defname>i</defname></param>
        <initializer>(a ? (int) (i) &lt; stb_arrhead(a)-&gt;len : 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3183" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1af1c2d533242553f9f8578779be009beb" prot="public" static="no">
        <name>stb_arr_setlen</name>
        <param><defname>a</defname></param>
        <param><defname>n</defname></param>
        <initializer>            (stb__arr_setlen((void **) &amp;(a), sizeof(a[0]), (n)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3187" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1adffba89a66397f24b34078453dae4daa" prot="public" static="no">
        <name>stb_arr_makevalid</name>
        <param><defname>a</defname></param>
        <param><defname>n</defname></param>
        <initializer>            (stb_arr_len(a) &lt; (n)+1 ? stb_arr_setlen(a,(n)+1),(a) : (a))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3192" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1ae484ed52cb6f0dbbd1a7281f6e8935e9" prot="public" static="no">
        <name>stb_arr_pop</name>
        <param><defname>a</defname></param>
        <initializer>((stb_arr_check(a), (a))[--stb_arrhead(a)-&gt;len])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3196" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a8abdbd95c556fcad901163ccd93a40f9" prot="public" static="no">
        <name>stb_arr_last</name>
        <param><defname>a</defname></param>
        <initializer>((stb_arr_check(a), (a))[stb_arr_len(a)-1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3199" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1ab9c365afef02fb8c2535ceb782c0afe5" prot="public" static="no">
        <name>stb_arr_end</name>
        <param><defname>a</defname></param>
        <param><defname>i</defname></param>
        <initializer>((i) &gt;= &amp;(a)[stb_arr_len(a)])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3202" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a7635e7366657ec5e3b80a965adeaf491" prot="public" static="no">
        <name>stb_arr__grow</name>
        <param><defname>a</defname></param>
        <param><defname>n</defname></param>
        <initializer>(stb_arr_check(a), stb_arrhead(a)-&gt;len += (n))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3205" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1af99c6935eda63afab734981455d8664c" prot="public" static="no">
        <name>stb_arr__addn</name>
        <param><defname>a</defname></param>
        <param><defname>n</defname></param>
        <initializer>                               /*lint --e(826)*/ \
                               ((stb_arr_len(a)+(n) &gt; stb_arrcurmax(a))      \
                                 ? (stb__arr_addlen((void **) &amp;(a),sizeof(*a),(n)),0) \
                                 : ((stb_arr__grow(a,n), 0)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3208" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1ad7fd36da0f24f1873904721069fc13c9" prot="public" static="no">
        <name>stb_arr_addn</name>
        <param><defname>a</defname></param>
        <param><defname>n</defname></param>
        <initializer>(stb_arr__addn((a),n),(a)+stb_arr_len(a)-(n))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3215" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1af20820a19de82c3f0ef0994f0c3fba2b" prot="public" static="no">
        <name>stb_arr_insertn</name>
        <param><defname>a</defname></param>
        <param><defname>i</defname></param>
        <param><defname>n</defname></param>
        <initializer>(stb__arr_insertn((void **) &amp;(a), sizeof(*a), (i), (n)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3218" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a894b417b487764fc74c3e39b7ce7beab" prot="public" static="no">
        <name>stb_arr_insert</name>
        <param><defname>a</defname></param>
        <param><defname>i</defname></param>
        <param><defname>v</defname></param>
        <initializer>(stb__arr_insertn((void **) &amp;(a), sizeof(*a), (i), (1)), ((a)[i] = v))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3221" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a153c043f9c70da502c598c4ea5d2469f" prot="public" static="no">
        <name>stb_arr_deleten</name>
        <param><defname>a</defname></param>
        <param><defname>i</defname></param>
        <param><defname>n</defname></param>
        <initializer>(stb__arr_deleten((void **) &amp;(a), sizeof(*a), (i), (n)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3224" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1adef3a6e9c1e35c5ff06b2a367a067d4b" prot="public" static="no">
        <name>stb_arr_delete</name>
        <param><defname>a</defname></param>
        <param><defname>i</defname></param>
        <initializer>stb_arr_deleten(a,i,1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3227" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1ab2c52f0c2081142bc0da345170e0aa74" prot="public" static="no">
        <name>stb_arr_fastdelete</name>
        <param><defname>a</defname></param>
        <param><defname>i</defname></param>
        <initializer>   (stb_swap(&amp;a[i], &amp;a[stb_arrhead(a)-&gt;len-1], sizeof(*a)), stb_arr_pop(a))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3230" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a78c82b137e8b5db0bbddf415832572e2" prot="public" static="no">
        <name>stb_arrcurmax</name>
        <param><defname>a</defname></param>
        <initializer>(a ? stb_arrhead(a)-&gt;limit : 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3237" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a2079d16b977199fa83afda717ef21440" prot="public" static="no">
        <name>stb_arrcurmax2</name>
        <param><defname>a</defname></param>
        <initializer>(a ? stb_arrhead2(a)-&gt;limit : 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3238" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1aa5d8996e114de5512666018fe7180581" prot="public" static="no">
        <name>stb_arr_setsize</name>
        <param><defname>a</defname></param>
        <param><defname>n</defname></param>
        <initializer>(stb_arr_check(a), stb__arr_setsize((void **) &amp;(a),sizeof((a)[0]),n))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3241" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a4c68333020cea39508360142ccc924e5" prot="public" static="no">
        <name>stb_arr_atleast</name>
        <param><defname>a</defname></param>
        <param><defname>n</defname></param>
        <initializer>                                 (stb_arr_len(a)+(n) &gt; stb_arrcurmax(a)      \
                                 ? stb_arr_setsize((a), (n)) : 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3244" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a3b9b6d2a15657a2b25f98952ade28af3" prot="public" static="no">
        <name>stb_arr_copy</name>
        <param><defname>a</defname></param>
        <initializer>stb__arr_copy(a, sizeof((a)[0]))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3248" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a2307f23119d1b48fca143c461b019d5d" prot="public" static="no">
        <name>stb_arr_storage</name>
        <param><defname>a</defname></param>
        <initializer>(stb_arr_len(a) * sizeof((a)[0]))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3251" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1aeb230ac0ab99434f6d7f0e3e43c00120" prot="public" static="no">
        <name>stb_arr_for</name>
        <param><defname>v</defname></param>
        <param><defname>arr</defname></param>
        <initializer>for((v)=(arr); (v) &lt; (arr)+stb_arr_len(arr); ++(v))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3253" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a2b27c08a6a560f790ee93a8c95b869f0" prot="public" static="no">
        <name>stb_arr_free</name>
        <param><defname>p</defname></param>
        <initializer>stb_arr_free_((void **) &amp;(p))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3265" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a609bb21bfa4212d2143044034ac6b5c0" prot="public" static="no">
        <name>stb__arr_copy</name>
        <initializer>stb__arr_copy_</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3266" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1abb14836640d90a08b003bcb262f874ae" prot="public" static="no">
        <name>stb__arr_setsize</name>
        <initializer>stb__arr_setsize_</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3269" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a0afd75dae29031f410c3bc33e0c5be90" prot="public" static="no">
        <name>stb__arr_setlen</name>
        <initializer>stb__arr_setlen_</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3270" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1aebb6bbdc4bee4c9bdca64a6f0997e2cd" prot="public" static="no">
        <name>stb__arr_addlen</name>
        <initializer>stb__arr_addlen_</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3271" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a4c09be768d2187777cba1005ca4d60cc" prot="public" static="no">
        <name>stb__arr_deleten</name>
        <initializer>stb__arr_deleten_</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3272" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a1b3d03d312795840609125aa353b34dc" prot="public" static="no">
        <name>stb__arr_insertn</name>
        <initializer>stb__arr_insertn_</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3273" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3273" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a780d826155368860102edc9dc8764656" prot="public" static="no">
        <name>stb_rehash</name>
        <param><defname>x</defname></param>
        <initializer>((x) + ((x) &gt;&gt; 6) + ((x) &gt;&gt; 19))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3457" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3457" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a7b57161df51dbc78e7a2115bad5c092f" prot="public" static="no">
        <name>STB_</name>
        <param><defname>prefix</defname></param>
        <param><defname>name</defname></param>
        <initializer>stb__##prefix##name</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3896" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3896" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1aa79b16a7ddcc9452257e82bd0150121a" prot="public" static="no">
        <name>STB__</name>
        <param><defname>prefix</defname></param>
        <param><defname>name</defname></param>
        <initializer>prefix##name</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3897" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3897" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1aa489500f7d30ebe37a2f942bd24cfc51" prot="public" static="no">
        <name>STB__use</name>
        <param><defname>x</defname></param>
        <initializer>x</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3898" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3898" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a73846a3315c43c0bd0a1422fdfc8f072" prot="public" static="no">
        <name>STB__skip</name>
        <param><defname>x</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3899" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3899" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1ad867f51bd643b4a3f99a71b424155cd9" prot="public" static="no">
        <name>stb_declare_hash</name>
        <param><defname>PREFIX</defname></param>
        <param><defname>TYPE</defname></param>
        <param><defname>N</defname></param>
        <param><defname>KEY</defname></param>
        <param><defname>VALUE</defname></param>
        <initializer>   typedef struct stb__st_##TYPE TYPE;\
   PREFIX int STB__(N, init)(TYPE *h, int count);\
   PREFIX int STB__(N, memory_usage)(TYPE *h);\
   PREFIX TYPE * STB__(N, create)(void);\
   PREFIX TYPE * STB__(N, copy)(TYPE *h);\
   PREFIX void STB__(N, destroy)(TYPE *h);\
   PREFIX int STB__(N,get_flag)(TYPE *a, KEY k, VALUE *v);\
   PREFIX VALUE STB__(N,get)(TYPE *a, KEY k);\
   PREFIX int STB__(N, set)(TYPE *a, KEY k, VALUE v);\
   PREFIX int STB__(N, add)(TYPE *a, KEY k, VALUE v);\
   PREFIX int STB__(N, update)(TYPE*a,KEY k,VALUE v);\
   PREFIX int STB__(N, remove)(TYPE *a, KEY k, VALUE *v);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3901" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3901" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1ac41837b3a5a9c10bedfa256aa855ef2a" prot="public" static="no">
        <name>STB_nocopy</name>
        <param><defname>x</defname></param>
        <initializer>(x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3915" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3915" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a4f8763af53548a8ad8eeb42021c7cc04" prot="public" static="no">
        <name>STB_nodelete</name>
        <param><defname>x</defname></param>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3916" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3916" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1ac5b2fe39e3883c95f3fb7b02ec1c83d2" prot="public" static="no">
        <name>STB_nofields</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3917" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3917" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a529387e06d99c36386b3b5af2c5cca72" prot="public" static="no">
        <name>STB_nonullvalue</name>
        <param><defname>x</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3918" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3918" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a84be4f9a4d96829c9ac3c90484a8d6fb" prot="public" static="no">
        <name>STB_nullvalue</name>
        <param><defname>x</defname></param>
        <initializer>x</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3919" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3919" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a4f0e5f9f469ee9bf3edb04a64b27ccb1" prot="public" static="no">
        <name>STB_safecompare</name>
        <param><defname>x</defname></param>
        <initializer>x</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3920" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3920" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1ab1bf01bfeff89d9b33e516729a1592b3" prot="public" static="no">
        <name>STB_nosafe</name>
        <param><defname>x</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3921" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3921" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1aab447f7c91d861d6dc03d223f133a555" prot="public" static="no">
        <name>STB_noprefix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3922" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3922" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1ac98d2f826ec061803e7419a2d14390b6" prot="public" static="no">
        <name>STB__nogcc</name>
        <param><defname>x</defname></param>
        <initializer>x</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3927" column="10" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3927" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1adbf55301ffb4bc6ac97a698ece0076c0" prot="public" static="no">
        <name>stb_define_hash_base</name>
        <param><defname>PREFIX</defname></param>
        <param><defname>TYPE</defname></param>
        <param><defname>FIELDS</defname></param>
        <param><defname>N</defname></param>
        <param><defname>NC</defname></param>
        <param><defname>LOAD_FACTOR</defname></param>
        <param><defname>KEY</defname></param>
        <param><defname>EMPTY</defname></param>
        <param><defname>DEL</defname></param>
        <param><defname>COPY</defname></param>
        <param><defname>DISPOSE</defname></param>
        <param><defname>SAFE</defname></param>
        <param><defname>VCOMPARE</defname></param>
        <param><defname>CCOMPARE</defname></param>
        <param><defname>HASH</defname></param>
        <param><defname>VALUE</defname></param>
        <param><defname>HASVNULL</defname></param>
        <param><defname>VNULL</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3933" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="3930" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a182d5042061b1a5f022eaf7739c92cb5" prot="public" static="no">
        <name>STB_equal</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>((a) == (b))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="4178" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="4178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a832ddbc2780ab4e8998be5814c271bda" prot="public" static="no">
        <name>stb_define_hash</name>
        <param><defname>TYPE</defname></param>
        <param><defname>N</defname></param>
        <param><defname>KEY</defname></param>
        <param><defname>EMPTY</defname></param>
        <param><defname>DEL</defname></param>
        <param><defname>HASH</defname></param>
        <param><defname>VALUE</defname></param>
        <initializer>   stb_define_hash_base(STB_noprefix, TYPE,STB_nofields,N,NC,0.85f,           \
              KEY,EMPTY,DEL,STB_nocopy,STB_nodelete,STB_nosafe,               \
              STB_equal,STB_equal,HASH,                                       \
              VALUE,STB_nonullvalue,0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="4180" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="4180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1aad2fcab34c40c00d3ec50d2553953220" prot="public" static="no">
        <name>stb_define_hash_vnull</name>
        <param><defname>TYPE</defname></param>
        <param><defname>N</defname></param>
        <param><defname>KEY</defname></param>
        <param><defname>EMPTY</defname></param>
        <param><defname>DEL</defname></param>
        <param><defname>HASH</defname></param>
        <param><defname>VALUE</defname></param>
        <param><defname>VNULL</defname></param>
        <initializer>   stb_define_hash_base(STB_noprefix, TYPE,STB_nofields,N,NC,0.85f,           \
              KEY,EMPTY,DEL,STB_nocopy,STB_nodelete,STB_nosafe,               \
              STB_equal,STB_equal,HASH,                                       \
              VALUE,STB_nullvalue,VNULL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="4186" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="4186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a084a4fe275c41b25ec66272b26256113" prot="public" static="no">
        <name>stb_sdict_for</name>
        <param><defname>d</defname></param>
        <param><defname>i</defname></param>
        <param><defname>q</defname></param>
        <param><defname>z</defname></param>
        <initializer>   for(i=0; i &lt; stb_sdict_internal_limit(d) ? (q=stb_sdict_internal_key(d,i),z=stb_sdict_internal_value(d,i),1) : 0; ++i)    \
      if (q==NULL||q==(void *) 1);else</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="4370" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="4370" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a18077cf688181566a3f1ca53ed4f60dd" prot="public" static="no">
        <name>stb__bst_parent</name>
        <param><defname>x</defname></param>
        <initializer>x</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="4467" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="4467" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a00492112a1e03130b97340f59b593bda" prot="public" static="no">
        <name>stb__bst_noparent</name>
        <param><defname>x</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="4468" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="4468" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1adfdb4022c266a10e76fe7bae60c20f80" prot="public" static="no">
        <name>stb_bst_fields</name>
        <param><defname>N</defname></param>
        <initializer>    *STB_(N,left), *STB_(N,right);                          \
    unsigned char STB_(N,level)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="4470" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="4470" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a2f755b6d9efa1a528966265a70dbbe5a" prot="public" static="no">
        <name>stb_bst_fields_parent</name>
        <param><defname>N</defname></param>
        <initializer>    *STB_(N,left), *STB_(N,right),  *STB_(N,parent);        \
    unsigned char STB_(N,level)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="4474" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="4474" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1abe3e8de091e4f2e7b9bf346b172ad7bb" prot="public" static="no">
        <name>STB__level</name>
        <param><defname>N</defname></param>
        <param><defname>x</defname></param>
        <initializer>((x) ? (x)-&gt;STB_(N,level) : 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="4478" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="4478" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1afa96ef5a33cd3f3e74cca3696bd4ae54" prot="public" static="no">
        <name>stb_bst_base</name>
        <param><defname>TYPE</defname></param>
        <param><defname>N</defname></param>
        <param><defname>TREE</defname></param>
        <param><defname>M</defname></param>
        <param><defname>compare</defname></param>
        <param><defname>PAR</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="4480" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="4480" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a481fc5dcaef237825caf7186980f3f0d" prot="public" static="no">
        <name>stb_bst_find</name>
        <param><defname>N</defname></param>
        <param><defname>tree</defname></param>
        <param><defname>fcompare</defname></param>
        <initializer>{                                                                            \
   int c;                                                                    \
   while (tree != NULL) {                                                    \
      fcompare                                                               \
      if (c == 0) return tree;                                               \
      if (c &lt; 0)  tree = tree-&gt;STB_(N,left);                                 \
      else        tree = tree-&gt;STB_(N,right);                                \
   }                                                                         \
   return NULL;                                                              \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="4702" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="4702" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1aa61899bb8efff08653ec6b389414d1f2" prot="public" static="no">
        <name>stb_bst_raw</name>
        <param><defname>TYPE</defname></param>
        <param><defname>N</defname></param>
        <param><defname>TREE</defname></param>
        <param><defname>M</defname></param>
        <param><defname>vfield</defname></param>
        <param><defname>VTYPE</defname></param>
        <param><defname>compare</defname></param>
        <param><defname>PAR</defname></param>
        <initializer>   stb_bst_base(TYPE,N,TREE,M,                                               \
         VTYPE a = p-&gt;vfield; VTYPE b = q-&gt;vfield; return (compare);, PAR )  \
                                                                             \
TYPE *STB__(N,find)(TYPE *tree, VTYPE a)                                     \
   stb_bst_find(N,tree,VTYPE b = tree-&gt;vfield; c = (compare);)               \
TYPE *STB__(M,Find)(TREE *tree, VTYPE a)                                     \
{ return STB__(N,find)(tree-&gt;root, a); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="4714" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="4714" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a55cb0d18e69a87b9c9ab2f28bf2676a3" prot="public" static="no">
        <name>stb_bst</name>
        <param><defname>TYPE</defname></param>
        <param><defname>N</defname></param>
        <param><defname>TREE</defname></param>
        <param><defname>M</defname></param>
        <param><defname>vfield</defname></param>
        <param><defname>VTYPE</defname></param>
        <param><defname>compare</defname></param>
        <initializer>   stb_bst_raw(TYPE,N,TREE,M,vfield,VTYPE,compare,stb__bst_noparent)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="4723" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="4723" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a670752ab82d755e0b0e0bc4b6bd8b7ce" prot="public" static="no">
        <name>stb_bst_parent</name>
        <param><defname>TYPE</defname></param>
        <param><defname>N</defname></param>
        <param><defname>TREE</defname></param>
        <param><defname>M</defname></param>
        <param><defname>vfield</defname></param>
        <param><defname>VTYPE</defname></param>
        <param><defname>compare</defname></param>
        <initializer>   stb_bst_raw(TYPE,N,TREE,M,vfield,VTYPE,compare,stb__bst_parent)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="4725" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="4725" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1ac15858d4cde4acb7c6a65259919a22b5" prot="public" static="no">
        <name>stb_rename</name>
        <initializer>rename</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="5148" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="5148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a92bc26a3af9ffcf8c7863bac645f80b9" prot="public" static="no">
        <name>stb_filec</name>
        <initializer>(char *) stb_file</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="5156" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="5156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a6b1f70b60a84915b152ce3e5653eabcf" prot="public" static="no">
        <name>stb_fileu</name>
        <initializer>(unsigned char *) stb_file</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="5157" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="5157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1ab482805263106add079299b7ef9891a7" prot="public" static="no">
        <name>STB_ADLER32_SEED</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="6401" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="6401" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a565b7af7f174a7ed250361d09259ea44" prot="public" static="no">
        <name>STB_CRC32_SEED</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="6402" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="6402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a069f7cd63f8326118efd6c3e89456abb" prot="public" static="no">
        <name>stb_ps_fastlist_valid</name>
        <param><defname>x</defname></param>
        <initializer>((stb_uinta) (x) &gt; 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="7767" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="7767" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a8caf2826253fc339046660a0fc0de9bb" prot="public" static="no">
        <name>stb_rand_define</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>                                                                     \
   unsigned int  x(void)                                             \
   {                                                                 \
      static unsigned int  stb__rand = y;                            \
      stb__rand = stb__rand * 2147001325 + 715136305; /* BCPL */     \
      return 0x31415926 ^ ((stb__rand &gt;&gt; 16) + (stb__rand &lt;&lt; 16));   \
   }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8367" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="8367" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a9d1a8f6001c9d6c813697cacdef819eb" prot="public" static="no">
        <name>stb_declare_sort</name>
        <param><defname>FUNCNAME</defname></param>
        <param><defname>TYPE</defname></param>
        <initializer>                       void FUNCNAME(TYPE *p, int n)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8738" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="8738" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a1d53dfbcd9fa47d8297dd3d000b784ef" prot="public" static="no">
        <name>stb_define_sort</name>
        <param><defname>FUNCNAME</defname></param>
        <param><defname>TYPE</defname></param>
        <param><defname>COMPARE</defname></param>
        <initializer>                       stb__define_sort(       void, FUNCNAME,TYPE,COMPARE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8740" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="8740" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1ab7bf1a70f70bc8884642aa4bd17d1e3c" prot="public" static="no">
        <name>stb_define_sort_static</name>
        <param><defname>FUNCNAME</defname></param>
        <param><defname>TYPE</defname></param>
        <param><defname>COMPARE</defname></param>
        <initializer>                       stb__define_sort(static void, FUNCNAME,TYPE,COMPARE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8742" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="8742" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a06e788299569b49894d482535dd57811" prot="public" static="no">
        <name>stb__define_sort</name>
        <param><defname>MODE</defname></param>
        <param><defname>FUNCNAME</defname></param>
        <param><defname>TYPE</defname></param>
        <param><defname>COMPARE</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8745" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="8745" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a98dba707c3a61465981e775bac29d475" prot="public" static="no">
        <name>stb_bitset_clearall</name>
        <param><defname>arr</defname></param>
        <param><defname>len</defname></param>
        <initializer>(memset(arr,   0, 4 * (len)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8857" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="8857" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1ac5698a7d7c114f860729f1a9271c838b" prot="public" static="no">
        <name>stb_bitset_setall</name>
        <param><defname>arr</defname></param>
        <param><defname>len</defname></param>
        <initializer>(memset(arr, 255, 4 * (len)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8858" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="8858" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1af499e82805c999838d1e0691e0dd43f0" prot="public" static="no">
        <name>stb_bitset_setbit</name>
        <param><defname>arr</defname></param>
        <param><defname>n</defname></param>
        <initializer>((arr)[(n) &gt;&gt; 5] |=  (1 &lt;&lt; (n &amp; 31)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8860" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="8860" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a7e8bf57983b53a761f6ded3e851b34b0" prot="public" static="no">
        <name>stb_bitset_clearbit</name>
        <param><defname>arr</defname></param>
        <param><defname>n</defname></param>
        <initializer>((arr)[(n) &gt;&gt; 5] &amp;= ~(1 &lt;&lt; (n &amp; 31)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8861" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="8861" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a312dc34cac8072b97bb112d1827d28a2" prot="public" static="no">
        <name>stb_bitset_testbit</name>
        <param><defname>arr</defname></param>
        <param><defname>n</defname></param>
        <initializer>((arr)[(n) &gt;&gt; 5] &amp;   (1 &lt;&lt; (n &amp; 31)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8862" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="8862" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a1b36a0c1e3ff305a37836ecd8e0182ed" prot="public" static="no">
        <name>STB_SEMAPHORE_NULL</name>
        <initializer>NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11463" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="11463" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a4f1d52d4be1c14a41bac180421d986c3" prot="public" static="no">
        <name>STB_THREAD_NULL</name>
        <initializer>NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11464" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="11464" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1ae2b1ee290ac902c59912800b6206a2aa" prot="public" static="no">
        <name>STB_MUTEX_NULL</name>
        <initializer>NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11465" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="11465" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a195816dd911b6b93a470fbd799d9cfe3" prot="public" static="no">
        <name>STB_SYNC_NULL</name>
        <initializer>NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11466" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="11466" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a888c7a885c96196182a47eea280af76a" prot="public" static="no">
        <name>STB_THREADQ_DYNAMIC</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11525" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="11525" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1ad014e704ab03d2f45ca2242d4f8da92e" prot="public" static="no">
        <name>STB_F</name>
        <param><defname>x</defname></param>
        <initializer>((float) STB_H(x))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="12899" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="12899" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a93b26a356a47e74e1e711475561f8f9c" prot="public" static="no">
        <name>STB_UI</name>
        <param><defname>x</defname></param>
        <initializer>((unsigned int) STB_I(x))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="12900" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="12900" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1abcf2e9207456ed236a5831451111ea6a" prot="public" static="no">
        <name>STB_D</name>
        <param><defname>x</defname></param>
        <initializer>((double) (x))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="12903" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="12903" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1aed6464adefbf904c79887c0afdb4c0e6" prot="public" static="no">
        <name>STB_I</name>
        <param><defname>x</defname></param>
        <initializer>((int) (x))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="12904" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="12904" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb_8h_1a8e3061f083af781665d680d3730fe26a" prot="public" static="no">
        <name>STB_S</name>
        <param><defname>x</defname></param>
        <initializer>((char *) (x))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="12905" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="12905" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="stb_8h_1ac4e1743691ab99bc1f2001cb4ee91bfc" prot="public" static="no" strong="no">
        <type></type>
        <name>stb_splitpath_flag</name>
        <enumvalue id="stb_8h_1ac4e1743691ab99bc1f2001cb4ee91bfcad2e13bbbe799cb6001643be1bba611e2" prot="public">
          <name>STB_PATH</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stb_8h_1ac4e1743691ab99bc1f2001cb4ee91bfcaea0ac81d7694e6d84d7239e57262b9ed" prot="public">
          <name>STB_FILE</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stb_8h_1ac4e1743691ab99bc1f2001cb4ee91bfca71fa8a551f5d8cb739217df0f5da1454" prot="public">
          <name>STB_EXT</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stb_8h_1ac4e1743691ab99bc1f2001cb4ee91bfca98bc459219a13a59836a7a83e0b703c2" prot="public">
          <name>STB_PATH_FILE</name>
          <initializer>= STB_PATH + STB_FILE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stb_8h_1ac4e1743691ab99bc1f2001cb4ee91bfca94d0cc57f208e7bed54d086c68f7732f" prot="public">
          <name>STB_FILE_EXT</name>
          <initializer>= STB_FILE + STB_EXT</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stb_8h_1ac4e1743691ab99bc1f2001cb4ee91bfca2b0b9fb676d758a56d2849dcc7de3a89" prot="public">
          <name>STB_EXT_NO_PERIOD</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stb_8h_1ac4e1743691ab99bc1f2001cb4ee91bfcad2e13bbbe799cb6001643be1bba611e2" prot="public">
          <name>STB_PATH</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stb_8h_1ac4e1743691ab99bc1f2001cb4ee91bfcaea0ac81d7694e6d84d7239e57262b9ed" prot="public">
          <name>STB_FILE</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stb_8h_1ac4e1743691ab99bc1f2001cb4ee91bfca71fa8a551f5d8cb739217df0f5da1454" prot="public">
          <name>STB_EXT</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stb_8h_1ac4e1743691ab99bc1f2001cb4ee91bfca98bc459219a13a59836a7a83e0b703c2" prot="public">
          <name>STB_PATH_FILE</name>
          <initializer>= STB_PATH + STB_FILE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stb_8h_1ac4e1743691ab99bc1f2001cb4ee91bfca94d0cc57f208e7bed54d086c68f7732f" prot="public">
          <name>STB_FILE_EXT</name>
          <initializer>= STB_FILE + STB_EXT</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stb_8h_1ac4e1743691ab99bc1f2001cb4ee91bfca2b0b9fb676d758a56d2849dcc7de3a89" prot="public">
          <name>STB_EXT_NO_PERIOD</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1870" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="1871" bodyend="1878"/>
      </memberdef>
      <memberdef kind="enum" id="stb_8h_1a098384b0034af0daa7c9c5c82b563567" prot="public" static="no" strong="no">
        <type></type>
        <name>@111</name>
        <enumvalue id="stb_8h_1a098384b0034af0daa7c9c5c82b563567a24e950b5afa49d5dac392ca3dbac31cf" prot="public">
          <name>stb_keep_no</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stb_8h_1a098384b0034af0daa7c9c5c82b563567a78d897c2442e1e03a94787a224c34650" prot="public">
          <name>stb_keep_yes</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stb_8h_1a098384b0034af0daa7c9c5c82b563567afc277b5591965d4b85ff6a123d68f7bc" prot="public">
          <name>stb_keep_if_different</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="5176" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="5177" bodyend="5181"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="stb_8h_1adde6aaee8457bee49c2a92621fe22b79" prot="public" static="no">
        <type>unsigned char</type>
        <definition>typedef unsigned char uint8</definition>
        <argsstring></argsstring>
        <name>uint8</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="320" column="27" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1a1b956fe1df85f3c132b21edb4e116458" prot="public" static="no">
        <type>signed char</type>
        <definition>typedef signed char int8</definition>
        <argsstring></argsstring>
        <name>int8</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="321" column="28" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="321" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1a05f6b0ae8f6a6e135b0e290c25fe0e4e" prot="public" static="no">
        <type>unsigned short</type>
        <definition>typedef unsigned short uint16</definition>
        <argsstring></argsstring>
        <name>uint16</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="322" column="27" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="322" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1a259fa4834387bd68627ddf37bb3ebdb9" prot="public" static="no">
        <type>signed short</type>
        <definition>typedef signed short int16</definition>
        <argsstring></argsstring>
        <name>int16</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="323" column="28" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="323" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1a1134b580f8da4de94ca6b1de4d37975e" prot="public" static="no">
        <type>unsigned int</type>
        <definition>typedef unsigned int uint32</definition>
        <argsstring></argsstring>
        <name>uint32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="328" column="27" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1a43d43196463bde49cb067f5c20ab8481" prot="public" static="no">
        <type>signed int</type>
        <definition>typedef signed int int32</definition>
        <argsstring></argsstring>
        <name>int32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="329" column="28" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="329" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1a65f85814a8290f9797005d3b28e7e5fc" prot="public" static="no">
        <type>unsigned char</type>
        <definition>typedef unsigned char uchar</definition>
        <argsstring></argsstring>
        <name>uchar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="332" column="27" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="332" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1ab95f123a6c9bcfee6a343170ef8c5f69" prot="public" static="no">
        <type>unsigned short</type>
        <definition>typedef unsigned short ushort</definition>
        <argsstring></argsstring>
        <name>ushort</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="333" column="27" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="333" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1a91ad9478d81a7aaf2593e8d9c3d06a14" prot="public" static="no">
        <type>unsigned int</type>
        <definition>typedef unsigned int uint</definition>
        <argsstring></argsstring>
        <name>uint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="334" column="27" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="334" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1a718b4eb2652c286f4d42dc18a8e71a1a" prot="public" static="no">
        <type>unsigned long</type>
        <definition>typedef unsigned long ulong</definition>
        <argsstring></argsstring>
        <name>ulong</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="335" column="27" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="335" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1a237ffca841b6f8f6fa3bfc1a99910132" prot="public" static="no">
        <type>char</type>
        <definition>typedef char stb__testsize16[sizeof(int16)==2]</definition>
        <argsstring>[sizeof(int16)==2]</argsstring>
        <name>stb__testsize16</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="338" column="17" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="338" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1ae61f771a121290cccbf6cc569fa0c832" prot="public" static="no">
        <type>char</type>
        <definition>typedef char stb__testsize32[sizeof(int32)==4]</definition>
        <argsstring>[sizeof(int32)==4]</argsstring>
        <name>stb__testsize32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="339" column="17" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="339" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1aade163fe29a05e8b6333c814c771101a" prot="public" static="no">
        <type>unsigned char</type>
        <definition>typedef unsigned char stb_uchar</definition>
        <argsstring></argsstring>
        <name>stb_uchar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="349" column="23" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="349" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1a0172fde57b05e892f6806d28dc3ef2ca" prot="public" static="no">
        <type>unsigned char</type>
        <definition>typedef unsigned char stb_uint8</definition>
        <argsstring></argsstring>
        <name>stb_uint8</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="350" column="23" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="350" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1a6fe01ca1e7c8e7b941f14187549609c6" prot="public" static="no">
        <type>unsigned int</type>
        <definition>typedef unsigned int stb_uint</definition>
        <argsstring></argsstring>
        <name>stb_uint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="351" column="23" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="351" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1a419df2120beaf7752de33bdb8ead9bfa" prot="public" static="no">
        <type>unsigned short</type>
        <definition>typedef unsigned short stb_uint16</definition>
        <argsstring></argsstring>
        <name>stb_uint16</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="352" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="352" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1a834fb71bd5fa5925571d035fb49e8f1e" prot="public" static="no">
        <type>short</type>
        <definition>typedef short stb_int16</definition>
        <argsstring></argsstring>
        <name>stb_int16</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="353" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="353" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1a898b8d2b5ea78806ce374494ddf21e01" prot="public" static="no">
        <type>signed char</type>
        <definition>typedef signed char stb_int8</definition>
        <argsstring></argsstring>
        <name>stb_int8</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="354" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="354" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1a822b5769280f7ab8ca54931959cd9bee" prot="public" static="no">
        <type>unsigned int</type>
        <definition>typedef unsigned int stb_uint32</definition>
        <argsstring></argsstring>
        <name>stb_uint32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="359" column="26" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1a5d0c7cb5ed76e04fc013c49d8e429c97" prot="public" static="no">
        <type>int</type>
        <definition>stb_int32</definition>
        <argsstring></argsstring>
        <name>stb_int32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="360" column="26" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="360" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1acd2abdf9aca75e6aab0990e25a47ed99" prot="public" static="no">
        <type>char</type>
        <definition>typedef char stb__testsize2_16[sizeof(stb_uint16)==2 ? 1 :-1]</definition>
        <argsstring>[sizeof(stb_uint16)==2 ? 1 :-1]</argsstring>
        <name>stb__testsize2_16</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="362" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1a81ed92f037980be0c20ef0daaf705a22" prot="public" static="no">
        <type>char</type>
        <definition>typedef char stb__testsize2_32[sizeof(stb_uint32)==4 ? 1 :-1]</definition>
        <argsstring>[sizeof(stb_uint32)==4 ? 1 :-1]</argsstring>
        <name>stb__testsize2_32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="363" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="363" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1a43fa718be9056ebb179cab750d838432" prot="public" static="no">
        <type>unsigned long long</type>
        <definition>typedef unsigned long long stb_uint64</definition>
        <argsstring></argsstring>
        <name>stb_uint64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="372" column="30" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="372" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1a45f84c31bc4a495bd0f4cbdff24e6e1c" prot="public" static="no">
        <type>long long</type>
        <definition>typedef long long stb_int64</definition>
        <argsstring></argsstring>
        <name>stb_int64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="373" column="30" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="373" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1a9fae2db1944f817c18c58b31280f4cef" prot="public" static="no">
        <type>char</type>
        <definition>typedef char stb__testsize2_64[sizeof(stb_uint64)==8 ? 1 :-1]</definition>
        <argsstring>[sizeof(stb_uint64)==8 ? 1 :-1]</argsstring>
        <name>stb__testsize2_64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="377" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="377" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1a39d46287e65a39c4db90c7d0b6d631a6" prot="public" static="no">
        <type>char</type>
        <definition>typedef char stb__testsize2_ptr[sizeof(char *)==4]</definition>
        <argsstring>[sizeof(char *)==4]</argsstring>
        <name>stb__testsize2_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="390" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="390" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1a7de3d3d73a7832cdd245df1bb2f36827" prot="public" static="no">
        <type>stb_uint32</type>
        <definition>typedef stb_uint32 stb_uinta</definition>
        <argsstring></argsstring>
        <name>stb_uinta</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="391" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="391" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1a99055f684e1a41abbd2b87f4103c1a31" prot="public" static="no">
        <type>stb_int32</type>
        <definition>typedef stb_int32 stb_inta</definition>
        <argsstring></argsstring>
        <name>stb_inta</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="392" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1af86110afafa2344b583df94eb847ac35" prot="public" static="no">
        <type>char</type>
        <definition>typedef char stb__testsize2_uinta[sizeof(stb_uinta)==sizeof(char *) ? 1 :-1]</definition>
        <argsstring>[sizeof(stb_uinta)==sizeof(char *) ? 1 :-1]</argsstring>
        <name>stb__testsize2_uinta</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="394" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="394" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1a7c99fdefa058f0a2e561e737e3bb712b" prot="public" static="no">
        <type>unsigned short</type>
        <definition>typedef unsigned short stb__wchar</definition>
        <argsstring></argsstring>
        <name>stb__wchar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="999" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="999" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1a200a18bf455f33e29e23826fb5450ac1" prot="public" static="no">
        <type>struct stb__st_stb_spmatrix</type>
        <definition>typedef struct stb__st_stb_spmatrix stb_spmatrix</definition>
        <argsstring></argsstring>
        <name>stb_spmatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="4295" column="35" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="4295" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1a29f4c8f5e5f55ce08c1543afaf9904f7" prot="public" static="no">
        <type>struct <ref refid="structstb__dirtree2" kindref="compound">stb_dirtree2</ref></type>
        <definition>typedef struct stb_dirtree2 stb_dirtree2</definition>
        <argsstring></argsstring>
        <name>stb_dirtree2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="6292" column="27" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="6292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1ac74c569e409e09c32c10d9a52b6bbafa" prot="public" static="no">
        <type>struct stb_cfg_st</type>
        <definition>typedef struct stb_cfg_st stb_cfg</definition>
        <argsstring></argsstring>
        <name>stb_cfg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="6797" column="25" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="6797" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1ad09c75ae9978a529e42fd5ace8f47f15" prot="public" static="no">
        <type>struct stb_ps</type>
        <definition>typedef struct stb_ps stb_ps</definition>
        <argsstring></argsstring>
        <name>stb_ps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="7741" column="21" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="7741" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1a1b00bc81be5177149b29f988cb73ae58" prot="public" static="no">
        <type>struct <ref refid="structstb__dupe" kindref="compound">stb_dupe</ref></type>
        <definition>typedef struct stb_dupe stb_dupe</definition>
        <argsstring></argsstring>
        <name>stb_dupe</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8534" column="23" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="8534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1aa08ad2e1d21189342c89f055933b14b0" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* stb_compare_func) (void *a, void *b)</definition>
        <argsstring>)(void *a, void *b)</argsstring>
        <name>stb_compare_func</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8536" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="8536" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1a56abc43fcd0e3b24383630a00cc67932" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* stb_hash_func) (void *a, unsigned int seed)</definition>
        <argsstring>)(void *a, unsigned int seed)</argsstring>
        <name>stb_hash_func</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8537" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="8537" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1a6fb5d65cf10851b521a4170c2090f5d3" prot="public" static="no">
        <type>stb_uint32</type>
        <definition>typedef stb_uint32 stb_bitset</definition>
        <argsstring></argsstring>
        <name>stb_bitset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8853" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="8853" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1aff315eaed92791e86f6755d20797561a" prot="public" static="no">
        <type>struct stb_matcher</type>
        <definition>typedef struct stb_matcher stb_matcher</definition>
        <argsstring></argsstring>
        <name>stb_matcher</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="9076" column="26" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="9076" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1a3e8a982d331313779a12aba80af8ee26" prot="public" static="no">
        <type>struct <ref refid="structstbfile" kindref="compound">stbfile</ref></type>
        <definition>typedef struct stbfile stbfile</definition>
        <argsstring></argsstring>
        <name>stbfile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11058" column="9"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1a8c4a202fef37d48385e61d88a75d05a7" prot="public" static="no">
        <type>void *(*</type>
        <definition>typedef void *(* stb_thread_func) (void *)</definition>
        <argsstring>)(void *)</argsstring>
        <name>stb_thread_func</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11454" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="11454" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1ab09431e319bb44cc3519d6ba8f4f8af8" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* stb_thread</definition>
        <argsstring></argsstring>
        <name>stb_thread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11458" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="11458" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1a45beccccdd40a3962bb86a8f2d4e6863" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* stb_semaphore</definition>
        <argsstring></argsstring>
        <name>stb_semaphore</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11459" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="11459" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1ad981809ba5cd2849c5db0e5452a4038a" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* stb_mutex</definition>
        <argsstring></argsstring>
        <name>stb_mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11460" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="11460" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1af4149aca0ddedd93f22c06adf01c58ce" prot="public" static="no">
        <type>struct stb__sync *</type>
        <definition>typedef struct stb__sync* stb_sync</definition>
        <argsstring></argsstring>
        <name>stb_sync</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11461" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="11461" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1ae3858c278d46c298acb8db928f9c96ad" prot="public" static="no">
        <type>struct stb__workqueue</type>
        <definition>typedef struct stb__workqueue stb_workqueue</definition>
        <argsstring></argsstring>
        <name>stb_workqueue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11493" column="29" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="11493" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="stb_8h_1a6ea9fd43a6dd6e5ee3725e53202bc741" prot="public" static="no">
        <type>struct stb__threadqueue</type>
        <definition>typedef struct stb__threadqueue stb_threadqueue</definition>
        <argsstring></argsstring>
        <name>stb_threadqueue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11524" column="31" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="11524" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="stb_8h_1adbacf061b4b6828a04619ef195ee66e4" prot="public" static="no" mutable="no">
        <type>STB_EXTERN int(*)(const void *a, const void *b)</type>
        <definition>STB_EXTERN int(*)(const void *a, const void *b) stb_intcmp(int offset)</definition>
        <argsstring>(int offset)</argsstring>
        <name>stb_intcmp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1625" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="1625" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="stb_8h_1a9b72139fb031bbe08769b9f87ce40ab2" prot="public" static="no" mutable="no">
        <type>STB_EXTERN int(*)(const void *a, const void *b)</type>
        <definition>STB_EXTERN int(*)(const void *a, const void *b) stb_intcmprev(int offset)</definition>
        <argsstring>(int offset)</argsstring>
        <name>stb_intcmprev</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1626" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="1626" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="stb_8h_1a81e3046356ef37ae2901db2c068fd5b9" prot="public" static="no" mutable="no">
        <type>STB_EXTERN int(*)(const void *a, const void *b)</type>
        <definition>STB_EXTERN int(*)(const void *a, const void *b) stb_qsort_strcmp(int offset)</definition>
        <argsstring>(int offset)</argsstring>
        <name>stb_qsort_strcmp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1627" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="1627" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="stb_8h_1a5870c3eb1ab2d377c846f3a18030b12f" prot="public" static="no" mutable="no">
        <type>STB_EXTERN int(*)(const void *a, const void *b)</type>
        <definition>STB_EXTERN int(*)(const void *a, const void *b) stb_qsort_stricmp(int offset)</definition>
        <argsstring>(int offset)</argsstring>
        <name>stb_qsort_stricmp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1628" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="1628" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="stb_8h_1a2591338b191a42a9a8077d9dd8ced934" prot="public" static="no" mutable="no">
        <type>STB_EXTERN int(*)(const void *a, const void *b)</type>
        <definition>STB_EXTERN int(*)(const void *a, const void *b) stb_floatcmp(int offset)</definition>
        <argsstring>(int offset)</argsstring>
        <name>stb_floatcmp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1629" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="1629" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="stb_8h_1a201b5714e68ddee140dbf0419b6cf902" prot="public" static="no" mutable="no">
        <type>STB_EXTERN int(*)(const void *a, const void *b)</type>
        <definition>STB_EXTERN int(*)(const void *a, const void *b) stb_doublecmp(int offset)</definition>
        <argsstring>(int offset)</argsstring>
        <name>stb_doublecmp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1630" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="1630" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="stb_8h_1aabd285aeb25a93076320ce9559b3c772" prot="public" static="no" mutable="no">
        <type>STB_EXTERN int(*)(const void *a, const void *b)</type>
        <definition>STB_EXTERN int(*)(const void *a, const void *b) stb_charcmp(int offset)</definition>
        <argsstring>(int offset)</argsstring>
        <name>stb_charcmp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1631" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="1631" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="stb_8h_1ab6d592a7a63a0f42c3d76fa077143aa9" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int stb_alloc_chunk_size</definition>
        <argsstring></argsstring>
        <name>stb_alloc_chunk_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="2570" column="12" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="2570" declcolumn="12"/>
      </memberdef>
      <memberdef kind="variable" id="stb_8h_1a638f8b846a53af924c2310fc00f9b892" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int stb_alloc_count_free</definition>
        <argsstring></argsstring>
        <name>stb_alloc_count_free</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="2571" column="12" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="2571" declcolumn="12"/>
      </memberdef>
      <memberdef kind="variable" id="stb_8h_1a535c8fd693dbbbb6e83911658c4cdde6" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int stb_alloc_count_alloc</definition>
        <argsstring></argsstring>
        <name>stb_alloc_count_alloc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="2572" column="12" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="2572" declcolumn="12"/>
      </memberdef>
      <memberdef kind="variable" id="stb_8h_1af82f3d42e0058048e829c1299fd6bba9" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int stb_alloc_alignment</definition>
        <argsstring></argsstring>
        <name>stb_alloc_alignment</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="2573" column="12" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="2573" declcolumn="12"/>
      </memberdef>
      <memberdef kind="variable" id="stb_8h_1ae090ec10c3a1d6c08facab7dc83fbfa8" prot="public" static="no" mutable="no">
        <type></type>
        <definition>stb_idict</definition>
        <argsstring></argsstring>
        <name>stb_idict</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="4201" column="2" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="4201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="stb_8h_1a7fdeccd30084b3cb404e36e7a7382f6b" prot="public" static="no" mutable="no">
        <type></type>
        <definition>stb_idict_</definition>
        <argsstring></argsstring>
        <name>stb_idict_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="4201" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="4201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="stb_8h_1ab0c82abe78289d2c66e475b756b4c521" prot="public" static="no" mutable="no">
        <type>stb_int32 void(*</type>
        <definition>stb_int32 void(* free_func) (void *))</definition>
        <argsstring>)(void *))</argsstring>
        <name>free_func</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="4204" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" bodystart="4204" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="stb_8h_1ad4eefeb29741f7c3ca60a85455bf866d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_wrapper_malloc</definition>
        <argsstring>(void *newp, size_t sz, char *file, int line)</argsstring>
        <name>stb_wrapper_malloc</name>
        <param>
          <type>void *</type>
          <declname>newp</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="488" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="488" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a02e8280bdaa86968c2783edffebde4a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_wrapper_free</definition>
        <argsstring>(void *oldp, char *file, int line)</argsstring>
        <name>stb_wrapper_free</name>
        <param>
          <type>void *</type>
          <declname>oldp</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="489" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="489" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a998998b8358fa0eab6bf702e0d2bcfd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_wrapper_realloc</definition>
        <argsstring>(void *oldp, void *newp, size_t sz, char *file, int line)</argsstring>
        <name>stb_wrapper_realloc</name>
        <param>
          <type>void *</type>
          <declname>oldp</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>newp</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="490" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="490" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a23ec150fde529e271e02b7cc1ba14700" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_wrapper_calloc</definition>
        <argsstring>(size_t num, size_t sz, char *file, int line)</argsstring>
        <name>stb_wrapper_calloc</name>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="491" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="491" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ab26e63a04c0d6cfee8137bbdfd3e5599" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_wrapper_listall</definition>
        <argsstring>(void(*func)(void *ptr, size_t sz, char *file, int line))</argsstring>
        <name>stb_wrapper_listall</name>
        <param>
          <type>void(*)(void *ptr, size_t sz, char *file, int line)</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="492" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="492" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a98923e4a98911ebdf534e05b1a4bc12d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_wrapper_dump</definition>
        <argsstring>(char *filename)</argsstring>
        <name>stb_wrapper_dump</name>
        <param>
          <type>char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="493" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="493" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ad02e9c09f3ff5898e0fe6db823e1734f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN size_t</type>
        <definition>STB_EXTERN size_t stb_wrapper_allocsize</definition>
        <argsstring>(void *oldp)</argsstring>
        <name>stb_wrapper_allocsize</name>
        <param>
          <type>void *</type>
          <declname>oldp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="494" column="19" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="494" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ae210f186ace1689737903780b2b89f0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_wrapper_check</definition>
        <argsstring>(void *oldp)</argsstring>
        <name>stb_wrapper_check</name>
        <param>
          <type>void *</type>
          <declname>oldp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="495" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="495" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a2ec0bf1a6318ab6674fce1aca74cf274" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stbprint</definition>
        <argsstring>(const char *fmt,...)</argsstring>
        <name>stbprint</name>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="798" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="798" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1aa52c33b0640cfa65dac831a0c2359450" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char *</type>
        <definition>STB_EXTERN char * stb_sprintf</definition>
        <argsstring>(const char *fmt,...)</argsstring>
        <name>stb_sprintf</name>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="799" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="799" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1afe557dc9ad4579c34a19a3e91bf65dd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char *</type>
        <definition>STB_EXTERN char * stb_mprintf</definition>
        <argsstring>(const char *fmt,...)</argsstring>
        <name>stb_mprintf</name>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="800" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="800" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1abe06c96693fd6fa39cf62d4ccf379d57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_snprintf</definition>
        <argsstring>(char *s, size_t n, const char *fmt,...)</argsstring>
        <name>stb_snprintf</name>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="801" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="801" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a771e1a8e25e65a470296ea2e976bea82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_vsnprintf</definition>
        <argsstring>(char *s, size_t n, const char *fmt, va_list v)</argsstring>
        <name>stb_vsnprintf</name>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="802" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="802" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ab61438950ad587fd89935650b5667e5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN stb__wchar *</type>
        <definition>STB_EXTERN stb__wchar * stb_from_utf8</definition>
        <argsstring>(stb__wchar *buffer, const char *str, int n)</argsstring>
        <name>stb_from_utf8</name>
        <param>
          <type>stb__wchar *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1001" column="24" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1001" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1aa8786d31a9343481bd7cd1ad5130cc63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char *</type>
        <definition>STB_EXTERN char * stb_to_utf8</definition>
        <argsstring>(char *buffer, const stb__wchar *str, int n)</argsstring>
        <name>stb_to_utf8</name>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>const stb__wchar *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1002" column="24" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1002" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a6ec6e0d4db30cb94f348437d1a0abb29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN stb__wchar *</type>
        <definition>STB_EXTERN stb__wchar * stb__from_utf8</definition>
        <argsstring>(const char *str)</argsstring>
        <name>stb__from_utf8</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1004" column="23" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1004" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a6c0e69c7967e4b01baa7bcbcf6527348" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN stb__wchar *</type>
        <definition>STB_EXTERN stb__wchar * stb__from_utf8_alt</definition>
        <argsstring>(const char *str)</argsstring>
        <name>stb__from_utf8_alt</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1005" column="23" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1005" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ac201ffe2b2f2d6a3435299bb634ea14d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char *</type>
        <definition>STB_EXTERN char * stb__to_utf8</definition>
        <argsstring>(const stb__wchar *str)</argsstring>
        <name>stb__to_utf8</name>
        <param>
          <type>const stb__wchar *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1006" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1006" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ad1583ce7c103777e5eeeca9fe489d274" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_fatal</definition>
        <argsstring>(const char *fmt,...)</argsstring>
        <name>stb_fatal</name>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1121" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1121" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1af260e25ee6a3ac484cc78b9b346033f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_</definition>
        <argsstring>(char *fmt,...)</argsstring>
        <name>stb_</name>
        <param>
          <type>char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1122" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1122" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a340a03a5213187c7720288ba0aee5067" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_append_to_file</definition>
        <argsstring>(char *file, char *fmt,...)</argsstring>
        <name>stb_append_to_file</name>
        <param>
          <type>char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1123" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1123" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a4dc684d8bc4bb46521a3d2f451e50b23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_log</definition>
        <argsstring>(int active)</argsstring>
        <name>stb_log</name>
        <param>
          <type>int</type>
          <declname>active</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1124" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1124" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a3e338b3052bcaac13bf1809c2595b7a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_log_fileline</definition>
        <argsstring>(int active)</argsstring>
        <name>stb_log_fileline</name>
        <param>
          <type>int</type>
          <declname>active</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1125" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1125" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a4143d24f0e5aeb1deb148ccf7d8227e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_log_name</definition>
        <argsstring>(char *filename)</argsstring>
        <name>stb_log_name</name>
        <param>
          <type>char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1126" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1126" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ae6488c07f7fc716e49d2f7ecb24a0628" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_swap</definition>
        <argsstring>(void *p, void *q, size_t sz)</argsstring>
        <name>stb_swap</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>q</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1128" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1128" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a3adcae33919d1d284d609f45ee2355c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void *</type>
        <definition>STB_EXTERN void * stb_copy</definition>
        <argsstring>(void *p, size_t sz)</argsstring>
        <name>stb_copy</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1129" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1129" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a8d006ff2a4a41d623ebaa99547c313dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_pointer_array_free</definition>
        <argsstring>(void *p, int len)</argsstring>
        <name>stb_pointer_array_free</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1130" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1130" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a72816fb93ddf98265233c67cd9e7b928" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void **</type>
        <definition>STB_EXTERN void ** stb_array_block_alloc</definition>
        <argsstring>(int count, int blocksize)</argsstring>
        <name>stb_array_block_alloc</name>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blocksize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1131" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1131" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a06fa3780eea8937a895942b6b5b87384" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb__record_fileline</definition>
        <argsstring>(const char *f, int n)</argsstring>
        <name>stb__record_fileline</name>
        <param>
          <type>const char *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1136" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1136" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1abc88adc28a6873262411476b6d02f093" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void *</type>
        <definition>STB_EXTERN void * stb__temp</definition>
        <argsstring>(void *b, int b_sz, int want_sz)</argsstring>
        <name>stb__temp</name>
        <param>
          <type>void *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b_sz</declname>
        </param>
        <param>
          <type>int</type>
          <declname>want_sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1309" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1309" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1adada60bba28f5e86e10d6c9212ab288e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_tempfree</definition>
        <argsstring>(void *block, void *ptr)</argsstring>
        <name>stb_tempfree</name>
        <param>
          <type>void *</type>
          <declname>block</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1310" column="19" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1310" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a6134fd79233d26a3987710e35da6266d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_newell_normal</definition>
        <argsstring>(float *normal, int num_vert, float **vert, int normalize)</argsstring>
        <name>stb_newell_normal</name>
        <param>
          <type>float *</type>
          <declname>normal</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_vert</declname>
        </param>
        <param>
          <type>float **</type>
          <declname>vert</declname>
        </param>
        <param>
          <type>int</type>
          <declname>normalize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1341" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1341" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ac5e390460e8c234609358c084685305c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_box_face_vertex_axis_side</definition>
        <argsstring>(int face_number, int vertex_number, int axis)</argsstring>
        <name>stb_box_face_vertex_axis_side</name>
        <param>
          <type>int</type>
          <declname>face_number</declname>
        </param>
        <param>
          <type>int</type>
          <declname>vertex_number</declname>
        </param>
        <param>
          <type>int</type>
          <declname>axis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1342" column="16" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1342" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1aab8b07ffcbe2c15e4367170e9bdb38c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_linear_controller</definition>
        <argsstring>(float *curpos, float target_pos, float acc, float deacc, float dt)</argsstring>
        <name>stb_linear_controller</name>
        <param>
          <type>float *</type>
          <declname>curpos</declname>
        </param>
        <param>
          <type>float</type>
          <declname>target_pos</declname>
        </param>
        <param>
          <type>float</type>
          <declname>acc</declname>
        </param>
        <param>
          <type>float</type>
          <declname>deacc</declname>
        </param>
        <param>
          <type>float</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1343" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1343" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ac558b9ace6280124f3e38b01343d4d15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_float_eq</definition>
        <argsstring>(float x, float y, float delta, int max_ulps)</argsstring>
        <name>stb_float_eq</name>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>delta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_ulps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1345" column="16" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1345" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a0adae9e15bec6f343cd6dd8e3f6fcbf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_is_prime</definition>
        <argsstring>(unsigned int m)</argsstring>
        <name>stb_is_prime</name>
        <param>
          <type>unsigned int</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1346" column="16" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1346" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a95c4e930e2e0d19456a6b32d69a05e76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN unsigned int</type>
        <definition>STB_EXTERN unsigned int stb_power_of_two_nearest_prime</definition>
        <argsstring>(int n)</argsstring>
        <name>stb_power_of_two_nearest_prime</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1347" column="25" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1347" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a0fe41e60cc3f436ea3836a8b1ae63e0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN float</type>
        <definition>STB_EXTERN float stb_smoothstep</definition>
        <argsstring>(float t)</argsstring>
        <name>stb_smoothstep</name>
        <param>
          <type>float</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1349" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1349" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ab40931ea63c13cdc126663cbced24b28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN float</type>
        <definition>STB_EXTERN float stb_cubic_bezier_1d</definition>
        <argsstring>(float t, float p0, float p1, float p2, float p3)</argsstring>
        <name>stb_cubic_bezier_1d</name>
        <param>
          <type>float</type>
          <declname>t</declname>
        </param>
        <param>
          <type>float</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>float</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1350" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1350" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a5ba28bf32d16b4e6fc1b71ca0a6f2c7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN double</type>
        <definition>STB_EXTERN double stb_linear_remap</definition>
        <argsstring>(double x, double a, double b, double c, double d)</argsstring>
        <name>stb_linear_remap</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>c</declname>
        </param>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1352" column="19" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1352" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a573d967aaf01da9746b58c7d1544e542" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_bitcount</definition>
        <argsstring>(unsigned int a)</argsstring>
        <name>stb_bitcount</name>
        <param>
          <type>unsigned int</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1495" column="25" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1495" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ab6114c5cc62e370eb00d6bbd9cebd615" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN unsigned int</type>
        <definition>STB_EXTERN unsigned int stb_bitreverse8</definition>
        <argsstring>(unsigned char n)</argsstring>
        <name>stb_bitreverse8</name>
        <param>
          <type>unsigned char</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1496" column="25" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1496" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a992182121960ad506c2e5e450bd81591" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN unsigned int</type>
        <definition>STB_EXTERN unsigned int stb_bitreverse</definition>
        <argsstring>(unsigned int n)</argsstring>
        <name>stb_bitreverse</name>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1497" column="25" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1497" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a5a321254834d545f2cf4e783a401cd72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_is_pow2</definition>
        <argsstring>(size_t)</argsstring>
        <name>stb_is_pow2</name>
        <param>
          <type>size_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1499" column="25" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1499" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ad3f254250e1de96763b5bd73f16ece48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_log2_ceil</definition>
        <argsstring>(size_t)</argsstring>
        <name>stb_log2_ceil</name>
        <param>
          <type>size_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1500" column="25" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1500" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ae4ab62b85da8153c5d86fad56ea5e032" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_log2_floor</definition>
        <argsstring>(size_t)</argsstring>
        <name>stb_log2_floor</name>
        <param>
          <type>size_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1501" column="25" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1501" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a29cd4cf6ac040abfe2ce54f9813874c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_lowbit8</definition>
        <argsstring>(unsigned int n)</argsstring>
        <name>stb_lowbit8</name>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1503" column="25" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1503" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ac16a282388c2af8a25abac60f36f6f21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_highbit8</definition>
        <argsstring>(unsigned int n)</argsstring>
        <name>stb_highbit8</name>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1504" column="25" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1504" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a6d389422c7064da452b3820c71a43fdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_search_binary</definition>
        <argsstring>(stb_search *s, int minv, int maxv, int find_smallest)</argsstring>
        <name>stb_search_binary</name>
        <param>
          <type><ref refid="structstb__search" kindref="compound">stb_search</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>minv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>find_smallest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1753" column="16" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1753" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a47115708fe5de2d7cf45e4b84ae225a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_search_open</definition>
        <argsstring>(stb_search *s, int minv, int find_smallest)</argsstring>
        <name>stb_search_open</name>
        <param>
          <type><ref refid="structstb__search" kindref="compound">stb_search</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>minv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>find_smallest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1754" column="16" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1754" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a4e1ad96ff0de803b3a345ea1c01adc63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_probe</definition>
        <argsstring>(stb_search *s, int compare, int *result)</argsstring>
        <name>stb_probe</name>
        <param>
          <type><ref refid="structstb__search" kindref="compound">stb_search</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>compare</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1755" column="16" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1755" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a0f68fec891e612c7be50a4eda581bcff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char *</type>
        <definition>STB_EXTERN char * stb_skipwhite</definition>
        <argsstring>(char *s)</argsstring>
        <name>stb_skipwhite</name>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1880" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1880" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a08b4760ad1f15c0eb96be994ae2c6212" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char *</type>
        <definition>STB_EXTERN char * stb_trimwhite</definition>
        <argsstring>(char *s)</argsstring>
        <name>stb_trimwhite</name>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1881" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1881" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a86289e891675ba8b5274fe05ddae3bbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char *</type>
        <definition>STB_EXTERN char * stb_skipnewline</definition>
        <argsstring>(char *s)</argsstring>
        <name>stb_skipnewline</name>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1882" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1882" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a0b5f0428740727a4edbb1c16b8142131" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char *</type>
        <definition>STB_EXTERN char * stb_strncpy</definition>
        <argsstring>(char *s, char *t, int n)</argsstring>
        <name>stb_strncpy</name>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>t</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1883" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1883" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1aee61b5fcb45e3574cb12846d86598fc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char *</type>
        <definition>STB_EXTERN char * stb_substr</definition>
        <argsstring>(char *t, int n)</argsstring>
        <name>stb_substr</name>
        <param>
          <type>char *</type>
          <declname>t</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1884" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1884" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ab0cb1f99dee132c4eb416befab49fd4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char *</type>
        <definition>STB_EXTERN char * stb_duplower</definition>
        <argsstring>(char *s)</argsstring>
        <name>stb_duplower</name>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1885" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1885" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a15599d1383ebac900cad251fade7e082" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_tolower</definition>
        <argsstring>(char *s)</argsstring>
        <name>stb_tolower</name>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1886" column="19" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1886" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1af6c5f324a7e82671baa50ca4f0d534ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char *</type>
        <definition>STB_EXTERN char * stb_strchr2</definition>
        <argsstring>(char *s, char p1, char p2)</argsstring>
        <name>stb_strchr2</name>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>char</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>char</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1887" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1887" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a86664b379bec0811ed563d5e5c76bc8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char *</type>
        <definition>STB_EXTERN char * stb_strrchr2</definition>
        <argsstring>(char *s, char p1, char p2)</argsstring>
        <name>stb_strrchr2</name>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>char</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>char</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1888" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1888" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a711028939f61e08befbb5894f1833a75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char *</type>
        <definition>STB_EXTERN char * stb_strtok</definition>
        <argsstring>(char *output, char *src, char *delimit)</argsstring>
        <name>stb_strtok</name>
        <param>
          <type>char *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>delimit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1889" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1889" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a31252d04f9e5dfbfb9f786f03a97434e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char *</type>
        <definition>STB_EXTERN char * stb_strtok_keep</definition>
        <argsstring>(char *output, char *src, char *delimit)</argsstring>
        <name>stb_strtok_keep</name>
        <param>
          <type>char *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>delimit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1890" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1890" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a324017e15cc592fbc79d7954d6049049" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char *</type>
        <definition>STB_EXTERN char * stb_strtok_invert</definition>
        <argsstring>(char *output, char *src, char *allowed)</argsstring>
        <name>stb_strtok_invert</name>
        <param>
          <type>char *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>allowed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1891" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1891" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1aa97e20c57e1dd598215f3ae1ce7d9418" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char *</type>
        <definition>STB_EXTERN char * stb_dupreplace</definition>
        <argsstring>(char *s, char *find, char *replace)</argsstring>
        <name>stb_dupreplace</name>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>find</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>replace</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1892" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1892" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a3cb30f29e845b9a25bbe6cf445370bf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_replaceinplace</definition>
        <argsstring>(char *s, char *find, char *replace)</argsstring>
        <name>stb_replaceinplace</name>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>find</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>replace</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1893" column="19" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1893" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a03574b9f287f869c5c7e6df4b107184c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char *</type>
        <definition>STB_EXTERN char * stb_splitpath</definition>
        <argsstring>(char *output, char *src, int flag)</argsstring>
        <name>stb_splitpath</name>
        <param>
          <type>char *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1894" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1894" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ab5d42759522cb7cc18fab51f9a9f2068" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char *</type>
        <definition>STB_EXTERN char * stb_splitpathdup</definition>
        <argsstring>(char *src, int flag)</argsstring>
        <name>stb_splitpathdup</name>
        <param>
          <type>char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1895" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1895" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a7be72adcb8b5f988268c9db46534700a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char *</type>
        <definition>STB_EXTERN char * stb_replacedir</definition>
        <argsstring>(char *output, char *src, char *dir)</argsstring>
        <name>stb_replacedir</name>
        <param>
          <type>char *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1896" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1896" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1aaa2206e4aecccaa6e8316db7a3981db0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char *</type>
        <definition>STB_EXTERN char * stb_replaceext</definition>
        <argsstring>(char *output, char *src, char *ext)</argsstring>
        <name>stb_replaceext</name>
        <param>
          <type>char *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>ext</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1897" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1897" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a850cbc13ef04c07f512624e5b011f15c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_fixpath</definition>
        <argsstring>(char *path)</argsstring>
        <name>stb_fixpath</name>
        <param>
          <type>char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1898" column="19" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1898" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ab586f3a2616cb5aef9e2080bd53de1ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char *</type>
        <definition>STB_EXTERN char * stb_shorten_path_readable</definition>
        <argsstring>(char *path, int max_len)</argsstring>
        <name>stb_shorten_path_readable</name>
        <param>
          <type>char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1899" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1899" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a60a1b9c6cc3e5b14c12bdfc11a5b761a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_suffix</definition>
        <argsstring>(char *s, char *t)</argsstring>
        <name>stb_suffix</name>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1900" column="19" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1900" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ad4760efd01e521aceda92f73b477420e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_suffixi</definition>
        <argsstring>(char *s, char *t)</argsstring>
        <name>stb_suffixi</name>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1901" column="19" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1901" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1af79973a861ec5f2fd280c69a440e5cca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_prefix</definition>
        <argsstring>(char *s, char *t)</argsstring>
        <name>stb_prefix</name>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1902" column="19" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1902" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a28ed6fc23e5c826c6525a9b97ad6635e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char *</type>
        <definition>STB_EXTERN char * stb_strichr</definition>
        <argsstring>(char *s, char t)</argsstring>
        <name>stb_strichr</name>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>char</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1903" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1903" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a87474b74fc6e4d6861bd62a27ea58396" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char *</type>
        <definition>STB_EXTERN char * stb_stristr</definition>
        <argsstring>(char *s, char *t)</argsstring>
        <name>stb_stristr</name>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1904" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1904" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ae8ca111c82c63ac7060cb96de721401e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_prefix_count</definition>
        <argsstring>(char *s, char *t)</argsstring>
        <name>stb_prefix_count</name>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1905" column="19" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1905" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a7195955fedb7656a2db75cfec2d65bf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN const char *</type>
        <definition>STB_EXTERN const char * stb_plural</definition>
        <argsstring>(int n)</argsstring>
        <name>stb_plural</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1906" column="24" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1906" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a51ef61b3b9e8c564a82702d0c85ca90f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN size_t</type>
        <definition>STB_EXTERN size_t stb_strscpy</definition>
        <argsstring>(char *d, const char *s, size_t n)</argsstring>
        <name>stb_strscpy</name>
        <param>
          <type>char *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1907" column="19" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1907" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1acac2de6a642355503d21ba89e4d1c2fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char **</type>
        <definition>STB_EXTERN char ** stb_tokens</definition>
        <argsstring>(char *src, char *delimit, int *count)</argsstring>
        <name>stb_tokens</name>
        <param>
          <type>char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>delimit</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1909" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1909" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a6f17f6a2bcc1123e6e4a13892cc4fb39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char **</type>
        <definition>STB_EXTERN char ** stb_tokens_nested</definition>
        <argsstring>(char *src, char *delimit, int *count, char *nest_in, char *nest_out)</argsstring>
        <name>stb_tokens_nested</name>
        <param>
          <type>char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>delimit</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>count</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>nest_in</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>nest_out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1910" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1910" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a887ad44e57115fd52fb32ecdb625155f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char **</type>
        <definition>STB_EXTERN char ** stb_tokens_nested_empty</definition>
        <argsstring>(char *src, char *delimit, int *count, char *nest_in, char *nest_out)</argsstring>
        <name>stb_tokens_nested_empty</name>
        <param>
          <type>char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>delimit</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>count</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>nest_in</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>nest_out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1911" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1911" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ab79ce2270db82009580fc65b1a10a20a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char **</type>
        <definition>STB_EXTERN char ** stb_tokens_allowempty</definition>
        <argsstring>(char *src, char *delimit, int *count)</argsstring>
        <name>stb_tokens_allowempty</name>
        <param>
          <type>char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>delimit</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1912" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1912" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1aaf27677f3345318e7e81ef661eac411e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char **</type>
        <definition>STB_EXTERN char ** stb_tokens_stripwhite</definition>
        <argsstring>(char *src, char *delimit, int *count)</argsstring>
        <name>stb_tokens_stripwhite</name>
        <param>
          <type>char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>delimit</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1913" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1913" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a94f3d773e4db7d7cc3789a062cd9cc90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char **</type>
        <definition>STB_EXTERN char ** stb_tokens_withdelim</definition>
        <argsstring>(char *src, char *delimit, int *count)</argsstring>
        <name>stb_tokens_withdelim</name>
        <param>
          <type>char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>delimit</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1914" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1914" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1aa4283fb45a269f22a1bd4a5c439f2a4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char **</type>
        <definition>STB_EXTERN char ** stb_tokens_quoted</definition>
        <argsstring>(char *src, char *delimit, int *count)</argsstring>
        <name>stb_tokens_quoted</name>
        <param>
          <type>char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>delimit</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="1915" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="1915" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ad27eba7eeadbe93d6af97ac6310e58aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_free</definition>
        <argsstring>(void *p)</argsstring>
        <name>stb_free</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="2559" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="2559" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1aa3fc469de13af115f13e05c3e4aeb249" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void *</type>
        <definition>STB_EXTERN void * stb_malloc_global</definition>
        <argsstring>(size_t size)</argsstring>
        <name>stb_malloc_global</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="2560" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="2560" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a72bac71176a29a7a8acd32f303266658" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void *</type>
        <definition>STB_EXTERN void * stb_malloc</definition>
        <argsstring>(void *context, size_t size)</argsstring>
        <name>stb_malloc</name>
        <param>
          <type>void *</type>
          <declname>context</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="2561" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="2561" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a68d7d5ab33567df11a2f92288f200f52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void *</type>
        <definition>STB_EXTERN void * stb_malloc_nofree</definition>
        <argsstring>(void *context, size_t size)</argsstring>
        <name>stb_malloc_nofree</name>
        <param>
          <type>void *</type>
          <declname>context</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="2562" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="2562" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1afd9140ce86b2e0a8e135ea7e76d2dd9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void *</type>
        <definition>STB_EXTERN void * stb_malloc_leaf</definition>
        <argsstring>(void *context, size_t size)</argsstring>
        <name>stb_malloc_leaf</name>
        <param>
          <type>void *</type>
          <declname>context</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="2563" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="2563" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a8cd569cc9b74f6dd8127c583558413a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void *</type>
        <definition>STB_EXTERN void * stb_malloc_raw</definition>
        <argsstring>(void *context, size_t size)</argsstring>
        <name>stb_malloc_raw</name>
        <param>
          <type>void *</type>
          <declname>context</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="2564" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="2564" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1accd00831de76029a1064cf0a386da992" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void *</type>
        <definition>STB_EXTERN void * stb_realloc</definition>
        <argsstring>(void *ptr, size_t newsize)</argsstring>
        <name>stb_realloc</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>newsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="2565" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="2565" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a3a95b1f4d9dea017dac41d7e8324caa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_reassign</definition>
        <argsstring>(void *new_context, void *ptr)</argsstring>
        <name>stb_reassign</name>
        <param>
          <type>void *</type>
          <declname>new_context</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="2567" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="2567" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1af8ff357faf813c292e95d2ef6b47cfde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_malloc_validate</definition>
        <argsstring>(void *p, void *parent)</argsstring>
        <name>stb_malloc_validate</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="2568" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="2568" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ad8b1019347ab4208a8c996261a992600" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_arr_malloc</definition>
        <argsstring>(void **target, void *context)</argsstring>
        <name>stb_arr_malloc</name>
        <param>
          <type>void **</type>
          <declname>target</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3140" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="3140" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a79f180eedf0caa5503c263533d4ff719" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void *</type>
        <definition>STB_EXTERN void * stb_arr_malloc_parent</definition>
        <argsstring>(void *p)</argsstring>
        <name>stb_arr_malloc_parent</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3147" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="3147" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ac154a8b8aa5fc66fc7df23af855dc498" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_arr_free_</definition>
        <argsstring>(void **p)</argsstring>
        <name>stb_arr_free_</name>
        <param>
          <type>void **</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3257" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="3257" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a3df9e47a7b46480e1fe45c14278f7ce9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void *</type>
        <definition>STB_EXTERN void * stb__arr_copy_</definition>
        <argsstring>(void *p, int elem_size)</argsstring>
        <name>stb__arr_copy_</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>elem_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3258" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="3258" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a92f197f04b1bdd0bcedeb29736a2c172" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb__arr_setsize_</definition>
        <argsstring>(void **p, int size, int limit STB__PARAMS)</argsstring>
        <name>stb__arr_setsize_</name>
        <param>
          <type>void **</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int limit</type>
          <declname>STB__PARAMS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3259" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="3259" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a4e2a2129818fae58749170136d260952" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb__arr_setlen_</definition>
        <argsstring>(void **p, int size, int newlen STB__PARAMS)</argsstring>
        <name>stb__arr_setlen_</name>
        <param>
          <type>void **</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int newlen</type>
          <declname>STB__PARAMS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3260" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="3260" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ae995465dc76445648113b32855caf1de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb__arr_addlen_</definition>
        <argsstring>(void **p, int size, int addlen STB__PARAMS)</argsstring>
        <name>stb__arr_addlen_</name>
        <param>
          <type>void **</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int addlen</type>
          <declname>STB__PARAMS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3261" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="3261" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1abf9b8777609bcbc958f17649a31a3244" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb__arr_deleten_</definition>
        <argsstring>(void **p, int size, int loc, int n STB__PARAMS)</argsstring>
        <name>stb__arr_deleten_</name>
        <param>
          <type>void **</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>int n</type>
          <declname>STB__PARAMS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3262" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="3262" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1af58d5648923e490d9ded3761e67a8843" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb__arr_insertn_</definition>
        <argsstring>(void **p, int size, int loc, int n STB__PARAMS)</argsstring>
        <name>stb__arr_insertn_</name>
        <param>
          <type>void **</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>int n</type>
          <declname>STB__PARAMS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3263" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="3263" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a612d3e6cb9f43c9d452b47c905fd965e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN unsigned int</type>
        <definition>STB_EXTERN unsigned int stb_hash</definition>
        <argsstring>(char *str)</argsstring>
        <name>stb_hash</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3449" column="25" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="3449" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ade5dd30ee390b94e61eca23ee10c1f7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN unsigned int</type>
        <definition>STB_EXTERN unsigned int stb_hashptr</definition>
        <argsstring>(void *p)</argsstring>
        <name>stb_hashptr</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3450" column="25" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="3450" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a88167fd3886cea9757f63d3d2ccb9af7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN unsigned int</type>
        <definition>STB_EXTERN unsigned int stb_hashlen</definition>
        <argsstring>(char *str, int len)</argsstring>
        <name>stb_hashlen</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3451" column="25" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="3451" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a66d4dabd5455ed063335af6491aa3c52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN unsigned int</type>
        <definition>STB_EXTERN unsigned int stb_rehash_improved</definition>
        <argsstring>(unsigned int v)</argsstring>
        <name>stb_rehash_improved</name>
        <param>
          <type>unsigned int</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3452" column="25" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="3452" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a6612a29f2b5802eec468a7d7ebddd84a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN unsigned int</type>
        <definition>STB_EXTERN unsigned int stb_hash_fast</definition>
        <argsstring>(void *p, int len)</argsstring>
        <name>stb_hash_fast</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3453" column="25" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="3453" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ab2408a3f24fb521cb60eccd12b98c2c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN unsigned int</type>
        <definition>STB_EXTERN unsigned int stb_hash2</definition>
        <argsstring>(char *str, unsigned int *hash2_ptr)</argsstring>
        <name>stb_hash2</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>hash2_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3454" column="25" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="3454" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a2b1cc50f08d76a03abfc5c0369ef5c76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN unsigned int</type>
        <definition>STB_EXTERN unsigned int stb_hash_number</definition>
        <argsstring>(unsigned int hash)</argsstring>
        <name>stb_hash_number</name>
        <param>
          <type>unsigned int</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="3455" column="25" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="3455" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ab73a0824c4428538e7ecfa1fa505f2cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>stb_declare_hash</definition>
        <argsstring>(STB_EXTERN, stb_ptrmap, stb_ptrmap_, void *, void *) stb_declare_hash(STB_EXTERN</argsstring>
        <name>stb_declare_hash</name>
        <param>
          <type>STB_EXTERN</type>
        </param>
        <param>
          <type>stb_ptrmap</type>
        </param>
        <param>
          <type>stb_ptrmap_</type>
        </param>
        <param>
          <type>void *</type>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="4200" column="1"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1aec6c766d34231727450c9d5f7613514b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stb_int32</type>
        <definition>stb_int32 stb_declare_hash</definition>
        <argsstring>(STB_EXTERN, stb_uidict, stbi_uidict_, stb_uint32, stb_uint32) STB_EXTERN void stb_ptrmap_delete(stb_ptrmap *e</argsstring>
        <name>stb_declare_hash</name>
        <param>
          <type>STB_EXTERN</type>
        </param>
        <param>
          <type>stb_uidict</type>
        </param>
        <param>
          <type>stbi_uidict_</type>
        </param>
        <param>
          <type>stb_uint32</type>
        </param>
        <param>
          <type>stb_uint32</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="4202" column="1"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ab23d3e7cb48a66c8c02da517e2e3a4cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN stb_ptrmap *</type>
        <definition>STB_EXTERN stb_ptrmap * stb_ptrmap_new</definition>
        <argsstring>(void)</argsstring>
        <name>stb_ptrmap_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="4205" column="23" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="4205" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a18ac42c7a04f553ebbc5ca4d13e084ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN stb_idict *</type>
        <definition>STB_EXTERN stb_idict * stb_idict_new_size</definition>
        <argsstring>(int size)</argsstring>
        <name>stb_idict_new_size</name>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="4207" column="23" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="4207" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ad805ed86795c5f57c7c5740f85167282" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_idict_remove_all</definition>
        <argsstring>(stb_idict *e)</argsstring>
        <name>stb_idict_remove_all</name>
        <param>
          <type>stb_idict *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="4208" column="24" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="4208" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1add4071bb7b3ddda29af44d551fd498ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_uidict_reset</definition>
        <argsstring>(stb_uidict *e)</argsstring>
        <name>stb_uidict_reset</name>
        <param>
          <type>stb_uidict *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="4209" column="24" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="4209" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ac46ee131d2a0b262ecd3c333a9ef21fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN stb_spmatrix *</type>
        <definition>STB_EXTERN stb_spmatrix * stb_sparse_ptr_matrix_new</definition>
        <argsstring>(int val_size)</argsstring>
        <name>stb_sparse_ptr_matrix_new</name>
        <param>
          <type>int</type>
          <declname>val_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="4297" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="4297" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a49f1bea1b96df7b1515af212a94ea361" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_sparse_ptr_matrix_free</definition>
        <argsstring>(stb_spmatrix *z)</argsstring>
        <name>stb_sparse_ptr_matrix_free</name>
        <param>
          <type>stb_spmatrix *</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="4298" column="27" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="4298" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a03f9c91a82918f8fd6e7153fa0e1c28f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void *</type>
        <definition>STB_EXTERN void * stb_sparse_ptr_matrix_get</definition>
        <argsstring>(stb_spmatrix *z, void *a, void *b, int create)</argsstring>
        <name>stb_sparse_ptr_matrix_get</name>
        <param>
          <type>stb_spmatrix *</type>
          <declname>z</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>create</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="4299" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="4299" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a7cbdda3c49279a9049cb0821afaeb226" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>stb_declare_hash</definition>
        <argsstring>(STB_EXTERN, stb_sdict, stb_sdict_, char *, void *) STB_EXTERN stb_sdict *stb_sdict_new(int use_arena)</argsstring>
        <name>stb_declare_hash</name>
        <param>
          <type>STB_EXTERN</type>
        </param>
        <param>
          <type>stb_sdict</type>
        </param>
        <param>
          <type>stb_sdict_</type>
        </param>
        <param>
          <type>char *</type>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="4358" column="1" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="4358" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ad71edd8b1c3e1b1be313ece0120d6bcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN stb_sdict *</type>
        <definition>STB_EXTERN stb_sdict * stb_sdict_copy</definition>
        <argsstring>(stb_sdict *)</argsstring>
        <name>stb_sdict_copy</name>
        <param>
          <type>stb_sdict *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="4361" column="23" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="4361" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a6fc9985fbbdfe07cd52f7c38e246382b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_sdict_delete</definition>
        <argsstring>(stb_sdict *)</argsstring>
        <name>stb_sdict_delete</name>
        <param>
          <type>stb_sdict *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="4362" column="24" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="4362" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1adef2e7fee7738a62103b46b28da21d62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void *</type>
        <definition>STB_EXTERN void * stb_sdict_change</definition>
        <argsstring>(stb_sdict *, char *str, void *p)</argsstring>
        <name>stb_sdict_change</name>
        <param>
          <type>stb_sdict *</type>
        </param>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="4363" column="23" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="4363" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a79ad30f261344dedc747fcff3592753f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_sdict_count</definition>
        <argsstring>(stb_sdict *d)</argsstring>
        <name>stb_sdict_count</name>
        <param>
          <type>stb_sdict *</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="4364" column="24" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="4364" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a57e31c352d6d8564123f63eaa583b4e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_sdict_internal_limit</definition>
        <argsstring>(stb_sdict *d)</argsstring>
        <name>stb_sdict_internal_limit</name>
        <param>
          <type>stb_sdict *</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="4366" column="24" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="4366" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1acbae595a189b683e906a9791717731ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char *</type>
        <definition>STB_EXTERN char * stb_sdict_internal_key</definition>
        <argsstring>(stb_sdict *d, int n)</argsstring>
        <name>stb_sdict_internal_key</name>
        <param>
          <type>stb_sdict *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="4367" column="23" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="4367" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ad62c003575e52df37bbe56561d436ffe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void *</type>
        <definition>STB_EXTERN void * stb_sdict_internal_value</definition>
        <argsstring>(stb_sdict *d, int n)</argsstring>
        <name>stb_sdict_internal_value</name>
        <param>
          <type>stb_sdict *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="4368" column="23" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="4368" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a810d0815fde7827ca230d68eeebd6dfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_fput_varlen64</definition>
        <argsstring>(FILE *f, stb_uint64 v)</argsstring>
        <name>stb_fput_varlen64</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>stb_uint64</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="5151" column="21" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="5151" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a173ed12d316cd397cacc396c302a3270" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN stb_uint64</type>
        <definition>STB_EXTERN stb_uint64 stb_fget_varlen64</definition>
        <argsstring>(FILE *f)</argsstring>
        <name>stb_fget_varlen64</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="5152" column="24" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="5152" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a2b3752366621cc0955be4c35a16ed1a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_size_varlen64</definition>
        <argsstring>(stb_uint64 v)</argsstring>
        <name>stb_size_varlen64</name>
        <param>
          <type>stb_uint64</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="5153" column="21" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="5153" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1aecd21c5661c1ceec348ffec16a678704" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void *</type>
        <definition>STB_EXTERN void * stb_file</definition>
        <argsstring>(char *filename, size_t *length)</argsstring>
        <name>stb_file</name>
        <param>
          <type>char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="5158" column="19" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="5158" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a4cf732f716870c923ef962f7b19cbb3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void *</type>
        <definition>STB_EXTERN void * stb_file_max</definition>
        <argsstring>(char *filename, size_t *length)</argsstring>
        <name>stb_file_max</name>
        <param>
          <type>char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="5159" column="19" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="5159" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ac8c99aa1bc48b0f2fd423d4149f08e27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN size_t</type>
        <definition>STB_EXTERN size_t stb_filelen</definition>
        <argsstring>(FILE *f)</argsstring>
        <name>stb_filelen</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="5160" column="20" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="5160" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1aab2c9d0ba6803b08f25ee182378cdc0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_filewrite</definition>
        <argsstring>(char *filename, void *data, size_t length)</argsstring>
        <name>stb_filewrite</name>
        <param>
          <type>char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="5161" column="20" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="5161" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1acefac1e424f53d04a914539d80281a17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_filewritestr</definition>
        <argsstring>(char *filename, char *data)</argsstring>
        <name>stb_filewritestr</name>
        <param>
          <type>char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="5162" column="20" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="5162" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a9a827cadd9a5492572ae0ce50ac7104d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char **</type>
        <definition>STB_EXTERN char ** stb_stringfile</definition>
        <argsstring>(char *filename, int *len)</argsstring>
        <name>stb_stringfile</name>
        <param>
          <type>char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="5163" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="5163" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a60ea0980b43c558b0d11c1d85caa7149" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char **</type>
        <definition>STB_EXTERN char ** stb_stringfile_trimmed</definition>
        <argsstring>(char *name, int *len, char comm)</argsstring>
        <name>stb_stringfile_trimmed</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>len</declname>
        </param>
        <param>
          <type>char</type>
          <declname>comm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="5164" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="5164" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ac1a062303c9d8836b1e4aef2be6fa1fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char *</type>
        <definition>STB_EXTERN char * stb_fgets</definition>
        <argsstring>(char *buffer, int buflen, FILE *f)</argsstring>
        <name>stb_fgets</name>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>buflen</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="5165" column="19" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="5165" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a07f745812f793a0d7e9820279b3f423e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char *</type>
        <definition>STB_EXTERN char * stb_fgets_malloc</definition>
        <argsstring>(FILE *f)</argsstring>
        <name>stb_fgets_malloc</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="5166" column="19" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="5166" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a6e4e751b0e199ce8d9aafde0c64e505d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_fexists</definition>
        <argsstring>(char *filename)</argsstring>
        <name>stb_fexists</name>
        <param>
          <type>char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="5167" column="20" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="5167" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1af2b092a97cfda6a00a4b7c9087072295" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_fcmp</definition>
        <argsstring>(char *s1, char *s2)</argsstring>
        <name>stb_fcmp</name>
        <param>
          <type>char *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="5168" column="20" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="5168" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ade7ec29b1b88a05d80770a445c8d625c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_feq</definition>
        <argsstring>(char *s1, char *s2)</argsstring>
        <name>stb_feq</name>
        <param>
          <type>char *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="5169" column="20" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="5169" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1aca74f2cdb9d28d751a63031ef655b896" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN time_t</type>
        <definition>STB_EXTERN time_t stb_ftimestamp</definition>
        <argsstring>(char *filename)</argsstring>
        <name>stb_ftimestamp</name>
        <param>
          <type>char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="5170" column="20" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="5170" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a5c04eb0693d3747fe1020d5badf7545e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_fullpath</definition>
        <argsstring>(char *abs, int abs_size, char *rel)</argsstring>
        <name>stb_fullpath</name>
        <param>
          <type>char *</type>
          <declname>abs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>abs_size</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>rel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="5172" column="20" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="5172" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a0da9a7c797f3b8c750285d72a84e5aeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN FILE *</type>
        <definition>STB_EXTERN FILE * stb_fopen</definition>
        <argsstring>(char *filename, const char *mode)</argsstring>
        <name>stb_fopen</name>
        <param>
          <type>char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="5173" column="19" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="5173" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a82b71be88e4fc6fb07748fad02da8d5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_fclose</definition>
        <argsstring>(FILE *f, int keep)</argsstring>
        <name>stb_fclose</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>keep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="5174" column="20" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="5174" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a74bf21514471b91b226f3ba6f5b903f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_copyfile</definition>
        <argsstring>(char *src, char *dest)</argsstring>
        <name>stb_copyfile</name>
        <param>
          <type>char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="5183" column="20" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="5183" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1aa4bb3e7fd638cd6a4a9f2c1d19147f20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_fwrite32</definition>
        <argsstring>(FILE *f, stb_uint32 datum)</argsstring>
        <name>stb_fwrite32</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>stb_uint32</type>
          <declname>datum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="5189" column="20" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="5189" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ae3a5572a651db9924c66cefa5a88d8b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_fput_varlen</definition>
        <argsstring>(FILE *f, int v)</argsstring>
        <name>stb_fput_varlen</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="5190" column="20" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="5190" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1af3e1fd97fa4d84bef38ebe2d88504044" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_fput_varlenu</definition>
        <argsstring>(FILE *f, unsigned int v)</argsstring>
        <name>stb_fput_varlenu</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="5191" column="20" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="5191" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a87e0132eb766cdbdec212abd82df42db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_fget_varlen</definition>
        <argsstring>(FILE *f)</argsstring>
        <name>stb_fget_varlen</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="5192" column="20" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="5192" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1af9df83e747c918102522c3c045943d88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN stb_uint</type>
        <definition>STB_EXTERN stb_uint stb_fget_varlenu</definition>
        <argsstring>(FILE *f)</argsstring>
        <name>stb_fget_varlenu</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="5193" column="21" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="5193" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a7f09c7459c0ad2dd3c95e5ad18b33ad4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_fput_ranged</definition>
        <argsstring>(FILE *f, int v, int b, stb_uint n)</argsstring>
        <name>stb_fput_ranged</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <param>
          <type>stb_uint</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="5194" column="20" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="5194" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a539ffd13c97ecec352bc619f48f5ce39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_fget_ranged</definition>
        <argsstring>(FILE *f, int b, stb_uint n)</argsstring>
        <name>stb_fget_ranged</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <param>
          <type>stb_uint</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="5195" column="20" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="5195" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ae5e26bfb3b056447d4f2d38d1211a28f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_size_varlen</definition>
        <argsstring>(int v)</argsstring>
        <name>stb_size_varlen</name>
        <param>
          <type>int</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="5196" column="20" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="5196" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a978493515fbdcde077608118c6316cd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_size_varlenu</definition>
        <argsstring>(unsigned int v)</argsstring>
        <name>stb_size_varlenu</name>
        <param>
          <type>unsigned int</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="5197" column="20" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="5197" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ab8cea37235b8fc563cc28e80b85045bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_size_ranged</definition>
        <argsstring>(int b, stb_uint n)</argsstring>
        <name>stb_size_ranged</name>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <param>
          <type>stb_uint</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="5198" column="20" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="5198" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a49a2e9071b8ccd5a1c2126aa8419edfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_fread</definition>
        <argsstring>(void *data, size_t len, size_t count, void *f)</argsstring>
        <name>stb_fread</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="5200" column="20" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="5200" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a46b20f48148ce1b3dbfed9f5dd391feb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_fwrite</definition>
        <argsstring>(void *data, size_t len, size_t count, void *f)</argsstring>
        <name>stb_fwrite</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="5201" column="20" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="5201" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a10dc664a6954f2edd0aa0825829f5879" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char **</type>
        <definition>STB_EXTERN char ** stb_getopt_param</definition>
        <argsstring>(int *argc, char **argv, char *param)</argsstring>
        <name>stb_getopt_param</name>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="6019" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="6019" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a69e6780e27259ce7bbf773904eadb766" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char **</type>
        <definition>STB_EXTERN char ** stb_getopt</definition>
        <argsstring>(int *argc, char **argv)</argsstring>
        <name>stb_getopt</name>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="6020" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="6020" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a943ffcd2df5bad52b3f54b4b38bc9bd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_getopt_free</definition>
        <argsstring>(char **opts)</argsstring>
        <name>stb_getopt_free</name>
        <param>
          <type>char **</type>
          <declname>opts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="6021" column="19" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="6021" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a22db644e6c6daf9b08788b355c96ca7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char **</type>
        <definition>STB_EXTERN char ** stb_readdir_files</definition>
        <argsstring>(char *dir)</argsstring>
        <name>stb_readdir_files</name>
        <param>
          <type>char *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="6101" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="6101" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ad360577489686cdaf8345fcc26073c92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char **</type>
        <definition>STB_EXTERN char ** stb_readdir_files_mask</definition>
        <argsstring>(char *dir, char *wild)</argsstring>
        <name>stb_readdir_files_mask</name>
        <param>
          <type>char *</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>wild</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="6102" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="6102" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a60bde100a9dbd2dddbf0d4e1a750461b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char **</type>
        <definition>STB_EXTERN char ** stb_readdir_subdirs</definition>
        <argsstring>(char *dir)</argsstring>
        <name>stb_readdir_subdirs</name>
        <param>
          <type>char *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="6103" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="6103" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a7e3d7b618bb31f33e04e877d916176c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char **</type>
        <definition>STB_EXTERN char ** stb_readdir_subdirs_mask</definition>
        <argsstring>(char *dir, char *wild)</argsstring>
        <name>stb_readdir_subdirs_mask</name>
        <param>
          <type>char *</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>wild</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="6104" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="6104" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a015e48d228e54c65f6c4a93c092e43cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_readdir_free</definition>
        <argsstring>(char **files)</argsstring>
        <name>stb_readdir_free</name>
        <param>
          <type>char **</type>
          <declname>files</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="6105" column="19" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="6105" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ac3620e3f2559b60d524322351a7c0c46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char **</type>
        <definition>STB_EXTERN char ** stb_readdir_recursive</definition>
        <argsstring>(char *dir, char *filespec)</argsstring>
        <name>stb_readdir_recursive</name>
        <param>
          <type>char *</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>filespec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="6106" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="6106" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ae632fc69269d91265dd1c9b2497f9110" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_delete_directory_recursive</definition>
        <argsstring>(char *dir)</argsstring>
        <name>stb_delete_directory_recursive</name>
        <param>
          <type>char *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="6107" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="6107" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1abb2f1a70be596866f9aaa3a7d4833efc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN <ref refid="structstb__dirtree2" kindref="compound">stb_dirtree2</ref> *</type>
        <definition>STB_EXTERN stb_dirtree2 * stb_dirtree2_from_files_relative</definition>
        <argsstring>(char *src, char **filelist, int count)</argsstring>
        <name>stb_dirtree2_from_files_relative</name>
        <param>
          <type>char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>filelist</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="6308" column="25" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="6308" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a44a76fbf0a9071567329c9ffcf757f0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN <ref refid="structstb__dirtree2" kindref="compound">stb_dirtree2</ref> *</type>
        <definition>STB_EXTERN stb_dirtree2 * stb_dirtree2_from_files</definition>
        <argsstring>(char **filelist, int count)</argsstring>
        <name>stb_dirtree2_from_files</name>
        <param>
          <type>char **</type>
          <declname>filelist</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="6309" column="25" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="6309" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a02d6131efa3fa17b7921720a82a9dd11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_dir_is_prefix</definition>
        <argsstring>(char *dir, int dirlen, char *file)</argsstring>
        <name>stb_dir_is_prefix</name>
        <param>
          <type>char *</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dirlen</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="6310" column="16" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="6310" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1aa3dd5a10f4c554a0f02d6eaf1d61e0ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN stb_uint</type>
        <definition>STB_EXTERN stb_uint stb_adler32</definition>
        <argsstring>(stb_uint adler32, stb_uchar *buffer, stb_uint buflen)</argsstring>
        <name>stb_adler32</name>
        <param>
          <type>stb_uint</type>
          <declname>adler32</declname>
        </param>
        <param>
          <type>stb_uchar *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>stb_uint</type>
          <declname>buflen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="6405" column="3" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="6405" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1aeed7bbe67a83aa0f45c643e08ffb3768" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN stb_uint</type>
        <definition>STB_EXTERN stb_uint stb_crc32_block</definition>
        <argsstring>(stb_uint crc32, stb_uchar *buffer, stb_uint len)</argsstring>
        <name>stb_crc32_block</name>
        <param>
          <type>stb_uint</type>
          <declname>crc32</declname>
        </param>
        <param>
          <type>stb_uchar *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>stb_uint</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="6407" column="3" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="6407" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a8beb45ea27e3985cea1ff1f3642df1af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN stb_uint</type>
        <definition>STB_EXTERN stb_uint stb_crc32</definition>
        <argsstring>(unsigned char *buffer, stb_uint len)</argsstring>
        <name>stb_crc32</name>
        <param>
          <type>unsigned char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>stb_uint</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="6408" column="21" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="6408" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1affe7ab97b081b134f46cfc41183e3f57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_sha1</definition>
        <argsstring>(unsigned char output[20], unsigned char *buffer, unsigned int len)</argsstring>
        <name>stb_sha1</name>
        <param>
          <type>unsigned char</type>
          <declname>output</declname>
          <array>[20]</array>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="6410" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="6410" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ae074a8e479f87869ec3db75471f2693a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_sha1_file</definition>
        <argsstring>(unsigned char output[20], char *file)</argsstring>
        <name>stb_sha1_file</name>
        <param>
          <type>unsigned char</type>
          <declname>output</declname>
          <array>[20]</array>
        </param>
        <param>
          <type>char *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="6412" column="16" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="6412" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ac88ff2d0584256b8bfa637764e616177" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_sha1_readable</definition>
        <argsstring>(char display[27], unsigned char sha[20])</argsstring>
        <name>stb_sha1_readable</name>
        <param>
          <type>char</type>
          <declname>display</declname>
          <array>[27]</array>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>sha</declname>
          <array>[20]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="6414" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="6414" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ae3a76235423dc684e561980fe6a411a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN stb_cfg *</type>
        <definition>STB_EXTERN stb_cfg * stb_cfg_open</definition>
        <argsstring>(char *config, const char *mode)</argsstring>
        <name>stb_cfg_open</name>
        <param>
          <type>char *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="6799" column="21" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="6799" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a2bcbdf2280f62a14a477d3d41e5d9b8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_cfg_close</definition>
        <argsstring>(stb_cfg *cfg)</argsstring>
        <name>stb_cfg_close</name>
        <param>
          <type>stb_cfg *</type>
          <declname>cfg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="6800" column="22" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="6800" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a5f146576e2f75d1f1dad1e7e8bb35fd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_cfg_read</definition>
        <argsstring>(stb_cfg *cfg, char *key, void *value, int len)</argsstring>
        <name>stb_cfg_read</name>
        <param>
          <type>stb_cfg *</type>
          <declname>cfg</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="6801" column="22" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="6801" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a0d2b2fb4f8cb6b914651d47e397b4d57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_cfg_write</definition>
        <argsstring>(stb_cfg *cfg, char *key, void *value, int len)</argsstring>
        <name>stb_cfg_write</name>
        <param>
          <type>stb_cfg *</type>
          <declname>cfg</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="6802" column="22" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="6802" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1aee0198efee1570daede0a4dff35ce52b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_cfg_read_string</definition>
        <argsstring>(stb_cfg *cfg, char *key, char *value, int len)</argsstring>
        <name>stb_cfg_read_string</name>
        <param>
          <type>stb_cfg *</type>
          <declname>cfg</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="6803" column="22" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="6803" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1aad20d6f03c80dd0e9d0c922798418af0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_cfg_write_string</definition>
        <argsstring>(stb_cfg *cfg, char *key, char *value)</argsstring>
        <name>stb_cfg_write_string</name>
        <param>
          <type>stb_cfg *</type>
          <declname>cfg</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="6804" column="22" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="6804" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1affeb4b675458ffad2af2ff1445bd8f7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_cfg_delete</definition>
        <argsstring>(stb_cfg *cfg, char *key)</argsstring>
        <name>stb_cfg_delete</name>
        <param>
          <type>stb_cfg *</type>
          <declname>cfg</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="6805" column="22" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="6805" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1aeebd6d9335969c52d4b2968fa750ea53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_cfg_set_directory</definition>
        <argsstring>(char *dir)</argsstring>
        <name>stb_cfg_set_directory</name>
        <param>
          <type>char *</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="6806" column="22" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="6806" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1adb16ff2b9e209fd0b1f9276caa9deb5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_ps_find</definition>
        <argsstring>(stb_ps *ps, void *value)</argsstring>
        <name>stb_ps_find</name>
        <param>
          <type>stb_ps *</type>
          <declname>ps</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="7743" column="21" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="7743" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1af98d332549d683ef1be445f1beb5af0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN stb_ps *</type>
        <definition>STB_EXTERN stb_ps * stb_ps_add</definition>
        <argsstring>(stb_ps *ps, void *value)</argsstring>
        <name>stb_ps_add</name>
        <param>
          <type>stb_ps *</type>
          <declname>ps</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="7744" column="20" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="7744" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a188440cc33abb0ecddbf0b0cca77041b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN stb_ps *</type>
        <definition>STB_EXTERN stb_ps * stb_ps_remove</definition>
        <argsstring>(stb_ps *ps, void *value)</argsstring>
        <name>stb_ps_remove</name>
        <param>
          <type>stb_ps *</type>
          <declname>ps</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="7745" column="20" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="7745" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ac118d5655dba3d7a0cb98ea25eda9328" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN stb_ps *</type>
        <definition>STB_EXTERN stb_ps * stb_ps_remove_any</definition>
        <argsstring>(stb_ps *ps, void **value)</argsstring>
        <name>stb_ps_remove_any</name>
        <param>
          <type>stb_ps *</type>
          <declname>ps</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="7746" column="20" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="7746" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a09325df6c5a794ac4dfa3c23eda3d1f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_ps_delete</definition>
        <argsstring>(stb_ps *ps)</argsstring>
        <name>stb_ps_delete</name>
        <param>
          <type>stb_ps *</type>
          <declname>ps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="7747" column="21" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="7747" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ac96be080e94ad7c89af278cf8f9e6d9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_ps_count</definition>
        <argsstring>(stb_ps *ps)</argsstring>
        <name>stb_ps_count</name>
        <param>
          <type>stb_ps *</type>
          <declname>ps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="7748" column="21" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="7748" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1aaa0a2dae1e1e3bbbd61358e8db763915" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN stb_ps *</type>
        <definition>STB_EXTERN stb_ps * stb_ps_copy</definition>
        <argsstring>(stb_ps *ps)</argsstring>
        <name>stb_ps_copy</name>
        <param>
          <type>stb_ps *</type>
          <declname>ps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="7750" column="20" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="7750" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ab9dd82eeef0f18a11ae379f04d44037f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_ps_subset</definition>
        <argsstring>(stb_ps *bigger, stb_ps *smaller)</argsstring>
        <name>stb_ps_subset</name>
        <param>
          <type>stb_ps *</type>
          <declname>bigger</declname>
        </param>
        <param>
          <type>stb_ps *</type>
          <declname>smaller</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="7751" column="21" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="7751" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1af94841d94a9933f09adcc5b2e96976e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_ps_eq</definition>
        <argsstring>(stb_ps *p0, stb_ps *p1)</argsstring>
        <name>stb_ps_eq</name>
        <param>
          <type>stb_ps *</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>stb_ps *</type>
          <declname>p1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="7752" column="21" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="7752" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a31e3442e8e645fdbfcaebaa4c3a019e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void **</type>
        <definition>STB_EXTERN void ** stb_ps_getlist</definition>
        <argsstring>(stb_ps *ps, int *count)</argsstring>
        <name>stb_ps_getlist</name>
        <param>
          <type>stb_ps *</type>
          <declname>ps</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="7754" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="7754" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1aba7a493495e5727cc6f61107a5adfb79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_ps_writelist</definition>
        <argsstring>(stb_ps *ps, void **list, int size)</argsstring>
        <name>stb_ps_writelist</name>
        <param>
          <type>stb_ps *</type>
          <declname>ps</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>list</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="7755" column="20" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="7755" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1af0be742485fbe5ee95196cfaa0b54231" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_ps_enum</definition>
        <argsstring>(stb_ps *ps, void *data, int(*func)(void *value, void *data))</argsstring>
        <name>stb_ps_enum</name>
        <param>
          <type>stb_ps *</type>
          <declname>ps</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int(*)(void *<ref refid="classvalue" kindref="compound">value</ref>, void *data)</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="7759" column="20" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="7759" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ae1802b0f0be638498f94a714e05197c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void **</type>
        <definition>STB_EXTERN void ** stb_ps_fastlist</definition>
        <argsstring>(stb_ps *ps, int *count)</argsstring>
        <name>stb_ps_fastlist</name>
        <param>
          <type>stb_ps *</type>
          <declname>ps</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="7761" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="7761" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a5e212f0ed2915c424e3b75b48167e714" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN unsigned int</type>
        <definition>STB_EXTERN unsigned int stb_srandLCG</definition>
        <argsstring>(unsigned int seed)</argsstring>
        <name>stb_srandLCG</name>
        <param>
          <type>unsigned int</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8354" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="8354" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a2bce09953bfa63118cd77e4c999a3e21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN unsigned int</type>
        <definition>STB_EXTERN unsigned int stb_randLCG</definition>
        <argsstring>(void)</argsstring>
        <name>stb_randLCG</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8355" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="8355" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a6bd8a87c569ae32cb559acb003f3b5b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN double</type>
        <definition>STB_EXTERN double stb_frandLCG</definition>
        <argsstring>(void)</argsstring>
        <name>stb_frandLCG</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8356" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="8356" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a8bcc22985859091ff4f32a3b20e2f528" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_srand</definition>
        <argsstring>(unsigned int seed)</argsstring>
        <name>stb_srand</name>
        <param>
          <type>unsigned int</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8358" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="8358" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ae5b21fb2c679007a3628ae9e87681484" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN unsigned int</type>
        <definition>STB_EXTERN unsigned int stb_rand</definition>
        <argsstring>(void)</argsstring>
        <name>stb_rand</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8359" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="8359" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1af6bef5c8e56f92cda444d13d2a82a9a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN double</type>
        <definition>STB_EXTERN double stb_frand</definition>
        <argsstring>(void)</argsstring>
        <name>stb_frand</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8360" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="8360" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1add72a883202b952b64e74857780ca338" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_shuffle</definition>
        <argsstring>(void *p, size_t n, size_t sz, unsigned int seed)</argsstring>
        <name>stb_shuffle</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8361" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="8361" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a994618dbc918d770cc2d6bf2e7a1fafb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_reverse</definition>
        <argsstring>(void *p, size_t n, size_t sz)</argsstring>
        <name>stb_reverse</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8363" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="8363" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ac8d0c3e40a6f1933d6ba61cf4b393b35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN unsigned int</type>
        <definition>STB_EXTERN unsigned int stb_randLCG_explicit</definition>
        <argsstring>(unsigned int seed)</argsstring>
        <name>stb_randLCG_explicit</name>
        <param>
          <type>unsigned int</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8365" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="8365" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a2e60699a3b917cf1b49db4f5405ffb83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_dupe_free</definition>
        <argsstring>(stb_dupe *sd)</argsstring>
        <name>stb_dupe_free</name>
        <param>
          <type><ref refid="structstb__dupe" kindref="compound">stb_dupe</ref> *</type>
          <declname>sd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8539" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="8539" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ad8fd70df90e19bb3645d181538d86300" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN <ref refid="structstb__dupe" kindref="compound">stb_dupe</ref> *</type>
        <definition>STB_EXTERN stb_dupe * stb_dupe_create</definition>
        <argsstring>(stb_hash_func hash, stb_compare_func eq, int size, stb_compare_func ineq)</argsstring>
        <name>stb_dupe_create</name>
        <param>
          <type>stb_hash_func</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>stb_compare_func</type>
          <declname>eq</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>stb_compare_func</type>
          <declname>ineq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8540" column="21" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="8540" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a86a0a06c9a31f86288514ae0db247845" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_dupe_add</definition>
        <argsstring>(stb_dupe *sd, void *item)</argsstring>
        <name>stb_dupe_add</name>
        <param>
          <type><ref refid="structstb__dupe" kindref="compound">stb_dupe</ref> *</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>item</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8542" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="8542" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1aeb118caa6d04f65cc85b3c987bfa4f65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_dupe_finish</definition>
        <argsstring>(stb_dupe *sd)</argsstring>
        <name>stb_dupe_finish</name>
        <param>
          <type><ref refid="structstb__dupe" kindref="compound">stb_dupe</ref> *</type>
          <declname>sd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8543" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="8543" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1adfbb7ff817344f368a740683da39942c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_dupe_numsets</definition>
        <argsstring>(stb_dupe *sd)</argsstring>
        <name>stb_dupe_numsets</name>
        <param>
          <type><ref refid="structstb__dupe" kindref="compound">stb_dupe</ref> *</type>
          <declname>sd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8544" column="16" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="8544" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a59ed4d8499ffe3ca5ffff1077f0eca4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void **</type>
        <definition>STB_EXTERN void ** stb_dupe_set</definition>
        <argsstring>(stb_dupe *sd, int num)</argsstring>
        <name>stb_dupe_set</name>
        <param>
          <type><ref refid="structstb__dupe" kindref="compound">stb_dupe</ref> *</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8545" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="8545" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a695d35c8adb74eabaa10bbfea13b2146" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_dupe_set_count</definition>
        <argsstring>(stb_dupe *sd, int num)</argsstring>
        <name>stb_dupe_set_count</name>
        <param>
          <type><ref refid="structstb__dupe" kindref="compound">stb_dupe</ref> *</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8546" column="16" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="8546" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ab962a6007278a273a711cede9456a180" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN stb_bitset *</type>
        <definition>STB_EXTERN stb_bitset * stb_bitset_new</definition>
        <argsstring>(int value, int len)</argsstring>
        <name>stb_bitset_new</name>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8855" column="24" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="8855" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1aa9722a9a8e0445d1de03bea89a9d9955" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN stb_bitset *</type>
        <definition>STB_EXTERN stb_bitset * stb_bitset_union</definition>
        <argsstring>(stb_bitset *p0, stb_bitset *p1, int len)</argsstring>
        <name>stb_bitset_union</name>
        <param>
          <type>stb_bitset *</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>stb_bitset *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8864" column="24" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="8864" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a0d9dde01c2d91f21a3687672de6473d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int *</type>
        <definition>STB_EXTERN int * stb_bitset_getlist</definition>
        <argsstring>(stb_bitset *out, int start, int end)</argsstring>
        <name>stb_bitset_getlist</name>
        <param>
          <type>stb_bitset *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8866" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="8866" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a9632777cac507055507cc678796271a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_bitset_eq</definition>
        <argsstring>(stb_bitset *p0, stb_bitset *p1, int len)</argsstring>
        <name>stb_bitset_eq</name>
        <param>
          <type>stb_bitset *</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>stb_bitset *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8868" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="8868" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a15d0636adb48641e80d8015badd70748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_bitset_disjoint</definition>
        <argsstring>(stb_bitset *p0, stb_bitset *p1, int len)</argsstring>
        <name>stb_bitset_disjoint</name>
        <param>
          <type>stb_bitset *</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>stb_bitset *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8869" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="8869" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a5ac834f11d6bd5f5dceccc62a3ce2888" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_bitset_disjoint_0</definition>
        <argsstring>(stb_bitset *p0, stb_bitset *p1, int len)</argsstring>
        <name>stb_bitset_disjoint_0</name>
        <param>
          <type>stb_bitset *</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>stb_bitset *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8870" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="8870" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a7d7479f184dfa4113b77a305417529af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_bitset_subset</definition>
        <argsstring>(stb_bitset *bigger, stb_bitset *smaller, int len)</argsstring>
        <name>stb_bitset_subset</name>
        <param>
          <type>stb_bitset *</type>
          <declname>bigger</declname>
        </param>
        <param>
          <type>stb_bitset *</type>
          <declname>smaller</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8871" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="8871" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a59fa76e916eed8fc447cb67446b2b3b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_bitset_unioneq_changed</definition>
        <argsstring>(stb_bitset *p0, stb_bitset *p1, int len)</argsstring>
        <name>stb_bitset_unioneq_changed</name>
        <param>
          <type>stb_bitset *</type>
          <declname>p0</declname>
        </param>
        <param>
          <type>stb_bitset *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8872" column="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="8872" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a70b0e70a80155490909d01474a65470c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_wordwrap</definition>
        <argsstring>(int *pairs, int pair_max, int count, char *str)</argsstring>
        <name>stb_wordwrap</name>
        <param>
          <type>int *</type>
          <declname>pairs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pair_max</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8953" column="16" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="8953" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ae17b0f8259772373232c807056acb95c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int *</type>
        <definition>STB_EXTERN int * stb_wordwrapalloc</definition>
        <argsstring>(int count, char *str)</argsstring>
        <name>stb_wordwrapalloc</name>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="8954" column="16" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="8954" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a585b1600a1fea38ab06c575fc980cb49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_wildmatch</definition>
        <argsstring>(char *expr, char *candidate)</argsstring>
        <name>stb_wildmatch</name>
        <param>
          <type>char *</type>
          <declname>expr</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>candidate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="9069" column="16" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="9069" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a245391a312d02501a8b053dfc7858a90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_wildmatchi</definition>
        <argsstring>(char *expr, char *candidate)</argsstring>
        <name>stb_wildmatchi</name>
        <param>
          <type>char *</type>
          <declname>expr</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>candidate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="9070" column="16" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="9070" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a4f8d48a7b2ff76c1e5ec9e74b04fc07f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_wildfind</definition>
        <argsstring>(char *expr, char *candidate)</argsstring>
        <name>stb_wildfind</name>
        <param>
          <type>char *</type>
          <declname>expr</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>candidate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="9071" column="16" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="9071" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a92917b01f36802596ee0464c6a20d4be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_wildfindi</definition>
        <argsstring>(char *expr, char *candidate)</argsstring>
        <name>stb_wildfindi</name>
        <param>
          <type>char *</type>
          <declname>expr</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>candidate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="9072" column="16" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="9072" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a58609fdd4f273e8e4557b97f964589c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_regex</definition>
        <argsstring>(char *regex, char *candidate)</argsstring>
        <name>stb_regex</name>
        <param>
          <type>char *</type>
          <declname>regex</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>candidate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="9074" column="16" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="9074" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a60a8a7d902f79be2d979bb5c4f4428ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN stb_matcher *</type>
        <definition>STB_EXTERN stb_matcher * stb_regex_matcher</definition>
        <argsstring>(char *regex)</argsstring>
        <name>stb_regex_matcher</name>
        <param>
          <type>char *</type>
          <declname>regex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="9078" column="24" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="9078" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1aa8cf4e0e3550aaf47cd58a79a5359535" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_matcher_match</definition>
        <argsstring>(stb_matcher *m, char *str)</argsstring>
        <name>stb_matcher_match</name>
        <param>
          <type>stb_matcher *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="9079" column="16" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="9079" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a4c59d7202db562dd51d824c275fef056" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_matcher_find</definition>
        <argsstring>(stb_matcher *m, char *str)</argsstring>
        <name>stb_matcher_find</name>
        <param>
          <type>stb_matcher *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="9080" column="16" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="9080" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a5ab00480504f907a7a25fdff0bf0b60d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_matcher_free</definition>
        <argsstring>(stb_matcher *f)</argsstring>
        <name>stb_matcher_free</name>
        <param>
          <type>stb_matcher *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="9081" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="9081" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a1d35cd92c4dd7a46bc48f235ff5f635e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN stb_matcher *</type>
        <definition>STB_EXTERN stb_matcher * stb_lex_matcher</definition>
        <argsstring>(void)</argsstring>
        <name>stb_lex_matcher</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="9083" column="24" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="9083" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1af4bbe47cb2e97191f4c91a6f017df2c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_lex_item</definition>
        <argsstring>(stb_matcher *m, const char *str, int result)</argsstring>
        <name>stb_lex_item</name>
        <param>
          <type>stb_matcher *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="9084" column="16" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="9084" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1af097af1ef8ee69c6a8d72ebd49c26c97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_lex_item_wild</definition>
        <argsstring>(stb_matcher *matcher, const char *regex, int result)</argsstring>
        <name>stb_lex_item_wild</name>
        <param>
          <type>stb_matcher *</type>
          <declname>matcher</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>regex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="9085" column="16" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="9085" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1aac39fef14dd3aafc7f11e834b14bface" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_lex</definition>
        <argsstring>(stb_matcher *m, char *str, int *len)</argsstring>
        <name>stb_lex</name>
        <param>
          <type>stb_matcher *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="9086" column="16" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="9086" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a457d06cd94a811862ec9565ff026d9b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN stb_uint</type>
        <definition>STB_EXTERN stb_uint stb_decompress_length</definition>
        <argsstring>(stb_uchar *input)</argsstring>
        <name>stb_decompress_length</name>
        <param>
          <type>stb_uchar *</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="10367" column="21" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="10367" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a5e60cb0409317c21449e4cd054af6a90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN stb_uint</type>
        <definition>STB_EXTERN stb_uint stb_decompress</definition>
        <argsstring>(stb_uchar *out, stb_uchar *in, stb_uint len)</argsstring>
        <name>stb_decompress</name>
        <param>
          <type>stb_uchar *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>stb_uchar *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>stb_uint</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="10368" column="21" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="10368" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1af343ca3b9c55a79264a3770caf21abb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN stb_uint</type>
        <definition>STB_EXTERN stb_uint stb_compress</definition>
        <argsstring>(stb_uchar *out, stb_uchar *in, stb_uint len)</argsstring>
        <name>stb_compress</name>
        <param>
          <type>stb_uchar *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>stb_uchar *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>stb_uint</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="10369" column="21" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" bodystart="377" bodyend="385" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="10369" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a607a70edbd4a11291bee85d5e6d79853" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_compress_window</definition>
        <argsstring>(int z)</argsstring>
        <name>stb_compress_window</name>
        <param>
          <type>int</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="10370" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="10370" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1aa3c6e8ef6eff4442aab08cc0ea40a503" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_compress_hashsize</definition>
        <argsstring>(unsigned int z)</argsstring>
        <name>stb_compress_hashsize</name>
        <param>
          <type>unsigned int</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="10371" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="10371" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ac7d503aacd622088b9bc33570fc0eacf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_compress_tofile</definition>
        <argsstring>(char *filename, char *in, stb_uint len)</argsstring>
        <name>stb_compress_tofile</name>
        <param>
          <type>char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>stb_uint</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="10373" column="16" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="10373" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a6a58ffc6028bb1f83e08798b81363253" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_compress_intofile</definition>
        <argsstring>(FILE *f, char *input, stb_uint len)</argsstring>
        <name>stb_compress_intofile</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>stb_uint</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="10374" column="16" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="10374" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1aae410559dedbb2eb3a1874f7966984fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN char *</type>
        <definition>STB_EXTERN char * stb_decompress_fromfile</definition>
        <argsstring>(char *filename, stb_uint *len)</argsstring>
        <name>stb_decompress_fromfile</name>
        <param>
          <type>char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>stb_uint *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="10375" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="10375" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a39101bd0005148511172ab84ed88e18d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_compress_stream_start</definition>
        <argsstring>(FILE *f)</argsstring>
        <name>stb_compress_stream_start</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="10377" column="16" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="10377" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a3b22958007daef03ff315fd92e6ce12b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_compress_stream_end</definition>
        <argsstring>(int close)</argsstring>
        <name>stb_compress_stream_end</name>
        <param>
          <type>int</type>
          <declname>close</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="10378" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="10378" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a2c741525eac616806bdf645731ca7643" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_write</definition>
        <argsstring>(char *data, int data_len)</argsstring>
        <name>stb_write</name>
        <param>
          <type>char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>data_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="10379" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="10379" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a9df6f3f9cefd86a12ac50486e9fb7e13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN unsigned int</type>
        <definition>STB_EXTERN unsigned int stb_getc</definition>
        <argsstring>(stbfile *f)</argsstring>
        <name>stb_getc</name>
        <param>
          <type><ref refid="structstbfile" kindref="compound">stbfile</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11060" column="25" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11060" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1aba8e8bd076f4e25a7c0f19061dfbc240" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_putc</definition>
        <argsstring>(stbfile *f, int ch)</argsstring>
        <name>stb_putc</name>
        <param>
          <type><ref refid="structstbfile" kindref="compound">stbfile</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11061" column="16" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11061" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a4644621d4d7e0d55647587b2d502a2ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN unsigned int</type>
        <definition>STB_EXTERN unsigned int stb_getdata</definition>
        <argsstring>(stbfile *f, void *buffer, unsigned int len)</argsstring>
        <name>stb_getdata</name>
        <param>
          <type><ref refid="structstbfile" kindref="compound">stbfile</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11062" column="25" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11062" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a5d7104eb2e310b9883a95e68193fe349" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN unsigned int</type>
        <definition>STB_EXTERN unsigned int stb_putdata</definition>
        <argsstring>(stbfile *f, void *buffer, unsigned int len)</argsstring>
        <name>stb_putdata</name>
        <param>
          <type><ref refid="structstbfile" kindref="compound">stbfile</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11063" column="25" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11063" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a1dcb7e94245936c4b7e477ae97628e2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN unsigned int</type>
        <definition>STB_EXTERN unsigned int stb_tell</definition>
        <argsstring>(stbfile *f)</argsstring>
        <name>stb_tell</name>
        <param>
          <type><ref refid="structstbfile" kindref="compound">stbfile</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11064" column="25" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11064" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a0f47e1ee396b6848a709737e194c292a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN unsigned int</type>
        <definition>STB_EXTERN unsigned int stb_size</definition>
        <argsstring>(stbfile *f)</argsstring>
        <name>stb_size</name>
        <param>
          <type><ref refid="structstbfile" kindref="compound">stbfile</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11065" column="25" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11065" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a7505cbe155fd5efe175da376c7eb0edf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_backpatch</definition>
        <argsstring>(stbfile *f, unsigned int tell, void *buffer, unsigned int len)</argsstring>
        <name>stb_backpatch</name>
        <param>
          <type><ref refid="structstbfile" kindref="compound">stbfile</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>tell</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11066" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11066" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ab0a4d2c81cb77929231d43f33e664e39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_arith_init_encode</definition>
        <argsstring>(stb_arith *a, stbfile *out)</argsstring>
        <name>stb_arith_init_encode</name>
        <param>
          <type><ref refid="structstb__arith" kindref="compound">stb_arith</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structstbfile" kindref="compound">stbfile</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11266" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11266" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a795472b64de8e8e0e4788485f9cb82a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_arith_init_decode</definition>
        <argsstring>(stb_arith *a, stbfile *in)</argsstring>
        <name>stb_arith_init_decode</name>
        <param>
          <type><ref refid="structstb__arith" kindref="compound">stb_arith</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structstbfile" kindref="compound">stbfile</ref> *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11267" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11267" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a77509036241cb9c607d965312fceb477" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN <ref refid="structstbfile" kindref="compound">stbfile</ref> *</type>
        <definition>STB_EXTERN stbfile * stb_arith_encode_close</definition>
        <argsstring>(stb_arith *a)</argsstring>
        <name>stb_arith_encode_close</name>
        <param>
          <type><ref refid="structstb__arith" kindref="compound">stb_arith</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11268" column="20" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11268" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1aded71789f475aefd122bb44e26bc1601" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN <ref refid="structstbfile" kindref="compound">stbfile</ref> *</type>
        <definition>STB_EXTERN stbfile * stb_arith_decode_close</definition>
        <argsstring>(stb_arith *a)</argsstring>
        <name>stb_arith_decode_close</name>
        <param>
          <type><ref refid="structstb__arith" kindref="compound">stb_arith</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11269" column="20" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11269" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a5e78f0b669f707611b3d116a80c663ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_arith_encode</definition>
        <argsstring>(stb_arith *a, unsigned int totalfreq, unsigned int freq, unsigned int cumfreq)</argsstring>
        <name>stb_arith_encode</name>
        <param>
          <type><ref refid="structstb__arith" kindref="compound">stb_arith</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>totalfreq</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>freq</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>cumfreq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11271" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11271" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a66b7faf7a826862041285d2918fb4883" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_arith_encode_log2</definition>
        <argsstring>(stb_arith *a, unsigned int totalfreq2, unsigned int freq, unsigned int cumfreq)</argsstring>
        <name>stb_arith_encode_log2</name>
        <param>
          <type><ref refid="structstb__arith" kindref="compound">stb_arith</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>totalfreq2</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>freq</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>cumfreq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11272" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11272" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a05c9f45c8d7c21c58cefe8c583c30d38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN unsigned int</type>
        <definition>STB_EXTERN unsigned int stb_arith_decode_value</definition>
        <argsstring>(stb_arith *a, unsigned int totalfreq)</argsstring>
        <name>stb_arith_decode_value</name>
        <param>
          <type><ref refid="structstb__arith" kindref="compound">stb_arith</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>totalfreq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11273" column="25" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11273" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a33c0dcc733bfbe32b36103e02c866598" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_arith_decode_advance</definition>
        <argsstring>(stb_arith *a, unsigned int totalfreq, unsigned int freq, unsigned int cumfreq)</argsstring>
        <name>stb_arith_decode_advance</name>
        <param>
          <type><ref refid="structstb__arith" kindref="compound">stb_arith</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>totalfreq</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>freq</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>cumfreq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11274" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11274" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a5e3df6b09f227ff3d94c5e74bf52322e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN unsigned int</type>
        <definition>STB_EXTERN unsigned int stb_arith_decode_value_log2</definition>
        <argsstring>(stb_arith *a, unsigned int totalfreq2)</argsstring>
        <name>stb_arith_decode_value_log2</name>
        <param>
          <type><ref refid="structstb__arith" kindref="compound">stb_arith</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>totalfreq2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11275" column="25" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11275" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a011726872355261501ea3871c50e146f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_arith_decode_advance_log2</definition>
        <argsstring>(stb_arith *a, unsigned int totalfreq2, unsigned int freq, unsigned int cumfreq)</argsstring>
        <name>stb_arith_decode_advance_log2</name>
        <param>
          <type><ref refid="structstb__arith" kindref="compound">stb_arith</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>totalfreq2</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>freq</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>cumfreq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11276" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11276" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a16316e781d41dd9eec9f1d9fed0a7f04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_arith_encode_byte</definition>
        <argsstring>(stb_arith *a, int byte)</argsstring>
        <name>stb_arith_encode_byte</name>
        <param>
          <type><ref refid="structstb__arith" kindref="compound">stb_arith</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>byte</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11278" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11278" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a9b6dc4c9d693d1d48c74155cab5ab997" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_arith_decode_byte</definition>
        <argsstring>(stb_arith *a)</argsstring>
        <name>stb_arith_decode_byte</name>
        <param>
          <type><ref refid="structstb__arith" kindref="compound">stb_arith</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11279" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11279" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ae4418e87a98a26daa8ddb281e4656059" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_thread_cleanup</definition>
        <argsstring>(void)</argsstring>
        <name>stb_thread_cleanup</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11452" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11452" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1abc33b47076eb9a8644266a684a73c727" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_processor_count</definition>
        <argsstring>(void)</argsstring>
        <name>stb_processor_count</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11469" column="16" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11469" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a48399fca0c57e523d3dcec40070988a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_force_uniprocessor</definition>
        <argsstring>(void)</argsstring>
        <name>stb_force_uniprocessor</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11471" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11471" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a647409dd23d74c5a5fcba426b1998e61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_work_numthreads</definition>
        <argsstring>(int n)</argsstring>
        <name>stb_work_numthreads</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11478" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11478" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a5f81668ef511c3b36ffe95208ec53c29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_work_maxunits</definition>
        <argsstring>(int n)</argsstring>
        <name>stb_work_maxunits</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11480" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11480" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a0c68da6b50c7f5f99d5f124d834a90ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_work</definition>
        <argsstring>(stb_thread_func f, void *d, volatile void **return_code)</argsstring>
        <name>stb_work</name>
        <param>
          <type>stb_thread_func</type>
          <declname>f</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>volatile void **</type>
          <declname>return_code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11483" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11483" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a7af999be6e3f603c85b010e8a1d9d16f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_work_reach</definition>
        <argsstring>(stb_thread_func f, void *d, volatile void **return_code, stb_sync rel)</argsstring>
        <name>stb_work_reach</name>
        <param>
          <type>stb_thread_func</type>
          <declname>f</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>volatile void **</type>
          <declname>return_code</declname>
        </param>
        <param>
          <type>stb_sync</type>
          <declname>rel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11485" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11485" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1aa85c493f66157db5bb65eee08a17d108" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_barrier</definition>
        <argsstring>(void)</argsstring>
        <name>stb_barrier</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11489" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11489" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a88518dd97ab58abc04b896d299dd890c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN stb_workqueue *</type>
        <definition>STB_EXTERN stb_workqueue * stb_workq_new</definition>
        <argsstring>(int numthreads, int max_units)</argsstring>
        <name>stb_workq_new</name>
        <param>
          <type>int</type>
          <declname>numthreads</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_units</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11495" column="25" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11495" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a3ebfc35145226f4697fce289c99f070b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN stb_workqueue *</type>
        <definition>STB_EXTERN stb_workqueue * stb_workq_new_flags</definition>
        <argsstring>(int numthreads, int max_units, int no_add_mutex, int no_remove_mutex)</argsstring>
        <name>stb_workq_new_flags</name>
        <param>
          <type>int</type>
          <declname>numthreads</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_units</declname>
        </param>
        <param>
          <type>int</type>
          <declname>no_add_mutex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>no_remove_mutex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11496" column="25" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11496" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a3945c74fb246ecb26a1460a64c4d8da1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_workq_delete</definition>
        <argsstring>(stb_workqueue *q)</argsstring>
        <name>stb_workq_delete</name>
        <param>
          <type>stb_workqueue *</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11497" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11497" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ad47facdf3abe5552ca8889e357adf2f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_workq_numthreads</definition>
        <argsstring>(stb_workqueue *q, int n)</argsstring>
        <name>stb_workq_numthreads</name>
        <param>
          <type>stb_workqueue *</type>
          <declname>q</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11498" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11498" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a830efa9575c5fe540e2851c693ac1039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_workq</definition>
        <argsstring>(stb_workqueue *q, stb_thread_func f, void *d, volatile void **return_code)</argsstring>
        <name>stb_workq</name>
        <param>
          <type>stb_workqueue *</type>
          <declname>q</declname>
        </param>
        <param>
          <type>stb_thread_func</type>
          <declname>f</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>volatile void **</type>
          <declname>return_code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11499" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11499" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ac682788d1868fd79fbd0f917bb9ef692" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_workq_reach</definition>
        <argsstring>(stb_workqueue *q, stb_thread_func f, void *d, volatile void **return_code, stb_sync rel)</argsstring>
        <name>stb_workq_reach</name>
        <param>
          <type>stb_workqueue *</type>
          <declname>q</declname>
        </param>
        <param>
          <type>stb_thread_func</type>
          <declname>f</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>volatile void **</type>
          <declname>return_code</declname>
        </param>
        <param>
          <type>stb_sync</type>
          <declname>rel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11500" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11500" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ad76c1836db68954c38cb2724c77a9c42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_workq_length</definition>
        <argsstring>(stb_workqueue *q)</argsstring>
        <name>stb_workq_length</name>
        <param>
          <type>stb_workqueue *</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11501" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11501" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ac1c7e1601f36a2a0ebcecbcc07cfe07c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN stb_thread</type>
        <definition>STB_EXTERN stb_thread stb_create_thread</definition>
        <argsstring>(stb_thread_func f, void *d)</argsstring>
        <name>stb_create_thread</name>
        <param>
          <type>stb_thread_func</type>
          <declname>f</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11503" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11503" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a7e1aadf702bc75d827eac36f759964ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN stb_thread</type>
        <definition>STB_EXTERN stb_thread stb_create_thread2</definition>
        <argsstring>(stb_thread_func f, void *d, volatile void **return_code, stb_semaphore rel)</argsstring>
        <name>stb_create_thread2</name>
        <param>
          <type>stb_thread_func</type>
          <declname>f</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>volatile void **</type>
          <declname>return_code</declname>
        </param>
        <param>
          <type>stb_semaphore</type>
          <declname>rel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11504" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11504" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1afbc4e4a30bedae6749581e50025c1290" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_destroy_thread</definition>
        <argsstring>(stb_thread t)</argsstring>
        <name>stb_destroy_thread</name>
        <param>
          <type>stb_thread</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11505" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11505" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a567df75c6767a835aef1535014b2d5ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN stb_semaphore</type>
        <definition>STB_EXTERN stb_semaphore stb_sem_new</definition>
        <argsstring>(int max_val)</argsstring>
        <name>stb_sem_new</name>
        <param>
          <type>int</type>
          <declname>max_val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11507" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11507" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1aeb732d932da1503f6984044d96073e8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN stb_semaphore</type>
        <definition>STB_EXTERN stb_semaphore stb_sem_new_extra</definition>
        <argsstring>(int max_val, int start_val)</argsstring>
        <name>stb_sem_new_extra</name>
        <param>
          <type>int</type>
          <declname>max_val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start_val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11508" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11508" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1aab1e42a0e0dd45729479295e2acade72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_sem_delete</definition>
        <argsstring>(stb_semaphore s)</argsstring>
        <name>stb_sem_delete</name>
        <param>
          <type>stb_semaphore</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11509" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11509" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a926597e0d9f0d91695140b5686056d09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_sem_waitfor</definition>
        <argsstring>(stb_semaphore s)</argsstring>
        <name>stb_sem_waitfor</name>
        <param>
          <type>stb_semaphore</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11510" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11510" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1ae6f62c074b9512700f41db4f6643e230" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_sem_release</definition>
        <argsstring>(stb_semaphore s)</argsstring>
        <name>stb_sem_release</name>
        <param>
          <type>stb_semaphore</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11511" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11511" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1aa6b437221d3cc9db0595b109eb80061f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN stb_mutex</type>
        <definition>STB_EXTERN stb_mutex stb_mutex_new</definition>
        <argsstring>(void)</argsstring>
        <name>stb_mutex_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11513" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11513" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a1858fca37b57bcad562ca7a4bb0a87c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_mutex_delete</definition>
        <argsstring>(stb_mutex m)</argsstring>
        <name>stb_mutex_delete</name>
        <param>
          <type>stb_mutex</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11514" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11514" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a6eeb9da476662d6167dc6fabda8a5000" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_mutex_begin</definition>
        <argsstring>(stb_mutex m)</argsstring>
        <name>stb_mutex_begin</name>
        <param>
          <type>stb_mutex</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11515" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11515" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a6ea80f79f26c8df39a380439eb4718ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_mutex_end</definition>
        <argsstring>(stb_mutex m)</argsstring>
        <name>stb_mutex_end</name>
        <param>
          <type>stb_mutex</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11516" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11516" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a26f412006a04f4d264b7d885485b2dd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN stb_sync</type>
        <definition>STB_EXTERN stb_sync stb_sync_new</definition>
        <argsstring>(void)</argsstring>
        <name>stb_sync_new</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11518" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11518" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a0c0ebe5f9e46d9be46bee1910aea40bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_sync_delete</definition>
        <argsstring>(stb_sync s)</argsstring>
        <name>stb_sync_delete</name>
        <param>
          <type>stb_sync</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11519" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11519" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a8c195b37770f1f33569cebd1c3d02843" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_sync_set_target</definition>
        <argsstring>(stb_sync s, int count)</argsstring>
        <name>stb_sync_set_target</name>
        <param>
          <type>stb_sync</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11520" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11520" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1aca490e6a4dc444ca4de7db053e3d8609" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_sync_reach_and_wait</definition>
        <argsstring>(stb_sync s)</argsstring>
        <name>stb_sync_reach_and_wait</name>
        <param>
          <type>stb_sync</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11521" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11521" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a8b71552cd1af9d9db356bffdcbe521a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_sync_reach</definition>
        <argsstring>(stb_sync s)</argsstring>
        <name>stb_sync_reach</name>
        <param>
          <type>stb_sync</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11522" column="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11522" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a8130eaefafda10e44685eac18203a2e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN stb_threadqueue *</type>
        <definition>STB_EXTERN stb_threadqueue * stb_threadq_new</definition>
        <argsstring>(int item_size, int num_items, int many_add, int many_remove)</argsstring>
        <name>stb_threadq_new</name>
        <param>
          <type>int</type>
          <declname>item_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_items</declname>
        </param>
        <param>
          <type>int</type>
          <declname>many_add</declname>
        </param>
        <param>
          <type>int</type>
          <declname>many_remove</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11526" column="28" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11526" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a65012d5b48da5d856c8188a98e6461d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_threadq_delete</definition>
        <argsstring>(stb_threadqueue *tq)</argsstring>
        <name>stb_threadq_delete</name>
        <param>
          <type>stb_threadqueue *</type>
          <declname>tq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11527" column="29" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11527" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a06249cafab55b13d2360137c59232cc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_threadq_get</definition>
        <argsstring>(stb_threadqueue *tq, void *output)</argsstring>
        <name>stb_threadq_get</name>
        <param>
          <type>stb_threadqueue *</type>
          <declname>tq</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11528" column="29" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11528" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1aee3af1bf6281772cb892fab2212ab841" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_threadq_get_block</definition>
        <argsstring>(stb_threadqueue *tq, void *output)</argsstring>
        <name>stb_threadq_get_block</name>
        <param>
          <type>stb_threadqueue *</type>
          <declname>tq</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11529" column="29" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11529" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a672110265cfab01023dbfa2d903df13b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_threadq_add</definition>
        <argsstring>(stb_threadqueue *tq, void *input)</argsstring>
        <name>stb_threadq_add</name>
        <param>
          <type>stb_threadqueue *</type>
          <declname>tq</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11530" column="29" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11530" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a2527a211ebf432edfed06a031d23d8c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN int</type>
        <definition>STB_EXTERN int stb_threadq_add_block</definition>
        <argsstring>(stb_threadqueue *tq, void *input)</argsstring>
        <name>stb_threadq_add_block</name>
        <param>
          <type>stb_threadqueue *</type>
          <declname>tq</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="11532" column="29" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="11532" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="stb_8h_1a6421f93c335ffce87e818618bed90fdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>STB_EXTERN void</type>
        <definition>STB_EXTERN void stb_source_path</definition>
        <argsstring>(char *str)</argsstring>
        <name>stb_source_path</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" line="12874" column="17" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h" declline="12874" declcolumn="17"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>stb.h<sp/>-<sp/>v2.37<sp/>-<sp/>Sean&apos;s<sp/>Tool<sp/>Box<sp/>--<sp/>public<sp/>domain<sp/>--<sp/>http://nothings.org/stb.h</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>no<sp/>warranty<sp/>is<sp/>offered<sp/>or<sp/>implied;<sp/>use<sp/>this<sp/>code<sp/>at<sp/>your<sp/>own<sp/>risk</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/>This<sp/>is<sp/>a<sp/>single<sp/>header<sp/>file<sp/>with<sp/>a<sp/>bunch<sp/>of<sp/>useful<sp/>utilities</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/>for<sp/>getting<sp/>stuff<sp/>done<sp/>in<sp/>C/C++.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/>Documentation:<sp/>http://nothings.org/stb/stb_h.html</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/>Unit<sp/>tests:<sp/><sp/><sp/><sp/>http://nothings.org/stb/stb.c</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>============================================================================</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/><sp/>You<sp/>MUST</highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>STB_DEFINE</highlight></codeline>
<codeline lineno="14"><highlight class="comment"></highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/>in<sp/>EXACTLY<sp/>_one_<sp/>C<sp/>or<sp/>C++<sp/>file<sp/>that<sp/>includes<sp/>this<sp/>header,<sp/>BEFORE<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/>include,<sp/>like<sp/>this:</highlight></codeline>
<codeline lineno="17"><highlight class="comment"></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>STB_DEFINE</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>#include<sp/>&quot;stb.h&quot;</highlight></codeline>
<codeline lineno="20"><highlight class="comment"></highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/><sp/>All<sp/>other<sp/>files<sp/>should<sp/>just<sp/>#include<sp/>&quot;stb.h&quot;<sp/>without<sp/>the<sp/>#define.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>============================================================================</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">Version<sp/>History</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/><sp/>2.36<sp/><sp/><sp/>various<sp/>fixes</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/><sp/>2.35<sp/><sp/><sp/>fix<sp/>clang-cl<sp/>issues<sp/>with<sp/>swprintf</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/><sp/>2.34<sp/><sp/><sp/>fix<sp/>warnings</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/><sp/>2.33<sp/><sp/><sp/>more<sp/>fixes<sp/>to<sp/>random<sp/>numbers</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/>2.32<sp/><sp/><sp/>stb_intcmprev,<sp/>stb_uidict,<sp/>fix<sp/>random<sp/>numbers<sp/>on<sp/>Linux</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/><sp/>2.31<sp/><sp/><sp/>stb_ucharcmp</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/>2.30<sp/><sp/><sp/>MinGW<sp/>fix</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/><sp/>2.29<sp/><sp/><sp/>attempt<sp/>to<sp/>fix<sp/>use<sp/>of<sp/>swprintf()</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/>2.28<sp/><sp/><sp/>various<sp/>new<sp/>functionality</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/>2.27<sp/><sp/><sp/>test<sp/>_WIN32<sp/>not<sp/>WIN32<sp/>in<sp/>STB_THREADS</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/>2.26<sp/><sp/><sp/>various<sp/>warning<sp/>&amp;<sp/>bugfixes</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/>2.25<sp/><sp/><sp/>various<sp/>warning<sp/>&amp;<sp/>bugfixes</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/>2.24<sp/><sp/><sp/>various<sp/>warning<sp/>&amp;<sp/>bugfixes</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/>2.23<sp/><sp/><sp/>fix<sp/>2.22</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/>2.22<sp/><sp/><sp/>64-bit<sp/>fixes<sp/>from<sp/>&apos;!=&apos;;<sp/>fix<sp/>stb_sdict_copy()<sp/>to<sp/>have<sp/>preferred<sp/>name</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/>2.21<sp/><sp/><sp/>utf-8<sp/>decoder<sp/>rejects<sp/>&quot;overlong&quot;<sp/>encodings;<sp/>attempted<sp/>64-bit<sp/>improvements</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/>2.20<sp/><sp/><sp/>fix<sp/>to<sp/>hash<sp/>&quot;copy&quot;<sp/>function--reported<sp/>by<sp/>someone<sp/>with<sp/>handle<sp/>&quot;!=&quot;</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/>2.19<sp/><sp/><sp/>???</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/>2.18<sp/><sp/><sp/>stb_readdir_subdirs_mask</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/>2.17<sp/><sp/><sp/>stb_cfg_dir</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/>2.16<sp/><sp/><sp/>fix<sp/>stb_bgio_,<sp/>add<sp/>stb_bgio_stat();<sp/>begin<sp/>a<sp/>streaming<sp/>wrapper</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/>2.15<sp/><sp/><sp/>upgraded<sp/>hash<sp/>table<sp/>template<sp/>to<sp/>allow:</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>aggregate<sp/>keys<sp/>(explicit<sp/>comparison<sp/>func<sp/>for<sp/>EMPTY<sp/>and<sp/>DEL<sp/>keys)</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>&quot;static&quot;<sp/>implementations<sp/>(so<sp/>they<sp/>can<sp/>be<sp/>culled<sp/>if<sp/>unused)</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/>2.14<sp/><sp/><sp/>stb_mprintf</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/>2.13<sp/><sp/><sp/>reduce<sp/>identifiable<sp/>strings<sp/>in<sp/>STB_NO_STB_STRINGS</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/>2.12<sp/><sp/><sp/>fix<sp/>STB_ONLY<sp/>--<sp/>lots<sp/>of<sp/>uint32s,<sp/>TRUE/FALSE<sp/>things<sp/>had<sp/>crept<sp/>in</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/>2.11<sp/><sp/><sp/>fix<sp/>bug<sp/>in<sp/>stb_dirtree_get()<sp/>which<sp/>caused<sp/>&quot;c://path&quot;<sp/>sorts<sp/>of<sp/>stuff</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/>2.10<sp/><sp/><sp/>STB_F(),<sp/>STB_I()<sp/>inline<sp/>constants<sp/>(also<sp/>KI,KU,KF,KD)</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/>2.09<sp/><sp/><sp/>stb_box_face_vertex_axis_side</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/>2.08<sp/><sp/><sp/>bugfix<sp/>stb_trimwhite()</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/>2.07<sp/><sp/><sp/>colored<sp/>printing<sp/>in<sp/>windows<sp/>(why<sp/>are<sp/>we<sp/>in<sp/>1985?)</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/>2.06<sp/><sp/><sp/>comparison<sp/>functions<sp/>are<sp/>now<sp/>functions-that-return-functions<sp/>and</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accept<sp/>a<sp/>struct-offset<sp/>as<sp/>a<sp/>parameter<sp/>(not<sp/>thread-safe)</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/>2.05<sp/><sp/><sp/>compile<sp/>and<sp/>pass<sp/>tests<sp/>under<sp/>Linux<sp/>(but<sp/>no<sp/>threads);<sp/>thread<sp/>cleanup</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/>2.04<sp/><sp/><sp/>stb_cubic_bezier_1d,<sp/>smoothstep,<sp/>avoid<sp/>dependency<sp/>on<sp/>registry</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/>2.03<sp/><sp/><sp/>?</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/>2.02<sp/><sp/><sp/>remove<sp/>integrated<sp/>documentation</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/>2.01<sp/><sp/><sp/>integrate<sp/>various<sp/>fixes;<sp/>stb_force_uniprocessor</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/>2.00<sp/><sp/><sp/>revised<sp/>stb_dupe<sp/>to<sp/>use<sp/>multiple<sp/>hashes</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/>1.99<sp/><sp/><sp/>stb_charcmp</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/>1.98<sp/><sp/><sp/>stb_arr_deleten,<sp/>stb_arr_insertn</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/>1.97<sp/><sp/><sp/>fix<sp/>stb_newell_normal()</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/>1.96<sp/><sp/><sp/>stb_hash_number()</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/>1.95<sp/><sp/><sp/>hack<sp/>stb__rec_max;<sp/>clean<sp/>up<sp/>recursion<sp/>code<sp/>to<sp/>use<sp/>new<sp/>functions</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/>1.94<sp/><sp/><sp/>stb_dirtree;<sp/>rename<sp/>stb_extra<sp/>to<sp/>stb_ptrmap</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/>1.93<sp/><sp/><sp/>stb_sem_new()<sp/>API<sp/>cleanup<sp/>(no<sp/>blockflag-starts<sp/>blocked;<sp/>use<sp/>&apos;extra&apos;)</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/>1.92<sp/><sp/><sp/>stb_threadqueue--multi<sp/>reader/writer<sp/>queue,<sp/>fixed<sp/>size<sp/>or<sp/>resizeable</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/>1.91<sp/><sp/><sp/>stb_bgio_*<sp/>for<sp/>reading<sp/>disk<sp/>asynchronously</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/>1.90<sp/><sp/><sp/>stb_mutex<sp/>uses<sp/>CRITICAL_REGION;<sp/>new<sp/>stb_sync<sp/>primitive<sp/>for<sp/>thread</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>joining;<sp/>workqueue<sp/>supports<sp/>stb_sync<sp/>instead<sp/>of<sp/>stb_semaphore</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/>1.89<sp/><sp/><sp/>support<sp/>&apos;;&apos;<sp/>in<sp/>constant-string<sp/>wildcards;<sp/>stb_mutex<sp/>wrapper<sp/>(can</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>implement<sp/>with<sp/>EnterCriticalRegion<sp/>eventually)</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/><sp/>1.88<sp/><sp/><sp/>portable<sp/>threading<sp/>API<sp/>(only<sp/>for<sp/>win32<sp/>so<sp/>far);<sp/>worker<sp/>thread<sp/>queue</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/>1.87<sp/><sp/><sp/>fix<sp/>wildcard<sp/>handling<sp/>in<sp/>stb_readdir_recursive</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/>1.86<sp/><sp/><sp/>support<sp/>&apos;;&apos;<sp/>in<sp/>wildcards</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/>1.85<sp/><sp/><sp/>make<sp/>stb_regex<sp/>work<sp/>with<sp/>non-constant<sp/>strings;</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beginnings<sp/>of<sp/>stb_introspect()</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/>1.84<sp/><sp/><sp/>(forgot<sp/>to<sp/>make<sp/>notes)</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/>1.83<sp/><sp/><sp/>whoops,<sp/>stb_keep_if_different<sp/>wasn&apos;t<sp/>deleting<sp/>the<sp/>temp<sp/>file</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/>1.82<sp/><sp/><sp/>bring<sp/>back<sp/>stb_compress<sp/>from<sp/>stb_file.h<sp/>for<sp/>cmirror</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/>1.81<sp/><sp/><sp/>various<sp/>bugfixes,<sp/>STB_FASTMALLOC_INIT<sp/>inits<sp/>FASTMALLOC<sp/>in<sp/>release</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/>1.80<sp/><sp/><sp/>stb_readdir<sp/>returns<sp/>utf8;<sp/>write<sp/>own<sp/>utf8-utf16<sp/>because<sp/>lib<sp/>was<sp/>wrong</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/><sp/>1.79<sp/><sp/><sp/>stb_write</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/>1.78<sp/><sp/><sp/>calloc()<sp/>support<sp/>for<sp/>malloc<sp/>wrapper,<sp/>STB_FASTMALLOC</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/><sp/><sp/>1.77<sp/><sp/><sp/>STB_FASTMALLOC</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/><sp/>1.76<sp/><sp/><sp/>STB_STUA<sp/>-<sp/>Lua-like<sp/>language;<sp/>(stb_image,<sp/>stb_csample,<sp/>stb_bilinear)</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/><sp/>1.75<sp/><sp/><sp/>alloc/free<sp/>array<sp/>of<sp/>blocks;<sp/>stb_hheap<sp/>bug;<sp/>a<sp/>few<sp/>stb_ps_<sp/>funcs;</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash*getkey,<sp/>hash*copy;<sp/>stb_bitset;<sp/>stb_strnicmp;<sp/>bugfix<sp/>stb_bst</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/>1.74<sp/><sp/><sp/>stb_replaceinplace;<sp/>use<sp/>stdlib<sp/>C<sp/>function<sp/>to<sp/>convert<sp/>utf8<sp/>to<sp/>UTF-16</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/>1.73<sp/><sp/><sp/>fix<sp/>performance<sp/>bug<sp/>&amp;<sp/>leak<sp/>in<sp/>stb_ischar<sp/>(C++<sp/>port<sp/>lost<sp/>a<sp/>&apos;static&apos;)</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/>1.72<sp/><sp/><sp/>remove<sp/>stb_block,<sp/>stb_block_manager,<sp/>stb_decompress<sp/>(to<sp/>stb_file.h)</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/><sp/>1.71<sp/><sp/><sp/>stb_trimwhite,<sp/>stb_tokens_nested,<sp/>etc.</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/>1.70<sp/><sp/><sp/>back<sp/>out<sp/>1.69<sp/>because<sp/>it<sp/>might<sp/>problemize<sp/>mixed<sp/>builds;<sp/>stb_filec()</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/>1.69<sp/><sp/><sp/>(stb_file<sp/>returns<sp/>&apos;char<sp/>*&apos;<sp/>in<sp/>C++)</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/>1.68<sp/><sp/><sp/>add<sp/>a<sp/>special<sp/>&apos;tree<sp/>root&apos;<sp/>data<sp/>type<sp/>for<sp/>stb_bst;<sp/>stb_arr_end</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/>1.67<sp/><sp/><sp/>full<sp/>C++<sp/>port.<sp/>(stb_block_manager)</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/>1.66<sp/><sp/><sp/>stb_newell_normal</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/>1.65<sp/><sp/><sp/>stb_lex_item_wild<sp/>--<sp/>allow<sp/>wildcard<sp/>items<sp/>which<sp/>MUST<sp/>match<sp/>entirely</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/>1.64<sp/><sp/><sp/>stb_data</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/><sp/>1.63<sp/><sp/><sp/>stb_log_name</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/>1.62<sp/><sp/><sp/>stb_define_sort;<sp/>C++<sp/>cleanup</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/>1.61<sp/><sp/><sp/>stb_hash_fast<sp/>--<sp/>Paul<sp/>Hsieh&apos;s<sp/>hash<sp/>function<sp/>(beats<sp/>Bob<sp/>Jenkins&apos;?)</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/>1.60<sp/><sp/><sp/>stb_delete_directory_recursive</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/>1.59<sp/><sp/><sp/>stb_readdir_recursive</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/>1.58<sp/><sp/><sp/>stb_bst<sp/>variant<sp/>with<sp/>parent<sp/>pointer<sp/>for<sp/>O(1)<sp/>iteration,<sp/>not<sp/>O(log<sp/>N)</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/><sp/>1.57<sp/><sp/><sp/>replace<sp/>LCG<sp/>random<sp/>with<sp/>Mersenne<sp/>Twister<sp/>(found<sp/>a<sp/>public<sp/>domain<sp/>one)</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/><sp/>1.56<sp/><sp/><sp/>stb_perfect_hash,<sp/>stb_ischar,<sp/>stb_regex</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/><sp/><sp/>1.55<sp/><sp/><sp/>new<sp/>stb_bst<sp/>API<sp/>allows<sp/>multiple<sp/>BSTs<sp/>per<sp/>node<sp/>(e.g.<sp/>secondary<sp/>keys)</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/>1.54<sp/><sp/><sp/>bugfix:<sp/>stb_define_hash,<sp/>stb_wildmatch,<sp/>regexp</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/>1.53<sp/><sp/><sp/>stb_define_hash;<sp/>recoded<sp/>stb_extra,<sp/>stb_sdict<sp/>use<sp/>it</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/>1.52<sp/><sp/><sp/>stb_rand_define,<sp/>stb_bst,<sp/>stb_reverse</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/>1.51<sp/><sp/><sp/>fix<sp/>&apos;stb_arr_setlen(NULL,<sp/>0)&apos;</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/>1.50<sp/><sp/><sp/>stb_wordwrap</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/>1.49<sp/><sp/><sp/>minor<sp/>improvements<sp/>to<sp/>enable<sp/>the<sp/>scripting<sp/>language</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/>1.48<sp/><sp/><sp/>better<sp/>approach<sp/>for<sp/>stb_arr<sp/>using<sp/>stb_malloc;<sp/>more<sp/>invasive,<sp/>clearer</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/>1.47<sp/><sp/><sp/>stb_lex<sp/>(lexes<sp/>stb.h<sp/>at<sp/>1.5ML/s<sp/>on<sp/>3Ghz<sp/>P4;<sp/>60/70%<sp/>of<sp/>optimal/flex)</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/>1.46<sp/><sp/><sp/>stb_wrapper_*,<sp/>STB_MALLOC_WRAPPER</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/><sp/>1.45<sp/><sp/><sp/>lightly<sp/>tested<sp/>DFA<sp/>acceleration<sp/>of<sp/>regexp<sp/>searching</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/>1.44<sp/><sp/><sp/>wildcard<sp/>matching<sp/>&amp;<sp/>searching;<sp/>regexp<sp/>matching<sp/>&amp;<sp/>searching</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/><sp/>1.43<sp/><sp/><sp/>stb_temp</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/><sp/>1.42<sp/><sp/><sp/>allow<sp/>stb_arr<sp/>to<sp/>use<sp/>stb_malloc/realloc;<sp/>note<sp/>this<sp/>is<sp/>global</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/><sp/>1.41<sp/><sp/><sp/>make<sp/>it<sp/>compile<sp/>in<sp/>C++;<sp/>(disable<sp/>stb_arr<sp/>in<sp/>C++)</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/><sp/>1.40<sp/><sp/><sp/>stb_dupe<sp/>tweak;<sp/>stb_swap;<sp/>stb_substr</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/><sp/>1.39<sp/><sp/><sp/>stb_dupe;<sp/>improve<sp/>stb_file_max<sp/>to<sp/>be<sp/>less<sp/>stupid</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/>1.38<sp/><sp/><sp/>stb_sha1_file:<sp/>generate<sp/>sha1<sp/>for<sp/>file,<sp/>even<sp/>&gt;<sp/>4GB</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/>1.37<sp/><sp/><sp/>stb_file_max;<sp/>partial<sp/>support<sp/>for<sp/>utf8<sp/>filenames<sp/>in<sp/>Windows</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/>1.36<sp/><sp/><sp/>remove<sp/>STB__NO_PREFIX<sp/>-<sp/>poor<sp/>interaction<sp/>with<sp/>IDE,<sp/>not<sp/>worth<sp/>it</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>streamline<sp/>stb_arr<sp/>to<sp/>make<sp/>it<sp/>separately<sp/>publishable</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/><sp/>1.35<sp/><sp/><sp/>bugfixes<sp/>for<sp/>stb_sdict,<sp/>stb_malloc(0),<sp/>stristr</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/><sp/>1.34<sp/><sp/><sp/>(streaming<sp/>interfaces<sp/>for<sp/>stb_compress)</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/><sp/>1.33<sp/><sp/><sp/>stb_alloc;<sp/>bug<sp/>in<sp/>stb_getopt;<sp/>remove<sp/>stb_overflow</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/>1.32<sp/><sp/><sp/>(stb_compress<sp/>returns,<sp/>smaller&amp;faster;<sp/>encode<sp/>window<sp/>&amp;<sp/>64-bit<sp/>len)</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/>1.31<sp/><sp/><sp/>stb_prefix_count</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/>1.30<sp/><sp/><sp/>(STB__NO_PREFIX<sp/>-<sp/>remove<sp/>stb_<sp/>prefixes<sp/>for<sp/>personal<sp/>projects)</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/>1.29<sp/><sp/><sp/>stb_fput_varlen64,<sp/>etc.</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/>1.28<sp/><sp/><sp/>stb_sha1</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/>1.27<sp/><sp/><sp/>?</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/>1.26<sp/><sp/><sp/>stb_extra</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/>1.25<sp/><sp/><sp/>?</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/><sp/>1.24<sp/><sp/><sp/>stb_copyfile</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/><sp/>1.23<sp/><sp/><sp/>stb_readdir</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/><sp/>1.22<sp/><sp/><sp/>?</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/><sp/>1.21<sp/><sp/><sp/>?</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/><sp/>1.20<sp/><sp/><sp/>?</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/>1.19<sp/><sp/><sp/>?</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/>1.18<sp/><sp/><sp/>?</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/>1.17<sp/><sp/><sp/>?</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/><sp/>1.16<sp/><sp/><sp/>?</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/><sp/>1.15<sp/><sp/><sp/>stb_fixpath,<sp/>stb_splitpath,<sp/>stb_strchr2</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/><sp/>1.14<sp/><sp/><sp/>stb_arr</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/><sp/>1.13<sp/><sp/><sp/>?stb,<sp/>stb_log,<sp/>stb_fatal</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/><sp/>1.12<sp/><sp/><sp/>?stb_hash2</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/><sp/>1.11<sp/><sp/><sp/>miniML</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/><sp/>1.10<sp/><sp/><sp/>stb_crc32,<sp/>stb_adler32</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/>1.09<sp/><sp/><sp/>stb_sdict</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/><sp/>1.08<sp/><sp/><sp/>stb_bitreverse,<sp/>stb_ispow2,<sp/>stb_big32</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_fopen,<sp/>stb_fput_varlen,<sp/>stb_fput_ranged</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_fcmp,<sp/>stb_feq</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/><sp/>1.07<sp/><sp/><sp/>(stb_encompress)</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/>1.06<sp/><sp/><sp/>stb_compress</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/><sp/><sp/>1.05<sp/><sp/><sp/>stb_tokens,<sp/>(stb_hheap)</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/><sp/>1.04<sp/><sp/><sp/>stb_rand</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/><sp/>1.03<sp/><sp/><sp/>?(s-strings)</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/><sp/>1.02<sp/><sp/><sp/>?stb_filelen,<sp/>stb_tokens</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/><sp/>1.01<sp/><sp/><sp/>stb_tolower</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/><sp/>1.00<sp/><sp/><sp/>stb_hash,<sp/>stb_intcmp</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_file,<sp/>stb_stringfile,<sp/>stb_fgets</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_prefix,<sp/>stb_strlower,<sp/>stb_strtok</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_image</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(stb_array),<sp/>(stb_arena)</highlight></codeline>
<codeline lineno="177"><highlight class="comment"></highlight></codeline>
<codeline lineno="178"><highlight class="comment">Parenthesized<sp/>items<sp/>have<sp/>since<sp/>been<sp/>removed.</highlight></codeline>
<codeline lineno="179"><highlight class="comment"></highlight></codeline>
<codeline lineno="180"><highlight class="comment">LICENSE</highlight></codeline>
<codeline lineno="181"><highlight class="comment"></highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>See<sp/>end<sp/>of<sp/>file<sp/>for<sp/>license<sp/>information.</highlight></codeline>
<codeline lineno="183"><highlight class="comment"></highlight></codeline>
<codeline lineno="184"><highlight class="comment">CREDITS</highlight></codeline>
<codeline lineno="185"><highlight class="comment"></highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>Written<sp/>by<sp/>Sean<sp/>Barrett.</highlight></codeline>
<codeline lineno="187"><highlight class="comment"></highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>Fixes:</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/>Philipp<sp/>Wiesemann</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/><sp/>Robert<sp/>Nix</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/><sp/>r-lyeh</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/><sp/>blackpawn</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/>github:Mojofreem</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/><sp/>Ryan<sp/>Whitworth</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/><sp/>Vincent<sp/>Isambart</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/><sp/>Mike<sp/>Sartain</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/>Eugene<sp/>Opalev</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/>Tim<sp/>Sjostrand</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/><sp/>github:infatum</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/><sp/>Dave<sp/>Butler<sp/>(Croepha)</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/><sp/>Ethan<sp/>Lee<sp/>(flibitijibibo)</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/><sp/>Brian<sp/>Collins</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/><sp/>Kyle<sp/>Langley</highlight></codeline>
<codeline lineno="204"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB__INCLUDE_STB_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__INCLUDE_STB_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_VERSION<sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_INTROSPECT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE_THREADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>STB_THREADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>STB_THREADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN32)<sp/>&amp;&amp;<sp/>!defined(__MINGW32__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>_CRT_SECURE_NO_WARNINGS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>_CRT_SECURE_NO_WARNINGS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>_CRT_NONSTDC_NO_DEPRECATE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>_CRT_NONSTDC_NO_DEPRECATE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>_CRT_NON_CONFORMING_SWPRINTFS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>_CRT_NON_CONFORMING_SWPRINTFS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#if<sp/>!defined(_MSC_VER)<sp/>||<sp/>_MSC_VER<sp/>&gt;<sp/>1700</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#include<sp/>&lt;intrin.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>_BitScanReverse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stdlib<sp/>could<sp/>have<sp/>min/max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>FILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stb_define_hash<sp/>needs<sp/>memcpy/memset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stb_dirtree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__MINGW32__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#include<sp/>&lt;fcntl.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>O_RDWR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_PERSONAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Bool;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>False<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>True<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_MALLOC_WRAPPER_PAGED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>STB_MALLOC_WRAPPER_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_MALLOC_WRAPPER_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>STB_MALLOC_WRAPPER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_MALLOC_WRAPPER_FASTMALLOC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>STB_FASTMALLOC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>STB_MALLOC_WRAPPER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_FASTMALLOC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#undef<sp/>STB_FASTMALLOC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#include<sp/>&lt;io.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>_mktemp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#include<sp/>&lt;direct.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>_rmdir</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>stat()/_stat()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>stat()/_stat()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_min(a,b)<sp/><sp/><sp/>((a)<sp/>&lt;<sp/>(b)<sp/>?<sp/>(a)<sp/>:<sp/>(b))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_max(a,b)<sp/><sp/><sp/>((a)<sp/>&gt;<sp/>(b)<sp/>?<sp/>(a)<sp/>:<sp/>(b))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#if<sp/>!defined(__cplusplus)<sp/>&amp;&amp;<sp/>!defined(min)<sp/>&amp;&amp;<sp/>!defined(max)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>#define<sp/>min(x,y)<sp/>stb_min(x,y)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>#define<sp/>max(x,y)<sp/>stb_max(x,y)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>M_PI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>#define<sp/>M_PI<sp/><sp/>3.14159265358979323846f</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>TRUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>#define<sp/>TRUE<sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>#define<sp/>FALSE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>deg2rad</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>deg2rad(a)<sp/><sp/>((a)*(M_PI/180))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>rad2deg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>rad2deg(a)<sp/><sp/>((a)*(180/M_PI))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>swap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>swap(TYPE,a,b)<sp/><sp/>\</highlight></codeline>
<codeline lineno="316"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/>TYPE<sp/>stb__t;<sp/>stb__t<sp/>=<sp/>(a);<sp/>(a)<sp/>=<sp/>(b);<sp/>(b)<sp/>=<sp/>stb__t;<sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>uint8<sp/>;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/>int8<sp/>;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>uint16;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/>int16;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>defined(STB_USE_LONG_FOR_32_BIT_INT)<sp/>||<sp/>defined(STB_LONG32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/>uint32;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/>int32;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>uint32;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>int32;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>uchar<sp/>;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>ushort;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="group__core__precision_1ga4fd29415871152bfb5abd588334147c8" kindref="member">uint</ref><sp/><sp/>;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/>ulong<sp/>;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>produce<sp/>compile<sp/>errors<sp/>if<sp/>the<sp/>sizes<sp/>aren&apos;t<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>stb__testsize16[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int16)==2];</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>stb__testsize32[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32)==4];</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_TRUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>STB_TRUE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>STB_FALSE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>we&apos;re<sp/>STB_ONLY,<sp/>can&apos;t<sp/>rely<sp/>on<sp/>uint32<sp/>or<sp/>even<sp/>uint,<sp/>so<sp/>all<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="comment">//<sp/>variables<sp/>we&apos;ll<sp/>use<sp/>herein<sp/>need<sp/>typenames<sp/>prefixed<sp/>with<sp/>&apos;stb&apos;:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>stb_uchar;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>stb_uint8;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>stb_uint;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>stb_uint16;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>stb_int16;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>stb_int8;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(STB_USE_LONG_FOR_32_BIT_INT)<sp/>||<sp/>defined(STB_LONG32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/>stb_uint32;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/>stb_int32;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>stb_uint32;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>stb_int32;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>stb__testsize2_16[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stb_uint16)==2<sp/>?<sp/>1<sp/>:<sp/>-1];</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>stb__testsize2_32[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stb_uint32)==4<sp/>?<sp/>1<sp/>:<sp/>-1];</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>__int64<sp/>stb_uint64;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__int64<sp/>stb_int64;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>STB_IMM_UINT64(literalui64)<sp/>(literalui64##ui64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>STB_IMM_INT64(literali64)<sp/>(literali64##i64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>??</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>stb_uint64;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>stb_int64;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>STB_IMM_UINT64(literalui64)<sp/>(literalui64##ULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>STB_IMM_INT64(literali64)<sp/>(literali64##LL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>stb__testsize2_64[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stb_uint64)==8<sp/>?<sp/>1<sp/>:<sp/>-1];</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="comment">//<sp/>add<sp/>platform-specific<sp/>ways<sp/>of<sp/>checking<sp/>for<sp/>sizeof(char*)<sp/>==<sp/>8,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>make<sp/>those<sp/>define<sp/>STB_PTR64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN64)<sp/>||<sp/>defined(__x86_64__)<sp/>||<sp/>defined(__ia64__)<sp/>||<sp/>defined(__LP64__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>STB_PTR64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_PTR64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>stb__testsize2_ptr[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>==<sp/>8];</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>stb_uint64<sp/>stb_uinta;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>stb_int64<sp/><sp/>stb_inta;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>stb__testsize2_ptr[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>==<sp/>4];</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>stb_uint32<sp/>stb_uinta;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>stb_int32<sp/><sp/>stb_inta;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>stb__testsize2_uinta[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stb_uinta)==</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>?<sp/>1<sp/>:<sp/>-1];</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>so,<sp/>we<sp/>should<sp/>define<sp/>an<sp/>int<sp/>type<sp/>that<sp/>is<sp/>the<sp/>pointer<sp/>size.<sp/>until<sp/>then,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="comment">//<sp/>we&apos;ll<sp/>have<sp/>to<sp/>make<sp/>do<sp/>with<sp/>this<sp/>(which<sp/>is<sp/>not<sp/>the<sp/>same<sp/>at<sp/>all!)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399" refid="unionstb__uintptr" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal">{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>p;</highlight></codeline>
<codeline lineno="403"><highlight class="normal">}<sp/><ref refid="unionstb__uintptr" kindref="compound">stb_uintptr</ref>;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>STB_EXTERN<sp/><sp/><sp/>extern<sp/>&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>STB_EXTERN<sp/><sp/><sp/>extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>well-known<sp/>debug<sp/>defines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DEBUG)<sp/>||<sp/>defined(_DEBUG)<sp/>||<sp/>defined(DBG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>STB_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C<sp/>library<sp/>function<sp/>platform<sp/>handling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN32)<sp/>&amp;&amp;<sp/><sp/>defined(__STDC_WANT_SECURE_LIB__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FILE<sp/>*<sp/>stb_p_fopen(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mode)</highlight></codeline>
<codeline lineno="432"><highlight class="normal">{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*f;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>==<sp/>fopen_s(&amp;f,<sp/>filename,<sp/>mode))</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FILE<sp/>*<sp/>stb_p_wfopen(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*mode)</highlight></codeline>
<codeline lineno="440"><highlight class="normal">{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*f;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>==<sp/>_wfopen_s(&amp;f,<sp/>filename,<sp/>mode))</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb_p_strcpy_s(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*b)</highlight></codeline>
<codeline lineno="448"><highlight class="normal">{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/>strcpy_s(a,size,b);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb_p_strncpy_s(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*b,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count)</highlight></codeline>
<codeline lineno="453"><highlight class="normal">{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/>strncpy_s(a,size,b,count);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_p_mktemp(s)<sp/><sp/>(_mktemp_s(s,<sp/>strlen(s)+1)<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_p_sprintf<sp/><sp/><sp/><sp/>sprintf_s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_p_size(x)<sp/><sp/><sp/><sp/>,(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_p_fopen<sp/><sp/><sp/><sp/><sp/><sp/>fopen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_p_wfopen<sp/><sp/><sp/><sp/><sp/>_wfopen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_p_strcpy_s(a,s,b)<sp/><sp/><sp/><sp/><sp/>strcpy(a,b)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_p_strncpy_s(a,s,b,c)<sp/><sp/>strncpy(a,b,c)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_p_mktemp(s)<sp/><sp/>(mktemp(s)<sp/>!=<sp/>NULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_p_sprintf<sp/><sp/><sp/><sp/>sprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_p_size(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_p_vsnprintf<sp/><sp/>_vsnprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_p_vsnprintf<sp/><sp/>vsnprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN32)<sp/>&amp;&amp;<sp/>(_MSC_VER<sp/>&gt;=<sp/>1300)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_p_stricmp<sp/><sp/><sp/><sp/>_stricmp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_p_strnicmp<sp/><sp/><sp/>_strnicmp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_p_strdup<sp/><sp/><sp/><sp/><sp/>_strdup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_p_strdup<sp/><sp/><sp/><sp/><sp/>strdup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_p_stricmp<sp/><sp/><sp/><sp/>stricmp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_p_strnicmp<sp/><sp/><sp/>strnicmp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_wrapper_malloc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*newp,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="489"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_wrapper_free(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*oldp,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="490"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_wrapper_realloc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*oldp,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*newp,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="491"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_wrapper_calloc(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="492"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_wrapper_listall(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*func)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line));</highlight></codeline>
<codeline lineno="493"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_wrapper_dump(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename);</highlight></codeline>
<codeline lineno="494"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>stb_wrapper_allocsize(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*oldp);</highlight></codeline>
<codeline lineno="495"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_wrapper_check(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*oldp);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>a<sp/>special<sp/>function<sp/>used<sp/>inside<sp/>malloc<sp/>wrapper</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>do<sp/>allocations<sp/>that<sp/>aren&apos;t<sp/>tracked<sp/>(to<sp/>avoid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reentrancy).<sp/>Of<sp/>course<sp/>if<sp/>someone<sp/>_else_<sp/>wraps<sp/>realloc,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>breaks,<sp/>but<sp/>if<sp/>they&apos;re<sp/>doing<sp/>that<sp/>AND<sp/>the<sp/>malloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="comment">//<sp/>wrapper<sp/>they<sp/>need<sp/>to<sp/>explicitly<sp/>check<sp/>for<sp/>reentrancy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="comment">//<sp/>only<sp/>define<sp/>realloc_raw()<sp/>and<sp/>we<sp/>do<sp/>realloc(NULL,sz)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>malloc()<sp/>and<sp/>realloc(p,0)<sp/>for<sp/>free().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>stb__realloc_raw(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sz)</highlight></codeline>
<codeline lineno="507"><highlight class="normal">{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>malloc(sz);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sz<sp/>==<sp/>0)<sp/><sp/><sp/>{<sp/>free(p);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>realloc(p,sz);</highlight></codeline>
<codeline lineno="511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>stb_smalloc(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz);</highlight></codeline>
<codeline lineno="516"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>stb_sfree(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p);</highlight></codeline>
<codeline lineno="517"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>stb_srealloc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz);</highlight></codeline>
<codeline lineno="518"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>stb_scalloc(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz);</highlight></codeline>
<codeline lineno="519"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>stb_sstrdup(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_FASTMALLOC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>malloc<sp/><sp/>stb_smalloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>free<sp/><sp/><sp/><sp/>stb_sfree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>realloc<sp/>stb_srealloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>strdup<sp/><sp/>stb_sstrdup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>calloc<sp/><sp/>stb_scalloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_MALLOC_ALLCHECK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>stb__check(p)<sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>STB_MALLOC_WRAPPER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#error<sp/>STB_MALLOC_ALLCHECK<sp/>requires<sp/>STB_MALLOC_WRAPPER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>stb__check(p)<sp/>stb_mcheck(p)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_MALLOC_WRAPPER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/>STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>stb__malloc(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/>STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>stb__realloc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/>STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>stb__calloc(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/>STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>stb__free(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/>STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>stb__strdup(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/>STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>stb_malloc_checkall(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/>STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>stb_malloc_check_counter(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>init_delay,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rep_delay);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>STB_MALLOC_WRAPPER_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>stb_mcheck(p)<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>stb_mcheck(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>STB_MALLOC_WRAPPER_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>STB__PAD<sp/><sp/><sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>STB__BIAS<sp/><sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>STB__SIG<sp/><sp/><sp/>0x51b01234</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>STB__FIXSIZE(sz)<sp/><sp/>(((sz+3)<sp/>&amp;<sp/>~3)<sp/>+<sp/>STB__PAD)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>STB__ptr(x,y)<sp/><sp/><sp/>((char<sp/>*)<sp/>(x)<sp/>+<sp/>(y))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>STB__ptr(x,y)<sp/><sp/><sp/>(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>STB__FIXSIZE(sz)<sp/><sp/>(sz)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>STB_MALLOC_WRAPPER_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_mcheck(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sz;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>p)<sp/>-<sp/>STB__BIAS;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sz<sp/>=<sp/>*<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>p;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(*<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>STB__ptr(p,4)<sp/>==<sp/>STB__SIG);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(*<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>STB__ptr(p,8)<sp/>==<sp/>STB__SIG);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(*<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>STB__ptr(p,12)<sp/>==<sp/>STB__SIG);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(*<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>STB__ptr(p,sz-4)<sp/>==<sp/>STB__SIG+1);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(*<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>STB__ptr(p,sz-8)<sp/>==<sp/>STB__SIG+1);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(*<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>STB__ptr(p,sz-12)<sp/>==<sp/>STB__SIG+1);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(*<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>STB__ptr(p,sz-16)<sp/>==<sp/>STB__SIG+1);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_wrapper_check(STB__ptr(p,<sp/>STB__BIAS));</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__check2(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line)</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_mcheck(p);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_malloc_checkall(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_wrapper_listall(stb__check2);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_malloc_checkall(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__malloc_wait=(1<sp/>&lt;&lt;<sp/>30),<sp/>stb__malloc_next_wait<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>30),<sp/>stb__malloc_iter;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_malloc_check_counter(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>init_delay,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rep_delay)</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__malloc_wait<sp/>=<sp/>init_delay;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__malloc_next_wait<sp/>=<sp/>rep_delay;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_mcheck_all(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>STB_MALLOC_WRAPPER_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++stb__malloc_iter;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--stb__malloc_wait<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_malloc_checkall();</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__malloc_wait<sp/>=<sp/>stb__malloc_next_wait;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>STB_MALLOC_WRAPPER_PAGED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>STB__WINDOWS_PAGE<sp/>(1<sp/>&lt;&lt;<sp/>12)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>_WINDOWS_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/>STB_EXTERN<sp/>__declspec(dllimport)<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>__stdcall<sp/>VirtualAlloc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>protect);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/>STB_EXTERN<sp/>__declspec(dllimport)<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>__stdcall<sp/>VirtualFree(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>freetype);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb__malloc_final(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz)</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>STB_MALLOC_WRAPPER_PAGED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>aligned<sp/>=<sp/>(sz<sp/>+<sp/>STB__WINDOWS_PAGE<sp/>-<sp/>1)<sp/>&amp;<sp/>~(STB__WINDOWS_PAGE-1);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>VirtualAlloc(NULL,<sp/>aligned<sp/>+<sp/>STB__WINDOWS_PAGE,<sp/>0x2000,<sp/>0x04);<sp/></highlight><highlight class="comment">//<sp/>RESERVE,<sp/>READWRITE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VirtualAlloc(p,<sp/>aligned,<sp/><sp/><sp/>0x1000,<sp/>0x04);<sp/></highlight><highlight class="comment">//<sp/>COMMIT,<sp/>READWRITE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>malloc(sz);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__free_final(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>STB_MALLOC_WRAPPER_PAGED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VirtualFree(p,<sp/>0,<sp/>0x8000);<sp/></highlight><highlight class="comment">//<sp/>RELEASE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(p);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__malloc_failure;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>STB_MALLOC_WRAPPER_PAGED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb__realloc_final(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>old_sz)</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*q<sp/>=<sp/>stb__malloc_final(sz);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>++stb__malloc_failure,<sp/>q;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>deal<sp/>with<sp/>p<sp/>being<sp/>smaller!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(q,<sp/>p,<sp/>sz<sp/>&lt;<sp/>old_sz<sp/>?<sp/>sz<sp/>:<sp/>old_sz);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__free_final(p);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>q;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__free(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line)</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_mcheck_all();</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>STB_MALLOC_WRAPPER_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_mcheck(p);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_wrapper_free(p,file,line);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>STB_MALLOC_WRAPPER_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>STB__ptr(p,-STB__BIAS);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>STB__ptr(p,0)<sp/>=<sp/>0xdeadbeef;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>STB__ptr(p,4)<sp/>=<sp/>0xdeadbeef;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>STB__ptr(p,8)<sp/>=<sp/>0xdeadbeef;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>STB__ptr(p,12)<sp/>=<sp/>0xdeadbeef;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__free_final(p);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>stb__malloc(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line)</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_mcheck_all();</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sz<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>stb__malloc_final(STB__FIXSIZE(sz));</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/>p<sp/>=<sp/>stb__malloc_final(STB__FIXSIZE(sz));</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/>p<sp/>=<sp/>stb__malloc_final(STB__FIXSIZE(sz));</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++stb__malloc_failure;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>STB_MALLOC_WRAPPER_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_malloc_checkall();</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>STB_MALLOC_WRAPPER_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>STB__ptr(p,0)<sp/>=<sp/>STB__FIXSIZE(sz);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>STB__ptr(p,4)<sp/>=<sp/>STB__SIG;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>STB__ptr(p,8)<sp/>=<sp/>STB__SIG;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>STB__ptr(p,12)<sp/>=<sp/>STB__SIG;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>STB__ptr(p,STB__FIXSIZE(sz)-4)<sp/>=<sp/>STB__SIG+1;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>STB__ptr(p,STB__FIXSIZE(sz)-8)<sp/>=<sp/>STB__SIG+1;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>STB__ptr(p,STB__FIXSIZE(sz)-12)<sp/>=<sp/>STB__SIG+1;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>STB__ptr(p,STB__FIXSIZE(sz)-16)<sp/>=<sp/>STB__SIG+1;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>STB__ptr(p,<sp/>STB__BIAS);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_wrapper_malloc(p,sz,file,line);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>stb__realloc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line)</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*q;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_mcheck_all();</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb__malloc(sz,file,line);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sz<sp/>==<sp/>0<sp/><sp/>)<sp/>{<sp/>stb__free(p,file,line);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/>}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>STB_MALLOC_WRAPPER_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_mcheck(p);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>STB__ptr(p,-STB__BIAS);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>STB_MALLOC_WRAPPER_PAGED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>stb_wrapper_allocsize(STB__ptr(p,STB__BIAS));</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!n)</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_wrapper_check(STB__ptr(p,STB__BIAS));</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>stb__realloc_final(p,<sp/>STB__FIXSIZE(sz),<sp/>STB__FIXSIZE(n));</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>realloc(p,<sp/>STB__FIXSIZE(sz));</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>++stb__malloc_failure,<sp/>q;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>STB_MALLOC_WRAPPER_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>STB__ptr(q,0)<sp/>=<sp/>STB__FIXSIZE(sz);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>STB__ptr(q,4)<sp/>=<sp/>STB__SIG;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>STB__ptr(q,8)<sp/>=<sp/>STB__SIG;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>STB__ptr(q,12)<sp/>=<sp/>STB__SIG;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>STB__ptr(q,STB__FIXSIZE(sz)-4)<sp/>=<sp/>STB__SIG+1;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>STB__ptr(q,STB__FIXSIZE(sz)-8)<sp/>=<sp/>STB__SIG+1;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>STB__ptr(q,STB__FIXSIZE(sz)-12)<sp/>=<sp/>STB__SIG+1;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>STB__ptr(q,STB__FIXSIZE(sz)-16)<sp/>=<sp/>STB__SIG+1;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>STB__ptr(q,<sp/>STB__BIAS);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>STB__ptr(p,<sp/>STB__BIAS);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_wrapper_realloc(p,q,sz,file,line);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>q;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/>STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_log2_ceil(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb__calloc(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line)</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*q;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_mcheck_all();</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>0<sp/>||<sp/>sz<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb_log2_ceil(n)<sp/>+<sp/>stb_log2_ceil(sz)<sp/>&gt;=<sp/>32)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>stb__malloc(n*sz,<sp/>file,<sp/>line);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q)<sp/>memset(q,<sp/>0,<sp/>n*sz);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>q;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>stb__strdup(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line)</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_mcheck_all();</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>stb__malloc(strlen(s)+1,<sp/>file,<sp/>line);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_p_strcpy_s(p,<sp/>strlen(s)+1,<sp/>s);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">//<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>STB_FASTMALLOC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#undef<sp/>malloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#undef<sp/>realloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#undef<sp/>free</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#undef<sp/>strdup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#undef<sp/>calloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>include<sp/>everything<sp/>that<sp/>might<sp/>define<sp/>these,<sp/>BEFORE<sp/>making<sp/>macros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#include<sp/>&lt;malloc.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>malloc(s)<sp/><sp/><sp/><sp/><sp/><sp/>stb__malloc<sp/>(<sp/><sp/>s,<sp/>__FILE__,<sp/>__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>realloc(p,s)<sp/><sp/><sp/>stb__realloc(p,s,<sp/>__FILE__,<sp/>__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>calloc(n,s)<sp/><sp/><sp/><sp/>stb__calloc<sp/>(n,s,<sp/>__FILE__,<sp/>__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>free(p)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__free<sp/><sp/><sp/>(p,<sp/><sp/><sp/>__FILE__,<sp/>__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>strdup(p)<sp/><sp/><sp/><sp/><sp/><sp/>stb__strdup<sp/>(p,<sp/><sp/><sp/>__FILE__,<sp/>__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Windows<sp/>pretty<sp/>display</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbprint(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...);</highlight></codeline>
<codeline lineno="799"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb_sprintf(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...);</highlight></codeline>
<codeline lineno="800"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb_mprintf(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...);</highlight></codeline>
<codeline lineno="801"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>stb_snprintf(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...);</highlight></codeline>
<codeline lineno="802"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>stb_vsnprintf(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>va_list<sp/>v);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_vsnprintf(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>va_list<sp/>v)</highlight></codeline>
<codeline lineno="806"><highlight class="normal">{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>__STDC_WANT_SECURE_LIB__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>_vsnprintf_s(s,<sp/>n,<sp/>_TRUNCATE,<sp/>fmt,<sp/>v);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>stb_p_vsnprintf(s,n,fmt,v);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/>vsnprintf(s,n,fmt,v);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n)<sp/>s[n-1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unix<sp/>returns<sp/>length<sp/>output<sp/>would<sp/>require,<sp/>Windows<sp/>returns<sp/>negative<sp/>when<sp/>truncated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(res<sp/>&gt;=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>n<sp/>||<sp/>res<sp/>&lt;<sp/>0)<sp/>?<sp/>-1<sp/>:<sp/>res;</highlight></codeline>
<codeline lineno="820"><highlight class="normal">}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_snprintf(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...)</highlight></codeline>
<codeline lineno="823"><highlight class="normal">{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/>va_list<sp/>v;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/>va_start(v,fmt);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/>stb_vsnprintf(s,<sp/>n,<sp/>fmt,<sp/>v);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/>va_end(v);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="830"><highlight class="normal">}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb_sprintf(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...)</highlight></codeline>
<codeline lineno="833"><highlight class="normal">{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[1024];</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/>va_list<sp/>v;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/>va_start(v,fmt);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/>stb_vsnprintf(<ref refid="classbuffer" kindref="compound">buffer</ref>,1024,fmt,v);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/>va_end(v);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>;</highlight></codeline>
<codeline lineno="840"><highlight class="normal">}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb_mprintf(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...)</highlight></codeline>
<codeline lineno="843"><highlight class="normal">{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[1024];</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/>va_list<sp/>v;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/>va_start(v,fmt);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/>stb_vsnprintf(<ref refid="classbuffer" kindref="compound">buffer</ref>,1024,fmt,v);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/>va_end(v);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_p_strdup(<ref refid="classbuffer" kindref="compound">buffer</ref>);</highlight></codeline>
<codeline lineno="850"><highlight class="normal">}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_WINDOWS_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal">STB_EXTERN<sp/>__declspec(dllimport)<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__stdcall<sp/>WriteConsoleA(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="856"><highlight class="normal">STB_EXTERN<sp/>__declspec(dllimport)<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>__stdcall<sp/>GetStdHandle(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="857"><highlight class="normal">STB_EXTERN<sp/>__declspec(dllimport)<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__stdcall<sp/>SetConsoleTextAttribute(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__print_one(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/>ptrdiff_t<sp/><sp/>len)</highlight></codeline>
<codeline lineno="861"><highlight class="normal">{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len)</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0==WriteConsoleA(handle,<sp/>s,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)<sp/>len,<sp/>NULL,NULL))</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>it<sp/>fails,<sp/>maybe<sp/>redirected,<sp/>so<sp/>output<sp/>normally...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>it&apos;s<sp/>supriously<sp/>reporting<sp/>failure<sp/>now<sp/>on<sp/>Win7<sp/>and<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight><highlight class="comment">//fwrite(s,<sp/>1,<sp/>(unsigned)<sp/>len,<sp/>stdout);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal">}</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__print(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)</highlight></codeline>
<codeline lineno="870"><highlight class="normal">{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*handle<sp/>=<sp/>GetStdHandle((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>-11);<sp/></highlight><highlight class="comment">//<sp/>STD_OUTPUT_HANDLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pad=0;<sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>padding<sp/>characters<sp/>to<sp/>add</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*t<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*s)<sp/>{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lpad;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*s<sp/>&amp;&amp;<sp/>*s<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pad)<sp/>{</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal"><sp/>||<sp/>*s<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pad<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>s[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__print_one(handle,<sp/>t,<sp/>s-t);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pad)<sp/>{</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__print_one(handle,<sp/>t,<sp/>1);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--pad;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++s;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!*s)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__print_one(handle,<sp/>t,<sp/>s-t);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++s;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>s+3;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isxdigit(s[2]))</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isdigit(s[2]))</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetConsoleTextAttribute(handle,<sp/>s[2]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetConsoleTextAttribute(handle,<sp/>tolower(s[2])<sp/>-<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>+<sp/>10);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetConsoleTextAttribute(handle,<sp/>0x0f);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t=s+2;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;!&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetConsoleTextAttribute(handle,<sp/>0x0c);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>s+2;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetConsoleTextAttribute(handle,<sp/>0x09);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>s+2;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;$&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetConsoleTextAttribute(handle,<sp/>0x0a);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>s+2;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetConsoleTextAttribute(handle,<sp/>0x08);<sp/></highlight><highlight class="comment">//<sp/>0,7,8,15<sp/>=&gt;<sp/>shades<sp/>of<sp/>grey</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>s+1;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lpad<sp/>=<sp/>(int)<sp/>(t-s);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*s<sp/>&amp;&amp;<sp/>*s<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">)<sp/>++s;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!*s)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__print_one(handle,<sp/>t,<sp/>s-t);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>s+2;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pad<sp/>+=<sp/>1+lpad;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>s+1;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s=t;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SetConsoleTextAttribute(handle,<sp/>0x07);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/>stb__print_one(handle,<sp/>t,<sp/>s-t);</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/>SetConsoleTextAttribute(handle,<sp/>0x07);</highlight></codeline>
<codeline lineno="940"><highlight class="normal">}</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbprint(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...)</highlight></codeline>
<codeline lineno="943"><highlight class="normal">{</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[1024];</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tbuf<sp/>=<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/>va_list<sp/>v;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/>va_start(v,fmt);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/>stb_vsnprintf(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classbuffer" kindref="compound">buffer</ref>),<sp/>fmt,<sp/>v);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/>va_end(v);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tbuf<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(16384);</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>va_start(v,fmt);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>stb_vsnprintf(tbuf,16384,<sp/>fmt,<sp/>v);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>va_end(v);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tbuf[16383]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/>stb__print(tbuf);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tbuf<sp/>!=<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>)</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(tbuf);</highlight></codeline>
<codeline lineno="965"><highlight class="normal">}</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="comment">//<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbprint(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...)</highlight></codeline>
<codeline lineno="969"><highlight class="normal">{</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/>va_list<sp/>v;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/>va_start(v,fmt);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/>vprintf(fmt,v);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/>va_end(v);</highlight></codeline>
<codeline lineno="974"><highlight class="normal">}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Windows<sp/>UTF8<sp/>filename<sp/>handling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Windows<sp/>stupidly<sp/>treats<sp/>8-bit<sp/>filenames<sp/>as<sp/>some<sp/>dopey<sp/>code<sp/>page,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight><highlight class="comment">//<sp/>rather<sp/>than<sp/>utf-8.<sp/>If<sp/>we<sp/>want<sp/>to<sp/>use<sp/>utf8<sp/>filenames,<sp/>we<sp/>have<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight><highlight class="comment">//<sp/>convert<sp/>them<sp/>to<sp/>WCHAR<sp/>explicitly<sp/>and<sp/>call<sp/>WCHAR<sp/>versions<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight><highlight class="comment">//<sp/>file<sp/>functions.<sp/>So,<sp/>ok,<sp/>we<sp/>do.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>stb__fopen(x,y)<sp/><sp/><sp/><sp/>stb_p_wfopen((const<sp/>wchar_t<sp/>*)stb__from_utf8(x),<sp/>(const<sp/>wchar_t<sp/>*)stb__from_utf8_alt(y))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>stb__windows(x,y)<sp/><sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>stb__fopen(x,y)<sp/><sp/><sp/><sp/>stb_p_fopen(x,y)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>stb__windows(x,y)<sp/><sp/>y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>stb__wchar;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal">STB_EXTERN<sp/>stb__wchar<sp/>*<sp/>stb_from_utf8(stb__wchar<sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="1002"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>stb_to_utf8<sp/><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>stb__wchar<sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal">STB_EXTERN<sp/>stb__wchar<sp/>*stb__from_utf8(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal">STB_EXTERN<sp/>stb__wchar<sp/>*stb__from_utf8_alt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb__to_utf8(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>stb__wchar<sp/>*str);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal">stb__wchar<sp/>*<sp/>stb_from_utf8(stb__wchar<sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ostr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="1011"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>ostr;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/>stb_uint32<sp/>c;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/>--n;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*str)<sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>n)</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(*str<sp/>&amp;<sp/>0x80))</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[i++]<sp/>=<sp/>*str++;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*str<sp/>&amp;<sp/>0xe0)<sp/>==<sp/>0xc0)<sp/>{</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*str<sp/>&lt;<sp/>0xc2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>(*str++<sp/>&amp;<sp/>0x1f)<sp/>&lt;&lt;<sp/>6;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*str<sp/>&amp;<sp/>0xc0)<sp/>!=<sp/>0x80)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[i++]<sp/>=<sp/>c<sp/>+<sp/>(*str++<sp/>&amp;<sp/>0x3f);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*str<sp/>&amp;<sp/>0xf0)<sp/>==<sp/>0xe0)<sp/>{</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*str<sp/>==<sp/>0xe0<sp/>&amp;&amp;<sp/>(str[1]<sp/>&lt;<sp/>0xa0<sp/>||<sp/>str[1]<sp/>&gt;<sp/>0xbf))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*str<sp/>==<sp/>0xed<sp/>&amp;&amp;<sp/>str[1]<sp/>&gt;<sp/>0x9f)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>str[1]<sp/>&lt;<sp/>0x80<sp/>is<sp/>checked<sp/>below</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>(*str++<sp/>&amp;<sp/>0x0f)<sp/>&lt;&lt;<sp/>12;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*str<sp/>&amp;<sp/>0xc0)<sp/>!=<sp/>0x80)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>+=<sp/>(*str++<sp/>&amp;<sp/>0x3f)<sp/>&lt;&lt;<sp/>6;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*str<sp/>&amp;<sp/>0xc0)<sp/>!=<sp/>0x80)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[i++]<sp/>=<sp/>c<sp/>+<sp/>(*str++<sp/>&amp;<sp/>0x3f);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*str<sp/>&amp;<sp/>0xf8)<sp/>==<sp/>0xf0)<sp/>{</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*str<sp/>&gt;<sp/>0xf4)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*str<sp/>==<sp/>0xf0<sp/>&amp;&amp;<sp/>(str[1]<sp/>&lt;<sp/>0x90<sp/>||<sp/>str[1]<sp/>&gt;<sp/>0xbf))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*str<sp/>==<sp/>0xf4<sp/>&amp;&amp;<sp/>str[1]<sp/>&gt;<sp/>0x8f)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>str[1]<sp/>&lt;<sp/>0x80<sp/>is<sp/>checked<sp/>below</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>(*str++<sp/>&amp;<sp/>0x07)<sp/>&lt;&lt;<sp/>18;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*str<sp/>&amp;<sp/>0xc0)<sp/>!=<sp/>0x80)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>+=<sp/>(*str++<sp/>&amp;<sp/>0x3f)<sp/>&lt;&lt;<sp/>12;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*str<sp/>&amp;<sp/>0xc0)<sp/>!=<sp/>0x80)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>+=<sp/>(*str++<sp/>&amp;<sp/>0x3f)<sp/>&lt;&lt;<sp/>6;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*str<sp/>&amp;<sp/>0xc0)<sp/>!=<sp/>0x80)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>+=<sp/>(*str++<sp/>&amp;<sp/>0x3f);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>utf-8<sp/>encodings<sp/>of<sp/>values<sp/>used<sp/>in<sp/>surrogate<sp/>pairs<sp/>are<sp/>invalid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>&amp;<sp/>0xFFFFF800)<sp/>==<sp/>0xD800)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&gt;=<sp/>0x10000)<sp/>{</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>-=<sp/>0x10000;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>2<sp/>&gt;<sp/>n)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[i++]<sp/>=<sp/>0xD800<sp/>|<sp/>(0x3ff<sp/>&amp;<sp/>(c<sp/>&gt;&gt;<sp/>10));</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[i++]<sp/>=<sp/>0xDC00<sp/>|<sp/>(0x3ff<sp/>&amp;<sp/>(c<sp/><sp/><sp/><sp/><sp/><sp/>));</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>stb_to_utf8(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>stb__wchar<sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="1061"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/>--n;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*str)<sp/>{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*str<sp/>&lt;<sp/>0x80)<sp/>{</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i+1<sp/>&gt;<sp/>n)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[i++]<sp/>=<sp/>(char)<sp/>*str++;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*str<sp/>&lt;<sp/>0x800)<sp/>{</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i+2<sp/>&gt;<sp/>n)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[i++]<sp/>=<sp/>0xc0<sp/>+<sp/>(*str<sp/>&gt;&gt;<sp/>6);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[i++]<sp/>=<sp/>0x80<sp/>+<sp/>(*str<sp/>&amp;<sp/>0x3f);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*str<sp/>&gt;=<sp/>0xd800<sp/>&amp;&amp;<sp/>*str<sp/>&lt;<sp/>0xdc00)<sp/>{</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_uint32<sp/>c;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i+4<sp/>&gt;<sp/>n)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>((str[0]<sp/>-<sp/>0xd800)<sp/>&lt;&lt;<sp/>10)<sp/>+<sp/>((str[1])<sp/>-<sp/>0xdc00)<sp/>+<sp/>0x10000;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[i++]<sp/>=<sp/>0xf0<sp/>+<sp/>(c<sp/>&gt;&gt;<sp/>18);</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[i++]<sp/>=<sp/>0x80<sp/>+<sp/>((c<sp/>&gt;&gt;<sp/>12)<sp/>&amp;<sp/>0x3f);</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[i++]<sp/>=<sp/>0x80<sp/>+<sp/>((c<sp/>&gt;&gt;<sp/><sp/>6)<sp/>&amp;<sp/>0x3f);</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[i++]<sp/>=<sp/>0x80<sp/>+<sp/>((c<sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>&amp;<sp/>0x3f);</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*str<sp/>&gt;=<sp/>0xdc00<sp/>&amp;&amp;<sp/>*str<sp/>&lt;<sp/>0xe000)<sp/>{</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i+3<sp/>&gt;<sp/>n)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[i++]<sp/>=<sp/>0xe0<sp/>+<sp/>(*str<sp/>&gt;&gt;<sp/>12);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[i++]<sp/>=<sp/>0x80<sp/>+<sp/>((*str<sp/>&gt;&gt;<sp/>6)<sp/>&amp;<sp/>0x3f);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[i++]<sp/>=<sp/>0x80<sp/>+<sp/>((*str<sp/><sp/><sp/><sp/><sp/>)<sp/>&amp;<sp/>0x3f);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal">stb__wchar<sp/>*stb__from_utf8(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)</highlight></codeline>
<codeline lineno="1097"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb__wchar<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[4096];</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_from_utf8(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>str,<sp/>4096);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal">stb__wchar<sp/>*stb__from_utf8_alt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)</highlight></codeline>
<codeline lineno="1103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb__wchar<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[4096];</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_from_utf8(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>str,<sp/>4096);</highlight></codeline>
<codeline lineno="1106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb__to_utf8(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>stb__wchar<sp/>*str)</highlight></codeline>
<codeline lineno="1109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[4096];</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_to_utf8(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>str,<sp/>4096);</highlight></codeline>
<codeline lineno="1112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Miscellany</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_fatal(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...);</highlight></codeline>
<codeline lineno="1123"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_append_to_file(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...);</highlight></codeline>
<codeline lineno="1124"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_log(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>active);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_log_fileline(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>active);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_log_name(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_swap(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*q,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz);</highlight></codeline>
<codeline lineno="1129"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb_copy(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz);</highlight></codeline>
<codeline lineno="1130"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_pointer_array_free(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="1131"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**stb_array_block_alloc(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blocksize);</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_arrcount(x)<sp/><sp/><sp/>(sizeof(x)/sizeof((x)[0]))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>stb__record_fileline(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb__file;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>stb__line;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>stb__record_fileline(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="1144"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/>stb__file<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>f;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/>stb__line<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_fatal(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/>...)</highlight></codeline>
<codeline lineno="1151"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/>va_list<sp/>a;</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__file)</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;[%s:%d]<sp/>&quot;</highlight><highlight class="normal">,<sp/>stb__file,<sp/>stb__line);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/>va_start(a,s);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/>fputs(</highlight><highlight class="stringliteral">&quot;Fatal<sp/>error:<sp/>&quot;</highlight><highlight class="normal">,<sp/>stderr);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/>vfprintf(stderr,<sp/>s,<sp/>a);</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/>va_end(a);</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/>fputs(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,<sp/>stderr);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>STB_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>STB_PTR64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/>__asm<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>3;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>trap<sp/>to<sp/>debugger!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/>__debugbreak();</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/>__builtin_trap();</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__log_active=1,<sp/>stb__log_fileline=1;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_log(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>active)</highlight></codeline>
<codeline lineno="1177"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/>stb__log_active<sp/>=<sp/>active;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_log_fileline(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>active)</highlight></codeline>
<codeline lineno="1182"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/>stb__log_fileline<sp/>=<sp/>active;</highlight></codeline>
<codeline lineno="1184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_NO_STB_STRINGS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb__log_filename<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;temp.log&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb__log_filename<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;stb.log&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_log_name(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)</highlight></codeline>
<codeline lineno="1193"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/>stb__log_filename<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/>...)</highlight></codeline>
<codeline lineno="1198"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__log_active)<sp/>{</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/>*f<sp/>=<sp/>stb_p_fopen(stb__log_filename,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f)<sp/>{</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va_list<sp/>a;</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__log_fileline<sp/>&amp;&amp;<sp/>stb__file)</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;[%s:%4d]<sp/>&quot;</highlight><highlight class="normal">,<sp/>stb__file,<sp/>stb__line);</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va_start(a,s);</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vfprintf(f,<sp/>s,<sp/>a);</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va_end(a);</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fputs(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,<sp/>f);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_append_to_file(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/>...)</highlight></codeline>
<codeline lineno="1215"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*f<sp/>=<sp/>stb_p_fopen(filename,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f)<sp/>{</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>va_list<sp/>a;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>va_start(a,s);</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vfprintf(f,<sp/>s,<sp/>a);</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>va_end(a);</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fputs(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,<sp/>f);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>d[4];<sp/>}<sp/>stb__4;</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>d[8];<sp/>}<sp/>stb__8;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight><highlight class="comment">//<sp/>optimize<sp/>the<sp/>small<sp/>cases,<sp/>though<sp/>you<sp/>shouldn&apos;t<sp/>be<sp/>calling<sp/>this<sp/>for<sp/>those!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_swap(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*q,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz)</highlight></codeline>
<codeline lineno="1233"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[256];</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>q)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sz<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__4<sp/>temp<sp/><sp/><sp/><sp/>=<sp/>*<sp/>(<sp/>stb__4<sp/>*)<sp/>p;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(stb__4<sp/>*)<sp/>p<sp/>=<sp/>*<sp/>(<sp/>stb__4<sp/>*)<sp/>q;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(stb__4<sp/>*)<sp/>q<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sz<sp/>==<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__8<sp/>temp<sp/><sp/><sp/><sp/>=<sp/>*<sp/>(<sp/>stb__8<sp/>*)<sp/>p;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(stb__8<sp/>*)<sp/>p<sp/>=<sp/>*<sp/>(<sp/>stb__8<sp/>*)<sp/>q;</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(stb__8<sp/>*)<sp/>q<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(sz<sp/>&gt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classbuffer" kindref="compound">buffer</ref>))<sp/>{</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_swap(p,<sp/>q,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classbuffer" kindref="compound">buffer</ref>));</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>p<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classbuffer" kindref="compound">buffer</ref>);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>q<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classbuffer" kindref="compound">buffer</ref>);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sz<sp/>-=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classbuffer" kindref="compound">buffer</ref>);</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/>memcpy(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>p<sp/><sp/><sp/><sp/><sp/>,<sp/>sz);</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/>memcpy(p<sp/><sp/><sp/><sp/><sp/>,<sp/>q<sp/><sp/><sp/><sp/><sp/>,<sp/>sz);</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/>memcpy(q<sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>sz);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb_copy(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz)</highlight></codeline>
<codeline lineno="1261"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*q<sp/>=<sp/>malloc(sz);</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/>memcpy(q,<sp/>p,<sp/>sz);</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>q;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_pointer_array_free(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*q,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="1268"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**p<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>q;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>len;<sp/>++i)</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(p[i]);</highlight></codeline>
<codeline lineno="1273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**stb_array_block_alloc(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blocksize)</highlight></codeline>
<codeline lineno="1276"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>*<sp/>count<sp/>+<sp/>count<sp/>*<sp/>blocksize);</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**q;</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/>q<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>p;</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/>p<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>*<sp/>count;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>count;<sp/>++i)</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q[i]<sp/>=<sp/>p<sp/>+<sp/>i<sp/>*<sp/>blocksize;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>q;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tricky<sp/>hack<sp/>to<sp/>allow<sp/>recording<sp/>FILE,LINE<sp/>even<sp/>in<sp/>varargs<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>STB__RECORD_FILE(x)<sp/><sp/>(stb__record_fileline(__FILE__,<sp/>__LINE__),(x))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>stb_log<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STB__RECORD_FILE(stb_log)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>stb_<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STB__RECORD_FILE(stb_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>STB_FATAL_CLEAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>stb_fatal<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STB__RECORD_FILE(stb_fatal)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>STB__DEBUG(x)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>STB__DEBUG(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_temp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_temp(block,<sp/>sz)<sp/><sp/><sp/><sp/><sp/>stb__temp(block,<sp/>sizeof(block),<sp/>(sz))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>stb__temp(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b_sz,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>want_sz);</highlight></codeline>
<codeline lineno="1310"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>stb_tempfree(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*block,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr);</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>stb__temp(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b_sz,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>want_sz)</highlight></codeline>
<codeline lineno="1315"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b_sz<sp/>&gt;=<sp/>want_sz)</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b;</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>malloc(want_sz);</highlight></codeline>
<codeline lineno="1320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>stb_tempfree(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="1323"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>!=<sp/>b)</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(p);</highlight></codeline>
<codeline lineno="1326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>math/sampling<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_lerp(t,a,b)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(a)<sp/>+<sp/>(t)<sp/>*<sp/>(float)<sp/>((b)-(a))<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_unlerp(t,a,b)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>((t)<sp/>-<sp/>(a))<sp/>/<sp/>(float)<sp/>((b)<sp/>-<sp/>(a))<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_clamp(x,xmin,xmax)<sp/><sp/>((x)<sp/>&lt;<sp/>(xmin)<sp/>?<sp/>(xmin)<sp/>:<sp/>(x)<sp/>&gt;<sp/>(xmax)<sp/>?<sp/>(xmax)<sp/>:<sp/>(x))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_newell_normal(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*normal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_vert,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>**vert,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>normalize);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_box_face_vertex_axis_side(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>face_number,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vertex_number,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gtc__quaternion_1gacb991327b755ed51ce12605e4c541250" kindref="member">axis</ref>);</highlight></codeline>
<codeline lineno="1343"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_linear_controller(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*curpos,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>target_pos,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>acc,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>deacc,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dt);</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_float_eq(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>delta,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_ulps);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_is_prime(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m);</highlight></codeline>
<codeline lineno="1347"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_power_of_two_nearest_prime(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>stb_smoothstep(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t);</highlight></codeline>
<codeline lineno="1350"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>stb_cubic_bezier_1d(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>p0,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>p1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>p2,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>p3);</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>stb_linear_remap(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b,</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d);</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>stb_smoothstep(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t)</highlight></codeline>
<codeline lineno="1357"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(3<sp/>-<sp/>2*t)*(t*t);</highlight></codeline>
<codeline lineno="1359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>stb_cubic_bezier_1d(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>p0,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>p1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>p2,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>p3)</highlight></codeline>
<codeline lineno="1362"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>1-t;</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it*it*it*p0<sp/>+<sp/>3*it*it*t*p1<sp/>+<sp/>3*it*t*t*p2<sp/>+<sp/>t*t*t*p3;</highlight></codeline>
<codeline lineno="1365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_newell_normal(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*normal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_vert,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>**vert,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>normalize)</highlight></codeline>
<codeline lineno="1368"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j;</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/>normal[0]<sp/>=<sp/>normal[1]<sp/>=<sp/>normal[2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=num_vert-1,j=0;<sp/>j<sp/>&lt;<sp/>num_vert;<sp/>i=j++)<sp/>{</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*u<sp/>=<sp/>vert[i];</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*v<sp/>=<sp/>vert[j];</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>normal[0]<sp/>+=<sp/>(u[1]<sp/>-<sp/>v[1])<sp/>*<sp/>(u[2]<sp/>+<sp/>v[2]);</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>normal[1]<sp/>+=<sp/>(u[2]<sp/>-<sp/>v[2])<sp/>*<sp/>(u[0]<sp/>+<sp/>v[0]);</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>normal[2]<sp/>+=<sp/>(u[0]<sp/>-<sp/>v[0])<sp/>*<sp/>(u[1]<sp/>+<sp/>v[1]);</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(normalize)<sp/>{</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>normal[0]*normal[0]<sp/>+<sp/>normal[1]*normal[1]<sp/>+<sp/>normal[2]*normal[2];</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>(float)<sp/>(1.0<sp/>/<sp/><ref refid="group__core__func__exponential_1ga1f904e09827e939a56e4158f45ca8ede" kindref="member">sqrt</ref>(p));</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>normal[0]<sp/>*=<sp/>p;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>normal[1]<sp/>*=<sp/>p;</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>normal[2]<sp/>*=<sp/>p;</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_box_face_vertex_axis_side(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>face_number,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vertex_number,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gtc__quaternion_1gacb991327b755ed51ce12605e4c541250" kindref="member">axis</ref>)</highlight></codeline>
<codeline lineno="1389"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>box_vertices[6][4][3]<sp/>=</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>{<sp/>1,1,1<sp/>},<sp/>{<sp/>1,0,1<sp/>},<sp/>{<sp/>1,0,0<sp/>},<sp/>{<sp/>1,1,0<sp/>}<sp/>},</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>{<sp/>0,0,0<sp/>},<sp/>{<sp/>0,0,1<sp/>},<sp/>{<sp/>0,1,1<sp/>},<sp/>{<sp/>0,1,0<sp/>}<sp/>},</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>{<sp/>0,0,0<sp/>},<sp/>{<sp/>0,1,0<sp/>},<sp/>{<sp/>1,1,0<sp/>},<sp/>{<sp/>1,0,0<sp/>}<sp/>},</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>{<sp/>0,0,0<sp/>},<sp/>{<sp/>1,0,0<sp/>},<sp/>{<sp/>1,0,1<sp/>},<sp/>{<sp/>0,0,1<sp/>}<sp/>},</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>{<sp/>1,1,1<sp/>},<sp/>{<sp/>0,1,1<sp/>},<sp/>{<sp/>0,0,1<sp/>},<sp/>{<sp/>1,0,1<sp/>}<sp/>},</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>{<sp/>1,1,1<sp/>},<sp/>{<sp/>1,1,0<sp/>},<sp/>{<sp/>0,1,0<sp/>},<sp/>{<sp/>0,1,1<sp/>}<sp/>},</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/>assert(face_number<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>face_number<sp/>&lt;<sp/>6);</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/>assert(vertex_number<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>vertex_number<sp/>&lt;<sp/>4);</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/>assert(<ref refid="group__gtc__quaternion_1gacb991327b755ed51ce12605e4c541250" kindref="member">axis</ref><sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/><ref refid="group__gtc__quaternion_1gacb991327b755ed51ce12605e4c541250" kindref="member">axis</ref><sp/>&lt;<sp/>3);</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>box_vertices[face_number][vertex_number][<ref refid="group__gtc__quaternion_1gacb991327b755ed51ce12605e4c541250" kindref="member">axis</ref>];</highlight></codeline>
<codeline lineno="1403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_linear_controller(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*curpos,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>target_pos,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>acc,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>deacc,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dt)</highlight></codeline>
<codeline lineno="1406"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="group__core__func__common_1gaf749e7f029eb88580a45493e41002629" kindref="member">sign</ref><sp/>=<sp/>1,<sp/>p,<sp/>cp<sp/>=<sp/>*curpos;</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cp<sp/>==<sp/>target_pos)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target_pos<sp/>&lt;<sp/>cp)<sp/>{</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>target_pos<sp/>=<sp/>-target_pos;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cp<sp/>=<sp/>-cp;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__core__func__common_1gaf749e7f029eb88580a45493e41002629" kindref="member">sign</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>decelerate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cp<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>cp<sp/>+<sp/>deacc<sp/>*<sp/>dt;</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dt<sp/>=<sp/>dt<sp/>-<sp/>cp<sp/>/<sp/>deacc;</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dt<sp/>&lt;<sp/>0)<sp/>dt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cp<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>accelerate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/>p<sp/>=<sp/>cp<sp/>+<sp/>acc*dt;</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>&gt;<sp/>target_pos)<sp/>p<sp/>=<sp/>target_pos;</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/>*curpos<sp/>=<sp/>p<sp/>*<sp/><ref refid="group__core__func__common_1gaf749e7f029eb88580a45493e41002629" kindref="member">sign</ref>;</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>stb_quadratic_controller(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>target_pos,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>curpos,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>maxvel,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>maxacc,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dt,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*curvel)</highlight></codeline>
<codeline lineno="1434"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">//<sp/>@TODO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_float_eq(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>delta,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_ulps)</highlight></codeline>
<codeline lineno="1439"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(x-y)<sp/>&lt;=<sp/>delta)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__core__func__common_1ga693d77696ff36572a0da79efec965acd" kindref="member">abs</ref>(*(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)&amp;x<sp/>-<sp/>*(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)&amp;y)<sp/>&lt;=<sp/>max_ulps)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_is_prime(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m)</highlight></codeline>
<codeline lineno="1446"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j;</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&lt;<sp/>2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>==<sp/>2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(m<sp/>&amp;<sp/>1))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>%<sp/>3<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=5;<sp/>(j=i*i),<sp/>j<sp/>&lt;=<sp/>m<sp/>&amp;&amp;<sp/>j<sp/>&gt;<sp/>i;<sp/>i<sp/>+=<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>%<sp/><sp/><sp/>i<sp/><sp/><sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>%<sp/>(i+2)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_power_of_two_nearest_prime(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="1460"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>tab[32]<sp/>=<sp/>{<sp/>0,0,0,0,1,0,-1,0,1,-1,-1,3,-1,0,-1,2,1,</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,2,0,-1,-4,-1,5,-1,18,-2,15,2,-1,2,0<sp/>};</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tab[0])<sp/>{</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>32;<sp/>++i)</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tab[i]<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>i)<sp/>+<sp/>2*tab[i]<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tab[1]<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tab[0]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/>32)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0xfffffffb;</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tab[n];</highlight></codeline>
<codeline lineno="1472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>stb_linear_remap(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x_min,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x_max,</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>out_min,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>out_max)</highlight></codeline>
<codeline lineno="1476"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_lerp(stb_unlerp(x,x_min,x_max),out_min,out_max);</highlight></codeline>
<codeline lineno="1478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>macro<sp/>so<sp/>it&apos;s<sp/>faster,<sp/>but<sp/>you<sp/>can<sp/>get<sp/>at<sp/>the<sp/>function<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_linear_remap(t,a,b,c,d)<sp/><sp/><sp/>stb_lerp(stb_unlerp(t,a,b),c,d)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bit<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_big32(c)<sp/><sp/><sp/><sp/>(((c)[0]&lt;&lt;24)<sp/>+<sp/>(c)[1]*65536<sp/>+<sp/>(c)[2]*256<sp/>+<sp/>(c)[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_little32(c)<sp/>(((c)[3]&lt;&lt;24)<sp/>+<sp/>(c)[2]*65536<sp/>+<sp/>(c)[1]*256<sp/>+<sp/>(c)[0])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_big16(c)<sp/><sp/><sp/><sp/>((c)[0]*256<sp/>+<sp/>(c)[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_little16(c)<sp/>((c)[1]*256<sp/>+<sp/>(c)[0])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal">STB_EXTERN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_bitcount(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a);</highlight></codeline>
<codeline lineno="1496"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_bitreverse8(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="1497"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_bitreverse(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal">STB_EXTERN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_is_pow2(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1500"><highlight class="normal">STB_EXTERN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_log2_ceil(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1501"><highlight class="normal">STB_EXTERN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_log2_floor(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal">STB_EXTERN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_lowbit8(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="1504"><highlight class="normal">STB_EXTERN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_highbit8(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_bitcount(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="1508"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/>a<sp/>=<sp/>(a<sp/>&amp;<sp/>0x55555555)<sp/>+<sp/>((a<sp/>&gt;&gt;<sp/><sp/>1)<sp/>&amp;<sp/>0x55555555);<sp/></highlight><highlight class="comment">//<sp/>max<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/>a<sp/>=<sp/>(a<sp/>&amp;<sp/>0x33333333)<sp/>+<sp/>((a<sp/>&gt;&gt;<sp/><sp/>2)<sp/>&amp;<sp/>0x33333333);<sp/></highlight><highlight class="comment">//<sp/>max<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/>a<sp/>=<sp/>(a<sp/>+<sp/>(a<sp/>&gt;&gt;<sp/>4))<sp/>&amp;<sp/>0x0f0f0f0f;<sp/></highlight><highlight class="comment">//<sp/>max<sp/>8<sp/>per<sp/>4,<sp/>now<sp/>8<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/>a<sp/>=<sp/>(a<sp/>+<sp/>(a<sp/>&gt;&gt;<sp/>8));<sp/></highlight><highlight class="comment">//<sp/>max<sp/>16<sp/>per<sp/>8<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/>a<sp/>=<sp/>(a<sp/>+<sp/>(a<sp/>&gt;&gt;<sp/>16));<sp/></highlight><highlight class="comment">//<sp/>max<sp/>32<sp/>per<sp/>8<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="1515"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_bitreverse8(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="1518"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>((n<sp/>&amp;<sp/>0xAA)<sp/>&gt;&gt;<sp/>1)<sp/>+<sp/>((n<sp/>&amp;<sp/>0x55)<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>((n<sp/>&amp;<sp/>0xCC)<sp/>&gt;&gt;<sp/>2)<sp/>+<sp/>((n<sp/>&amp;<sp/>0x33)<sp/>&lt;&lt;<sp/>2);</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>((n<sp/>&gt;&gt;<sp/>4)<sp/>+<sp/>(n<sp/>&lt;&lt;<sp/>4));</highlight></codeline>
<codeline lineno="1522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_bitreverse(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="1525"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>((n<sp/>&amp;<sp/>0xAAAAAAAA)<sp/>&gt;&gt;<sp/><sp/>1)<sp/>|<sp/>((n<sp/>&amp;<sp/>0x55555555)<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>((n<sp/>&amp;<sp/>0xCCCCCCCC)<sp/>&gt;&gt;<sp/><sp/>2)<sp/>|<sp/>((n<sp/>&amp;<sp/>0x33333333)<sp/>&lt;&lt;<sp/>2);</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>((n<sp/>&amp;<sp/>0xF0F0F0F0)<sp/>&gt;&gt;<sp/><sp/>4)<sp/>|<sp/>((n<sp/>&amp;<sp/>0x0F0F0F0F)<sp/>&lt;&lt;<sp/>4);</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>((n<sp/>&amp;<sp/>0xFF00FF00)<sp/>&gt;&gt;<sp/><sp/>8)<sp/>|<sp/>((n<sp/>&amp;<sp/>0x00FF00FF)<sp/>&lt;&lt;<sp/>8);</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(n<sp/>&gt;&gt;<sp/>16)<sp/>|<sp/>(n<sp/>&lt;&lt;<sp/>16);</highlight></codeline>
<codeline lineno="1531"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_is_pow2(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="1534"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(n<sp/>&amp;<sp/>(n-1))<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="1536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"></highlight><highlight class="comment">//<sp/>tricky<sp/>use<sp/>of<sp/>4-bit<sp/>table<sp/>to<sp/>identify<sp/>5<sp/>bit<sp/>positions<sp/>(note<sp/>the<sp/>&apos;-1&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight><highlight class="comment">//<sp/>3-bit<sp/>table<sp/>would<sp/>require<sp/>another<sp/>tree<sp/>level;<sp/>5-bit<sp/>table<sp/>wouldn&apos;t<sp/>save<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN32)<sp/>&amp;&amp;<sp/>!defined(__MINGW32__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(push)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(disable:<sp/>4035)<sp/><sp/></highlight><highlight class="comment">//<sp/>disable<sp/>warning<sp/>about<sp/>no<sp/>return<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_log2_floor(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="1544"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#if<sp/>_MSC_VER<sp/>&gt;<sp/>1700</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>STB_PTR64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/>_BitScanReverse64(&amp;i,<sp/>n);</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/>_BitScanReverse(&amp;i,<sp/>n);</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i<sp/>!=<sp/>0<sp/>?<sp/>i<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/>__asm<sp/>{</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bsr<sp/>eax,n</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>jnz<sp/>done</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mov<sp/>eax,-1</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/>done:;</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(pop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_log2_floor(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="1565"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>log2_4[16]<sp/>=<sp/>{<sp/>-1,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3<sp/>};</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_PTR64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/>((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>1u<sp/>&lt;&lt;<sp/>32))</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_log2_floor(n<sp/>&gt;&gt;<sp/>32);</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>compares<sp/>if<sp/>n<sp/>&lt;<sp/>16,<sp/>3<sp/>compares<sp/>otherwise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>(1U<sp/>&lt;&lt;<sp/>14))</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>(1U<sp/>&lt;&lt;<sp/><sp/>4))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>0<sp/>+<sp/>log2_4[n<sp/><sp/><sp/><sp/><sp/><sp/>];</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>(1U<sp/>&lt;&lt;<sp/><sp/>9))<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>5<sp/>+<sp/>log2_4[n<sp/>&gt;&gt;<sp/><sp/>5];</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>10<sp/>+<sp/>log2_4[n<sp/>&gt;&gt;<sp/>10];</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>(1U<sp/>&lt;&lt;<sp/>24))</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>(1U<sp/>&lt;&lt;<sp/>19))<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>15<sp/>+<sp/>log2_4[n<sp/>&gt;&gt;<sp/>15];</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>20<sp/>+<sp/>log2_4[n<sp/>&gt;&gt;<sp/>20];</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>(1U<sp/>&lt;&lt;<sp/>29))<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>25<sp/>+<sp/>log2_4[n<sp/>&gt;&gt;<sp/>25];</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>30<sp/>+<sp/>log2_4[n<sp/>&gt;&gt;<sp/>30];</highlight></codeline>
<codeline lineno="1583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight><highlight class="comment">//<sp/>define<sp/>ceil<sp/>from<sp/>floor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_log2_ceil(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="1588"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb_is_pow2(n))<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>stb_log2_floor(n);</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1<sp/>+<sp/>stb_log2_floor(n);</highlight></codeline>
<codeline lineno="1591"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_highbit8(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="1594"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_log2_ceil(n&amp;255);</highlight></codeline>
<codeline lineno="1596"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_lowbit8(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="1599"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>lowbit4[16]<sp/>=<sp/>{<sp/>-1,0,1,0,<sp/>2,0,1,0,<sp/>3,0,1,0,<sp/>2,0,1,0<sp/>};</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>lowbit4[n<sp/>&amp;<sp/>15];</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>&gt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/>k<sp/>=<sp/>lowbit4[(n<sp/>&gt;&gt;<sp/>4)<sp/>&amp;<sp/>15];</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>&gt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>k+4;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="1606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qsort<sp/>Compare<sp/>Routines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>stb_stricmp(a,b)<sp/>stb_p_stricmp(a,b)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>stb_strnicmp(a,b,n)<sp/>stb_p_strnicmp(a,b,n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>stb_stricmp(a,b)<sp/>strcasecmp(a,b)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>stb_strnicmp(a,b,n)<sp/>strncasecmp(a,b,n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal">STB_EXTERN<sp/>int<sp/>(*stb_intcmp(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset))(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b);</highlight></codeline>
<codeline lineno="1626"><highlight class="normal">STB_EXTERN<sp/>int<sp/>(*stb_intcmprev(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset))(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b);</highlight></codeline>
<codeline lineno="1627"><highlight class="normal">STB_EXTERN<sp/>int<sp/>(*stb_qsort_strcmp(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset))(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b);</highlight></codeline>
<codeline lineno="1628"><highlight class="normal">STB_EXTERN<sp/>int<sp/>(*stb_qsort_stricmp(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset))(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b);</highlight></codeline>
<codeline lineno="1629"><highlight class="normal">STB_EXTERN<sp/>int<sp/>(*stb_floatcmp(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset))(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b);</highlight></codeline>
<codeline lineno="1630"><highlight class="normal">STB_EXTERN<sp/>int<sp/>(*stb_doublecmp(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset))(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b);</highlight></codeline>
<codeline lineno="1631"><highlight class="normal">STB_EXTERN<sp/>int<sp/>(*stb_charcmp(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset))(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b);</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__intcmpoffset,<sp/>stb__ucharcmpoffset,<sp/>stb__strcmpoffset;</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__floatcmpoffset,<sp/>stb__doublecmpoffset;</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__memcmpoffset,<sp/>stb__memcmpsize;</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__intcmp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b)</highlight></codeline>
<codeline lineno="1639"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>a<sp/>+<sp/>stb__intcmpoffset);</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>q<sp/>=<sp/>*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>b<sp/>+<sp/>stb__intcmpoffset);</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p<sp/>&lt;<sp/>q<sp/>?<sp/>-1<sp/>:<sp/>p<sp/>&gt;<sp/>q;</highlight></codeline>
<codeline lineno="1643"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__intcmprev(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b)</highlight></codeline>
<codeline lineno="1646"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>a<sp/>+<sp/>stb__intcmpoffset);</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>q<sp/>=<sp/>*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>b<sp/>+<sp/>stb__intcmpoffset);</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>q<sp/>&lt;<sp/>p<sp/>?<sp/>-1<sp/>:<sp/>q<sp/>&gt;<sp/>p;</highlight></codeline>
<codeline lineno="1650"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__ucharcmp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b)</highlight></codeline>
<codeline lineno="1653"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>a<sp/>+<sp/>stb__ucharcmpoffset);</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>q<sp/>=<sp/>*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>b<sp/>+<sp/>stb__ucharcmpoffset);</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p<sp/>&lt;<sp/>q<sp/>?<sp/>-1<sp/>:<sp/>p<sp/>&gt;<sp/>q;</highlight></codeline>
<codeline lineno="1657"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__floatcmp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b)</highlight></codeline>
<codeline lineno="1660"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>a<sp/>+<sp/>stb__floatcmpoffset);</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>q<sp/>=<sp/>*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>b<sp/>+<sp/>stb__floatcmpoffset);</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p<sp/>&lt;<sp/>q<sp/>?<sp/>-1<sp/>:<sp/>p<sp/>&gt;<sp/>q;</highlight></codeline>
<codeline lineno="1664"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__doublecmp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b)</highlight></codeline>
<codeline lineno="1667"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>a<sp/>+<sp/>stb__doublecmpoffset);</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>q<sp/>=<sp/>*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>b<sp/>+<sp/>stb__doublecmpoffset);</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p<sp/>&lt;<sp/>q<sp/>?<sp/>-1<sp/>:<sp/>p<sp/>&gt;<sp/>q;</highlight></codeline>
<codeline lineno="1671"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__qsort_strcmp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b)</highlight></codeline>
<codeline lineno="1674"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>a<sp/>+<sp/>stb__strcmpoffset);</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*q<sp/>=<sp/>*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>b<sp/>+<sp/>stb__strcmpoffset);</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strcmp(p,q);</highlight></codeline>
<codeline lineno="1678"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__qsort_stricmp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b)</highlight></codeline>
<codeline lineno="1681"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>a<sp/>+<sp/>stb__strcmpoffset);</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*q<sp/>=<sp/>*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)<sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>b<sp/>+<sp/>stb__strcmpoffset);</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_stricmp(p,q);</highlight></codeline>
<codeline lineno="1685"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__memcmp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b)</highlight></codeline>
<codeline lineno="1688"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>memcmp((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>a<sp/>+<sp/>stb__memcmpoffset,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>b<sp/>+<sp/>stb__memcmpoffset,<sp/>stb__memcmpsize);</highlight></codeline>
<codeline lineno="1690"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal">int<sp/>(*stb_intcmp(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset))(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)</highlight></codeline>
<codeline lineno="1693"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/>stb__intcmpoffset<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;stb__intcmp;</highlight></codeline>
<codeline lineno="1696"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal">int<sp/>(*stb_intcmprev(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset))(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)</highlight></codeline>
<codeline lineno="1699"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/>stb__intcmpoffset<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;stb__intcmprev;</highlight></codeline>
<codeline lineno="1702"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal">int<sp/>(*stb_ucharcmp(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset))(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)</highlight></codeline>
<codeline lineno="1705"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/>stb__ucharcmpoffset<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;stb__ucharcmp;</highlight></codeline>
<codeline lineno="1708"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"></highlight></codeline>
<codeline lineno="1710"><highlight class="normal">int<sp/>(*stb_qsort_strcmp(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset))(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)</highlight></codeline>
<codeline lineno="1711"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/>stb__strcmpoffset<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;stb__qsort_strcmp;</highlight></codeline>
<codeline lineno="1714"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"></highlight></codeline>
<codeline lineno="1716"><highlight class="normal">int<sp/>(*stb_qsort_stricmp(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset))(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)</highlight></codeline>
<codeline lineno="1717"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/>stb__strcmpoffset<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;stb__qsort_stricmp;</highlight></codeline>
<codeline lineno="1720"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal">int<sp/>(*stb_floatcmp(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset))(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)</highlight></codeline>
<codeline lineno="1723"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/>stb__floatcmpoffset<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;stb__floatcmp;</highlight></codeline>
<codeline lineno="1726"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="normal">int<sp/>(*stb_doublecmp(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset))(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)</highlight></codeline>
<codeline lineno="1729"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/>stb__doublecmpoffset<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;stb__doublecmp;</highlight></codeline>
<codeline lineno="1732"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"></highlight></codeline>
<codeline lineno="1734"><highlight class="normal">int<sp/>(*stb_memcmp(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size))(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)</highlight></codeline>
<codeline lineno="1735"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/>stb__memcmpoffset<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/>stb__memcmpsize<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;stb__memcmp;</highlight></codeline>
<codeline lineno="1739"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight></codeline>
<codeline lineno="1743"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Binary<sp/>Search<sp/>Toolkit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1745"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1746"><highlight class="normal"></highlight></codeline>
<codeline lineno="1747" refid="structstb__search" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1748"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minval,<sp/>maxval,<sp/>guess;</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode,<sp/><ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>;</highlight></codeline>
<codeline lineno="1751"><highlight class="normal">}<sp/><ref refid="structstb__search" kindref="compound">stb_search</ref>;</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"></highlight></codeline>
<codeline lineno="1753"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_search_binary(<ref refid="structstb__search" kindref="compound">stb_search</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxv,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>find_smallest);</highlight></codeline>
<codeline lineno="1754"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_search_open(<ref refid="structstb__search" kindref="compound">stb_search</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>find_smallest);</highlight></codeline>
<codeline lineno="1755"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_probe(<ref refid="structstb__search" kindref="compound">stb_search</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compare,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<ref refid="structresult" kindref="compound">result</ref>);<sp/></highlight><highlight class="comment">//<sp/>return<sp/>0<sp/>when<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1756"><highlight class="normal"></highlight></codeline>
<codeline lineno="1757"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1758"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1759"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/>STB_probe_binary_smallest,</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/>STB_probe_binary_largest,</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/>STB_probe_open_smallest,</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/>STB_probe_open_largest,</highlight></codeline>
<codeline lineno="1764"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_probe_guess(<ref refid="structstb__search" kindref="compound">stb_search</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<ref refid="structresult" kindref="compound">result</ref>)</highlight></codeline>
<codeline lineno="1767"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(s-&gt;mode)<sp/>{</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_probe_binary_largest:</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;minval<sp/>==<sp/>s-&gt;maxval)<sp/>{</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>s-&gt;minval;</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(s-&gt;minval<sp/>&lt;<sp/>s-&gt;maxval);</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>a<sp/>&lt;<sp/>b,<sp/>then<sp/>a<sp/>&lt;<sp/>p<sp/>&lt;=<sp/>b</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;guess<sp/>=<sp/>s-&gt;minval<sp/>+<sp/>(((unsigned)<sp/>s-&gt;maxval<sp/>-<sp/>s-&gt;minval<sp/>+<sp/>1)<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"></highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_probe_binary_smallest:</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;minval<sp/>==<sp/>s-&gt;maxval)<sp/>{</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>s-&gt;minval;</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(s-&gt;minval<sp/>&lt;<sp/>s-&gt;maxval);</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>a<sp/>&lt;<sp/>b,<sp/>then<sp/>a<sp/>&lt;=<sp/>p<sp/>&lt;<sp/>b</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;guess<sp/>=<sp/>s-&gt;minval<sp/>+<sp/>(((unsigned)<sp/>s-&gt;maxval<sp/>-<sp/>s-&gt;minval)<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_probe_open_smallest:</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_probe_open_largest:</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;guess<sp/>=<sp/>s-&gt;maxval;<sp/><sp/></highlight><highlight class="comment">//<sp/>guess<sp/>the<sp/>current<sp/>maxval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/>*<ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>s-&gt;guess;</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1795"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_probe(<ref refid="structstb__search" kindref="compound">stb_search</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compare,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<ref refid="structresult" kindref="compound">result</ref>)</highlight></codeline>
<codeline lineno="1798"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(s-&gt;mode)<sp/>{</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_probe_open_smallest:</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_probe_open_largest:<sp/>{</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compare<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>it<sp/>lies<sp/>within<sp/>minval<sp/>&amp;<sp/>maxval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;mode<sp/>==<sp/>STB_probe_open_smallest)</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>STB_probe_binary_smallest;</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>STB_probe_binary_largest;</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise,<sp/>we<sp/>need<sp/>to<sp/>probe<sp/>larger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;minval<sp/><sp/>=<sp/>s-&gt;maxval<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;maxval<sp/><sp/>=<sp/>s-&gt;minval<sp/>+<sp/>s-&gt;step;</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;step<sp/><sp/><sp/>+=<sp/>s-&gt;step;</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_probe_binary_smallest:<sp/>{</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>compare<sp/>&lt;<sp/>0,<sp/>then<sp/>s-&gt;minval<sp/>&lt;=<sp/>a<sp/>&lt;<sp/><sp/>p</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>compare<sp/>=<sp/>0,<sp/>then<sp/>s-&gt;minval<sp/>&lt;=<sp/>a<sp/>&lt;=<sp/>p</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>compare<sp/>&gt;<sp/>0,<sp/>then<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>&lt;<sp/><sp/>a<sp/>&lt;=<sp/>s-&gt;maxval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compare<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;maxval<sp/>=<sp/>s-&gt;guess;</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;minval<sp/>=<sp/>s-&gt;guess+1;</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_probe_binary_largest:<sp/>{</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>compare<sp/>&lt;<sp/>0,<sp/>then<sp/>s-&gt;minval<sp/>&lt;=<sp/>a<sp/>&lt;<sp/>p</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>compare<sp/>=<sp/>0,<sp/>then<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>&lt;=<sp/>a<sp/>&lt;=<sp/>s-&gt;maxval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>compare<sp/>&gt;<sp/>0,<sp/>then<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>&lt;<sp/><sp/>a<sp/>&lt;=<sp/>s-&gt;maxval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compare<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;maxval<sp/>=<sp/>s-&gt;guess-1;</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;minval<sp/>=<sp/>s-&gt;guess;</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_probe_guess(s,<sp/><ref refid="structresult" kindref="compound">result</ref>);</highlight></codeline>
<codeline lineno="1838"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"></highlight></codeline>
<codeline lineno="1840"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_search_binary(<ref refid="structstb__search" kindref="compound">stb_search</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxv,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>find_smallest)</highlight></codeline>
<codeline lineno="1841"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxv<sp/>&lt;<sp/>minv)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>minv-1;</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/>s-&gt;minval<sp/>=<sp/>minv;</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/>s-&gt;maxval<sp/>=<sp/>maxv;</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>find_smallest<sp/>?<sp/>STB_probe_binary_smallest<sp/>:<sp/>STB_probe_binary_largest;</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/>stb_probe_guess(s,<sp/>&amp;r);</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="1849"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_search_open(<ref refid="structstb__search" kindref="compound">stb_search</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minv,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>find_smallest)</highlight></codeline>
<codeline lineno="1852"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/>s-&gt;step<sp/><sp/><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/>s-&gt;minval<sp/>=<sp/>minv;</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/>s-&gt;maxval<sp/>=<sp/>minv+s-&gt;step;</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/>s-&gt;mode<sp/>=<sp/>find_smallest<sp/>?<sp/>STB_probe_open_smallest<sp/>:<sp/>STB_probe_open_largest;</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/>stb_probe_guess(s,<sp/>&amp;r);</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="1860"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1865"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>Processing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1867"><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_prefixi(s,t)<sp/><sp/>(0==stb_strnicmp((s),(t),strlen(t)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>stb_splitpath_flag</highlight></codeline>
<codeline lineno="1871"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/>STB_PATH<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/>STB_FILE<sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/>STB_EXT<sp/><sp/>=<sp/>4,</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/>STB_PATH_FILE<sp/>=<sp/>STB_PATH<sp/>+<sp/>STB_FILE,</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/>STB_FILE_EXT<sp/><sp/>=<sp/>STB_FILE<sp/>+<sp/>STB_EXT,</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/>STB_EXT_NO_PERIOD<sp/>=<sp/>8,</highlight></codeline>
<codeline lineno="1878"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"></highlight></codeline>
<codeline lineno="1880"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>stb_skipwhite(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s);</highlight></codeline>
<codeline lineno="1881"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>stb_trimwhite(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s);</highlight></codeline>
<codeline lineno="1882"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>stb_skipnewline(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s);</highlight></codeline>
<codeline lineno="1883"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>stb_strncpy(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*t,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="1884"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>stb_substr(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*t,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="1885"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>stb_duplower(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s);</highlight></codeline>
<codeline lineno="1886"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>stb_tolower<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s);</highlight></codeline>
<codeline lineno="1887"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>stb_strchr2<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>p1,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>p2);</highlight></codeline>
<codeline lineno="1888"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>stb_strrchr2(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>p1,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>p2);</highlight></codeline>
<codeline lineno="1889"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>stb_strtok(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structoutput" kindref="compound">output</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*delimit);</highlight></codeline>
<codeline lineno="1890"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>stb_strtok_keep(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structoutput" kindref="compound">output</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*delimit);</highlight></codeline>
<codeline lineno="1891"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>stb_strtok_invert(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structoutput" kindref="compound">output</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*allowed);</highlight></codeline>
<codeline lineno="1892"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>stb_dupreplace(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*find,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*replace);</highlight></codeline>
<codeline lineno="1893"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>stb_replaceinplace(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*find,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*replace);</highlight></codeline>
<codeline lineno="1894"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>stb_splitpath(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structoutput" kindref="compound">output</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag);</highlight></codeline>
<codeline lineno="1895"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>stb_splitpathdup(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag);</highlight></codeline>
<codeline lineno="1896"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>stb_replacedir(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structoutput" kindref="compound">output</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir);</highlight></codeline>
<codeline lineno="1897"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>stb_replaceext(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structoutput" kindref="compound">output</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ext);</highlight></codeline>
<codeline lineno="1898"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>stb_fixpath(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path);</highlight></codeline>
<codeline lineno="1899"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>stb_shorten_path_readable(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_len);</highlight></codeline>
<codeline lineno="1900"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>stb_suffix<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*t);</highlight></codeline>
<codeline lineno="1901"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>stb_suffixi(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*t);</highlight></codeline>
<codeline lineno="1902"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>stb_prefix<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*t);</highlight></codeline>
<codeline lineno="1903"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>stb_strichr(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>t);</highlight></codeline>
<codeline lineno="1904"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>stb_stristr(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*t);</highlight></codeline>
<codeline lineno="1905"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>stb_prefix_count(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*t);</highlight></codeline>
<codeline lineno="1906"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>stb_plural(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);<sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;s&quot;<sp/>or<sp/>&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>stb_strscpy(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*d,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"></highlight></codeline>
<codeline lineno="1909"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**stb_tokens(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*delimit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*count);</highlight></codeline>
<codeline lineno="1910"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**stb_tokens_nested(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*delimit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*count,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*nest_in,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*nest_out);</highlight></codeline>
<codeline lineno="1911"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**stb_tokens_nested_empty(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*delimit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*count,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*nest_in,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*nest_out);</highlight></codeline>
<codeline lineno="1912"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**stb_tokens_allowempty(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*delimit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*count);</highlight></codeline>
<codeline lineno="1913"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**stb_tokens_stripwhite(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*delimit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*count);</highlight></codeline>
<codeline lineno="1914"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**stb_tokens_withdelim(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*delimit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*count);</highlight></codeline>
<codeline lineno="1915"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**stb_tokens_quoted(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*delimit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*count);</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>&apos;quoted&apos;,<sp/>allow<sp/>delimiters<sp/>to<sp/>appear<sp/>inside<sp/>quotation<sp/>marks,<sp/>and<sp/>don&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1917"><highlight class="normal"></highlight><highlight class="comment">//<sp/>strip<sp/>whitespace<sp/>inside<sp/>them<sp/>(and<sp/>we<sp/>delete<sp/>the<sp/>quotation<sp/>marks<sp/>unless<sp/>they</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1918"><highlight class="normal"></highlight><highlight class="comment">//<sp/>appear<sp/>back<sp/>to<sp/>back,<sp/>in<sp/>which<sp/>case<sp/>they&apos;re<sp/>considered<sp/>escaped)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1919"><highlight class="normal"></highlight></codeline>
<codeline lineno="1920"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1921"><highlight class="normal"></highlight></codeline>
<codeline lineno="1922"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>stb_strscpy(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*d,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="1923"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>strlen(s);</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;=<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n)<sp/>d[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/>stb_p_strcpy_s(d,n,s);</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="1931"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb_plural(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="1934"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n<sp/>==<sp/>1<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1936"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"></highlight></codeline>
<codeline lineno="1938"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_prefix(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*t)</highlight></codeline>
<codeline lineno="1939"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*t)</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s++<sp/>!=<sp/>*t++)</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_FALSE;</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_TRUE;</highlight></codeline>
<codeline lineno="1944"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"></highlight></codeline>
<codeline lineno="1946"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_prefix_count(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*t)</highlight></codeline>
<codeline lineno="1947"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c=0;</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*t)<sp/>{</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s++<sp/>!=<sp/>*t++)</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++c;</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="1955"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"></highlight></codeline>
<codeline lineno="1957"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_suffix(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*t)</highlight></codeline>
<codeline lineno="1958"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>strlen(s);</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>strlen(t);</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&lt;=<sp/>n)</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0<sp/>==<sp/>strcmp(s+n-m,<sp/>t);</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1965"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"></highlight></codeline>
<codeline lineno="1967"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_suffixi(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*t)</highlight></codeline>
<codeline lineno="1968"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>strlen(s);</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>strlen(t);</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&lt;=<sp/>n)</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0<sp/>==<sp/>stb_stricmp(s+n-m,<sp/>t);</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1975"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"></highlight></codeline>
<codeline lineno="1977"><highlight class="normal"></highlight><highlight class="comment">//<sp/>originally<sp/>I<sp/>was<sp/>using<sp/>this<sp/>table<sp/>so<sp/>that<sp/>I<sp/>could<sp/>create<sp/>known<sp/>sentinel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1978"><highlight class="normal"></highlight><highlight class="comment">//<sp/>values--e.g.<sp/>change<sp/>whitetable[0]<sp/>to<sp/>be<sp/>true<sp/>if<sp/>I<sp/>was<sp/>scanning<sp/>for<sp/>whitespace,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1979"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>false<sp/>if<sp/>I<sp/>was<sp/>scanning<sp/>for<sp/>nonwhite.<sp/>I<sp/>don&apos;t<sp/>appear<sp/>to<sp/>be<sp/>using<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"></highlight><highlight class="comment">//<sp/>functionality<sp/>anymore<sp/>(I<sp/>do<sp/>for<sp/>tokentable,<sp/>though),<sp/>so<sp/>just<sp/>replace<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>isspace()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1982"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb_skipwhite(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)</highlight></codeline>
<codeline lineno="1983"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(isspace((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>*s))<sp/>++s;</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="1986"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"></highlight></codeline>
<codeline lineno="1988"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb_skipnewline(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)</highlight></codeline>
<codeline lineno="1989"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal"><sp/>||<sp/>s[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[0]+s[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>++s;</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++s;</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="1995"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"></highlight></codeline>
<codeline lineno="1997"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb_trimwhite(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)</highlight></codeline>
<codeline lineno="1998"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,n;</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/>s<sp/>=<sp/>stb_skipwhite(s);</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>(int)<sp/>strlen(s);</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=n-1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isspace(s[i]))</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/>s[i+1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="2007"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"></highlight></codeline>
<codeline lineno="2009"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb_strncpy(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*t,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="2010"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/>stb_p_strncpy_s(s,n+1,t,n);</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/>s[n]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="2014"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"></highlight></codeline>
<codeline lineno="2016"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb_substr(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*t,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="2017"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*a;</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>(int)<sp/>strlen(t);</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&lt;<sp/>n)<sp/>n<sp/>=<sp/>z;</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/>a<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(n+1);</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/>stb_p_strncpy_s(a,n+1,t,n);</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/>a[n]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="2025"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"></highlight></codeline>
<codeline lineno="2027"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb_duplower(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)</highlight></codeline>
<codeline lineno="2028"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>stb_p_strdup(s),<sp/>*q<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*q)<sp/>{</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*q<sp/>=<sp/>tolower(*q);</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++q;</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="2035"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"></highlight></codeline>
<codeline lineno="2037"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_tolower(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)</highlight></codeline>
<codeline lineno="2038"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*s)<sp/>{</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*s<sp/>=<sp/>tolower(*s);</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++s;</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2043"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"></highlight></codeline>
<codeline lineno="2045"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb_strchr2(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>y)</highlight></codeline>
<codeline lineno="2046"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;<sp/>*s;<sp/>++s)</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s<sp/>==<sp/>x<sp/>||<sp/>*s<sp/>==<sp/>y)</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2051"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb_strrchr2(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>y)</highlight></codeline>
<codeline lineno="2054"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*r<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;<sp/>*s;<sp/>++s)</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s<sp/>==<sp/>x<sp/>||<sp/>*s<sp/>==<sp/>y)</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="2060"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"></highlight></codeline>
<codeline lineno="2062"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb_strichr(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>t)</highlight></codeline>
<codeline lineno="2063"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tolower(t)<sp/>==<sp/>toupper(t))</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strchr(s,t);</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_strchr2(s,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>tolower(t),<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>toupper(t));</highlight></codeline>
<codeline lineno="2067"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"></highlight></codeline>
<codeline lineno="2069"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb_stristr(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*t)</highlight></codeline>
<codeline lineno="2070"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>strlen(t);</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*z;</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((z<sp/>=<sp/>stb_strichr(s,<sp/>*t))<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0==stb_strnicmp(z,<sp/>t,<sp/>n))</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z;</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>z+1;</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2080"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"></highlight></codeline>
<codeline lineno="2082"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb_strtok_raw(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structoutput" kindref="compound">output</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*delimit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keep,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>invert)</highlight></codeline>
<codeline lineno="2083"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(invert)<sp/>{</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*src<sp/>&amp;&amp;<sp/>strchr(delimit,<sp/>*src)<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="structoutput" kindref="compound">output</ref>++<sp/>=<sp/>*src++;</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*src<sp/>&amp;&amp;<sp/>strchr(delimit,<sp/>*src)<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="structoutput" kindref="compound">output</ref>++<sp/>=<sp/>*src++;</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/>*<ref refid="structoutput" kindref="compound">output</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(keep)</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>src;</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*src<sp/>?<sp/>src+1<sp/>:<sp/>src;</highlight></codeline>
<codeline lineno="2098"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"></highlight></codeline>
<codeline lineno="2100"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb_strtok(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structoutput" kindref="compound">output</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*delimit)</highlight></codeline>
<codeline lineno="2101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_strtok_raw(<ref refid="structoutput" kindref="compound">output</ref>,<sp/>src,<sp/>delimit,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="2103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb_strtok_keep(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structoutput" kindref="compound">output</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*delimit)</highlight></codeline>
<codeline lineno="2106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_strtok_raw(<ref refid="structoutput" kindref="compound">output</ref>,<sp/>src,<sp/>delimit,<sp/>1,<sp/>0);</highlight></codeline>
<codeline lineno="2108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"></highlight></codeline>
<codeline lineno="2110"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb_strtok_invert(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structoutput" kindref="compound">output</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*delimit)</highlight></codeline>
<codeline lineno="2111"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_strtok_raw(<ref refid="structoutput" kindref="compound">output</ref>,<sp/>src,<sp/>delimit,<sp/>1,1);</highlight></codeline>
<codeline lineno="2113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"></highlight></codeline>
<codeline lineno="2115"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**stb_tokens_raw(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src_,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*delimit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*count,</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stripwhite,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>allow_empty,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*start,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*end)</highlight></codeline>
<codeline lineno="2117"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nested<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>src_;</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>stb_tokentable[256];<sp/></highlight><highlight class="comment">//<sp/>rely<sp/>on<sp/>static<sp/>initializion<sp/>to<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>stable[256],etable[256];</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out;</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num=0;</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"></highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/>s<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>delimit;<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*s)<sp/>stb_tokentable[*s++]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start)<sp/>{</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>start;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*s)<sp/>stable[*s++]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>end;<sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)<sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*s)<sp/>stable[*s++]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>end;<sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)<sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*s)<sp/>etable[*s++]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/>stable[0]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"></highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>two<sp/>passes<sp/>through:<sp/>the<sp/>first<sp/>time,<sp/>counting<sp/>how<sp/>many</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/>s<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>src;</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*s)<sp/>{</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>state:<sp/>just<sp/>found<sp/>delimiter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>further<sp/>delimiters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!allow_empty)<sp/>{</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_tokentable[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(stb_tokentable[*s])</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++s;</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!*s)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++num;</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>further<sp/>non-delimiters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_tokentable[0]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stripwhite<sp/>==<sp/>2)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>quoted<sp/>strings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!stb_tokentable[*s])<sp/>{</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++s;</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++s;</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++s;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;&quot;<sp/>-&gt;<sp/>&quot;,<sp/>not<sp/>start<sp/>a<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>begin<sp/>a<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*s)<sp/>{</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">)<sp/>s<sp/>+=<sp/>2;<sp/></highlight><highlight class="comment">//<sp/>&quot;&quot;<sp/>-&gt;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>++s;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}<sp/></highlight><highlight class="comment">//<sp/>terminating<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++s;</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(nested<sp/>||<sp/>!stb_tokentable[*s])<sp/>{</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stable[*s])<sp/>{</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!*s)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>?<sp/>etable[*s]<sp/>:<sp/>nested)</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--nested;</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++nested;</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++s;</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(allow_empty)<sp/>{</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s)<sp/>++s;</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>num<sp/>has<sp/>the<sp/>actual<sp/>count...<sp/>malloc<sp/>our<sp/>output<sp/>structure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>space<sp/>for<sp/>all<sp/>the<sp/>strings:<sp/>strings<sp/>won&apos;t<sp/>be<sp/>any<sp/>longer<sp/>than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>original<sp/>input,<sp/>since<sp/>for<sp/>every<sp/>&apos;\0&apos;<sp/>there&apos;s<sp/>at<sp/>least<sp/>one<sp/>delimiter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*<ref refid="structresult" kindref="compound">result</ref>)<sp/>*<sp/>(num+1)<sp/>+<sp/>(s-src+1));</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structresult" kindref="compound">result</ref><sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/>out<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>(<ref refid="structresult" kindref="compound">result</ref><sp/>+<sp/>(num+1));</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>second<sp/>pass:<sp/>copy<sp/>out<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/>s<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>src;</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/>num<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/>nested<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*s)<sp/>{</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*last_nonwhite;</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>state:<sp/>just<sp/>found<sp/>delimiter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>further<sp/>delimiters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!allow_empty)<sp/>{</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_tokentable[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stripwhite)</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(stb_tokentable[*s]<sp/>||<sp/>isspace(*s))</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++s;</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(stb_tokentable[*s])</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++s;</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stripwhite)<sp/>{</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(isspace(*s))<sp/>++s;</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!*s)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we&apos;re<sp/>past<sp/>any<sp/>leading<sp/>delimiters<sp/>and<sp/>whitespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structresult" kindref="compound">result</ref>[num]<sp/>=<sp/>out;</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++num;</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>non-delimiters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_tokentable[0]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>last_nonwhite<sp/>=<sp/>out-1;</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stripwhite<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!stb_tokentable[*s])<sp/>{</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isspace(*s))<sp/>last_nonwhite<sp/>=<sp/>out;</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>*s++;</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++s;</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isspace(*s))<sp/>last_nonwhite<sp/>=<sp/>out;</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>*s++;<sp/></highlight><highlight class="comment">//<sp/>&quot;&quot;<sp/>-&gt;<sp/>&quot;,<sp/>not<sp/>start<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>begin<sp/>a<sp/>quoted<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*s)<sp/>{</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">)<sp/>{<sp/>*out++<sp/>=<sp/>*s;<sp/>s<sp/>+=<sp/>2;<sp/>}</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>++s;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/>}<sp/></highlight><highlight class="comment">//<sp/>terminating<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>*s++;</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_nonwhite<sp/>=<sp/>out-1;<sp/></highlight><highlight class="comment">//<sp/>all<sp/>in<sp/>quotes<sp/>counts<sp/>as<sp/>non-white</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(nested<sp/>||<sp/>!stb_tokentable[*s])<sp/>{</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isspace(*s))<sp/>last_nonwhite<sp/>=<sp/>out;</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stable[*s])<sp/>{</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!*s)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>?<sp/>etable[*s]<sp/>:<sp/>nested)</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--nested;</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++nested;</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>*s++;</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"></highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stripwhite)<sp/></highlight><highlight class="comment">//<sp/>rewind<sp/>to<sp/>last<sp/>non-whitespace<sp/>char</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>last_nonwhite+1;</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"></highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s)<sp/>++s;<sp/></highlight><highlight class="comment">//<sp/>skip<sp/>delimiter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/>s<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>delimit;<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*s)<sp/>stb_tokentable[*s++]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start)<sp/>{</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>start;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*s)<sp/>stable[*s++]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>end;<sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)<sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*s)<sp/>stable[*s++]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>end;<sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)<sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*s)<sp/>etable[*s++]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>!=<sp/>NULL)<sp/>*count<sp/>=<sp/>num;</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><ref refid="structresult" kindref="compound">result</ref>[num]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="2268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"></highlight></codeline>
<codeline lineno="2270"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**stb_tokens(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*delimit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*count)</highlight></codeline>
<codeline lineno="2271"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_tokens_raw(src,delimit,count,0,0,0,0);</highlight></codeline>
<codeline lineno="2273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"></highlight></codeline>
<codeline lineno="2275"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**stb_tokens_nested(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*delimit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*count,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*nest_in,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*nest_out)</highlight></codeline>
<codeline lineno="2276"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_tokens_raw(src,delimit,count,0,0,nest_in,nest_out);</highlight></codeline>
<codeline lineno="2278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"></highlight></codeline>
<codeline lineno="2280"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**stb_tokens_nested_empty(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*delimit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*count,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*nest_in,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*nest_out)</highlight></codeline>
<codeline lineno="2281"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_tokens_raw(src,delimit,count,0,1,nest_in,nest_out);</highlight></codeline>
<codeline lineno="2283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"></highlight></codeline>
<codeline lineno="2285"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**stb_tokens_allowempty(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*delimit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*count)</highlight></codeline>
<codeline lineno="2286"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_tokens_raw(src,delimit,count,0,1,0,0);</highlight></codeline>
<codeline lineno="2288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"></highlight></codeline>
<codeline lineno="2290"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**stb_tokens_stripwhite(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*delimit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*count)</highlight></codeline>
<codeline lineno="2291"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_tokens_raw(src,delimit,count,1,1,0,0);</highlight></codeline>
<codeline lineno="2293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"></highlight></codeline>
<codeline lineno="2295"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**stb_tokens_quoted(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*delimit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*count)</highlight></codeline>
<codeline lineno="2296"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_tokens_raw(src,delimit,count,2,1,0,0);</highlight></codeline>
<codeline lineno="2298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"></highlight></codeline>
<codeline lineno="2300"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb_dupreplace(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*find,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*replace)</highlight></codeline>
<codeline lineno="2301"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len_find<sp/>=<sp/>strlen(find);</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len_replace<sp/>=<sp/>strlen(replace);</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"></highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,*p,*q;</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"></highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/>s<sp/>=<sp/>strstr(src,<sp/>find);</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_p_strdup(src);</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++count;</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>strstr(s<sp/>+<sp/>len_find,<sp/>find);</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"></highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/>p<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/><sp/>malloc(strlen(src)<sp/>+<sp/>count<sp/>*<sp/>(len_replace<sp/>-<sp/>len_find)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/>q<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/>s<sp/>=<sp/>src;</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*t<sp/>=<sp/>strstr(s,<sp/>find);</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_p_strcpy_s(q,strlen(src)+count*(len_replace-len_find)+1,s);</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(strlen(p)<sp/>==<sp/>strlen(src)<sp/>+<sp/>count*(len_replace-len_find));</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(q,<sp/>s,<sp/>t-s);</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>+=<sp/>t-s;</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(q,<sp/>replace,<sp/>len_replace);</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>+=<sp/>len_replace;</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>t<sp/>+<sp/>len_find;</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"></highlight></codeline>
<codeline lineno="2334"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_replaceinplace(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*find,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*replace)</highlight></codeline>
<codeline lineno="2335"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len_find<sp/>=<sp/>strlen(find);</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len_replace<sp/>=<sp/>strlen(replace);</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delta;</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"></highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,*p,*q;</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"></highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/>delta<sp/>=<sp/>(int)<sp/>(len_replace<sp/>-<sp/>len_find);</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/>assert(delta<sp/>&lt;=<sp/>0);</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(delta<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"></highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/>p<sp/>=<sp/>strstr(src,<sp/>find);</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"></highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/>s<sp/>=<sp/>q<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*s)<sp/>{</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(q,<sp/>replace,<sp/>len_replace);</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>len_find;</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>+=<sp/>len_replace;</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>strstr(p,<sp/>find);</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/>NULL)<sp/>s<sp/>=<sp/>p<sp/>+<sp/>strlen(p);</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memmove(q,<sp/>p,<sp/>s-p);</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>+=<sp/>s-p;</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/>*q<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"></highlight></codeline>
<codeline lineno="2363"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_fixpath(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path)</highlight></codeline>
<codeline lineno="2364"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;<sp/>*path;<sp/>++path)</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*path<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*path<sp/>=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"></highlight></codeline>
<codeline lineno="2370"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__add_section(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,<sp/>ptrdiff_t<sp/>curlen,<sp/>ptrdiff_t<sp/>newlen)</highlight></codeline>
<codeline lineno="2371"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newlen<sp/>&lt;<sp/>curlen)<sp/>{</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptrdiff_t<sp/>z1<sp/>=<sp/>newlen<sp/>&gt;&gt;<sp/>1,<sp/>z2<sp/>=<sp/>newlen-z1;</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>data,<sp/>z1-1);</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[z1-1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[z1-0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<ref refid="classbuffer" kindref="compound">buffer</ref>+z1+1,<sp/>data+curlen-z2+1,<sp/>z2-1);</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>data,<sp/>curlen);</highlight></codeline>
<codeline lineno="2380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"></highlight></codeline>
<codeline lineno="2382"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>stb_shorten_path_readable(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="2383"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[1024];</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/>ptrdiff_t<sp/>n<sp/>=<sp/>strlen(path),n1,n2,r1,r2;</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;=<sp/>len)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>path;</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>1024)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>path;</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/>s<sp/>=<sp/>stb_strrchr2(path,<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)<sp/>{</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n1<sp/>=<sp/>s<sp/>-<sp/>path<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n2<sp/>=<sp/>n<sp/>-<sp/>n1;</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++s;</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n2<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>path;</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>we<sp/>need<sp/>to<sp/>reduce<sp/>r1<sp/>and<sp/>r2<sp/>so<sp/>that<sp/>they<sp/>fit<sp/>in<sp/>len</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n1<sp/>&lt;<sp/>len&gt;&gt;1)<sp/>{</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r1<sp/>=<sp/>n1;</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r2<sp/>=<sp/>len<sp/>-<sp/>r1;</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n2<sp/>&lt;<sp/>len<sp/>&gt;&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r2<sp/>=<sp/>n2;</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r1<sp/>=<sp/>len<sp/>-<sp/>r2;</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r1<sp/>=<sp/>n1<sp/>*<sp/>len<sp/>/<sp/>n;</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r2<sp/>=<sp/>n2<sp/>*<sp/>len<sp/>/<sp/>n;</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r1<sp/>&lt;<sp/>len&gt;&gt;2)<sp/>r1<sp/>=<sp/>len&gt;&gt;2,<sp/>r2<sp/>=<sp/>len-r1;</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r2<sp/>&lt;<sp/>len&gt;&gt;2)<sp/>r2<sp/>=<sp/>len&gt;&gt;2,<sp/>r1<sp/>=<sp/>len-r2;</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/>assert(r1<sp/>&lt;=<sp/>n1<sp/>&amp;&amp;<sp/>r2<sp/>&lt;=<sp/>n2);</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n1)</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__add_section(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>path,<sp/>n1,<sp/>r1);</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/>stb__add_section(<ref refid="classbuffer" kindref="compound">buffer</ref>+r1,<sp/>s,<sp/>n2,<sp/>r2);</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[len]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>;</highlight></codeline>
<codeline lineno="2418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"></highlight></codeline>
<codeline lineno="2420"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb__splitpath_raw(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag)</highlight></codeline>
<codeline lineno="2421"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/>ptrdiff_t<sp/>len=0,x,y,<sp/>n<sp/>=<sp/>(int)<sp/>strlen(path),<sp/>f1,f2;</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s<sp/>=<sp/>stb_strrchr2(path,<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*t<sp/>=<sp/>strrchr(path,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>&amp;&amp;<sp/>t<sp/>&amp;&amp;<sp/>t<sp/>&lt;<sp/>s)<sp/>t<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"></highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s)<sp/>{</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>drive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isalpha(path[0])<sp/>&amp;&amp;<sp/>path[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>&amp;path[1];</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)<sp/>++s;</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"></highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag<sp/>==<sp/>STB_EXT_NO_PERIOD)</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>|=<sp/>STB_EXT;</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"></highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(flag<sp/>&amp;<sp/>(STB_PATH<sp/>|<sp/>STB_FILE<sp/>|<sp/>STB_EXT)))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"></highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/>f1<sp/>=<sp/>s<sp/>==<sp/>NULL<sp/>?<sp/>0<sp/>:<sp/>s-path;<sp/></highlight><highlight class="comment">//<sp/>start<sp/>of<sp/>filename</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/>f2<sp/>=<sp/>t<sp/>==<sp/>NULL<sp/>?<sp/>n<sp/>:<sp/>t-path;<sp/></highlight><highlight class="comment">//<sp/>just<sp/>past<sp/>end<sp/>of<sp/>filename</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2441"><highlight class="normal"></highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag<sp/>&amp;<sp/>STB_PATH)<sp/>{</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>0;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f1<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>flag<sp/>==<sp/>STB_PATH)<sp/>len=2;</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag<sp/>&amp;<sp/>STB_FILE)<sp/>{</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>f1;</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>f2;</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag<sp/>&amp;<sp/>STB_EXT_NO_PERIOD)</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(path[x]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++x;</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"></highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag<sp/>&amp;<sp/>STB_EXT)</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag<sp/>&amp;<sp/>STB_FILE)</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>f2;</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>f1;</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"></highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classbuffer" kindref="compound">buffer</ref><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(y-x<sp/>+<sp/>len<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classbuffer" kindref="compound">buffer</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"></highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len)<sp/>{<sp/>stb_p_strcpy_s(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>3,<sp/></highlight><highlight class="stringliteral">&quot;./&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>;<sp/>}</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/>stb_strncpy(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>path+(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)x,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(y-x));</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>;</highlight></codeline>
<codeline lineno="2468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"></highlight></codeline>
<codeline lineno="2470"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb_splitpath(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structoutput" kindref="compound">output</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag)</highlight></codeline>
<codeline lineno="2471"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb__splitpath_raw(<ref refid="structoutput" kindref="compound">output</ref>,<sp/>src,<sp/>flag);</highlight></codeline>
<codeline lineno="2473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"></highlight></codeline>
<codeline lineno="2475"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb_splitpathdup(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag)</highlight></codeline>
<codeline lineno="2476"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb__splitpath_raw(NULL,<sp/>src,<sp/>flag);</highlight></codeline>
<codeline lineno="2478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"></highlight></codeline>
<codeline lineno="2480"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb_replacedir(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structoutput" kindref="compound">output</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir)</highlight></codeline>
<codeline lineno="2481"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[4096];</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/>stb_splitpath(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>src,<sp/>STB_FILE<sp/>|<sp/>STB_EXT);</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dir)</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_p_sprintf(<ref refid="structoutput" kindref="compound">output</ref><sp/>stb_p_size(9999),<sp/></highlight><highlight class="stringliteral">&quot;%s/%s&quot;</highlight><highlight class="normal">,<sp/>dir,<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>);</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_p_strcpy_s(<ref refid="structoutput" kindref="compound">output</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classbuffer" kindref="compound">buffer</ref>),<sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>);<sp/></highlight><highlight class="comment">//<sp/>@UNSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structoutput" kindref="compound">output</ref>;</highlight></codeline>
<codeline lineno="2489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"></highlight></codeline>
<codeline lineno="2491"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb_replaceext(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structoutput" kindref="compound">output</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ext)</highlight></codeline>
<codeline lineno="2492"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[4096];</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/>stb_splitpath(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>src,<sp/>STB_PATH<sp/>|<sp/>STB_FILE);</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ext)</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_p_sprintf(<ref refid="structoutput" kindref="compound">output</ref><sp/>stb_p_size(9999),<sp/></highlight><highlight class="stringliteral">&quot;%s.%s&quot;</highlight><highlight class="normal">,<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>ext[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal"><sp/>?<sp/>ext+1<sp/>:<sp/>ext);</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_p_strcpy_s(<ref refid="structoutput" kindref="compound">output</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classbuffer" kindref="compound">buffer</ref>),<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>);<sp/></highlight><highlight class="comment">//<sp/>@UNSAFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structoutput" kindref="compound">output</ref>;</highlight></codeline>
<codeline lineno="2500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2502"><highlight class="normal"></highlight></codeline>
<codeline lineno="2504"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2505"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_alloc<sp/>-<sp/>hierarchical<sp/>allocator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2506"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2507"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inspired<sp/>by<sp/>http://swapped.cc/halloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2508"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2509"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2510"><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>you<sp/>alloc<sp/>a<sp/>given<sp/>block<sp/>through<sp/>stb_alloc,<sp/>you<sp/>have<sp/>these<sp/>choices:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2511"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2512"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.<sp/>does<sp/>it<sp/>have<sp/>a<sp/>parent?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2513"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.<sp/>can<sp/>it<sp/>have<sp/>children?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>3.<sp/>can<sp/>it<sp/>be<sp/>freed<sp/>directly?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2515"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>4.<sp/>is<sp/>it<sp/>transferrable?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2516"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>5.<sp/>what<sp/>is<sp/>its<sp/>alignment?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2517"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2518"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Here<sp/>are<sp/>interesting<sp/>combinations<sp/>of<sp/>those:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2519"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2520"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>children<sp/><sp/><sp/>free<sp/><sp/><sp/><sp/>transfer<sp/><sp/><sp/><sp/><sp/>alignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2521"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>arena<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Y<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Y<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n/a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2522"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>no-overhead,<sp/>chunked<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2523"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>string<sp/>pool<sp/>alloc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2524"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>parent-ptr,<sp/>chunked<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Y<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2525"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>low-overhead,<sp/>unchunked<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Y<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Y<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2526"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>general<sp/>purpose<sp/>alloc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Y<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Y<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Y<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2527"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2528"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unchunked<sp/>allocations<sp/>will<sp/>probably<sp/>return<sp/>16-aligned<sp/>pointers.<sp/>If</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2529"><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>16-align<sp/>the<sp/>results,<sp/>we<sp/>have<sp/>room<sp/>for<sp/>4<sp/>pointers.<sp/>For<sp/>smaller</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2530"><highlight class="normal"></highlight><highlight class="comment">//<sp/>allocations<sp/>that<sp/>allow<sp/>finer<sp/>alignment,<sp/>we<sp/>can<sp/>reduce<sp/>the<sp/>pointers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2531"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2532"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>strategy<sp/>is<sp/>that<sp/>given<sp/>a<sp/>pointer,<sp/>assuming<sp/>it<sp/>has<sp/>a<sp/>header<sp/>(only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2533"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>no-overhead<sp/>allocations<sp/>have<sp/>no<sp/>header),<sp/>we<sp/>can<sp/>determine<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2534"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type<sp/>of<sp/>the<sp/>header<sp/>fields,<sp/>and<sp/>the<sp/>number<sp/>of<sp/>them,<sp/>by<sp/>stepping<sp/>backwards</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2535"><highlight class="normal"></highlight><highlight class="comment">//<sp/>through<sp/>memory<sp/>and<sp/>looking<sp/>at<sp/>the<sp/>tags<sp/>in<sp/>the<sp/>bottom<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2536"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2537"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implementation<sp/>strategy:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2538"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>chunked<sp/>allocations<sp/>come<sp/>from<sp/>the<sp/>middle<sp/>of<sp/>chunks,<sp/>and<sp/>can&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2539"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>be<sp/>freed.<sp/>thefore<sp/>they<sp/>do<sp/>not<sp/>need<sp/>to<sp/>be<sp/>on<sp/>a<sp/>sibling<sp/>chain.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2540"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>they<sp/>may<sp/>need<sp/>child<sp/>pointers<sp/>if<sp/>they<sp/>have<sp/>children.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2541"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2542"><highlight class="normal"></highlight><highlight class="comment">//<sp/>chunked,<sp/>with-children</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2543"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>void<sp/>*parent;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2544"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2545"><highlight class="normal"></highlight><highlight class="comment">//<sp/>unchunked,<sp/>no-children<sp/>--<sp/>reduced<sp/>storage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2546"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>void<sp/>*next_sibling;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2547"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>void<sp/>*prev_sibling_nextp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2548"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2549"><highlight class="normal"></highlight><highlight class="comment">//<sp/>unchunked,<sp/>general</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2550"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>void<sp/>*first_child;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2551"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>void<sp/>*next_sibling;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2552"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>void<sp/>*prev_sibling_nextp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2553"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>void<sp/>*chunks;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2554"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2555"><highlight class="normal"></highlight><highlight class="comment">//<sp/>so,<sp/>if<sp/>we<sp/>code<sp/>each<sp/>of<sp/>these<sp/>fields<sp/>with<sp/>different<sp/>bit<sp/>patterns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2556"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(actually<sp/>same<sp/>one<sp/>for<sp/>next/prev/child),<sp/>then<sp/>we<sp/>can<sp/>identify<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2557"><highlight class="normal"></highlight><highlight class="comment">//<sp/>each<sp/>one<sp/>is<sp/>from<sp/>the<sp/>last<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2558"><highlight class="normal"></highlight></codeline>
<codeline lineno="2559"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>stb_free(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p);</highlight></codeline>
<codeline lineno="2560"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb_malloc_global(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="2561"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb_malloc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="2562"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb_malloc_nofree(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="2563"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb_malloc_leaf(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="2564"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb_malloc_raw(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="2565"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb_realloc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newsize);</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"></highlight></codeline>
<codeline lineno="2567"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_reassign(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*new_context,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr);</highlight></codeline>
<codeline lineno="2568"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_malloc_validate(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*parent);</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"></highlight></codeline>
<codeline lineno="2570"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_alloc_chunk_size<sp/>;</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_alloc_count_free<sp/>;</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_alloc_count_alloc;</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_alloc_alignment<sp/><sp/>;</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"></highlight></codeline>
<codeline lineno="2575"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2576"><highlight class="normal"></highlight></codeline>
<codeline lineno="2577"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_alloc_chunk_size<sp/><sp/>=<sp/>65536;</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_alloc_count_free<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_alloc_count_alloc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_alloc_alignment<sp/><sp/><sp/>=<sp/>-16;</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"></highlight></codeline>
<codeline lineno="2582"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stb__chunk</highlight></codeline>
<codeline lineno="2583"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stb__chunk<sp/>*next;</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_left;</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloc;</highlight></codeline>
<codeline lineno="2587"><highlight class="normal">}<sp/>stb__chunk;</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"></highlight></codeline>
<codeline lineno="2589"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2590"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><sp/>next;</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**<sp/>prevn;</highlight></codeline>
<codeline lineno="2593"><highlight class="normal">}<sp/>stb__nochildren;</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"></highlight></codeline>
<codeline lineno="2595"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2596"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**<sp/>prevn;</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><sp/>child;</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><sp/>next;</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/>stb__chunk<sp/>*chunks;</highlight></codeline>
<codeline lineno="2601"><highlight class="normal">}<sp/>stb__alloc;</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"></highlight></codeline>
<codeline lineno="2603"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2604"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/>stb__alloc<sp/>*parent;</highlight></codeline>
<codeline lineno="2606"><highlight class="normal">}<sp/>stb__chunked;</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"></highlight></codeline>
<codeline lineno="2608"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__PARENT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2609"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__CHUNKS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2610"><highlight class="normal"></highlight></codeline>
<codeline lineno="2611"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2612"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/>STB__nochildren<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/>STB__chunked<sp/><sp/><sp/><sp/>=<sp/>STB__PARENT,</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/>STB__alloc<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>STB__CHUNKS,</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"></highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/>STB__chunk_raw<sp/><sp/>=<sp/>4,</highlight></codeline>
<codeline lineno="2618"><highlight class="normal">}<sp/>stb__alloc_type;</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"></highlight></codeline>
<codeline lineno="2620"><highlight class="normal"></highlight><highlight class="comment">//<sp/>these<sp/>functions<sp/>set<sp/>the<sp/>bottom<sp/>bits<sp/>of<sp/>a<sp/>pointer<sp/>efficiently</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2621"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__DECODE(x,v)<sp/><sp/>((void<sp/>*)<sp/>((char<sp/>*)<sp/>(x)<sp/>-<sp/>(v)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2622"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__ENCODE(x,v)<sp/><sp/>((void<sp/>*)<sp/>((char<sp/>*)<sp/>(x)<sp/>+<sp/>(v)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2623"><highlight class="normal"></highlight></codeline>
<codeline lineno="2624"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb__parent(z)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(stb__alloc<sp/>*)<sp/>STB__DECODE((z)-&gt;parent,<sp/>STB__PARENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2625"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb__chunks(z)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(stb__chunk<sp/>*)<sp/>STB__DECODE((z)-&gt;chunks,<sp/>STB__CHUNKS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2626"><highlight class="normal"></highlight></codeline>
<codeline lineno="2627"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb__setparent(z,p)<sp/><sp/>(z)-&gt;parent<sp/>=<sp/>(stb__alloc<sp/>*)<sp/>STB__ENCODE((p),<sp/>STB__PARENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2628"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb__setchunks(z,c)<sp/><sp/>(z)-&gt;chunks<sp/>=<sp/>(stb__chunk<sp/>*)<sp/>STB__ENCODE((c),<sp/>STB__CHUNKS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2629"><highlight class="normal"></highlight></codeline>
<codeline lineno="2630"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb__alloc<sp/>stb__alloc_global<sp/>=</highlight></codeline>
<codeline lineno="2631"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/>NULL,</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/>NULL,</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/>NULL,</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/>(stb__chunk<sp/>*)<sp/>STB__ENCODE(NULL,<sp/>STB__CHUNKS)</highlight></codeline>
<codeline lineno="2636"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"></highlight></codeline>
<codeline lineno="2638"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb__alloc_type<sp/>stb__identify(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="2639"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**q<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>p;</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(stb__alloc_type)<sp/>((stb_uinta)<sp/>q[-1]<sp/>&amp;<sp/>3);</highlight></codeline>
<codeline lineno="2642"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"></highlight></codeline>
<codeline lineno="2644"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>***<sp/>stb__prevn(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="2645"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__identify(p)<sp/>==<sp/>STB__alloc)<sp/>{</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__alloc<sp/><sp/><sp/><sp/><sp/><sp/>*s<sp/>=<sp/>(stb__alloc<sp/>*)<sp/>p<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;s-&gt;prevn;</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__nochildren<sp/>*s<sp/>=<sp/>(stb__nochildren<sp/>*)<sp/>p<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;s-&gt;prevn;</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2653"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"></highlight></codeline>
<codeline lineno="2655"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_free(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="2656"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"></highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>count<sp/>frees<sp/>so<sp/>that<sp/>unit<sp/>tests<sp/>can<sp/>see<sp/>what&apos;s<sp/>happening</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/>++stb_alloc_count_free;</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"></highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(stb__identify(p))<sp/>{</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB__chunked:</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>freeing<sp/>a<sp/>chunked-block<sp/>with<sp/>children<sp/>does<sp/>nothing;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>they<sp/>only<sp/>get<sp/>freed<sp/>when<sp/>the<sp/>parent<sp/>does</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>surely<sp/>this<sp/>is<sp/>wrong,<sp/>and<sp/>it<sp/>should<sp/>free<sp/>them<sp/>immediately?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise<sp/>how<sp/>are<sp/>they<sp/>getting<sp/>put<sp/>on<sp/>the<sp/>right<sp/>chain?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB__nochildren:<sp/>{</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__nochildren<sp/>*s<sp/>=<sp/>(stb__nochildren<sp/>*)<sp/>p<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unlink<sp/>from<sp/>sibling<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(s-&gt;prevn)<sp/>=<sp/>s-&gt;next;</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(s-&gt;next)</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*stb__prevn(s-&gt;next)<sp/>=<sp/>s-&gt;prevn;</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(s);</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB__alloc:<sp/>{</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__alloc<sp/>*s<sp/>=<sp/>(stb__alloc<sp/>*)<sp/>p<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__chunk<sp/>*c,<sp/>*n;</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*q;</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"></highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unlink<sp/>from<sp/>sibling<sp/>chain,<sp/>if<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(s-&gt;prevn)<sp/>=<sp/>s-&gt;next;</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(s-&gt;next)</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*stb__prevn(s-&gt;next)<sp/>=<sp/>s-&gt;prevn;</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"></highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>free<sp/>chunks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>(stb__chunk<sp/>*)<sp/>stb__chunks(s);</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>c-&gt;next;</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_alloc_count_free<sp/>+=<sp/>c-&gt;alloc;</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(c);</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"></highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>validating</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__setchunks(s,NULL);</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;prevn<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"></highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>free<sp/>children</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((q<sp/>=<sp/>s-&gt;child)<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_free(q);</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"></highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>free<sp/>self</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(s);</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(0);<sp/></highlight><highlight class="comment">/*<sp/>NOTREACHED<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2714"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"></highlight></codeline>
<codeline lineno="2716"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_malloc_validate(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*parent)</highlight></codeline>
<codeline lineno="2717"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"></highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(stb__identify(p))<sp/>{</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB__chunked:</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB__nochildren:<sp/>{</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__nochildren<sp/>*n<sp/>=<sp/>(stb__nochildren<sp/>*)<sp/>p<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n-&gt;prevn)</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(*n-&gt;prevn<sp/>==<sp/>p);</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(*stb__prevn(n-&gt;next)<sp/>==<sp/>&amp;n-&gt;next);</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_malloc_validate(n,<sp/>parent);</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB__alloc:<sp/>{</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__alloc<sp/>*s<sp/>=<sp/>(stb__alloc<sp/>*)<sp/>p<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"></highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;prevn)</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(*s-&gt;prevn<sp/>==<sp/>p);</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"></highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;child)<sp/>{</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(*stb__prevn(s-&gt;child)<sp/>==<sp/>&amp;s-&gt;child);</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_malloc_validate(s-&gt;child,<sp/>p);</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"></highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(*stb__prevn(s-&gt;next)<sp/>==<sp/>&amp;s-&gt;next);</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_malloc_validate(s-&gt;next,<sp/>parent);</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(0);<sp/></highlight><highlight class="comment">/*<sp/>NOTREACHED<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2753"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"></highlight></codeline>
<codeline lineno="2755"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>stb__try_chunk(stb__chunk<sp/>*c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>align,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pre_align)</highlight></codeline>
<codeline lineno="2756"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*memblock<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>(c+1),<sp/>*q;</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/><sp/>stb_inta<sp/>iq;</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start_offset;</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"></highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>going<sp/>to<sp/>allocate<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>chunk,<sp/>not<sp/>the<sp/>start.<sp/>confusing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>it<sp/>means<sp/>we<sp/>don&apos;t<sp/>need<sp/>both<sp/>a<sp/>&apos;limit&apos;<sp/>and<sp/>a<sp/>&apos;cur&apos;,<sp/>just<sp/>a<sp/>&apos;cur&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>block<sp/>ends<sp/>at:<sp/>p<sp/>+<sp/>c-&gt;data_left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>then<sp/>we<sp/>move<sp/>back<sp/>by<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/>start_offset<sp/>=<sp/>c-&gt;data_left<sp/>-<sp/>size;</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"></highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>we<sp/>need<sp/>to<sp/>check<sp/>the<sp/>alignment<sp/>of<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/>q<sp/>=<sp/>memblock<sp/>+<sp/>start_offset;</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/>iq<sp/>=<sp/>(stb_inta)<sp/>q;</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(q)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(iq));</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"></highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>suppose<sp/>align<sp/>=<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>we<sp/>need<sp/>to<sp/>retreat<sp/>iq<sp/>far<sp/>enough<sp/>that<sp/>(iq<sp/>&amp;<sp/>(2-1))<sp/>==<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>get<sp/>(iq<sp/>&amp;<sp/>(align-1))<sp/>=<sp/>0<sp/>requires<sp/>subtracting<sp/>(iq<sp/>&amp;<sp/>(align-1))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2775"><highlight class="normal"></highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/><sp/>start_offset<sp/>-=<sp/>iq<sp/>&amp;<sp/>(align-1);</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/>assert(((stb_uinta)<sp/>(memblock+start_offset)<sp/>&amp;<sp/>(align-1))<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"></highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now,<sp/>if<sp/>that<sp/>+<sp/>pre_align<sp/>works,<sp/>go<sp/>for<sp/>it!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/>start_offset<sp/>-=<sp/>pre_align;</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"></highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start_offset<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;data_left<sp/>=<sp/>start_offset;</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>memblock<sp/>+<sp/>start_offset;</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"></highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2788"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"></highlight></codeline>
<codeline lineno="2790"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__sort_chunks(stb__alloc<sp/>*src)</highlight></codeline>
<codeline lineno="2791"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>first<sp/>two<sp/>chunks,<sp/>put<sp/>the<sp/>chunk<sp/>with<sp/>more<sp/>data<sp/>left<sp/>in<sp/>it<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/><sp/>stb__chunk<sp/>*c<sp/>=<sp/>stb__chunks(src),<sp/>*d;</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/>d<sp/>=<sp/>c-&gt;next;</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;data_left<sp/>&gt;<sp/>d-&gt;data_left)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"></highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/>c-&gt;next<sp/>=<sp/>d-&gt;next;</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><sp/>d-&gt;next<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/><sp/>stb__setchunks(src,<sp/>d);</highlight></codeline>
<codeline lineno="2802"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"></highlight></codeline>
<codeline lineno="2804"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>stb__alloc_chunk(stb__alloc<sp/>*src,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>align,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pre_align)</highlight></codeline>
<codeline lineno="2805"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/><sp/>stb__chunk<sp/>*c<sp/>=<sp/>stb__chunks(src);</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"></highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&amp;&amp;<sp/>size<sp/>&lt;=<sp/>stb_alloc_chunk_size)<sp/>{</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"></highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>stb__try_chunk(c,<sp/>size,<sp/>align,<sp/>pre_align);</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p)<sp/>{<sp/>++c-&gt;alloc;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;<sp/>}</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"></highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>a<sp/>second<sp/>chunk<sp/>to<sp/>reduce<sp/>wastage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>stb__try_chunk(c-&gt;next,<sp/>size,<sp/>align,<sp/>pre_align);</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p)<sp/>{<sp/>++c-&gt;alloc;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;<sp/>}</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"></highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>put<sp/>the<sp/>bigger<sp/>chunk<sp/>first,<sp/>since<sp/>the<sp/>second<sp/>will<sp/>get<sp/>buried</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>upshot<sp/>of<sp/>this<sp/>is<sp/>that,<sp/>until<sp/>it<sp/>gets<sp/>allocated<sp/>from,<sp/>chunk<sp/>#2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>always<sp/>the<sp/>largest<sp/>remaining<sp/>chunk.<sp/>(could<sp/>formalize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>with<sp/>a<sp/>heap!)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__sort_chunks(src);</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>stb__chunks(src);</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"></highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>a<sp/>new<sp/>chunk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__chunk<sp/>*n;</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"></highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chunk_size<sp/>=<sp/>stb_alloc_chunk_size;</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we&apos;re<sp/>going<sp/>to<sp/>allocate<sp/>a<sp/>new<sp/>chunk<sp/>to<sp/>put<sp/>this<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&gt;<sp/>chunk_size)</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chunk_size<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"></highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*n)<sp/>+<sp/>pre_align<sp/>&lt;=<sp/>16);</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"></highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>loop<sp/>trying<sp/>to<sp/>allocate<sp/>a<sp/>large<sp/>enough<sp/>chunk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>loop<sp/>is<sp/>because<sp/>the<sp/>alignment<sp/>may<sp/>cause<sp/>problems<sp/>if<sp/>it&apos;s<sp/>big...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>we<sp/>don&apos;t<sp/>know<sp/>what<sp/>our<sp/>chunk<sp/>alignment<sp/>is<sp/>going<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(stb__chunk<sp/>*)<sp/>malloc(16<sp/>+<sp/>chunk_size);</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"></highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;data_left<sp/>=<sp/>chunk_size<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*n);</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"></highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>stb__try_chunk(n,<sp/>size,<sp/>align,<sp/>pre_align);</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;next<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__setchunks(src,<sp/>n);</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"></highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>just<sp/>used<sp/>up<sp/>the<sp/>whole<sp/>block<sp/>immediately,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>move<sp/>the<sp/>following<sp/>chunk<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;alloc<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/>chunk_size)</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__sort_chunks(src);</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"></highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"></highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(n);</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chunk_size<sp/>+=<sp/>16+align;</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2866"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"></highlight></codeline>
<codeline lineno="2868"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb__alloc<sp/>*<sp/>stb__get_context(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context)</highlight></codeline>
<codeline lineno="2869"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(context<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;stb__alloc_global;</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>u<sp/>=<sp/>stb__identify(context);</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>context<sp/>is<sp/>chunked,<sp/>grab<sp/>parent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(u<sp/>==<sp/>STB__chunked)<sp/>{</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__chunked<sp/>*s<sp/>=<sp/>(stb__chunked<sp/>*)<sp/>context<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb__parent(s);</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(stb__alloc<sp/>*)<sp/>context<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2882"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"></highlight></codeline>
<codeline lineno="2884"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__insert_alloc(stb__alloc<sp/>*src,<sp/>stb__alloc<sp/>*s)</highlight></codeline>
<codeline lineno="2885"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/><sp/>s-&gt;prevn<sp/>=<sp/>&amp;src-&gt;child;</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/>s-&gt;next<sp/><sp/>=<sp/>src-&gt;child;</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/><sp/>src-&gt;child<sp/>=<sp/>s+1;</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;next)</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*stb__prevn(s-&gt;next)<sp/>=<sp/>&amp;s-&gt;next;</highlight></codeline>
<codeline lineno="2891"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"></highlight></codeline>
<codeline lineno="2893"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__insert_nochild(stb__alloc<sp/>*src,<sp/>stb__nochildren<sp/>*s)</highlight></codeline>
<codeline lineno="2894"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/><sp/>s-&gt;prevn<sp/>=<sp/>&amp;src-&gt;child;</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/>s-&gt;next<sp/><sp/>=<sp/>src-&gt;child;</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/>src-&gt;child<sp/>=<sp/>s+1;</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;next)</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*stb__prevn(s-&gt;next)<sp/>=<sp/>&amp;s-&gt;next;</highlight></codeline>
<codeline lineno="2900"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"></highlight></codeline>
<codeline lineno="2902"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>malloc_base(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/>stb__alloc_type<sp/>t,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>align)</highlight></codeline>
<codeline lineno="2903"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"></highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/><sp/>stb__alloc<sp/>*src<sp/>=<sp/>stb__get_context(context);</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"></highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(align<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>worst-case<sp/>C<sp/>packed<sp/>alignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>e.g.<sp/>a<sp/>24-byte<sp/>struct<sp/>is<sp/>8-aligned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>align_proposed<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>stb_lowbit8((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>size);</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"></highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(align_proposed<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>align_proposed<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"></highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(align_proposed<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>align_proposed<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>align_proposed<sp/>=<sp/>256;</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"></highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>negative<sp/>alignment<sp/>means<sp/>&apos;don&apos;t<sp/>align<sp/>any<sp/>larger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>than<sp/>this&apos;;<sp/>so<sp/>-16<sp/>means<sp/>we<sp/>align<sp/>1,2,4,8,<sp/>or<sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2925"><highlight class="normal"></highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(align<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(align_proposed<sp/>&gt;<sp/>-align)</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>align_proposed<sp/>=<sp/>-align;</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"></highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>align<sp/>=<sp/>align_proposed;</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"></highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/><sp/>assert(stb_is_pow2(align));</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"></highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>cause<sp/>misalignment<sp/>when<sp/>allocating<sp/>nochildren</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>STB__nochildren<sp/>&amp;&amp;<sp/>align<sp/>&gt;<sp/>8)</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>STB__alloc;</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"></highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(t)<sp/>{</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB__alloc:<sp/>{</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__alloc<sp/>*s<sp/>=<sp/>(stb__alloc<sp/>*)<sp/>malloc(size<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*s));</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>s+1;</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;child<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__insert_alloc(src,<sp/>s);</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"></highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__setchunks(s,NULL);</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"></highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB__nochildren:<sp/>{</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__nochildren<sp/>*s<sp/>=<sp/>(stb__nochildren<sp/>*)<sp/>malloc(size<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*s));</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>s+1;</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__insert_nochild(src,<sp/>s);</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"></highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB__chunk_raw:<sp/>{</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>stb__alloc_chunk(src,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>size,<sp/>align,<sp/>0);</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"></highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB__chunked:<sp/>{</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__chunked<sp/>*s;</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(align<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="unionstb__uintptr" kindref="compound">stb_uintptr</ref>))<sp/>align<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="unionstb__uintptr" kindref="compound">stb_uintptr</ref>);</highlight></codeline>
<codeline lineno="2969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>(stb__chunked<sp/>*)<sp/>stb__alloc_chunk(src,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>size,<sp/>align,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*s));</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__setparent(s,<sp/>src);</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>s+1;</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"></highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>p<sp/>=<sp/>NULL;<sp/>assert(0);<sp/></highlight><highlight class="comment">/*<sp/>NOTREACHED<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"></highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/>++stb_alloc_count_alloc;</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="2981"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"></highlight></codeline>
<codeline lineno="2983"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb_malloc_global(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="2984"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>malloc_base(NULL,<sp/>size,<sp/>STB__alloc,<sp/>stb_alloc_alignment);</highlight></codeline>
<codeline lineno="2986"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"></highlight></codeline>
<codeline lineno="2988"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb_malloc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="2989"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>malloc_base(context,<sp/>size,<sp/>STB__alloc,<sp/>stb_alloc_alignment);</highlight></codeline>
<codeline lineno="2991"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"></highlight></codeline>
<codeline lineno="2993"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb_malloc_nofree(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="2994"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>malloc_base(context,<sp/>size,<sp/>STB__chunked,<sp/>stb_alloc_alignment);</highlight></codeline>
<codeline lineno="2996"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"></highlight></codeline>
<codeline lineno="2998"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb_malloc_leaf(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="2999"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>malloc_base(context,<sp/>size,<sp/>STB__nochildren,<sp/>stb_alloc_alignment);</highlight></codeline>
<codeline lineno="3001"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"></highlight></codeline>
<codeline lineno="3003"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb_malloc_raw(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="3004"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>malloc_base(context,<sp/>size,<sp/>STB__chunk_raw,<sp/>stb_alloc_alignment);</highlight></codeline>
<codeline lineno="3006"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"></highlight></codeline>
<codeline lineno="3008"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb_malloc_string(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="3009"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc_base(context,<sp/>size,<sp/>STB__chunk_raw,<sp/>1);</highlight></codeline>
<codeline lineno="3011"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"></highlight></codeline>
<codeline lineno="3013"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb_realloc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newsize)</highlight></codeline>
<codeline lineno="3014"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/><sp/>stb__alloc_type<sp/>t;</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"></highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_malloc(NULL,<sp/>newsize);</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newsize<sp/>==<sp/>0)<sp/>{<sp/>stb_free(ptr);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/>}</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"></highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/><sp/>t<sp/>=<sp/>stb__identify(ptr);</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/>assert(t<sp/>==<sp/>STB__alloc<sp/>||<sp/>t<sp/>==<sp/>STB__nochildren);</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"></highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>STB__alloc)<sp/>{</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__alloc<sp/>*s<sp/>=<sp/>(stb__alloc<sp/>*)<sp/>ptr<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"></highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>(stb__alloc<sp/>*)<sp/>realloc(s,<sp/>newsize<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*s));</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"></highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>s+1;</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"></highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*s-&gt;prevn)<sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;next)</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*stb__prevn(s-&gt;next)<sp/>=<sp/>&amp;s-&gt;next;</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"></highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;child)</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*stb__prevn(s-&gt;child)<sp/>=<sp/>&amp;s-&gt;child;</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"></highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__nochildren<sp/>*s<sp/>=<sp/>(stb__nochildren<sp/>*)<sp/>ptr<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"></highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>(stb__nochildren<sp/>*)<sp/>realloc(ptr,<sp/>newsize<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(s));</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"></highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*s-&gt;prevn)<sp/>=<sp/>s+1;</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;next)</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*stb__prevn(s-&gt;next)<sp/>=<sp/>&amp;s-&gt;next;</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"></highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s+1;</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3053"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"></highlight></codeline>
<codeline lineno="3055"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb_realloc_c(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newsize)</highlight></codeline>
<codeline lineno="3056"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_malloc(context,<sp/>newsize);</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newsize<sp/>==<sp/>0)<sp/>{<sp/>stb_free(ptr);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/>}</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>verify<sp/>you<sp/>haven&apos;t<sp/>changed<sp/>contexts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_realloc(ptr,<sp/>newsize);</highlight></codeline>
<codeline lineno="3061"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"></highlight></codeline>
<codeline lineno="3063"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_reassign(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*new_context,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr)</highlight></codeline>
<codeline lineno="3064"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/><sp/>stb__alloc<sp/>*src<sp/>=<sp/>stb__get_context(new_context);</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"></highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/><sp/>stb__alloc_type<sp/>t<sp/>=<sp/>stb__identify(ptr);</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/><sp/>assert(t<sp/>==<sp/>STB__alloc<sp/>||<sp/>t<sp/>==<sp/>STB__nochildren);</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"></highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>STB__alloc)<sp/>{</highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__alloc<sp/>*s<sp/>=<sp/>(stb__alloc<sp/>*)<sp/>ptr<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"></highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unlink<sp/>from<sp/>old</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*(s-&gt;prevn)<sp/>=<sp/>s-&gt;next;</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(s-&gt;next)</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*stb__prevn(s-&gt;next)<sp/>=<sp/>s-&gt;prevn;</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"></highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__insert_alloc(src,<sp/>s);</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__nochildren<sp/>*s<sp/>=<sp/>(stb__nochildren<sp/>*)<sp/>ptr<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"></highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unlink<sp/>from<sp/>old</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*(s-&gt;prevn)<sp/>=<sp/>s-&gt;next;</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(s-&gt;next)</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*stb__prevn(s-&gt;next)<sp/>=<sp/>s-&gt;prevn;</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"></highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__insert_nochild(src,<sp/>s);</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3089"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"></highlight></codeline>
<codeline lineno="3091"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3092"><highlight class="normal"></highlight></codeline>
<codeline lineno="3093"><highlight class="normal"></highlight></codeline>
<codeline lineno="3095"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3096"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3097"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3098"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>An<sp/>stb_arr<sp/>is<sp/>directly<sp/>useable<sp/>as<sp/>a<sp/>pointer<sp/>(use<sp/>the<sp/>actual<sp/>type<sp/>in<sp/>your</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3099"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>definition),<sp/>but<sp/>when<sp/>it<sp/>resizes,<sp/>it<sp/>returns<sp/>a<sp/>new<sp/>pointer<sp/>and<sp/>you<sp/>can&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3100"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>use<sp/>the<sp/>old<sp/>one,<sp/>so<sp/>you<sp/>have<sp/>to<sp/>be<sp/>careful<sp/>to<sp/>copy-in-out<sp/>as<sp/>necessary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3101"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3102"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Use<sp/>a<sp/>NULL<sp/>pointer<sp/>as<sp/>a<sp/>0-length<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3103"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3104"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>float<sp/>*my_array<sp/>=<sp/>NULL,<sp/>*temp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3105"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3106"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>add<sp/>elements<sp/>on<sp/>the<sp/>end<sp/>one<sp/>at<sp/>a<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3107"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>stb_arr_push(my_array,<sp/>0.0f);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3108"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>stb_arr_push(my_array,<sp/>1.0f);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3109"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>stb_arr_push(my_array,<sp/>2.0f);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3110"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3111"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>assert(my_array[1]<sp/>==<sp/>2.0f);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3112"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3113"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>add<sp/>an<sp/>uninitialized<sp/>element<sp/>at<sp/>the<sp/>end,<sp/>then<sp/>assign<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3114"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*stb_arr_add(my_array)<sp/>=<sp/>3.0f;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3115"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3116"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>add<sp/>three<sp/>uninitialized<sp/>elements<sp/>at<sp/>the<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3117"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>stb_arr_addn(my_array,3);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3118"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>temp[0]<sp/>=<sp/>4.0f;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3119"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>temp[1]<sp/>=<sp/>5.0f;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3120"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>temp[2]<sp/>=<sp/>6.0f;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3121"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3122"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>assert(my_array[5]<sp/>==<sp/>5.0f);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3123"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3124"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>remove<sp/>the<sp/>last<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3125"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>stb_arr_pop(my_array);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3126"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3127"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>assert(stb_arr_len(my_array)<sp/>==<sp/>6);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3128"><highlight class="normal"></highlight></codeline>
<codeline lineno="3129"><highlight class="normal"></highlight></codeline>
<codeline lineno="3130"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_MALLOC_WRAPPER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3131"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>STB__PARAMS<sp/><sp/><sp/><sp/>,<sp/>char<sp/>*file,<sp/>int<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3132"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>STB__ARGS<sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>file,<sp/><sp/><sp/><sp/><sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3133"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3134"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>STB__PARAMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3135"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>STB__ARGS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3136"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3137"><highlight class="normal"></highlight></codeline>
<codeline lineno="3138"><highlight class="normal"></highlight><highlight class="comment">//<sp/>calling<sp/>this<sp/>function<sp/>allocates<sp/>an<sp/>empty<sp/>stb_arr<sp/>attached<sp/>to<sp/>p</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3139"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(whereas<sp/>NULL<sp/>isn&apos;t<sp/>attached<sp/>to<sp/>anything)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3140"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_arr_malloc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**target,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context);</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"></highlight></codeline>
<codeline lineno="3142"><highlight class="normal"></highlight><highlight class="comment">//<sp/>call<sp/>this<sp/>function<sp/>with<sp/>a<sp/>non-NULL<sp/>value<sp/>to<sp/>have<sp/>all<sp/>successive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>stbs<sp/>that<sp/>are<sp/>created<sp/>be<sp/>attached<sp/>to<sp/>the<sp/>associated<sp/>parent.<sp/>Note</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3144"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>once<sp/>a<sp/>given<sp/>stb_arr<sp/>is<sp/>non-empty,<sp/>it<sp/>stays<sp/>attached<sp/>to<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3145"><highlight class="normal"></highlight><highlight class="comment">//<sp/>current<sp/>parent,<sp/>even<sp/>if<sp/>you<sp/>call<sp/>this<sp/>function<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>turns<sp/>the<sp/>previous<sp/>value,<sp/>so<sp/>you<sp/>can<sp/>restore<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3147"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>stb_arr_malloc_parent(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p);</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"></highlight></codeline>
<codeline lineno="3149"><highlight class="normal"></highlight><highlight class="comment">//<sp/>simple<sp/>functions<sp/>written<sp/>on<sp/>top<sp/>of<sp/>other<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3150"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_arr_empty(a)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/><sp/>stb_arr_len(a)<sp/>==<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3151"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_arr_add(a)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/><sp/>stb_arr_addn((a),1)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3152"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_arr_push(a,v)<sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>*stb_arr_add(a)=(v)<sp/><sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3153"><highlight class="normal"></highlight></codeline>
<codeline lineno="3154" refid="structstb____arr" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3155"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/>limit;</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_malloc;</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>signature;</highlight></codeline>
<codeline lineno="3159"><highlight class="normal">}<sp/><ref refid="structstb____arr" kindref="compound">stb__arr</ref>;</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"></highlight></codeline>
<codeline lineno="3161"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_arr_signature<sp/><sp/><sp/><sp/><sp/><sp/>0x51bada7b<sp/><sp/></highlight><highlight class="comment">//<sp/>ends<sp/>with<sp/>0123<sp/>in<sp/>decimal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3162"><highlight class="normal"></highlight></codeline>
<codeline lineno="3163"><highlight class="normal"></highlight><highlight class="comment">//<sp/>access<sp/>the<sp/>header<sp/>block<sp/>stored<sp/>before<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3164"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_arrhead(a)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e(826)*/</highlight><highlight class="preprocessor"><sp/>(((stb__arr<sp/>*)<sp/>(a))<sp/>-<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3165"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_arrhead2(a)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e(826)*/</highlight><highlight class="preprocessor"><sp/>(((stb__arr<sp/>*)<sp/>(a))<sp/>-<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3166"><highlight class="normal"></highlight></codeline>
<codeline lineno="3167"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3168"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_arr_check(a)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(!a<sp/>||<sp/>stb_arrhead(a)-&gt;signature<sp/>==<sp/>stb_arr_signature)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3169"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_arr_check2(a)<sp/><sp/><sp/><sp/><sp/><sp/>assert(!a<sp/>||<sp/>stb_arrhead2(a)-&gt;signature<sp/>==<sp/>stb_arr_signature)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3170"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3171"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_arr_check(a)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((void)<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3172"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_arr_check2(a)<sp/><sp/><sp/><sp/><sp/><sp/>((void)<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3173"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3174"><highlight class="normal"></highlight></codeline>
<codeline lineno="3175"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ARRAY<sp/>LENGTH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3176"><highlight class="normal"></highlight></codeline>
<codeline lineno="3177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>array<sp/>length;<sp/>special<sp/>case<sp/>if<sp/>pointer<sp/>is<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3178"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_arr_len(a)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(a<sp/>?<sp/>stb_arrhead(a)-&gt;len<sp/>:<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3179"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_arr_len2(a)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((stb__arr<sp/>*)<sp/>(a)<sp/>?<sp/>stb_arrhead2(a)-&gt;len<sp/>:<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3180"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_arr_lastn(a)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(stb_arr_len(a)-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3181"><highlight class="normal"></highlight></codeline>
<codeline lineno="3182"><highlight class="normal"></highlight><highlight class="comment">//<sp/>check<sp/>whether<sp/>a<sp/>given<sp/>index<sp/>is<sp/>valid<sp/>--<sp/>tests<sp/>0<sp/>&lt;=<sp/>i<sp/>&lt;<sp/>stb_arr_len(a)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3183"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_arr_valid(a,i)<sp/><sp/><sp/><sp/><sp/>(a<sp/>?<sp/>(int)<sp/>(i)<sp/>&lt;<sp/>stb_arrhead(a)-&gt;len<sp/>:<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3184"><highlight class="normal"></highlight></codeline>
<codeline lineno="3185"><highlight class="normal"></highlight><highlight class="comment">//<sp/>change<sp/>the<sp/>array<sp/>length<sp/>so<sp/>is<sp/>is<sp/>exactly<sp/>N<sp/>entries<sp/>long,<sp/>creating</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3186"><highlight class="normal"></highlight><highlight class="comment">//<sp/>uninitialized<sp/>entries<sp/>as<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3187"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_arr_setlen(a,n)<sp/><sp/>\</highlight></codeline>
<codeline lineno="3188"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(stb__arr_setlen((void<sp/>**)<sp/>&amp;(a),<sp/>sizeof(a[0]),<sp/>(n)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3189"><highlight class="normal"></highlight></codeline>
<codeline lineno="3190"><highlight class="normal"></highlight><highlight class="comment">//<sp/>change<sp/>the<sp/>array<sp/>length<sp/>so<sp/>that<sp/>N<sp/>is<sp/>a<sp/>valid<sp/>index<sp/>(that<sp/>is,<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3191"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>is<sp/>at<sp/>least<sp/>N<sp/>entries<sp/>long),<sp/>creating<sp/>uninitialized<sp/>entries<sp/>as<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3192"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_arr_makevalid(a,n)<sp/><sp/>\</highlight></codeline>
<codeline lineno="3193"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(stb_arr_len(a)<sp/>&lt;<sp/>(n)+1<sp/>?<sp/>stb_arr_setlen(a,(n)+1),(a)<sp/>:<sp/>(a))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3194"><highlight class="normal"></highlight></codeline>
<codeline lineno="3195"><highlight class="normal"></highlight><highlight class="comment">//<sp/>remove<sp/>the<sp/>last<sp/>element<sp/>of<sp/>the<sp/>array,<sp/>returning<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3196"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_arr_pop(a)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((stb_arr_check(a),<sp/>(a))[--stb_arrhead(a)-&gt;len])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3197"><highlight class="normal"></highlight></codeline>
<codeline lineno="3198"><highlight class="normal"></highlight><highlight class="comment">//<sp/>access<sp/>the<sp/>last<sp/>element<sp/>in<sp/>the<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3199"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_arr_last(a)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((stb_arr_check(a),<sp/>(a))[stb_arr_len(a)-1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3200"><highlight class="normal"></highlight></codeline>
<codeline lineno="3201"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>iterator<sp/>at<sp/>end<sp/>of<sp/>list?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3202"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_arr_end(a,i)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((i)<sp/>&gt;=<sp/>&amp;(a)[stb_arr_len(a)])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3203"><highlight class="normal"></highlight></codeline>
<codeline lineno="3204"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(internal)<sp/>change<sp/>the<sp/>allocated<sp/>length<sp/>of<sp/>the<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3205"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_arr__grow(a,n)<sp/><sp/><sp/><sp/><sp/>(stb_arr_check(a),<sp/>stb_arrhead(a)-&gt;len<sp/>+=<sp/>(n))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3206"><highlight class="normal"></highlight></codeline>
<codeline lineno="3207"><highlight class="normal"></highlight><highlight class="comment">//<sp/>add<sp/>N<sp/>new<sp/>uninitialized<sp/>elements<sp/>to<sp/>the<sp/>end<sp/>of<sp/>the<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3208"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_arr__addn(a,n)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*lint<sp/>--e(826)*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="3209"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((stb_arr_len(a)+(n)<sp/>&gt;<sp/>stb_arrcurmax(a))<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3210"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(stb__arr_addlen((void<sp/>**)<sp/>&amp;(a),sizeof(*a),(n)),0)<sp/>\</highlight></codeline>
<codeline lineno="3211"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>((stb_arr__grow(a,n),<sp/>0)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3212"><highlight class="normal"></highlight></codeline>
<codeline lineno="3213"><highlight class="normal"></highlight><highlight class="comment">//<sp/>add<sp/>N<sp/>new<sp/>uninitialized<sp/>elements<sp/>to<sp/>the<sp/>end<sp/>of<sp/>the<sp/>array,<sp/>and<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3214"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>first<sp/>new<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3215"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_arr_addn(a,n)<sp/><sp/><sp/><sp/><sp/><sp/>(stb_arr__addn((a),n),(a)+stb_arr_len(a)-(n))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3216"><highlight class="normal"></highlight></codeline>
<codeline lineno="3217"><highlight class="normal"></highlight><highlight class="comment">//<sp/>add<sp/>N<sp/>new<sp/>uninitialized<sp/>elements<sp/>starting<sp/>at<sp/>index<sp/>&apos;i&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3218"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_arr_insertn(a,i,n)<sp/>(stb__arr_insertn((void<sp/>**)<sp/>&amp;(a),<sp/>sizeof(*a),<sp/>(i),<sp/>(n)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3219"><highlight class="normal"></highlight></codeline>
<codeline lineno="3220"><highlight class="normal"></highlight><highlight class="comment">//<sp/>insert<sp/>an<sp/>element<sp/>at<sp/>i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3221"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_arr_insert(a,i,v)<sp/><sp/>(stb__arr_insertn((void<sp/>**)<sp/>&amp;(a),<sp/>sizeof(*a),<sp/>(i),<sp/>(1)),<sp/>((a)[i]<sp/>=<sp/>v))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3222"><highlight class="normal"></highlight></codeline>
<codeline lineno="3223"><highlight class="normal"></highlight><highlight class="comment">//<sp/>delete<sp/>N<sp/>elements<sp/>from<sp/>the<sp/>middle<sp/>starting<sp/>at<sp/>index<sp/>&apos;i&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3224"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_arr_deleten(a,i,n)<sp/>(stb__arr_deleten((void<sp/>**)<sp/>&amp;(a),<sp/>sizeof(*a),<sp/>(i),<sp/>(n)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3225"><highlight class="normal"></highlight></codeline>
<codeline lineno="3226"><highlight class="normal"></highlight><highlight class="comment">//<sp/>delete<sp/>the<sp/>i&apos;th<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3227"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_arr_delete(a,i)<sp/><sp/><sp/>stb_arr_deleten(a,i,1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3228"><highlight class="normal"></highlight></codeline>
<codeline lineno="3229"><highlight class="normal"></highlight><highlight class="comment">//<sp/>delete<sp/>the<sp/>i&apos;th<sp/>element,<sp/>swapping<sp/>down<sp/>from<sp/>the<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3230"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_arr_fastdelete(a,i)<sp/><sp/>\</highlight></codeline>
<codeline lineno="3231"><highlight class="preprocessor"><sp/><sp/><sp/>(stb_swap(&amp;a[i],<sp/>&amp;a[stb_arrhead(a)-&gt;len-1],<sp/>sizeof(*a)),<sp/>stb_arr_pop(a))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3232"><highlight class="normal"></highlight></codeline>
<codeline lineno="3233"><highlight class="normal"></highlight></codeline>
<codeline lineno="3234"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ARRAY<sp/>STORAGE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3235"><highlight class="normal"></highlight></codeline>
<codeline lineno="3236"><highlight class="normal"></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>array<sp/>maximum<sp/>storage;<sp/>special<sp/>case<sp/>if<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3237"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_arrcurmax(a)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(a<sp/>?<sp/>stb_arrhead(a)-&gt;limit<sp/>:<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3238"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_arrcurmax2(a)<sp/><sp/><sp/><sp/><sp/><sp/>(a<sp/>?<sp/>stb_arrhead2(a)-&gt;limit<sp/>:<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3239"><highlight class="normal"></highlight></codeline>
<codeline lineno="3240"><highlight class="normal"></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>maxlength<sp/>of<sp/>the<sp/>array<sp/>to<sp/>n<sp/>in<sp/>anticipation<sp/>of<sp/>further<sp/>growth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3241"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_arr_setsize(a,n)<sp/><sp/><sp/>(stb_arr_check(a),<sp/>stb__arr_setsize((void<sp/>**)<sp/>&amp;(a),sizeof((a)[0]),n))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3242"><highlight class="normal"></highlight></codeline>
<codeline lineno="3243"><highlight class="normal"></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>maxlength<sp/>is<sp/>large<sp/>enough<sp/>for<sp/>at<sp/>least<sp/>N<sp/>new<sp/>allocations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3244"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_arr_atleast(a,n)<sp/><sp/><sp/>(stb_arr_len(a)+(n)<sp/>&gt;<sp/>stb_arrcurmax(a)<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3245"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>stb_arr_setsize((a),<sp/>(n))<sp/>:<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3246"><highlight class="normal"></highlight></codeline>
<codeline lineno="3247"><highlight class="normal"></highlight><highlight class="comment">//<sp/>make<sp/>a<sp/>copy<sp/>of<sp/>a<sp/>given<sp/>array<sp/>(copies<sp/>contents<sp/>via<sp/>&apos;memcpy&apos;!)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3248"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_arr_copy(a)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__arr_copy(a,<sp/>sizeof((a)[0]))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3249"><highlight class="normal"></highlight></codeline>
<codeline lineno="3250"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>storage<sp/>needed<sp/>to<sp/>store<sp/>all<sp/>the<sp/>elements<sp/>of<sp/>the<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3251"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_arr_storage(a)<sp/><sp/><sp/><sp/><sp/>(stb_arr_len(a)<sp/>*<sp/>sizeof((a)[0]))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3252"><highlight class="normal"></highlight></codeline>
<codeline lineno="3253"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_arr_for(v,arr)<sp/><sp/><sp/><sp/><sp/>for((v)=(arr);<sp/>(v)<sp/>&lt;<sp/>(arr)+stb_arr_len(arr);<sp/>++(v))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3254"><highlight class="normal"></highlight></codeline>
<codeline lineno="3255"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3256"><highlight class="normal"></highlight></codeline>
<codeline lineno="3257"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_arr_free_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**p);</highlight></codeline>
<codeline lineno="3258"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb__arr_copy_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>elem_size);</highlight></codeline>
<codeline lineno="3259"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__arr_setsize_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>limit<sp/><sp/>STB__PARAMS);</highlight></codeline>
<codeline lineno="3260"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__arr_setlen_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newlen<sp/><sp/>STB__PARAMS);</highlight></codeline>
<codeline lineno="3261"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__arr_addlen_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>addlen<sp/><sp/>STB__PARAMS);</highlight></codeline>
<codeline lineno="3262"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__arr_deleten_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>loc,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/><sp/>STB__PARAMS);</highlight></codeline>
<codeline lineno="3263"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__arr_insertn_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>loc,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/><sp/>STB__PARAMS);</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"></highlight></codeline>
<codeline lineno="3265"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_arr_free(p)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_free_((void<sp/>**)<sp/>&amp;(p))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3266"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb__arr_copy<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__arr_copy_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3267"><highlight class="normal"></highlight></codeline>
<codeline lineno="3268"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_MALLOC_WRAPPER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3269"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>stb__arr_setsize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__arr_setsize_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3270"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>stb__arr_setlen<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__arr_setlen_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3271"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>stb__arr_addlen<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__arr_addlen_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3272"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>stb__arr_deleten<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__arr_deleten_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3273"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>stb__arr_insertn<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__arr_insertn_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3274"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3275"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>stb__arr_addlen(p,s,n)<sp/><sp/><sp/><sp/>stb__arr_addlen_(p,s,n,__FILE__,__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3276"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>stb__arr_setlen(p,s,n)<sp/><sp/><sp/><sp/>stb__arr_setlen_(p,s,n,__FILE__,__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3277"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>stb__arr_setsize(p,s,n)<sp/><sp/><sp/>stb__arr_setsize_(p,s,n,__FILE__,__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3278"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>stb__arr_deleten(p,s,i,n)<sp/>stb__arr_deleten_(p,s,i,n,__FILE__,__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3279"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>stb__arr_insertn(p,s,i,n)<sp/>stb__arr_insertn_(p,s,i,n,__FILE__,__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3280"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3281"><highlight class="normal"></highlight></codeline>
<codeline lineno="3282"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3283"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb__arr_context;</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"></highlight></codeline>
<codeline lineno="3285"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb_arr_malloc_parent(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="3286"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*q<sp/>=<sp/>stb__arr_context;</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/><sp/>stb__arr_context<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>q;</highlight></codeline>
<codeline lineno="3290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"></highlight></codeline>
<codeline lineno="3292"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_arr_malloc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**target,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context)</highlight></codeline>
<codeline lineno="3293"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstb____arr" kindref="compound">stb__arr</ref><sp/>*q<sp/>=<sp/>(<ref refid="structstb____arr" kindref="compound">stb__arr</ref><sp/>*)<sp/>stb_malloc(context,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*q));</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/>q-&gt;len<sp/>=<sp/>q-&gt;limit<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/><sp/>q-&gt;stb_malloc<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/><sp/>q-&gt;signature<sp/>=<sp/>stb_arr_signature;</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/><sp/>*target<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>(q+1);</highlight></codeline>
<codeline lineno="3299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"></highlight></codeline>
<codeline lineno="3301"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>stb__arr_malloc(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="3302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__arr_context)</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_malloc(stb__arr_context,<sp/>size);</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>malloc(size);</highlight></codeline>
<codeline lineno="3306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"></highlight></codeline>
<codeline lineno="3308"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>stb__arr_copy_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>elem_size)</highlight></codeline>
<codeline lineno="3309"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstb____arr" kindref="compound">stb__arr</ref><sp/>*q;</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/><sp/>q<sp/>=<sp/>(<ref refid="structstb____arr" kindref="compound">stb__arr</ref><sp/>*)<sp/>stb__arr_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*q)<sp/>+<sp/>elem_size<sp/>*<sp/>stb_arrhead2(p)-&gt;limit);</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/><sp/>stb_arr_check2(p);</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/><sp/>memcpy(q,<sp/>stb_arrhead2(p),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*q)<sp/>+<sp/>elem_size<sp/>*<sp/>stb_arrhead2(p)-&gt;len);</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/><sp/>q-&gt;stb_malloc<sp/>=<sp/>!!stb__arr_context;</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>q+1;</highlight></codeline>
<codeline lineno="3317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"></highlight></codeline>
<codeline lineno="3319"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_arr_free_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**pp)</highlight></codeline>
<codeline lineno="3320"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>*pp;</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/><sp/>stb_arr_check2(p);</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p)<sp/>{</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structstb____arr" kindref="compound">stb__arr</ref><sp/>*q<sp/>=<sp/>stb_arrhead2(p);</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q-&gt;stb_malloc)</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_free(q);</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(q);</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/><sp/>*pp<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"></highlight></codeline>
<codeline lineno="3333"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__arrsize_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**pp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>limit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/><sp/>STB__PARAMS)</highlight></codeline>
<codeline lineno="3334"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>*pp;</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstb____arr" kindref="compound">stb__arr</ref><sp/>*a;</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/><sp/>stb_arr_check2(p);</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>size<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>(<ref refid="structstb____arr" kindref="compound">stb__arr</ref><sp/>*)<sp/>stb__arr_malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*a)<sp/>+<sp/>size*limit);</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;limit<sp/>=<sp/>limit;</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;len<sp/><sp/><sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;stb_malloc<sp/>=<sp/>!!stb__arr_context;</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;signature<sp/>=<sp/>stb_arr_signature;</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>stb_arrhead2(p);</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;len<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;limit<sp/>&lt;<sp/>limit)<sp/>{</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;limit<sp/>&gt;=<sp/>4<sp/>&amp;&amp;<sp/>limit<sp/>&lt;<sp/>a-&gt;limit<sp/>*<sp/>2)</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>limit<sp/>=<sp/>a-&gt;limit<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;stb_malloc)</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>stb_realloc(a,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*a)<sp/>+<sp/>limit*size);</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3355"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>STB_MALLOC_WRAPPER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>stb__realloc(a,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*a)<sp/>+<sp/>limit*size,<sp/>file,<sp/>line);</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>realloc(a,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*a)<sp/>+<sp/>limit*size);</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p)<sp/>{</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>(<ref refid="structstb____arr" kindref="compound">stb__arr</ref><sp/>*)<sp/>p;</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;limit<sp/>=<sp/>limit;</highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>throw<sp/>an<sp/>error!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/>a-&gt;len<sp/><sp/><sp/>=<sp/>stb_min(a-&gt;len,<sp/>a-&gt;limit);</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/><sp/>*pp<sp/>=<sp/>a+1;</highlight></codeline>
<codeline lineno="3370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"></highlight></codeline>
<codeline lineno="3372"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__arr_setsize_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**pp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>limit<sp/><sp/>STB__PARAMS)</highlight></codeline>
<codeline lineno="3373"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>*pp;</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/><sp/>stb_arr_check2(p);</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/>stb__arrsize_(pp,<sp/>size,<sp/>limit,<sp/>stb_arr_len2(p)<sp/><sp/>STB__ARGS);</highlight></codeline>
<codeline lineno="3377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"></highlight></codeline>
<codeline lineno="3379"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__arr_setlen_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**pp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newlen<sp/><sp/>STB__PARAMS)</highlight></codeline>
<codeline lineno="3380"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>*pp;</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/><sp/>stb_arr_check2(p);</highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb_arrcurmax2(p)<sp/>&lt;<sp/>newlen<sp/>||<sp/>p<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__arrsize_(pp,<sp/>size,<sp/>newlen,<sp/>newlen<sp/><sp/>STB__ARGS);</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_arrhead2(p)-&gt;len<sp/>=<sp/>newlen;</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"></highlight></codeline>
<codeline lineno="3390"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__arr_addlen_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>addlen<sp/><sp/>STB__PARAMS)</highlight></codeline>
<codeline lineno="3391"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/><sp/>stb__arr_setlen_(p,<sp/>size,<sp/>stb_arr_len2(*p)<sp/>+<sp/>addlen<sp/><sp/>STB__ARGS);</highlight></codeline>
<codeline lineno="3393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"></highlight></codeline>
<codeline lineno="3395"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__arr_insertn_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**pp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/><sp/>STB__PARAMS)</highlight></codeline>
<codeline lineno="3396"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>*pp;</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n)<sp/>{</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z;</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"></highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__arr_addlen_(pp,<sp/>size,<sp/>n<sp/><sp/>STB__ARGS);</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"></highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>stb_arr_len2(p);</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__arr_addlen_(&amp;p,<sp/>size,<sp/>n<sp/><sp/>STB__ARGS);</highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memmove((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>p<sp/>+<sp/>(i+n)*size,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>p<sp/>+<sp/>i*size,<sp/>size<sp/>*<sp/>(z-i));</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/><sp/>*pp<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="3411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3412"><highlight class="normal"></highlight></codeline>
<codeline lineno="3413"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__arr_deleten_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**pp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/><sp/>STB__PARAMS)</highlight></codeline>
<codeline lineno="3414"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>*pp;</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n)<sp/>{</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memmove((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>p<sp/>+<sp/>i*size,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>p<sp/>+<sp/>(i+n)*size,<sp/>size<sp/>*<sp/>(stb_arr_len2(p)-(i+n)));</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_arrhead2(p)-&gt;len<sp/>-=<sp/>n;</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/><sp/>*pp<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="3421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"></highlight></codeline>
<codeline lineno="3423"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3424"><highlight class="normal"></highlight></codeline>
<codeline lineno="3426"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3427"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Hashing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3428"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3429"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>typical<sp/>use<sp/>for<sp/>this<sp/>is<sp/>to<sp/>make<sp/>a<sp/>power-of-two<sp/>hash<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3430"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3431"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>let<sp/>N<sp/>=<sp/>size<sp/>of<sp/>table<sp/>(2^n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3432"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>let<sp/>H<sp/>=<sp/>stb_hash(str)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3433"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>let<sp/>S<sp/>=<sp/>stb_rehash(H)<sp/>|<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3434"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3435"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>then<sp/>hash<sp/>probe<sp/>sequence<sp/>P(i)<sp/>for<sp/>i=0..N-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3436"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P(i)<sp/>=<sp/>(H<sp/>+<sp/>S*i)<sp/>&amp;<sp/>(N-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3437"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3438"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>idea<sp/>is<sp/>that<sp/>H<sp/>has<sp/>32<sp/>bits<sp/>of<sp/>hash<sp/>information,<sp/>but<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3439"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>table<sp/>has<sp/>only,<sp/>say,<sp/>2^20<sp/>entries<sp/>so<sp/>only<sp/>uses<sp/>20<sp/>of<sp/>the<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3440"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>then<sp/>by<sp/>rehashing<sp/>the<sp/>original<sp/>H<sp/>we<sp/>get<sp/>2^12<sp/>different<sp/>probe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3441"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>sequences<sp/>for<sp/>a<sp/>given<sp/>initial<sp/>probe<sp/>location.<sp/>(So<sp/>it&apos;s<sp/>optimal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3442"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>64K<sp/>tables<sp/>and<sp/>its<sp/>optimality<sp/>decreases<sp/>past<sp/>that.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3443"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3444"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>ok,<sp/>so<sp/>I&apos;ve<sp/>added<sp/>something<sp/>that<sp/>generates<sp/>_two<sp/>separate_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3445"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>32-bit<sp/>hashes<sp/>simultaneously<sp/>which<sp/>should<sp/>scale<sp/>better<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3446"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>very<sp/>large<sp/>tables.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3447"><highlight class="normal"></highlight></codeline>
<codeline lineno="3448"><highlight class="normal"></highlight></codeline>
<codeline lineno="3449"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_hash(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str);</highlight></codeline>
<codeline lineno="3450"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_hashptr(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p);</highlight></codeline>
<codeline lineno="3451"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_hashlen(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="3452"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_rehash_improved(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v);</highlight></codeline>
<codeline lineno="3453"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_hash_fast(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="3454"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_hash2(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*hash2_ptr);</highlight></codeline>
<codeline lineno="3455"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_hash_number(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hash);</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"></highlight></codeline>
<codeline lineno="3457"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_rehash(x)<sp/><sp/>((x)<sp/>+<sp/>((x)<sp/>&gt;&gt;<sp/>6)<sp/>+<sp/>((x)<sp/>&gt;&gt;<sp/>19))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3458"><highlight class="normal"></highlight></codeline>
<codeline lineno="3459"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3460"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_hash(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)</highlight></codeline>
<codeline lineno="3461"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hash<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*str)</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hash<sp/>=<sp/>(hash<sp/>&lt;&lt;<sp/>7)<sp/>+<sp/>(hash<sp/>&gt;&gt;<sp/>25)<sp/>+<sp/>*str++;</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hash<sp/>+<sp/>(hash<sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="3466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"></highlight></codeline>
<codeline lineno="3468"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_hashlen(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="3469"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hash<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(len--<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>*str)</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hash<sp/>=<sp/>(hash<sp/>&lt;&lt;<sp/>7)<sp/>+<sp/>(hash<sp/>&gt;&gt;<sp/>25)<sp/>+<sp/>*str++;</highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hash<sp/>+<sp/>(hash<sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="3474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3475"><highlight class="normal"></highlight></codeline>
<codeline lineno="3476"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_hashptr(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="3477"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>p;</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"></highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>typically<sp/>lacking<sp/>in<sp/>low<sp/>bits<sp/>and<sp/>high<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/><sp/>x<sp/>=<sp/>stb_rehash(x);</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/><sp/>x<sp/>+=<sp/>x<sp/>&lt;&lt;<sp/>16;</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"></highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pearson&apos;s<sp/>shuffle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/><sp/>x<sp/>^=<sp/>x<sp/>&lt;&lt;<sp/>3;</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/><sp/>x<sp/>+=<sp/>x<sp/>&gt;&gt;<sp/>5;</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/><sp/>x<sp/>^=<sp/>x<sp/>&lt;&lt;<sp/>2;</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/><sp/>x<sp/>+=<sp/>x<sp/>&gt;&gt;<sp/>15;</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/><sp/>x<sp/>^=<sp/>x<sp/>&lt;&lt;<sp/>10;</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_rehash(x);</highlight></codeline>
<codeline lineno="3491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"></highlight></codeline>
<codeline lineno="3493"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_rehash_improved(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v)</highlight></codeline>
<codeline lineno="3494"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_hashptr((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>v);</highlight></codeline>
<codeline lineno="3496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"></highlight></codeline>
<codeline lineno="3498"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_hash2(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*hash2_ptr)</highlight></codeline>
<codeline lineno="3499"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hash1<sp/>=<sp/>0x3141592c;</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hash2<sp/>=<sp/>0x77f044ed;</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*str)<sp/>{</highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hash1<sp/>=<sp/>(hash1<sp/>&lt;&lt;<sp/>7)<sp/>+<sp/>(hash1<sp/>&gt;&gt;<sp/>25)<sp/>+<sp/>*str;</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hash2<sp/>=<sp/>(hash2<sp/>&lt;&lt;<sp/>11)<sp/>+<sp/>(hash2<sp/>&gt;&gt;<sp/>21)<sp/>+<sp/>*str;</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++str;</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/><sp/>*hash2_ptr<sp/>=<sp/>hash2<sp/>+<sp/>(hash1<sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash1<sp/>+<sp/>(hash2<sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="3509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3510"><highlight class="normal"></highlight></codeline>
<codeline lineno="3511"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Paul<sp/>Hsieh<sp/>hash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3512"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb__get16(p)<sp/>((p)[0]<sp/>|<sp/>((p)[1]<sp/>&lt;&lt;<sp/>8))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3513"><highlight class="normal"></highlight></codeline>
<codeline lineno="3514"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_hash_fast(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="3515"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3516"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*q<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>p;</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hash<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"></highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&lt;=<sp/>0<sp/>||<sp/>q<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"></highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Main<sp/>loop<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;len<sp/>&gt;<sp/>3;<sp/>len<sp/>-=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hash<sp/>+=<sp/><sp/>stb__get16(q);</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/><sp/><sp/>=<sp/>(stb__get16(q+2)<sp/>&lt;&lt;<sp/>11);</highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hash<sp/><sp/>=<sp/>(hash<sp/>&lt;&lt;<sp/>16)<sp/>^<sp/>hash<sp/>^<sp/>val;</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/><sp/><sp/><sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hash<sp/>+=<sp/>hash<sp/>&gt;&gt;<sp/>11;</highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3530"><highlight class="normal"></highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Handle<sp/>end<sp/>cases<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(len)<sp/>{</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:<sp/>hash<sp/>+=<sp/>stb__get16(q);</highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash<sp/>^=<sp/>hash<sp/>&lt;&lt;<sp/>16;</highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash<sp/>^=<sp/>q[2]<sp/>&lt;&lt;<sp/>18;</highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash<sp/>+=<sp/>hash<sp/>&gt;&gt;<sp/>11;</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/>hash<sp/>+=<sp/>stb__get16(q);</highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash<sp/>^=<sp/>hash<sp/>&lt;&lt;<sp/>11;</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash<sp/>+=<sp/>hash<sp/>&gt;&gt;<sp/>17;</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/>hash<sp/>+=<sp/>q[0];</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash<sp/>^=<sp/>hash<sp/>&lt;&lt;<sp/>10;</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash<sp/>+=<sp/>hash<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3548"><highlight class="normal"></highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Force<sp/>&quot;avalanching&quot;<sp/>of<sp/>final<sp/>127<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/><sp/>hash<sp/>^=<sp/>hash<sp/>&lt;&lt;<sp/>3;</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/><sp/>hash<sp/>+=<sp/>hash<sp/>&gt;&gt;<sp/>5;</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><sp/>hash<sp/>^=<sp/>hash<sp/>&lt;&lt;<sp/>4;</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/>hash<sp/>+=<sp/>hash<sp/>&gt;&gt;<sp/>17;</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/><sp/>hash<sp/>^=<sp/>hash<sp/>&lt;&lt;<sp/>25;</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><sp/>hash<sp/>+=<sp/>hash<sp/>&gt;&gt;<sp/>6;</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"></highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hash;</highlight></codeline>
<codeline lineno="3558"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"></highlight></codeline>
<codeline lineno="3560"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_hash_number(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hash)</highlight></codeline>
<codeline lineno="3561"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/><sp/>hash<sp/>^=<sp/>hash<sp/>&lt;&lt;<sp/>3;</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/><sp/>hash<sp/>+=<sp/>hash<sp/>&gt;&gt;<sp/>5;</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/><sp/>hash<sp/>^=<sp/>hash<sp/>&lt;&lt;<sp/>4;</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/><sp/>hash<sp/>+=<sp/>hash<sp/>&gt;&gt;<sp/>17;</highlight></codeline>
<codeline lineno="3566"><highlight class="normal"><sp/><sp/><sp/>hash<sp/>^=<sp/>hash<sp/>&lt;&lt;<sp/>25;</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/><sp/>hash<sp/>+=<sp/>hash<sp/>&gt;&gt;<sp/>6;</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hash;</highlight></codeline>
<codeline lineno="3569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"></highlight></codeline>
<codeline lineno="3571"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3572"><highlight class="normal"></highlight></codeline>
<codeline lineno="3573"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_PERFECT_HASH</highlight></codeline>
<codeline lineno="3575"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3576"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Perfect<sp/>hashing<sp/>for<sp/>ints/pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3577"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3578"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>This<sp/>is<sp/>mainly<sp/>useful<sp/>for<sp/>making<sp/>faster<sp/>pointer-indexed<sp/>tables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3579"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>that<sp/>don&apos;t<sp/>change<sp/>frequently.<sp/>E.g.<sp/>for<sp/>stb_ischar().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3580"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3581"><highlight class="normal"></highlight></codeline>
<codeline lineno="3582"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3583"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/><sp/>stb_uint32<sp/><sp/>addend;</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/><sp/>stb_uint<sp/><sp/><sp/><sp/>multiplicand;</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/><sp/>stb_uint<sp/><sp/><sp/><sp/>b_mask;</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/><sp/>stb_uint8<sp/><sp/><sp/>small_bmap[16];</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/><sp/>stb_uint16<sp/><sp/>*large_bmap;</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"></highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/><sp/>stb_uint<sp/>table_mask;</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/><sp/>stb_uint32<sp/>*<ref refid="structtable" kindref="compound">table</ref>;</highlight></codeline>
<codeline lineno="3592"><highlight class="normal">}<sp/>stb_perfect;</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"></highlight></codeline>
<codeline lineno="3594"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_perfect_create(stb_perfect<sp/>*,</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="3595"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_perfect_destroy(stb_perfect<sp/>*);</highlight></codeline>
<codeline lineno="3596"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_perfect_hash(stb_perfect<sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_perfect_hash_max_failures;</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"></highlight></codeline>
<codeline lineno="3599"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3600"><highlight class="normal"></highlight></codeline>
<codeline lineno="3601"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_perfect_hash_max_failures;</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"></highlight></codeline>
<codeline lineno="3603"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_perfect_hash(stb_perfect<sp/>*p,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)</highlight></codeline>
<codeline lineno="3604"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/><sp/>stb_uint<sp/>m<sp/>=<sp/>x<sp/>*<sp/>p-&gt;multiplicand;</highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/><sp/>stb_uint<sp/>y<sp/>=<sp/>x<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/><sp/>stb_uint<sp/>bv<sp/>=<sp/>(m<sp/>&gt;&gt;<sp/>24)<sp/>+<sp/>y;</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/><sp/>stb_uint<sp/>av<sp/>=<sp/>(m<sp/>+<sp/>y)<sp/>&gt;&gt;<sp/>12;</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;table<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;<sp/><sp/></highlight><highlight class="comment">//<sp/>uninitialized<sp/>table<sp/>fails</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/>bv<sp/>&amp;=<sp/>p-&gt;b_mask;</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/><sp/>av<sp/>&amp;=<sp/>p-&gt;table_mask;</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;large_bmap)</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>av<sp/>^=<sp/>p-&gt;large_bmap[bv];</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>av<sp/>^=<sp/>p-&gt;small_bmap[bv];</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p-&gt;table[av]<sp/>==<sp/>x<sp/>?<sp/>av<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="3617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"></highlight></codeline>
<codeline lineno="3619"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__perfect_prehash(stb_perfect<sp/>*p,<sp/>stb_uint<sp/>x,<sp/>stb_uint16<sp/>*a,<sp/>stb_uint16<sp/>*b)</highlight></codeline>
<codeline lineno="3620"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/><sp/>stb_uint<sp/>m<sp/>=<sp/>x<sp/>*<sp/>p-&gt;multiplicand;</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/><sp/>stb_uint<sp/>y<sp/>=<sp/>x<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"><sp/><sp/><sp/>stb_uint<sp/>bv<sp/>=<sp/>(m<sp/>&gt;&gt;<sp/>24)<sp/>+<sp/>y;</highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/><sp/>stb_uint<sp/>av<sp/>=<sp/>(m<sp/>+<sp/>y)<sp/>&gt;&gt;<sp/>12;</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/><sp/>bv<sp/>&amp;=<sp/>p-&gt;b_mask;</highlight></codeline>
<codeline lineno="3626"><highlight class="normal"><sp/><sp/><sp/>av<sp/>&amp;=<sp/>p-&gt;table_mask;</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"><sp/><sp/><sp/>*b<sp/>=<sp/>bv;</highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/><sp/>*a<sp/>=<sp/>av;</highlight></codeline>
<codeline lineno="3629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"></highlight></codeline>
<codeline lineno="3631"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>stb__perfect_rand(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3632"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>stb__rand;</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/><sp/>stb__rand<sp/>=<sp/>stb__rand<sp/>*<sp/>2147001325<sp/>+<sp/>715136305;</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0x31415926<sp/>^<sp/>((stb__rand<sp/>&gt;&gt;<sp/>16)<sp/>+<sp/>(stb__rand<sp/>&lt;&lt;<sp/>16));</highlight></codeline>
<codeline lineno="3636"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"></highlight></codeline>
<codeline lineno="3638"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>b;</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>map;</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*entries;</highlight></codeline>
<codeline lineno="3643"><highlight class="normal">}<sp/>stb__slot;</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"></highlight></codeline>
<codeline lineno="3645"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__slot_compare(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*q)</highlight></codeline>
<codeline lineno="3646"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/><sp/>stb__slot<sp/>*a<sp/>=<sp/>(stb__slot<sp/>*)<sp/>p;</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/><sp/>stb__slot<sp/>*b<sp/>=<sp/>(stb__slot<sp/>*)<sp/>q;</highlight></codeline>
<codeline lineno="3649"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a-&gt;count<sp/>&gt;<sp/>b-&gt;count<sp/>?<sp/>-1<sp/>:<sp/>a-&gt;count<sp/>&lt;<sp/>b-&gt;count;<sp/><sp/></highlight><highlight class="comment">//<sp/>sort<sp/>large<sp/>to<sp/>small</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3650"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"></highlight></codeline>
<codeline lineno="3652"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_perfect_create(stb_perfect<sp/>*p,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="3653"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buffer1[64],<sp/>buffer2[64],<sp/>buffer3[64],<sp/>buffer4[64],<sp/>buffer5[32];</highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*as<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*)<sp/>stb_temp(buffer1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*v)*n);</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*bs<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*)<sp/>stb_temp(buffer2,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*v)*n);</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*entries<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*)<sp/>stb_temp(buffer4,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*entries)<sp/>*<sp/>n);</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>stb_log2_ceil(n),<sp/>bsize=8;</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>failure<sp/>=<sp/>0,i,j,k;</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"></highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/><sp/>assert(n<sp/>&lt;=<sp/>32768);</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/>p-&gt;large_bmap<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"></highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)<sp/>{</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__slot<sp/>*bcount<sp/>=<sp/>(stb__slot<sp/>*)<sp/>stb_temp(buffer3,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*bcount)<sp/>*<sp/>bsize);</highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*bloc<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*)<sp/>stb_temp(buffer5,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*bloc)<sp/>*<sp/>bsize);</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>;</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bad=0;</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"></highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;addend<sp/>=<sp/>stb__perfect_rand();</highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;multiplicand<sp/>=<sp/>stb__perfect_rand()<sp/>|<sp/>1;</highlight></codeline>
<codeline lineno="3672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;table_mask<sp/>=<sp/>size-1;</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;b_mask<sp/>=<sp/>bsize-1;</highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;table<sp/>=<sp/>(stb_uint32<sp/>*)<sp/>malloc(size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*p-&gt;table));</highlight></codeline>
<codeline lineno="3675"><highlight class="normal"></highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>bsize;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bcount[i].b<sp/><sp/><sp/><sp/><sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bcount[i].count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bcount[i].map<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__perfect_prehash(p,<sp/>v[i],<sp/>as+i,<sp/>bs+i);</highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++bcount[bs[i]].count;</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qsort(bcount,<sp/>bsize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*bcount),<sp/>stb__slot_compare);</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref><sp/>=<sp/>entries;<sp/></highlight><highlight class="comment">//<sp/>now<sp/>setup<sp/>up<sp/>their<sp/>entries<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>bsize;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bcount[i].entries<sp/>=<sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>;</highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref><sp/>+=<sp/>bcount[i].count;</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bcount[i].count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bloc[bcount[i].b]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>fill<sp/>them<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>bs[i];</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w<sp/>=<sp/>bloc[b];</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bcount[w].entries[bcount[w].count++]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_tempfree(buffer5,bloc);</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>verify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>bsize;<sp/>++i)</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>bcount[i].count;<sp/>++j)</highlight></codeline>
<codeline lineno="3703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(bs[bcount[i].entries[j]]<sp/>==<sp/>bcount[i].b);</highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memset(p-&gt;table,<sp/>0,<sp/>size*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*p-&gt;table));</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"></highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>any<sp/>b<sp/>has<sp/>duplicate<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>bsize;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bcount[i].count<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>bcount[i].count;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;table[as[bcount[i].entries[j]]])</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bad<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;table[as[bcount[i].entries[j]]]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>bcount[i].count;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;table[as[bcount[i].entries[j]]]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bad)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"></highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bad)<sp/>{</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>go<sp/>through<sp/>the<sp/>bs<sp/>and<sp/>populate<sp/>the<sp/>table,<sp/>first<sp/>fit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>bsize;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bcount[i].count)<sp/>{</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>go<sp/>through<sp/>the<sp/>candidate<sp/>table[b]<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>size;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>go<sp/>through<sp/>the<sp/>a<sp/>values<sp/>and<sp/>see<sp/>if<sp/>they<sp/>fit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=0;<sp/>k<sp/>&lt;<sp/>bcount[i].count;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>as[bcount[i].entries[k]];</highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;table[(a^j)&amp;p-&gt;table_mask])<sp/>{</highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>fails</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>succeeded,<sp/>accept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>==<sp/>bcount[i].count)<sp/>{</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bcount[i].map<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=0;<sp/>k<sp/>&lt;<sp/>bcount[i].count;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>as[bcount[i].entries[k]];</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;table[(a^j)&amp;p-&gt;table_mask]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>size)</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>no<sp/>match<sp/>for<sp/>i&apos;th<sp/>entry,<sp/>so<sp/>break<sp/>out<sp/>in<sp/>failure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>bsize)<sp/>{</highlight></codeline>
<codeline lineno="3749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>success...<sp/>fill<sp/>out<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bsize<sp/>&lt;=<sp/>16<sp/>&amp;&amp;<sp/>size<sp/>&lt;=<sp/>256)<sp/>{</highlight></codeline>
<codeline lineno="3751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;large_bmap<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>bsize;<sp/>++i)</highlight></codeline>
<codeline lineno="3753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;small_bmap[bcount[i].b]<sp/>=<sp/>(stb_uint8)<sp/>bcount[i].map;</highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;large_bmap<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*p-&gt;large_bmap)<sp/>*<sp/>bsize);</highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>bsize;<sp/>++i)</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;large_bmap[bcount[i].b]<sp/>=<sp/>bcount[i].map;</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"></highlight></codeline>
<codeline lineno="3760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>table<sp/>to<sp/>v[0],<sp/>so<sp/>empty<sp/>slots<sp/>will<sp/>fail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;table[i]<sp/>=<sp/>v[0];</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"></highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(i=0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;large_bmap)</highlight></codeline>
<codeline lineno="3766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;table[as[i]<sp/>^<sp/>p-&gt;large_bmap[bs[i]]]<sp/>=<sp/>v[i];</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;table[as[i]<sp/>^<sp/>p-&gt;small_bmap[bs[i]]]<sp/>=<sp/>v[i];</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"></highlight></codeline>
<codeline lineno="3770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>now<sp/>validate<sp/>that<sp/>none<sp/>of<sp/>them<sp/>collided</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)</highlight></codeline>
<codeline lineno="3772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(stb_perfect_hash(p,<sp/>v[i])<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"></highlight></codeline>
<codeline lineno="3774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_tempfree(buffer3,<sp/>bcount);</highlight></codeline>
<codeline lineno="3775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(p-&gt;table);</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;table<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_tempfree(buffer3,<sp/>bcount);</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"></highlight></codeline>
<codeline lineno="3782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++failure;</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(failure<sp/>&gt;=<sp/>4<sp/>&amp;&amp;<sp/>bsize<sp/>&lt;<sp/>size)<sp/>bsize<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(failure<sp/>&gt;=<sp/>8<sp/>&amp;&amp;<sp/>(failure<sp/>&amp;<sp/>3)<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>size<sp/>&lt;<sp/>4*n)<sp/>{</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="3786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bsize<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(failure<sp/>==<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>the<sp/>input<sp/>data<sp/>is<sp/>unique,<sp/>so<sp/>we<sp/>don&apos;t<sp/>infinite<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*data<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>stb_temp(buffer3,<sp/>n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*data));</highlight></codeline>
<codeline lineno="3791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(data,<sp/>v,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*data)<sp/>*<sp/>n);</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qsort(data,<sp/>n,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*data),<sp/>stb_intcmp(0));</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=1;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data[i]<sp/>==<sp/>data[i-1])</highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>size<sp/>is<sp/>return<sp/>value,<sp/>so<sp/>0<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_tempfree(buffer3,<sp/>data);</highlight></codeline>
<codeline lineno="3798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!size)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3800"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3801"><highlight class="normal"></highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(failure<sp/>&gt;<sp/>stb_perfect_hash_max_failures)</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_perfect_hash_max_failures<sp/>=<sp/>failure;</highlight></codeline>
<codeline lineno="3804"><highlight class="normal"></highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/><sp/>stb_tempfree(buffer1,<sp/>as);</highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/><sp/><sp/>stb_tempfree(buffer2,<sp/>bs);</highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/><sp/>stb_tempfree(buffer4,<sp/>entries);</highlight></codeline>
<codeline lineno="3808"><highlight class="normal"></highlight></codeline>
<codeline lineno="3809"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="3810"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3811"><highlight class="normal"></highlight></codeline>
<codeline lineno="3812"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_perfect_destroy(stb_perfect<sp/>*p)</highlight></codeline>
<codeline lineno="3813"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3814"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;large_bmap)<sp/>free(p-&gt;large_bmap);</highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;table<sp/><sp/><sp/><sp/><sp/>)<sp/>free(p-&gt;table);</highlight></codeline>
<codeline lineno="3816"><highlight class="normal"><sp/><sp/><sp/>p-&gt;large_bmap<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/><sp/>p-&gt;table<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/><sp/>p-&gt;b_mask<sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3819"><highlight class="normal"><sp/><sp/><sp/>p-&gt;table_mask<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3820"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3821"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3822"><highlight class="normal"></highlight></codeline>
<codeline lineno="3824"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3825"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Perfect<sp/>hash<sp/>clients</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3826"><highlight class="normal"></highlight></codeline>
<codeline lineno="3827"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>stb_ischar(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*set);</highlight></codeline>
<codeline lineno="3828"><highlight class="normal"></highlight></codeline>
<codeline lineno="3829"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3830"><highlight class="normal"></highlight></codeline>
<codeline lineno="3831"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_ischar(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*set)</highlight></codeline>
<codeline lineno="3832"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3833"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>bit[8]<sp/>=<sp/>{<sp/>1,2,4,8,16,32,64,128<sp/>};</highlight></codeline>
<codeline lineno="3834"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb_perfect<sp/>p;</highlight></codeline>
<codeline lineno="3835"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char<sp/>(*tables)[256];</highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<sp/>sets<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3837"><highlight class="normal"></highlight></codeline>
<codeline lineno="3838"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>stb_perfect_hash(&amp;p,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>set);</highlight></codeline>
<codeline lineno="3839"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,k,n,j,f;</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>special<sp/>code<sp/>that<sp/>means<sp/>free<sp/>all<sp/>existing<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(set<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="3843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_free(sets);</highlight></codeline>
<codeline lineno="3844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(tables);</highlight></codeline>
<codeline lineno="3845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tables<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_perfect_destroy(&amp;p);</highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_push(sets,<sp/>set);</highlight></codeline>
<codeline lineno="3850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_perfect_destroy(&amp;p);</highlight></codeline>
<codeline lineno="3851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>stb_perfect_create(&amp;p,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)<sp/>sets,<sp/>stb_arr_len(sets));</highlight></codeline>
<codeline lineno="3852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(n<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>(n+7)<sp/>&gt;&gt;<sp/>3;</highlight></codeline>
<codeline lineno="3854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tables<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char<sp/>(*)[256])<sp/>realloc(tables,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*tables)<sp/>*<sp/>k);</highlight></codeline>
<codeline lineno="3855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memset(tables,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*tables)<sp/>*<sp/>k);</highlight></codeline>
<codeline lineno="3856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stb_arr_len(sets);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>stb_perfect_hash(&amp;p,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>sets[i]);</highlight></codeline>
<codeline lineno="3858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(k<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="3859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>k<sp/>&gt;&gt;<sp/>3;</highlight></codeline>
<codeline lineno="3860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>bit[k&amp;7];</highlight></codeline>
<codeline lineno="3861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>!j<sp/>||<sp/>sets[i][j];<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tables[n][(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)<sp/>sets[i][j]]<sp/>|=<sp/>f;</highlight></codeline>
<codeline lineno="3863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>stb_perfect_hash(&amp;p,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>set);</highlight></codeline>
<codeline lineno="3866"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3867"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tables[z<sp/>&gt;&gt;<sp/>3][(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)<sp/>c]<sp/>&amp;<sp/>bit[z<sp/>&amp;<sp/>7];</highlight></codeline>
<codeline lineno="3868"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3869"><highlight class="normal"></highlight></codeline>
<codeline lineno="3870"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3871"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3872"><highlight class="normal"></highlight></codeline>
<codeline lineno="3874"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3875"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Instantiated<sp/>data<sp/>structures</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3876"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3877"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>an<sp/>attempt<sp/>to<sp/>implement<sp/>a<sp/>templated<sp/>data<sp/>structure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3878"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3879"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Hash<sp/>table:<sp/>call<sp/>stb_define_hash(TYPE,N,KEY,K1,K2,HASH,VALUE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3880"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>TYPE<sp/><sp/><sp/><sp/><sp/>--<sp/>will<sp/>define<sp/>a<sp/>structure<sp/>type<sp/>containing<sp/>the<sp/>hash<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3881"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>N<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<sp/>the<sp/>name,<sp/>will<sp/>prefix<sp/>functions<sp/>named:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3882"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N<sp/>create</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3883"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N<sp/>destroy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3884"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N<sp/>get</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3885"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N<sp/>set,<sp/>N<sp/>add,<sp/>N<sp/>update,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3886"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N<sp/>remove</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3887"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>KEY<sp/><sp/><sp/><sp/><sp/><sp/>--<sp/>the<sp/>type<sp/>of<sp/>the<sp/>key.<sp/>&apos;x<sp/>==<sp/>y&apos;<sp/>must<sp/>be<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3888"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>K1,K2<sp/><sp/>--<sp/>keys<sp/>never<sp/>used<sp/>by<sp/>the<sp/>app,<sp/>used<sp/>as<sp/>flags<sp/>in<sp/>the<sp/>hashtable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3889"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>HASH<sp/><sp/><sp/>--<sp/>a<sp/>piece<sp/>of<sp/>code<sp/>ending<sp/>with<sp/>&apos;return&apos;<sp/>that<sp/>hashes<sp/>key<sp/>&apos;k&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3890"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>VALUE<sp/><sp/><sp/><sp/>--<sp/>the<sp/>type<sp/>of<sp/>the<sp/>value.<sp/>&apos;x<sp/>=<sp/>y&apos;<sp/>must<sp/>be<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3891"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3892"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Note<sp/>that<sp/>stb_define_hash_base<sp/>can<sp/>be<sp/>used<sp/>to<sp/>define<sp/>more<sp/>sophisticated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3893"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>hash<sp/>tables,<sp/>e.g.<sp/>those<sp/>that<sp/>make<sp/>copies<sp/>of<sp/>the<sp/>key<sp/>or<sp/>use<sp/>special</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3894"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>comparisons<sp/>(e.g.<sp/>strcmp).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3895"><highlight class="normal"></highlight></codeline>
<codeline lineno="3896"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_(prefix,name)<sp/><sp/><sp/><sp/><sp/>stb__##prefix##name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3897"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__(prefix,name)<sp/><sp/><sp/><sp/>prefix##name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3898"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__use(x)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3899"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__skip(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3900"><highlight class="normal"></highlight></codeline>
<codeline lineno="3901"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_declare_hash(PREFIX,TYPE,N,KEY,VALUE)<sp/>\</highlight></codeline>
<codeline lineno="3902"><highlight class="preprocessor"><sp/><sp/><sp/>typedef<sp/>struct<sp/>stb__st_##TYPE<sp/>TYPE;\</highlight></codeline>
<codeline lineno="3903"><highlight class="preprocessor"><sp/><sp/><sp/>PREFIX<sp/>int<sp/>STB__(N,<sp/>init)(TYPE<sp/>*h,<sp/>int<sp/>count);\</highlight></codeline>
<codeline lineno="3904"><highlight class="preprocessor"><sp/><sp/><sp/>PREFIX<sp/>int<sp/>STB__(N,<sp/>memory_usage)(TYPE<sp/>*h);\</highlight></codeline>
<codeline lineno="3905"><highlight class="preprocessor"><sp/><sp/><sp/>PREFIX<sp/>TYPE<sp/>*<sp/>STB__(N,<sp/>create)(void);\</highlight></codeline>
<codeline lineno="3906"><highlight class="preprocessor"><sp/><sp/><sp/>PREFIX<sp/>TYPE<sp/>*<sp/>STB__(N,<sp/>copy)(TYPE<sp/>*h);\</highlight></codeline>
<codeline lineno="3907"><highlight class="preprocessor"><sp/><sp/><sp/>PREFIX<sp/>void<sp/>STB__(N,<sp/>destroy)(TYPE<sp/>*h);\</highlight></codeline>
<codeline lineno="3908"><highlight class="preprocessor"><sp/><sp/><sp/>PREFIX<sp/>int<sp/>STB__(N,get_flag)(TYPE<sp/>*a,<sp/>KEY<sp/>k,<sp/>VALUE<sp/>*v);\</highlight></codeline>
<codeline lineno="3909"><highlight class="preprocessor"><sp/><sp/><sp/>PREFIX<sp/>VALUE<sp/>STB__(N,get)(TYPE<sp/>*a,<sp/>KEY<sp/>k);\</highlight></codeline>
<codeline lineno="3910"><highlight class="preprocessor"><sp/><sp/><sp/>PREFIX<sp/>int<sp/>STB__(N,<sp/>set)(TYPE<sp/>*a,<sp/>KEY<sp/>k,<sp/>VALUE<sp/>v);\</highlight></codeline>
<codeline lineno="3911"><highlight class="preprocessor"><sp/><sp/><sp/>PREFIX<sp/>int<sp/>STB__(N,<sp/>add)(TYPE<sp/>*a,<sp/>KEY<sp/>k,<sp/>VALUE<sp/>v);\</highlight></codeline>
<codeline lineno="3912"><highlight class="preprocessor"><sp/><sp/><sp/>PREFIX<sp/>int<sp/>STB__(N,<sp/>update)(TYPE*a,KEY<sp/>k,VALUE<sp/>v);\</highlight></codeline>
<codeline lineno="3913"><highlight class="preprocessor"><sp/><sp/><sp/>PREFIX<sp/>int<sp/>STB__(N,<sp/>remove)(TYPE<sp/>*a,<sp/>KEY<sp/>k,<sp/>VALUE<sp/>*v);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3914"><highlight class="normal"></highlight></codeline>
<codeline lineno="3915"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_nocopy(x)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3916"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_nodelete(x)<sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3917"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_nofields</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3918"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_nonullvalue(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3919"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_nullvalue(x)<sp/><sp/><sp/><sp/><sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3920"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_safecompare(x)<sp/><sp/><sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3921"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_nosafe(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3922"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_noprefix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3923"><highlight class="normal"></highlight></codeline>
<codeline lineno="3924"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3925"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__nogcc(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3926"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3927"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__nogcc(x)<sp/><sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3928"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3929"><highlight class="normal"></highlight></codeline>
<codeline lineno="3930"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_define_hash_base(PREFIX,TYPE,FIELDS,N,NC,LOAD_FACTOR,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3931"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KEY,EMPTY,DEL,COPY,DISPOSE,SAFE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3932"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VCOMPARE,CCOMPARE,HASH,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3933"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VALUE,HASVNULL,VNULL)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3934"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3935"><highlight class="preprocessor">typedef<sp/>struct<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3936"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3937"><highlight class="preprocessor"><sp/><sp/><sp/>KEY<sp/><sp/><sp/>k;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3938"><highlight class="preprocessor"><sp/><sp/><sp/>VALUE<sp/>v;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3939"><highlight class="preprocessor">}<sp/>STB_(N,_hashpair);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3940"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3941"><highlight class="preprocessor">STB__nogcc(<sp/>typedef<sp/>struct<sp/>stb__st_##TYPE<sp/>TYPE;<sp/><sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3942"><highlight class="preprocessor">struct<sp/>stb__st_##TYPE<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3943"><highlight class="preprocessor"><sp/><sp/><sp/>FIELDS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3944"><highlight class="preprocessor"><sp/><sp/><sp/>STB_(N,_hashpair)<sp/>*table;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3945"><highlight class="preprocessor"><sp/><sp/><sp/>unsigned<sp/>int<sp/>mask;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3946"><highlight class="preprocessor"><sp/><sp/><sp/>int<sp/>count,<sp/>limit;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3947"><highlight class="preprocessor"><sp/><sp/><sp/>int<sp/>deleted;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3948"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3949"><highlight class="preprocessor"><sp/><sp/><sp/>int<sp/>delete_threshhold;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3950"><highlight class="preprocessor"><sp/><sp/><sp/>int<sp/>grow_threshhold;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3951"><highlight class="preprocessor"><sp/><sp/><sp/>int<sp/>shrink_threshhold;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3952"><highlight class="preprocessor"><sp/><sp/><sp/>unsigned<sp/>char<sp/>alloced,<sp/>has_empty,<sp/>has_del;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3953"><highlight class="preprocessor"><sp/><sp/><sp/>VALUE<sp/>ev;<sp/>VALUE<sp/>dv;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3954"><highlight class="preprocessor">};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3955"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3956"><highlight class="preprocessor">static<sp/>unsigned<sp/>int<sp/>STB_(N,<sp/>hash)(KEY<sp/>k)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3957"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3958"><highlight class="preprocessor"><sp/><sp/><sp/>HASH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3959"><highlight class="preprocessor">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3960"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3961"><highlight class="preprocessor">PREFIX<sp/>int<sp/>STB__(N,<sp/>init)(TYPE<sp/>*h,<sp/>int<sp/>count)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3962"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3963"><highlight class="preprocessor"><sp/><sp/><sp/>int<sp/>i;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3964"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(count<sp/>&lt;<sp/>4)<sp/>count<sp/>=<sp/>4;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3965"><highlight class="preprocessor"><sp/><sp/><sp/>h-&gt;limit<sp/>=<sp/>count;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3966"><highlight class="preprocessor"><sp/><sp/><sp/>h-&gt;count<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3967"><highlight class="preprocessor"><sp/><sp/><sp/>h-&gt;mask<sp/><sp/>=<sp/>count-1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3968"><highlight class="preprocessor"><sp/><sp/><sp/>h-&gt;deleted<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3969"><highlight class="preprocessor"><sp/><sp/><sp/>h-&gt;grow_threshhold<sp/>=<sp/>(int)<sp/>(count<sp/>*<sp/>LOAD_FACTOR);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3970"><highlight class="preprocessor"><sp/><sp/><sp/>h-&gt;has_empty<sp/>=<sp/>h-&gt;has_del<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3971"><highlight class="preprocessor"><sp/><sp/><sp/>h-&gt;alloced<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3972"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(count<sp/>&lt;=<sp/>64)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3973"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>h-&gt;shrink_threshhold<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3974"><highlight class="preprocessor"><sp/><sp/><sp/>else<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3975"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>h-&gt;shrink_threshhold<sp/>=<sp/>(int)<sp/>(count<sp/>*<sp/>(LOAD_FACTOR/2.25));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3976"><highlight class="preprocessor"><sp/><sp/><sp/>h-&gt;delete_threshhold<sp/>=<sp/>(int)<sp/>(count<sp/>*<sp/>(1-LOAD_FACTOR)/2);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3977"><highlight class="preprocessor"><sp/><sp/><sp/>h-&gt;table<sp/>=<sp/>(STB_(N,_hashpair)*)<sp/>malloc(sizeof(h-&gt;table[0])<sp/>*<sp/>count);<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3978"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(h-&gt;table<sp/>==<sp/>NULL)<sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3979"><highlight class="preprocessor"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ideally<sp/>this<sp/>gets<sp/>turned<sp/>into<sp/>a<sp/>memset32<sp/>automatically<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3980"><highlight class="preprocessor"><sp/><sp/><sp/>for<sp/>(i=0;<sp/>i<sp/>&lt;<sp/>count;<sp/>++i)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3981"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>h-&gt;table[i].k<sp/>=<sp/>EMPTY;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3982"><highlight class="preprocessor"><sp/><sp/><sp/>return<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3983"><highlight class="preprocessor">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3984"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3985"><highlight class="preprocessor">PREFIX<sp/>int<sp/>STB__(N,<sp/>memory_usage)(TYPE<sp/>*h)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3986"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3987"><highlight class="preprocessor"><sp/><sp/><sp/>return<sp/>sizeof(*h)<sp/>+<sp/>h-&gt;limit<sp/>*<sp/>sizeof(h-&gt;table[0]);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3988"><highlight class="preprocessor">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3989"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3990"><highlight class="preprocessor">PREFIX<sp/>TYPE<sp/>*<sp/>STB__(N,<sp/>create)(void)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3991"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3992"><highlight class="preprocessor"><sp/><sp/><sp/>TYPE<sp/>*h<sp/>=<sp/>(TYPE<sp/>*)<sp/>malloc(sizeof(*h));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3993"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(h)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3994"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(STB__(N,<sp/>init)(h,<sp/>16))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3995"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h-&gt;alloced<sp/>=<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3996"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>{<sp/>free(h);<sp/>h=NULL;<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3997"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3998"><highlight class="preprocessor"><sp/><sp/><sp/>return<sp/>h;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3999"><highlight class="preprocessor">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4000"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4001"><highlight class="preprocessor">PREFIX<sp/>void<sp/>STB__(N,<sp/>destroy)(TYPE<sp/>*a)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4002"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4003"><highlight class="preprocessor"><sp/><sp/><sp/>int<sp/>i;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4004"><highlight class="preprocessor"><sp/><sp/><sp/>for<sp/>(i=0;<sp/>i<sp/>&lt;<sp/>a-&gt;limit;<sp/>++i)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4005"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!CCOMPARE(a-&gt;table[i].k,EMPTY)<sp/>&amp;&amp;<sp/>!CCOMPARE(a-&gt;table[i].k,<sp/>DEL))<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4006"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DISPOSE(a-&gt;table[i].k);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4007"><highlight class="preprocessor"><sp/><sp/><sp/>free(a-&gt;table);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4008"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(a-&gt;alloced)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4009"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>free(a);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4010"><highlight class="preprocessor">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4011"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4012"><highlight class="preprocessor">static<sp/>void<sp/>STB_(N,<sp/>rehash)(TYPE<sp/>*a,<sp/>int<sp/>count);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4013"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4014"><highlight class="preprocessor">PREFIX<sp/>int<sp/>STB__(N,get_flag)(TYPE<sp/>*a,<sp/>KEY<sp/>k,<sp/>VALUE<sp/>*v)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4015"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4016"><highlight class="preprocessor"><sp/><sp/><sp/>unsigned<sp/>int<sp/>h<sp/>=<sp/>STB_(N,<sp/>hash)(k);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4017"><highlight class="preprocessor"><sp/><sp/><sp/>unsigned<sp/>int<sp/>n<sp/>=<sp/>h<sp/>&amp;<sp/>a-&gt;mask,<sp/>s;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4018"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(CCOMPARE(k,EMPTY)){<sp/>if<sp/>(a-&gt;has_empty)<sp/>*v<sp/>=<sp/>a-&gt;ev;<sp/>return<sp/>a-&gt;has_empty;}\</highlight></codeline>
<codeline lineno="4019"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(CCOMPARE(k,DEL))<sp/>{<sp/>if<sp/>(a-&gt;has_del<sp/><sp/>)<sp/>*v<sp/>=<sp/>a-&gt;dv;<sp/>return<sp/>a-&gt;has_del;<sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="4020"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(CCOMPARE(a-&gt;table[n].k,EMPTY))<sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4021"><highlight class="preprocessor"><sp/><sp/><sp/>SAFE(if<sp/>(!CCOMPARE(a-&gt;table[n].k,DEL)))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4022"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(VCOMPARE(a-&gt;table[n].k,k))<sp/>{<sp/>*v<sp/>=<sp/>a-&gt;table[n].v;<sp/>return<sp/>1;<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4023"><highlight class="preprocessor"><sp/><sp/><sp/>s<sp/>=<sp/>stb_rehash(h)<sp/>|<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4024"><highlight class="preprocessor"><sp/><sp/><sp/>for(;;)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4025"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(n<sp/>+<sp/>s)<sp/>&amp;<sp/>a-&gt;mask;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4026"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(CCOMPARE(a-&gt;table[n].k,EMPTY))<sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4027"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>SAFE(if<sp/>(CCOMPARE(a-&gt;table[n].k,DEL))<sp/>continue;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4028"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(VCOMPARE(a-&gt;table[n].k,k))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4029"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>*v<sp/>=<sp/>a-&gt;table[n].v;<sp/>return<sp/>1;<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4030"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4031"><highlight class="preprocessor">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4032"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4033"><highlight class="preprocessor">HASVNULL(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4034"><highlight class="preprocessor"><sp/><sp/><sp/>PREFIX<sp/>VALUE<sp/>STB__(N,get)(TYPE<sp/>*a,<sp/>KEY<sp/>k)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4035"><highlight class="preprocessor"><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4036"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>VALUE<sp/>v;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4037"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(STB__(N,get_flag)(a,k,&amp;v))<sp/>return<sp/>v;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4038"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>VNULL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4039"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4040"><highlight class="preprocessor">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4041"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4042"><highlight class="preprocessor">PREFIX<sp/>int<sp/>STB__(N,getkey)(TYPE<sp/>*a,<sp/>KEY<sp/>k,<sp/>KEY<sp/>*kout)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4043"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4044"><highlight class="preprocessor"><sp/><sp/><sp/>unsigned<sp/>int<sp/>h<sp/>=<sp/>STB_(N,<sp/>hash)(k);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4045"><highlight class="preprocessor"><sp/><sp/><sp/>unsigned<sp/>int<sp/>n<sp/>=<sp/>h<sp/>&amp;<sp/>a-&gt;mask,<sp/>s;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4046"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(CCOMPARE(k,EMPTY)||CCOMPARE(k,DEL))<sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4047"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(CCOMPARE(a-&gt;table[n].k,EMPTY))<sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4048"><highlight class="preprocessor"><sp/><sp/><sp/>SAFE(if<sp/>(!CCOMPARE(a-&gt;table[n].k,DEL)))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4049"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(VCOMPARE(a-&gt;table[n].k,k))<sp/>{<sp/>*kout<sp/>=<sp/>a-&gt;table[n].k;<sp/>return<sp/>1;<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4050"><highlight class="preprocessor"><sp/><sp/><sp/>s<sp/>=<sp/>stb_rehash(h)<sp/>|<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4051"><highlight class="preprocessor"><sp/><sp/><sp/>for(;;)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4052"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(n<sp/>+<sp/>s)<sp/>&amp;<sp/>a-&gt;mask;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4053"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(CCOMPARE(a-&gt;table[n].k,EMPTY))<sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4054"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>SAFE(if<sp/>(CCOMPARE(a-&gt;table[n].k,DEL))<sp/>continue;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4055"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(VCOMPARE(a-&gt;table[n].k,k))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4056"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>*kout<sp/>=<sp/>a-&gt;table[n].k;<sp/>return<sp/>1;<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4057"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4058"><highlight class="preprocessor">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4059"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4060"><highlight class="preprocessor">static<sp/>int<sp/>STB_(N,addset)(TYPE<sp/>*a,<sp/>KEY<sp/>k,<sp/>VALUE<sp/>v,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4061"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>allow_new,<sp/>int<sp/>allow_old,<sp/>int<sp/>copy)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4062"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4063"><highlight class="preprocessor"><sp/><sp/><sp/>unsigned<sp/>int<sp/>h<sp/>=<sp/>STB_(N,<sp/>hash)(k);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4064"><highlight class="preprocessor"><sp/><sp/><sp/>unsigned<sp/>int<sp/>n<sp/>=<sp/>h<sp/>&amp;<sp/>a-&gt;mask;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4065"><highlight class="preprocessor"><sp/><sp/><sp/>int<sp/>b<sp/>=<sp/>-1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4066"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(CCOMPARE(k,EMPTY))<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4067"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(a-&gt;has_empty<sp/>?<sp/>allow_old<sp/>:<sp/>allow_new)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4068"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n=a-&gt;has_empty;<sp/>a-&gt;ev<sp/>=<sp/>v;<sp/>a-&gt;has_empty<sp/>=<sp/>1;<sp/>return<sp/>!n;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4069"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4070"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4071"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(CCOMPARE(k,DEL))<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4072"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(a-&gt;has_del<sp/>?<sp/>allow_old<sp/>:<sp/>allow_new)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4073"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n=a-&gt;has_del;<sp/>a-&gt;dv<sp/>=<sp/>v;<sp/>a-&gt;has_del<sp/>=<sp/>1;<sp/>return<sp/>!n;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4074"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4075"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4076"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(!CCOMPARE(a-&gt;table[n].k,<sp/>EMPTY))<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4077"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int<sp/>s;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4078"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(CCOMPARE(a-&gt;table[n].k,<sp/>DEL))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4079"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>n;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4080"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(VCOMPARE(a-&gt;table[n].k,k))<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4081"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(allow_old)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4082"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;table[n].v<sp/>=<sp/>v;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4083"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>!allow_new;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4084"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4085"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>stb_rehash(h)<sp/>|<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4086"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>for(;;)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4087"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(n<sp/>+<sp/>s)<sp/>&amp;<sp/>a-&gt;mask;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4088"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(CCOMPARE(a-&gt;table[n].k,<sp/>EMPTY))<sp/>break;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4089"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(CCOMPARE(a-&gt;table[n].k,<sp/>DEL))<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4090"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(b<sp/>&lt;<sp/>0)<sp/>b<sp/>=<sp/>n;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4091"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(VCOMPARE(a-&gt;table[n].k,k))<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4092"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(allow_old)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4093"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;table[n].v<sp/>=<sp/>v;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4094"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>!allow_new;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4095"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4096"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4097"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4098"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(!allow_new)<sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4099"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(b<sp/>&lt;<sp/>0)<sp/>b<sp/>=<sp/>n;<sp/>else<sp/>--a-&gt;deleted;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4100"><highlight class="preprocessor"><sp/><sp/><sp/>a-&gt;table[b].k<sp/>=<sp/>copy<sp/>?<sp/>COPY(k)<sp/>:<sp/>k;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4101"><highlight class="preprocessor"><sp/><sp/><sp/>a-&gt;table[b].v<sp/>=<sp/>v;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4102"><highlight class="preprocessor"><sp/><sp/><sp/>++a-&gt;count;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4103"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(a-&gt;count<sp/>&gt;<sp/>a-&gt;grow_threshhold)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4104"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>STB_(N,rehash)(a,<sp/>a-&gt;limit*2);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4105"><highlight class="preprocessor"><sp/><sp/><sp/>return<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4106"><highlight class="preprocessor">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4107"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4108"><highlight class="preprocessor">PREFIX<sp/>int<sp/>STB__(N,<sp/>set)(TYPE<sp/>*a,<sp/>KEY<sp/>k,<sp/>VALUE<sp/>v){return<sp/>STB_(N,addset)(a,k,v,1,1,1);}\</highlight></codeline>
<codeline lineno="4109"><highlight class="preprocessor">PREFIX<sp/>int<sp/>STB__(N,<sp/>add)(TYPE<sp/>*a,<sp/>KEY<sp/>k,<sp/>VALUE<sp/>v){return<sp/>STB_(N,addset)(a,k,v,1,0,1);}\</highlight></codeline>
<codeline lineno="4110"><highlight class="preprocessor">PREFIX<sp/>int<sp/>STB__(N,<sp/>update)(TYPE*a,KEY<sp/>k,VALUE<sp/>v){return<sp/>STB_(N,addset)(a,k,v,0,1,1);}\</highlight></codeline>
<codeline lineno="4111"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4112"><highlight class="preprocessor">PREFIX<sp/>int<sp/>STB__(N,<sp/>remove)(TYPE<sp/>*a,<sp/>KEY<sp/>k,<sp/>VALUE<sp/>*v)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4113"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4114"><highlight class="preprocessor"><sp/><sp/><sp/>unsigned<sp/>int<sp/>h<sp/>=<sp/>STB_(N,<sp/>hash)(k);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4115"><highlight class="preprocessor"><sp/><sp/><sp/>unsigned<sp/>int<sp/>n<sp/>=<sp/>h<sp/>&amp;<sp/>a-&gt;mask,<sp/>s;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4116"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(CCOMPARE(k,EMPTY))<sp/>{<sp/>if<sp/>(a-&gt;has_empty)<sp/>{<sp/>if(v)*v<sp/>=<sp/>a-&gt;ev;<sp/>a-&gt;has_empty=0;<sp/>return<sp/>1;<sp/>}<sp/>return<sp/>0;<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="4117"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(CCOMPARE(k,DEL))<sp/><sp/><sp/>{<sp/>if<sp/>(a-&gt;has_del<sp/><sp/>)<sp/>{<sp/>if(v)*v<sp/>=<sp/>a-&gt;dv;<sp/>a-&gt;has_del<sp/><sp/>=0;<sp/>return<sp/>1;<sp/>}<sp/>return<sp/>0;<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="4118"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(CCOMPARE(a-&gt;table[n].k,EMPTY))<sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4119"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(SAFE(CCOMPARE(a-&gt;table[n].k,DEL)<sp/>||<sp/>)<sp/>!VCOMPARE(a-&gt;table[n].k,k))<sp/>{<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4120"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>stb_rehash(h)<sp/>|<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4121"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>for(;;)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4122"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(n<sp/>+<sp/>s)<sp/>&amp;<sp/>a-&gt;mask;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4123"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(CCOMPARE(a-&gt;table[n].k,EMPTY))<sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4124"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SAFE(if<sp/>(CCOMPARE(a-&gt;table[n].k,<sp/>DEL))<sp/>continue;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4125"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(VCOMPARE(a-&gt;table[n].k,k))<sp/>break;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4126"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4127"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4128"><highlight class="preprocessor"><sp/><sp/><sp/>DISPOSE(a-&gt;table[n].k);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4129"><highlight class="preprocessor"><sp/><sp/><sp/>a-&gt;table[n].k<sp/>=<sp/>DEL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4130"><highlight class="preprocessor"><sp/><sp/><sp/>--a-&gt;count;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4131"><highlight class="preprocessor"><sp/><sp/><sp/>++a-&gt;deleted;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4132"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(v<sp/>!=<sp/>NULL)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4133"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>*v<sp/>=<sp/>a-&gt;table[n].v;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4134"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(a-&gt;count<sp/>&lt;<sp/>a-&gt;shrink_threshhold)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4135"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>STB_(N,<sp/>rehash)(a,<sp/>a-&gt;limit<sp/>&gt;&gt;<sp/>1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4136"><highlight class="preprocessor"><sp/><sp/><sp/>else<sp/>if<sp/>(a-&gt;deleted<sp/>&gt;<sp/>a-&gt;delete_threshhold)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4137"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>STB_(N,<sp/>rehash)(a,<sp/>a-&gt;limit);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4138"><highlight class="preprocessor"><sp/><sp/><sp/>return<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4139"><highlight class="preprocessor">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4140"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4141"><highlight class="preprocessor">PREFIX<sp/>TYPE<sp/>*<sp/>STB__(NC,<sp/>copy)(TYPE<sp/>*a)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4142"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4143"><highlight class="preprocessor"><sp/><sp/><sp/>int<sp/>i;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4144"><highlight class="preprocessor"><sp/><sp/><sp/>TYPE<sp/>*h<sp/>=<sp/>(TYPE<sp/>*)<sp/>malloc(sizeof(*h));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4145"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(!h)<sp/>return<sp/>NULL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4146"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(!STB__(N,<sp/>init)(h,<sp/>a-&gt;limit))<sp/>{<sp/>free(h);<sp/>return<sp/>NULL;<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4147"><highlight class="preprocessor"><sp/><sp/><sp/>h-&gt;count<sp/>=<sp/>a-&gt;count;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4148"><highlight class="preprocessor"><sp/><sp/><sp/>h-&gt;deleted<sp/>=<sp/>a-&gt;deleted;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4149"><highlight class="preprocessor"><sp/><sp/><sp/>h-&gt;alloced<sp/>=<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4150"><highlight class="preprocessor"><sp/><sp/><sp/>h-&gt;ev<sp/>=<sp/>a-&gt;ev;<sp/>h-&gt;dv<sp/>=<sp/>a-&gt;dv;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4151"><highlight class="preprocessor"><sp/><sp/><sp/>h-&gt;has_empty<sp/>=<sp/>a-&gt;has_empty;<sp/>h-&gt;has_del<sp/>=<sp/>a-&gt;has_del;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4152"><highlight class="preprocessor"><sp/><sp/><sp/>memcpy(h-&gt;table,<sp/>a-&gt;table,<sp/>h-&gt;limit<sp/>*<sp/>sizeof(h-&gt;table[0]));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4153"><highlight class="preprocessor"><sp/><sp/><sp/>for<sp/>(i=0;<sp/>i<sp/>&lt;<sp/>a-&gt;limit;<sp/>++i)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4154"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!CCOMPARE(h-&gt;table[i].k,EMPTY)<sp/>&amp;&amp;<sp/>!CCOMPARE(h-&gt;table[i].k,DEL))<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4155"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h-&gt;table[i].k<sp/>=<sp/>COPY(h-&gt;table[i].k);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4156"><highlight class="preprocessor"><sp/><sp/><sp/>return<sp/>h;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4157"><highlight class="preprocessor">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4158"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4159"><highlight class="preprocessor">static<sp/>void<sp/>STB_(N,<sp/>rehash)(TYPE<sp/>*a,<sp/>int<sp/>count)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4160"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4161"><highlight class="preprocessor"><sp/><sp/><sp/>int<sp/>i;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4162"><highlight class="preprocessor"><sp/><sp/><sp/>TYPE<sp/>b;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4163"><highlight class="preprocessor"><sp/><sp/><sp/>STB__(N,<sp/>init)(&amp;b,<sp/>count);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4164"><highlight class="preprocessor"><sp/><sp/><sp/>for<sp/>(i=0;<sp/>i<sp/>&lt;<sp/>a-&gt;limit;<sp/>++i)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4165"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!CCOMPARE(a-&gt;table[i].k,EMPTY)<sp/>&amp;&amp;<sp/>!CCOMPARE(a-&gt;table[i].k,DEL))<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4166"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STB_(N,addset)(&amp;b,<sp/>a-&gt;table[i].k,<sp/>a-&gt;table[i].v,1,1,0);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4167"><highlight class="preprocessor"><sp/><sp/><sp/>free(a-&gt;table);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4168"><highlight class="preprocessor"><sp/><sp/><sp/>a-&gt;table<sp/>=<sp/>b.table;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4169"><highlight class="preprocessor"><sp/><sp/><sp/>a-&gt;mask<sp/>=<sp/>b.mask;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4170"><highlight class="preprocessor"><sp/><sp/><sp/>a-&gt;count<sp/>=<sp/>b.count;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4171"><highlight class="preprocessor"><sp/><sp/><sp/>a-&gt;limit<sp/>=<sp/>b.limit;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4172"><highlight class="preprocessor"><sp/><sp/><sp/>a-&gt;deleted<sp/>=<sp/>b.deleted;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4173"><highlight class="preprocessor"><sp/><sp/><sp/>a-&gt;delete_threshhold<sp/>=<sp/>b.delete_threshhold;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4174"><highlight class="preprocessor"><sp/><sp/><sp/>a-&gt;grow_threshhold<sp/>=<sp/>b.grow_threshhold;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4175"><highlight class="preprocessor"><sp/><sp/><sp/>a-&gt;shrink_threshhold<sp/>=<sp/>b.shrink_threshhold;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4176"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4177"><highlight class="normal"></highlight></codeline>
<codeline lineno="4178"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_equal(a,b)<sp/><sp/>((a)<sp/>==<sp/>(b))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4179"><highlight class="normal"></highlight></codeline>
<codeline lineno="4180"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_define_hash(TYPE,N,KEY,EMPTY,DEL,HASH,VALUE)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4181"><highlight class="preprocessor"><sp/><sp/><sp/>stb_define_hash_base(STB_noprefix,<sp/>TYPE,STB_nofields,N,NC,0.85f,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4182"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KEY,EMPTY,DEL,STB_nocopy,STB_nodelete,STB_nosafe,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4183"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STB_equal,STB_equal,HASH,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4184"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VALUE,STB_nonullvalue,0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4185"><highlight class="normal"></highlight></codeline>
<codeline lineno="4186"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_define_hash_vnull(TYPE,N,KEY,EMPTY,DEL,HASH,VALUE,VNULL)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4187"><highlight class="preprocessor"><sp/><sp/><sp/>stb_define_hash_base(STB_noprefix,<sp/>TYPE,STB_nofields,N,NC,0.85f,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4188"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KEY,EMPTY,DEL,STB_nocopy,STB_nodelete,STB_nosafe,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4189"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STB_equal,STB_equal,HASH,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4190"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VALUE,STB_nullvalue,VNULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4191"><highlight class="normal"></highlight></codeline>
<codeline lineno="4193"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4194"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ptrmap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4195"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4196"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>stb_ptrmap<sp/>data<sp/>structure<sp/>is<sp/>an<sp/>O(1)<sp/>hash<sp/>table<sp/>between<sp/>pointers.<sp/>One</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>application<sp/>is<sp/>to<sp/>let<sp/>you<sp/>store<sp/>&quot;extra&quot;<sp/>data<sp/>associated<sp/>with<sp/>pointers,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4198"><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>is<sp/>why<sp/>it<sp/>was<sp/>originally<sp/>called<sp/>stb_extra.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4199"><highlight class="normal"></highlight></codeline>
<codeline lineno="4200"><highlight class="normal">stb_declare_hash(STB_EXTERN,<sp/>stb_ptrmap,<sp/>stb_ptrmap_,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)</highlight></codeline>
<codeline lineno="4201"><highlight class="normal">stb_declare_hash(STB_EXTERN,<sp/>stb_idict,<sp/>stb_idict_,<sp/>stb_int32,<sp/>stb_int32)</highlight></codeline>
<codeline lineno="4202"><highlight class="normal">stb_declare_hash(STB_EXTERN,<sp/>stb_uidict,<sp/>stbi_uidict_,<sp/>stb_uint32,<sp/>stb_uint32)</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"></highlight></codeline>
<codeline lineno="4204"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ptrmap_delete(stb_ptrmap<sp/>*<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*free_func)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="4205"><highlight class="normal">STB_EXTERN<sp/>stb_ptrmap<sp/>*stb_ptrmap_new(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"></highlight></codeline>
<codeline lineno="4207"><highlight class="normal">STB_EXTERN<sp/>stb_idict<sp/>*<sp/>stb_idict_new_size(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="4208"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_idict_remove_all(stb_idict<sp/>*<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>);</highlight></codeline>
<codeline lineno="4209"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_uidict_reset(stb_uidict<sp/>*<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>);</highlight></codeline>
<codeline lineno="4210"><highlight class="normal"></highlight></codeline>
<codeline lineno="4211"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4212"><highlight class="normal"></highlight></codeline>
<codeline lineno="4213"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_EMPTY<sp/>((void<sp/>*)<sp/>2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4214"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_EDEL<sp/><sp/>((void<sp/>*)<sp/>6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4215"><highlight class="normal"></highlight></codeline>
<codeline lineno="4216"><highlight class="normal">stb_define_hash_base(STB_noprefix,stb_ptrmap,<sp/>STB_nofields,<sp/>stb_ptrmap_,stb_ptrmap_,0.85f,</highlight></codeline>
<codeline lineno="4217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,STB_EMPTY,STB_EDEL,STB_nocopy,STB_nodelete,STB_nosafe,</highlight></codeline>
<codeline lineno="4218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STB_equal,STB_equal,</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_hashptr(k);,</highlight></codeline>
<codeline lineno="4219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,STB_nullvalue,NULL)</highlight></codeline>
<codeline lineno="4220"><highlight class="normal"></highlight></codeline>
<codeline lineno="4221"><highlight class="normal">stb_ptrmap<sp/>*stb_ptrmap_new(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4222"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4223"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_ptrmap_create();</highlight></codeline>
<codeline lineno="4224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4225"><highlight class="normal"></highlight></codeline>
<codeline lineno="4226"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_ptrmap_delete(stb_ptrmap<sp/>*<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*free_func)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))</highlight></codeline>
<codeline lineno="4227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4228"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4229"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(free_func)</highlight></codeline>
<codeline lineno="4230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-&gt;limit;<sp/>++i)</highlight></codeline>
<codeline lineno="4231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-&gt;table[i].k<sp/>!=<sp/>STB_EMPTY<sp/>&amp;&amp;<sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-&gt;table[i].k<sp/>!=<sp/>STB_EDEL)<sp/>{</highlight></codeline>
<codeline lineno="4232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(free_func<sp/>==<sp/>free)</highlight></codeline>
<codeline lineno="4233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-&gt;table[i].v);<sp/></highlight><highlight class="comment">//<sp/>allow<sp/>STB_MALLOC_WRAPPER<sp/>to<sp/>operate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_func(<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-&gt;table[i].v);</highlight></codeline>
<codeline lineno="4236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4237"><highlight class="normal"><sp/><sp/><sp/>stb_ptrmap_destroy(<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>);</highlight></codeline>
<codeline lineno="4238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4239"><highlight class="normal"></highlight></codeline>
<codeline lineno="4240"><highlight class="normal"></highlight><highlight class="comment">//<sp/>extra<sp/>fields<sp/>needed<sp/>for<sp/>stua_dict</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4241"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_IEMPTY<sp/><sp/>((int)<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4242"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_IDEL<sp/><sp/><sp/><sp/>((int)<sp/>3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4243"><highlight class="normal">stb_define_hash_base(STB_noprefix,<sp/>stb_idict,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>type;<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>gc;<sp/>STB_nofields,<sp/>stb_idict_,stb_idict_,0.95f,</highlight></codeline>
<codeline lineno="4244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_int32,STB_IEMPTY,STB_IDEL,STB_nocopy,STB_nodelete,STB_nosafe,</highlight></codeline>
<codeline lineno="4245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STB_equal,STB_equal,</highlight></codeline>
<codeline lineno="4246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_rehash_improved(k);,stb_int32,STB_nonullvalue,0)</highlight></codeline>
<codeline lineno="4247"><highlight class="normal"></highlight></codeline>
<codeline lineno="4248"><highlight class="normal">stb_idict<sp/>*<sp/>stb_idict_new_size(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="4249"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4250"><highlight class="normal"><sp/><sp/><sp/>stb_idict<sp/>*<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref><sp/>=<sp/>(stb_idict<sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>));</highlight></codeline>
<codeline lineno="4251"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb_is_pow2(size))</highlight></codeline>
<codeline lineno="4253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>stb_log2_ceil(size);</highlight></codeline>
<codeline lineno="4254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_idict_init(<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>,<sp/>size);</highlight></codeline>
<codeline lineno="4255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-&gt;alloced<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4256"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4257"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>;</highlight></codeline>
<codeline lineno="4258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4259"><highlight class="normal"></highlight></codeline>
<codeline lineno="4260"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_idict_remove_all(stb_idict<sp/>*<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>)</highlight></codeline>
<codeline lineno="4261"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4262"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="4263"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-&gt;limit;<sp/>++n)</highlight></codeline>
<codeline lineno="4264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-&gt;table[n].k<sp/>=<sp/>STB_IEMPTY;</highlight></codeline>
<codeline lineno="4265"><highlight class="normal"><sp/><sp/><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-&gt;has_empty<sp/>=<sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-&gt;has_del<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4266"><highlight class="normal"><sp/><sp/><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-&gt;count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4267"><highlight class="normal"><sp/><sp/><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-&gt;deleted<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4269"><highlight class="normal"></highlight></codeline>
<codeline lineno="4270"><highlight class="normal">stb_define_hash_base(STB_noprefix,<sp/>stb_uidict,<sp/>STB_nofields,<sp/>stb_uidict_,stb_uidict_,0.85f,</highlight></codeline>
<codeline lineno="4271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_int32,0xffffffff,0xfffffffe,STB_nocopy,STB_nodelete,STB_nosafe,</highlight></codeline>
<codeline lineno="4272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STB_equal,STB_equal,</highlight></codeline>
<codeline lineno="4273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_rehash_improved(k);,stb_uint32,STB_nonullvalue,0)</highlight></codeline>
<codeline lineno="4274"><highlight class="normal"></highlight></codeline>
<codeline lineno="4275"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_uidict_reset(stb_uidict<sp/>*<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>)</highlight></codeline>
<codeline lineno="4276"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4277"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="4278"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-&gt;limit;<sp/>++n)</highlight></codeline>
<codeline lineno="4279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-&gt;table[n].k<sp/>=<sp/>0xffffffff;</highlight></codeline>
<codeline lineno="4280"><highlight class="normal"><sp/><sp/><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-&gt;has_empty<sp/>=<sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-&gt;has_del<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4281"><highlight class="normal"><sp/><sp/><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-&gt;count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4282"><highlight class="normal"><sp/><sp/><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-&gt;deleted<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4284"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4285"><highlight class="normal"></highlight></codeline>
<codeline lineno="4287"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4288"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_sparse_ptr_matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4289"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4290"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>stb_ptrmap<sp/>data<sp/>structure<sp/>is<sp/>an<sp/>O(1)<sp/>hash<sp/>table<sp/>storing<sp/>an<sp/>arbitrary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4291"><highlight class="normal"></highlight><highlight class="comment">//<sp/>block<sp/>of<sp/>data<sp/>for<sp/>a<sp/>given<sp/>pair<sp/>of<sp/>pointers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4292"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4293"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>create=0,<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4294"><highlight class="normal"></highlight></codeline>
<codeline lineno="4295"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stb__st_stb_spmatrix<sp/>stb_spmatrix;</highlight></codeline>
<codeline lineno="4296"><highlight class="normal"></highlight></codeline>
<codeline lineno="4297"><highlight class="normal">STB_EXTERN<sp/>stb_spmatrix<sp/>*<sp/>stb_sparse_ptr_matrix_new(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val_size);</highlight></codeline>
<codeline lineno="4298"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_sparse_ptr_matrix_free(stb_spmatrix<sp/>*z);</highlight></codeline>
<codeline lineno="4299"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>stb_sparse_ptr_matrix_get(stb_spmatrix<sp/>*z,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>create);</highlight></codeline>
<codeline lineno="4300"><highlight class="normal"></highlight></codeline>
<codeline lineno="4301"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4302"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4303"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4304"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a;</highlight></codeline>
<codeline lineno="4305"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b;</highlight></codeline>
<codeline lineno="4306"><highlight class="normal">}<sp/>stb__ptrpair;</highlight></codeline>
<codeline lineno="4307"><highlight class="normal"></highlight></codeline>
<codeline lineno="4308"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb__ptrpair<sp/>stb__ptrpair_empty<sp/>=<sp/>{<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>1,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>1<sp/>};</highlight></codeline>
<codeline lineno="4309"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb__ptrpair<sp/>stb__ptrpair_del<sp/><sp/><sp/>=<sp/>{<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>2,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>2<sp/>};</highlight></codeline>
<codeline lineno="4310"><highlight class="normal"></highlight></codeline>
<codeline lineno="4311"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__equal_ptrpair(x,y)<sp/>((x).a<sp/>==<sp/>(y).a<sp/>&amp;&amp;<sp/>(x).b<sp/>==<sp/>(y).b)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4312"><highlight class="normal"></highlight></codeline>
<codeline lineno="4313"><highlight class="normal">stb_define_hash_base(STB_noprefix,<sp/>stb_spmatrix,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val_size;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arena;,<sp/>stb__spmatrix_,stb__spmatrix_,<sp/>0.85,</highlight></codeline>
<codeline lineno="4314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>stb__ptrpair,<sp/>stb__ptrpair_empty,<sp/>stb__ptrpair_del,</highlight></codeline>
<codeline lineno="4315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>STB_nocopy,<sp/>STB_nodelete,<sp/>STB_nosafe,</highlight></codeline>
<codeline lineno="4316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>STB__equal_ptrpair,<sp/>STB__equal_ptrpair,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_rehash(stb_hashptr(k.a))+stb_hashptr(k.b);,</highlight></codeline>
<codeline lineno="4317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/>STB_nullvalue,<sp/>0)</highlight></codeline>
<codeline lineno="4318"><highlight class="normal"></highlight></codeline>
<codeline lineno="4319"><highlight class="normal">stb_spmatrix<sp/>*stb_sparse_ptr_matrix_new(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val_size)</highlight></codeline>
<codeline lineno="4320"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4321"><highlight class="normal"><sp/><sp/><sp/>stb_spmatrix<sp/>*m<sp/>=<sp/>stb__spmatrix_create();</highlight></codeline>
<codeline lineno="4322"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m)<sp/>m-&gt;val_size<sp/>=<sp/>val_size;</highlight></codeline>
<codeline lineno="4323"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m)<sp/>m-&gt;arena<sp/>=<sp/>stb_malloc_global(1);</highlight></codeline>
<codeline lineno="4324"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m;</highlight></codeline>
<codeline lineno="4325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4326"><highlight class="normal"></highlight></codeline>
<codeline lineno="4327"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_sparse_ptr_matrix_free(stb_spmatrix<sp/>*z)</highlight></codeline>
<codeline lineno="4328"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4329"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z-&gt;arena)<sp/>stb_free(z-&gt;arena);</highlight></codeline>
<codeline lineno="4330"><highlight class="normal"><sp/><sp/><sp/>stb__spmatrix_destroy(z);</highlight></codeline>
<codeline lineno="4331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4332"><highlight class="normal"></highlight></codeline>
<codeline lineno="4333"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb_sparse_ptr_matrix_get(stb_spmatrix<sp/>*z,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>create)</highlight></codeline>
<codeline lineno="4334"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4335"><highlight class="normal"><sp/><sp/><sp/>stb__ptrpair<sp/>t<sp/>=<sp/>{<sp/>a,b<sp/>};</highlight></codeline>
<codeline lineno="4336"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data<sp/>=<sp/>stb__spmatrix_get(z,<sp/>t);</highlight></codeline>
<codeline lineno="4337"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!data<sp/>&amp;&amp;<sp/>create)<sp/>{</highlight></codeline>
<codeline lineno="4338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>stb_malloc_raw(z-&gt;arena,<sp/>z-&gt;val_size);</highlight></codeline>
<codeline lineno="4339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!data)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memset(data,<sp/>0,<sp/>z-&gt;val_size);</highlight></codeline>
<codeline lineno="4341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__spmatrix_add(z,<sp/>t,<sp/>data);</highlight></codeline>
<codeline lineno="4342"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4343"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="4344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4345"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4346"><highlight class="normal"></highlight></codeline>
<codeline lineno="4347"><highlight class="normal"></highlight></codeline>
<codeline lineno="4348"><highlight class="normal"></highlight></codeline>
<codeline lineno="4350"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4351"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDICT:<sp/>Hash<sp/>Table<sp/>for<sp/>Strings<sp/>(symbol<sp/>table)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4352"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4353"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>&quot;use_arena=1&quot;,<sp/>then<sp/>strings<sp/>will<sp/>be<sp/>copied</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4354"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>into<sp/>blocks<sp/>and<sp/>never<sp/>freed<sp/>until<sp/>the<sp/>sdict<sp/>is<sp/>freed;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4355"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otherwise<sp/>they&apos;re<sp/>malloc()ed<sp/>and<sp/>free()d<sp/>on<sp/>the<sp/>fly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4356"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(specify<sp/>use_arena=1<sp/>if<sp/>you<sp/>never<sp/>stb_sdict_remove)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4357"><highlight class="normal"></highlight></codeline>
<codeline lineno="4358"><highlight class="normal">stb_declare_hash(STB_EXTERN,<sp/>stb_sdict,<sp/>stb_sdict_,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)</highlight></codeline>
<codeline lineno="4359"><highlight class="normal"></highlight></codeline>
<codeline lineno="4360"><highlight class="normal">STB_EXTERN<sp/>stb_sdict<sp/>*<sp/>stb_sdict_new(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>use_arena);</highlight></codeline>
<codeline lineno="4361"><highlight class="normal">STB_EXTERN<sp/>stb_sdict<sp/>*<sp/>stb_sdict_copy(stb_sdict*);</highlight></codeline>
<codeline lineno="4362"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_sdict_delete(stb_sdict<sp/>*);</highlight></codeline>
<codeline lineno="4363"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>stb_sdict_change(stb_sdict<sp/>*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p);</highlight></codeline>
<codeline lineno="4364"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_sdict_count(stb_sdict<sp/>*d);</highlight></codeline>
<codeline lineno="4365"><highlight class="normal"></highlight></codeline>
<codeline lineno="4366"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_sdict_internal_limit(stb_sdict<sp/>*d);</highlight></codeline>
<codeline lineno="4367"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>stb_sdict_internal_key(stb_sdict<sp/>*d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="4368"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>stb_sdict_internal_value(stb_sdict<sp/>*d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="4369"><highlight class="normal"></highlight></codeline>
<codeline lineno="4370"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_sdict_for(d,i,q,z)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4371"><highlight class="preprocessor"><sp/><sp/><sp/>for(i=0;<sp/>i<sp/>&lt;<sp/>stb_sdict_internal_limit(d)<sp/>?<sp/>(q=stb_sdict_internal_key(d,i),z=stb_sdict_internal_value(d,i),1)<sp/>:<sp/>0;<sp/>++i)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4372"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(q==NULL||q==(void<sp/>*)<sp/>1);else<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reversed<sp/>makes<sp/>macro<sp/>friendly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4373"><highlight class="normal"></highlight></codeline>
<codeline lineno="4374"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4375"><highlight class="normal"></highlight></codeline>
<codeline lineno="4376"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>in<sp/>same<sp/>translation<sp/>unit,<sp/>for<sp/>speed,<sp/>don&apos;t<sp/>call<sp/>accessors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4377"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>stb_sdict_for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4378"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_sdict_for(d,i,q,z)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4379"><highlight class="preprocessor"><sp/><sp/><sp/>for(i=0;<sp/>i<sp/>&lt;<sp/>(d)-&gt;limit<sp/>?<sp/>(q=(d)-&gt;table[i].k,z=(d)-&gt;table[i].v,1)<sp/>:<sp/>0;<sp/>++i)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4380"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(q==NULL||q==(void<sp/>*)<sp/>1);else<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reversed<sp/>makes<sp/>macro<sp/>friendly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4381"><highlight class="normal"></highlight></codeline>
<codeline lineno="4382"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_DEL<sp/>((void<sp/>*)<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4383"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_SDEL<sp/><sp/>((char<sp/>*)<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4384"><highlight class="normal"></highlight></codeline>
<codeline lineno="4385"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_sdict__copy(x)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4386"><highlight class="preprocessor"><sp/><sp/><sp/>stb_p_strcpy_s(a-&gt;arena<sp/>?<sp/>stb_malloc_string(a-&gt;arena,<sp/>strlen(x)+1)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4387"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(char<sp/>*)<sp/>malloc(strlen(x)+1),<sp/>strlen(x)+1,<sp/>x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4388"><highlight class="normal"></highlight></codeline>
<codeline lineno="4389"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_sdict__dispose(x)<sp/><sp/>if<sp/>(!a-&gt;arena)<sp/>free(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4390"><highlight class="normal"></highlight></codeline>
<codeline lineno="4391"><highlight class="normal">stb_define_hash_base(STB_noprefix,<sp/>stb_sdict,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*arena;,<sp/>stb_sdict_,stb_sdictinternal_,<sp/>0.85f,</highlight></codeline>
<codeline lineno="4392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/>NULL,<sp/>STB_SDEL,<sp/>stb_sdict__copy,<sp/>stb_sdict__dispose,</highlight></codeline>
<codeline lineno="4393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STB_safecompare,<sp/>!strcmp,<sp/>STB_equal,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_hash(k);,</highlight></codeline>
<codeline lineno="4394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/>STB_nullvalue,<sp/>NULL)</highlight></codeline>
<codeline lineno="4395"><highlight class="normal"></highlight></codeline>
<codeline lineno="4396"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_sdict_count(stb_sdict<sp/>*a)</highlight></codeline>
<codeline lineno="4397"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4398"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a-&gt;count;</highlight></codeline>
<codeline lineno="4399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4400"><highlight class="normal"></highlight></codeline>
<codeline lineno="4401"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_sdict_internal_limit(stb_sdict<sp/>*a)</highlight></codeline>
<codeline lineno="4402"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4403"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a-&gt;limit;</highlight></codeline>
<codeline lineno="4404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4405"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>stb_sdict_internal_key(stb_sdict<sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="4406"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4407"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a-&gt;table[n].k;</highlight></codeline>
<codeline lineno="4408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4409"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>stb_sdict_internal_value(stb_sdict<sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="4410"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4411"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a-&gt;table[n].v;</highlight></codeline>
<codeline lineno="4412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4413"><highlight class="normal"></highlight></codeline>
<codeline lineno="4414"><highlight class="normal">stb_sdict<sp/>*<sp/>stb_sdict_new(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>use_arena)</highlight></codeline>
<codeline lineno="4415"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4416"><highlight class="normal"><sp/><sp/><sp/>stb_sdict<sp/>*d<sp/>=<sp/>stb_sdict_create();</highlight></codeline>
<codeline lineno="4417"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4418"><highlight class="normal"><sp/><sp/><sp/>d-&gt;arena<sp/>=<sp/>use_arena<sp/>?<sp/>stb_malloc_global(1)<sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="4419"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d;</highlight></codeline>
<codeline lineno="4420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4421"><highlight class="normal"></highlight></codeline>
<codeline lineno="4422"><highlight class="normal">stb_sdict*<sp/>stb_sdict_copy(stb_sdict<sp/>*old)</highlight></codeline>
<codeline lineno="4423"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4424"><highlight class="normal"><sp/><sp/><sp/>stb_sdict<sp/>*n;</highlight></codeline>
<codeline lineno="4425"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*old_arena<sp/>=<sp/>old-&gt;arena;</highlight></codeline>
<codeline lineno="4426"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*new_arena<sp/>=<sp/>old_arena<sp/>?<sp/>stb_malloc_global(1)<sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="4427"><highlight class="normal"><sp/><sp/><sp/>old-&gt;arena<sp/>=<sp/>new_arena;</highlight></codeline>
<codeline lineno="4428"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>stb_sdictinternal_copy(old);</highlight></codeline>
<codeline lineno="4429"><highlight class="normal"><sp/><sp/><sp/>old-&gt;arena<sp/>=<sp/>old_arena;</highlight></codeline>
<codeline lineno="4430"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n)</highlight></codeline>
<codeline lineno="4431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;arena<sp/>=<sp/>new_arena;</highlight></codeline>
<codeline lineno="4432"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_arena)</highlight></codeline>
<codeline lineno="4433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_free(new_arena);</highlight></codeline>
<codeline lineno="4434"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="4435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4436"><highlight class="normal"></highlight></codeline>
<codeline lineno="4437"><highlight class="normal"></highlight></codeline>
<codeline lineno="4438"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_sdict_delete(stb_sdict<sp/>*d)</highlight></codeline>
<codeline lineno="4439"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4440"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d-&gt;arena)</highlight></codeline>
<codeline lineno="4441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_free(d-&gt;arena);</highlight></codeline>
<codeline lineno="4442"><highlight class="normal"><sp/><sp/><sp/>stb_sdict_destroy(d);</highlight></codeline>
<codeline lineno="4443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4444"><highlight class="normal"></highlight></codeline>
<codeline lineno="4445"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>stb_sdict_change(stb_sdict<sp/>*d,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="4446"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4447"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*q<sp/>=<sp/>stb_sdict_get(d,<sp/>str);</highlight></codeline>
<codeline lineno="4448"><highlight class="normal"><sp/><sp/><sp/>stb_sdict_set(d,<sp/>str,<sp/>p);</highlight></codeline>
<codeline lineno="4449"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>q;</highlight></codeline>
<codeline lineno="4450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4451"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4452"><highlight class="normal"></highlight></codeline>
<codeline lineno="4454"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4455"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Instantiated<sp/>data<sp/>structures</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4456"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4457"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>an<sp/>attempt<sp/>to<sp/>implement<sp/>a<sp/>templated<sp/>data<sp/>structure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4458"><highlight class="normal"></highlight><highlight class="comment">//<sp/>What<sp/>you<sp/>do<sp/>is<sp/>define<sp/>a<sp/>struct<sp/>foo,<sp/>and<sp/>then<sp/>include<sp/>several</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4459"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pointer<sp/>fields<sp/>to<sp/>struct<sp/>foo<sp/>in<sp/>your<sp/>struct.<sp/>Then<sp/>you<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4460"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>instantiator,<sp/>which<sp/>creates<sp/>the<sp/>functions<sp/>that<sp/>implement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4461"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>data<sp/>structure.<sp/>This<sp/>requires<sp/>massive<sp/>undebuggable<sp/>#defines,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4462"><highlight class="normal"></highlight><highlight class="comment">//<sp/>so<sp/>we<sp/>limit<sp/>the<sp/>cases<sp/>where<sp/>we<sp/>do<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4463"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4464"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AA<sp/>tree<sp/>is<sp/>an<sp/>encoding<sp/>of<sp/>a<sp/>2-3<sp/>tree<sp/>whereas<sp/>RB<sp/>trees<sp/>encode<sp/>a<sp/>2-3-4<sp/>tree;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4465"><highlight class="normal"></highlight><highlight class="comment">//<sp/>much<sp/>simpler<sp/>code<sp/>due<sp/>to<sp/>fewer<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4466"><highlight class="normal"></highlight></codeline>
<codeline lineno="4467"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb__bst_parent(x)<sp/><sp/><sp/><sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4468"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb__bst_noparent(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4469"><highlight class="normal"></highlight></codeline>
<codeline lineno="4470"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_bst_fields(N)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4471"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>*STB_(N,left),<sp/>*STB_(N,right);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4472"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>unsigned<sp/>char<sp/>STB_(N,level)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4473"><highlight class="normal"></highlight></codeline>
<codeline lineno="4474"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_bst_fields_parent(N)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4475"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>*STB_(N,left),<sp/>*STB_(N,right),<sp/><sp/>*STB_(N,parent);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4476"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>unsigned<sp/>char<sp/>STB_(N,level)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4477"><highlight class="normal"></highlight></codeline>
<codeline lineno="4478"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__level(N,x)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((x)<sp/>?<sp/>(x)-&gt;STB_(N,level)<sp/>:<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4479"><highlight class="normal"></highlight></codeline>
<codeline lineno="4480"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_bst_base(TYPE,<sp/>N,<sp/>TREE,<sp/>M,<sp/>compare,<sp/>PAR)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4481"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4482"><highlight class="preprocessor">static<sp/>int<sp/>STB_(N,_compare)(TYPE<sp/>*p,<sp/>TYPE<sp/>*q)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4483"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4484"><highlight class="preprocessor"><sp/><sp/><sp/>compare<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4485"><highlight class="preprocessor">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4486"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4487"><highlight class="preprocessor">static<sp/>void<sp/>STB_(N,setleft)(TYPE<sp/>*q,<sp/>TYPE<sp/>*v)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4488"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4489"><highlight class="preprocessor"><sp/><sp/><sp/>q-&gt;STB_(N,left)<sp/>=<sp/>v;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4490"><highlight class="preprocessor"><sp/><sp/><sp/>PAR(if<sp/>(v)<sp/>v-&gt;STB_(N,parent)<sp/>=<sp/>q;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4491"><highlight class="preprocessor">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4492"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4493"><highlight class="preprocessor">static<sp/>void<sp/>STB_(N,setright)(TYPE<sp/>*q,<sp/>TYPE<sp/>*v)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4494"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4495"><highlight class="preprocessor"><sp/><sp/><sp/>q-&gt;STB_(N,right)<sp/>=<sp/>v;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4496"><highlight class="preprocessor"><sp/><sp/><sp/>PAR(if<sp/>(v)<sp/>v-&gt;STB_(N,parent)<sp/>=<sp/>q;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4497"><highlight class="preprocessor">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4498"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4499"><highlight class="preprocessor">static<sp/>TYPE<sp/>*STB_(N,skew)(TYPE<sp/>*q)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4500"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4501"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(q<sp/>==<sp/>NULL)<sp/>return<sp/>q;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4502"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(q-&gt;STB_(N,left)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4503"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>q-&gt;STB_(N,left)-&gt;STB_(N,level)<sp/>==<sp/>q-&gt;STB_(N,level))<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4504"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>TYPE<sp/>*p<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>q-&gt;STB_(N,left);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4505"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>STB_(N,setleft)(q,<sp/>p-&gt;STB_(N,right));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4506"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>STB_(N,setright)(p,<sp/>q);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4507"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>p;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4508"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4509"><highlight class="preprocessor"><sp/><sp/><sp/>return<sp/>q;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4510"><highlight class="preprocessor">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4511"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4512"><highlight class="preprocessor">static<sp/>TYPE<sp/>*STB_(N,split)(TYPE<sp/>*p)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4513"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4514"><highlight class="preprocessor"><sp/><sp/><sp/>TYPE<sp/>*q<sp/>=<sp/>p-&gt;STB_(N,right);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4515"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(q<sp/>&amp;&amp;<sp/>q-&gt;STB_(N,right)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4516"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>q-&gt;STB_(N,right)-&gt;STB_(N,level)<sp/>==<sp/>p-&gt;STB_(N,level))<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4517"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>STB_(N,setright)(p,<sp/>q-&gt;STB_(N,left));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4518"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>STB_(N,setleft)(q,p);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4519"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>++q-&gt;STB_(N,level);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4520"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>q;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4521"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4522"><highlight class="preprocessor"><sp/><sp/><sp/>return<sp/>p;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4523"><highlight class="preprocessor">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4524"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4525"><highlight class="preprocessor">TYPE<sp/>*STB__(N,insert)(TYPE<sp/>*tree,<sp/>TYPE<sp/>*item)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4526"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4527"><highlight class="preprocessor"><sp/><sp/><sp/>int<sp/>c;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4528"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(tree<sp/>==<sp/>NULL)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4529"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;STB_(N,left)<sp/>=<sp/>NULL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4530"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;STB_(N,right)<sp/>=<sp/>NULL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4531"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;STB_(N,level)<sp/>=<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4532"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>PAR(item-&gt;STB_(N,parent)<sp/>=<sp/>NULL;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4533"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>item;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4534"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4535"><highlight class="preprocessor"><sp/><sp/><sp/>c<sp/>=<sp/>STB_(N,_compare)(item,tree);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4536"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(c<sp/>==<sp/>0)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4537"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(item<sp/>!=<sp/>tree)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4538"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STB_(N,setleft)(item,<sp/>tree-&gt;STB_(N,left));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4539"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STB_(N,setright)(item,<sp/>tree-&gt;STB_(N,right));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4540"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item-&gt;STB_(N,level)<sp/>=<sp/>tree-&gt;STB_(N,level);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4541"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PAR(item-&gt;STB_(N,parent)<sp/>=<sp/>NULL;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4542"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4543"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>item;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4544"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4545"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(c<sp/>&lt;<sp/>0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4546"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>STB_(N,setleft<sp/>)(tree,<sp/>STB__(N,insert)(tree-&gt;STB_(N,left),<sp/>item));<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4547"><highlight class="preprocessor"><sp/><sp/><sp/>else<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4548"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>STB_(N,setright)(tree,<sp/>STB__(N,insert)(tree-&gt;STB_(N,right),<sp/>item));<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4549"><highlight class="preprocessor"><sp/><sp/><sp/>tree<sp/>=<sp/>STB_(N,skew)(tree);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4550"><highlight class="preprocessor"><sp/><sp/><sp/>tree<sp/>=<sp/>STB_(N,split)(tree);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4551"><highlight class="preprocessor"><sp/><sp/><sp/>PAR(tree-&gt;STB_(N,parent)<sp/>=<sp/>NULL;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4552"><highlight class="preprocessor"><sp/><sp/><sp/>return<sp/>tree;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4553"><highlight class="preprocessor">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4554"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4555"><highlight class="preprocessor">TYPE<sp/>*STB__(N,remove)(TYPE<sp/>*tree,<sp/>TYPE<sp/>*item)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4556"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4557"><highlight class="preprocessor"><sp/><sp/><sp/>static<sp/>TYPE<sp/>*delnode,<sp/>*leaf,<sp/>*restore;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4558"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(tree<sp/>==<sp/>NULL)<sp/>return<sp/>NULL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4559"><highlight class="preprocessor"><sp/><sp/><sp/>leaf<sp/>=<sp/>tree;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4560"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(STB_(N,_compare)(item,<sp/>tree)<sp/>&lt;<sp/>0)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4561"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>STB_(N,setleft)(tree,<sp/>STB__(N,remove)(tree-&gt;STB_(N,left),<sp/>item));<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4562"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4563"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>TYPE<sp/>*r;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4564"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>delnode<sp/>=<sp/>tree;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4565"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>STB__(N,remove)(tree-&gt;STB_(N,right),<sp/>item);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4566"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>maybe<sp/>move<sp/>&apos;leaf&apos;<sp/>up<sp/>to<sp/>this<sp/>location<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4567"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(restore<sp/>==<sp/>tree)<sp/>{<sp/>tree<sp/>=<sp/>leaf;<sp/>leaf<sp/>=<sp/>restore<sp/>=<sp/>NULL;<sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4568"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>STB_(N,setright)(tree,r);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4569"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>assert(tree-&gt;STB_(N,right)<sp/>!=<sp/>tree);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4570"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4571"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(tree<sp/>==<sp/>leaf)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4572"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(delnode<sp/>==<sp/>item)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4573"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree<sp/>=<sp/>tree-&gt;STB_(N,right);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4574"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(leaf-&gt;STB_(N,left)<sp/>==<sp/>NULL);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4575"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>move<sp/>leaf<sp/>(the<sp/>right<sp/>sibling)<sp/>up<sp/>to<sp/>delnode<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4576"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STB_(N,setleft<sp/>)(leaf,<sp/>item-&gt;STB_(N,left<sp/>));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4577"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STB_(N,setright)(leaf,<sp/>item-&gt;STB_(N,right));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4578"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leaf-&gt;STB_(N,level)<sp/>=<sp/>item-&gt;STB_(N,level);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4579"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(leaf<sp/>!=<sp/>item)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4580"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>restore<sp/>=<sp/>delnode;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4581"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4582"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>delnode<sp/>=<sp/>NULL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4583"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4584"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(STB__level(N,tree-&gt;STB_(N,left)<sp/>)<sp/>&lt;<sp/>tree-&gt;STB_(N,level)-1<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4585"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STB__level(N,tree-&gt;STB_(N,right))<sp/>&lt;<sp/>tree-&gt;STB_(N,level)-1)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4586"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--tree-&gt;STB_(N,level);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4587"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(STB__level(N,tree-&gt;STB_(N,right))<sp/>&gt;<sp/>tree-&gt;STB_(N,level))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4588"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree-&gt;STB_(N,right)-&gt;STB_(N,level)<sp/>=<sp/>tree-&gt;STB_(N,level);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4589"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree<sp/>=<sp/>STB_(N,skew)(tree);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4590"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STB_(N,setright)(tree,<sp/>STB_(N,skew)(tree-&gt;STB_(N,right)));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4591"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(tree-&gt;STB_(N,right))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4592"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STB_(N,setright)(tree-&gt;STB_(N,right),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4593"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STB_(N,skew)(tree-&gt;STB_(N,right)-&gt;STB_(N,right)));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4594"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree<sp/>=<sp/>STB_(N,split)(tree);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4595"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(tree-&gt;STB_(N,right))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4596"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STB_(N,setright)(tree,<sp/><sp/>STB_(N,split)(tree-&gt;STB_(N,right)));<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4597"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4598"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4599"><highlight class="preprocessor"><sp/><sp/><sp/>PAR(if<sp/>(tree)<sp/>tree-&gt;STB_(N,parent)<sp/>=<sp/>NULL;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4600"><highlight class="preprocessor"><sp/><sp/><sp/>return<sp/>tree;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4601"><highlight class="preprocessor">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4602"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4603"><highlight class="preprocessor">TYPE<sp/>*STB__(N,last)(TYPE<sp/>*tree)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4604"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4605"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(tree)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4606"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(tree-&gt;STB_(N,right))<sp/>tree<sp/>=<sp/>tree-&gt;STB_(N,right);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4607"><highlight class="preprocessor"><sp/><sp/><sp/>return<sp/>tree;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4608"><highlight class="preprocessor">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4609"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4610"><highlight class="preprocessor">TYPE<sp/>*STB__(N,first)(TYPE<sp/>*tree)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4611"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4612"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(tree)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4613"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(tree-&gt;STB_(N,left))<sp/>tree<sp/>=<sp/>tree-&gt;STB_(N,left);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4614"><highlight class="preprocessor"><sp/><sp/><sp/>return<sp/>tree;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4615"><highlight class="preprocessor">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4616"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4617"><highlight class="preprocessor">TYPE<sp/>*STB__(N,next)(TYPE<sp/>*tree,<sp/>TYPE<sp/>*item)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4618"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4619"><highlight class="preprocessor"><sp/><sp/><sp/>TYPE<sp/>*next<sp/>=<sp/>NULL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4620"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(item-&gt;STB_(N,right))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4621"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>STB__(N,first)(item-&gt;STB_(N,right));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4622"><highlight class="preprocessor"><sp/><sp/><sp/>PAR(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4623"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>while(item-&gt;STB_(N,parent))<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4624"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TYPE<sp/>*up<sp/>=<sp/>item-&gt;STB_(N,parent);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4625"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(up-&gt;STB_(N,left)<sp/>==<sp/>item)<sp/>return<sp/>up;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4626"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item<sp/>=<sp/>up;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4627"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4628"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>NULL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4629"><highlight class="preprocessor"><sp/><sp/><sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4630"><highlight class="preprocessor"><sp/><sp/><sp/>while<sp/>(tree<sp/>!=<sp/>item)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4631"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(STB_(N,_compare)(item,<sp/>tree)<sp/>&lt;<sp/>0)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4632"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>tree;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4633"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree<sp/>=<sp/>tree-&gt;STB_(N,left);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4634"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4635"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree<sp/>=<sp/>tree-&gt;STB_(N,right);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4636"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4637"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4638"><highlight class="preprocessor"><sp/><sp/><sp/>return<sp/>next;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4639"><highlight class="preprocessor">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4640"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4641"><highlight class="preprocessor">TYPE<sp/>*STB__(N,prev)(TYPE<sp/>*tree,<sp/>TYPE<sp/>*item)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4642"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4643"><highlight class="preprocessor"><sp/><sp/><sp/>TYPE<sp/>*next<sp/>=<sp/>NULL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4644"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(item-&gt;STB_(N,left))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4645"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>STB__(N,last)(item-&gt;STB_(N,left));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4646"><highlight class="preprocessor"><sp/><sp/><sp/>PAR(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4647"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>while(item-&gt;STB_(N,parent))<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4648"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TYPE<sp/>*up<sp/>=<sp/>item-&gt;STB_(N,parent);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4649"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(up-&gt;STB_(N,right)<sp/>==<sp/>item)<sp/>return<sp/>up;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4650"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item<sp/>=<sp/>up;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4651"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4652"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>NULL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4653"><highlight class="preprocessor"><sp/><sp/><sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4654"><highlight class="preprocessor"><sp/><sp/><sp/>while<sp/>(tree<sp/>!=<sp/>item)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4655"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(STB_(N,_compare)(item,<sp/>tree)<sp/>&lt;<sp/>0)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4656"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree<sp/>=<sp/>tree-&gt;STB_(N,left);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4657"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4658"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>tree;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4659"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree<sp/>=<sp/>tree-&gt;STB_(N,right);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4660"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4661"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4662"><highlight class="preprocessor"><sp/><sp/><sp/>return<sp/>next;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4663"><highlight class="preprocessor">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4664"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4665"><highlight class="preprocessor">STB__DEBUG(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4666"><highlight class="preprocessor"><sp/><sp/><sp/>void<sp/>STB__(N,_validate)(TYPE<sp/>*tree,<sp/>int<sp/>root)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4667"><highlight class="preprocessor"><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4668"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(tree<sp/>==<sp/>NULL)<sp/>return;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4669"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>PAR(if(root)<sp/>assert(tree-&gt;STB_(N,parent)<sp/>==<sp/>NULL);)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4670"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>assert(STB__level(N,tree-&gt;STB_(N,left)<sp/>)<sp/>==<sp/>tree-&gt;STB_(N,level)-1);<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4671"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>assert(STB__level(N,tree-&gt;STB_(N,right))<sp/>&lt;=<sp/>tree-&gt;STB_(N,level));<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4672"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>assert(STB__level(N,tree-&gt;STB_(N,right))<sp/>&gt;=<sp/>tree-&gt;STB_(N,level)-1);<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4673"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(tree-&gt;STB_(N,right))<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4674"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(STB__level(N,tree-&gt;STB_(N,right)-&gt;STB_(N,right))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4675"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!=<sp/><sp/><sp/><sp/>tree-&gt;STB_(N,level));<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4676"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PAR(assert(tree-&gt;STB_(N,right)-&gt;STB_(N,parent)<sp/>==<sp/>tree);)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4677"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4678"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>PAR(if(tree-&gt;STB_(N,left))<sp/>assert(tree-&gt;STB_(N,left)-&gt;STB_(N,parent)<sp/>==<sp/>tree);)<sp/>\</highlight></codeline>
<codeline lineno="4679"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>STB__(N,_validate)(tree-&gt;STB_(N,left)<sp/>,0);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4680"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>STB__(N,_validate)(tree-&gt;STB_(N,right),0);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4681"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4682"><highlight class="preprocessor">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4683"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4684"><highlight class="preprocessor">typedef<sp/>struct<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4685"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4686"><highlight class="preprocessor"><sp/><sp/><sp/>TYPE<sp/>*root;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4687"><highlight class="preprocessor">}<sp/>TREE;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4688"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4689"><highlight class="preprocessor">void<sp/><sp/>STB__(M,Insert)(TREE<sp/>*tree,<sp/>TYPE<sp/>*item)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4690"><highlight class="preprocessor">{<sp/>tree-&gt;root<sp/>=<sp/>STB__(N,insert)(tree-&gt;root,<sp/>item);<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4691"><highlight class="preprocessor">void<sp/><sp/>STB__(M,Remove)(TREE<sp/>*tree,<sp/>TYPE<sp/>*item)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4692"><highlight class="preprocessor">{<sp/>tree-&gt;root<sp/>=<sp/>STB__(N,remove)(tree-&gt;root,<sp/>item);<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4693"><highlight class="preprocessor">TYPE<sp/>*STB__(M,Next)(TREE<sp/>*tree,<sp/>TYPE<sp/>*item)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4694"><highlight class="preprocessor">{<sp/>return<sp/>STB__(N,next)(tree-&gt;root,<sp/>item);<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4695"><highlight class="preprocessor">TYPE<sp/>*STB__(M,Prev)(TREE<sp/>*tree,<sp/>TYPE<sp/>*item)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4696"><highlight class="preprocessor">{<sp/>return<sp/>STB__(N,prev)(tree-&gt;root,<sp/>item);<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4697"><highlight class="preprocessor">TYPE<sp/>*STB__(M,First)(TREE<sp/>*tree)<sp/>{<sp/>return<sp/>STB__(N,first)(tree-&gt;root);<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4698"><highlight class="preprocessor">TYPE<sp/>*STB__(M,Last)<sp/>(TREE<sp/>*tree)<sp/>{<sp/>return<sp/>STB__(N,last)<sp/>(tree-&gt;root);<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4699"><highlight class="preprocessor">void<sp/>STB__(M,Init)(TREE<sp/>*tree)<sp/>{<sp/>tree-&gt;root<sp/>=<sp/>NULL;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4700"><highlight class="normal"></highlight></codeline>
<codeline lineno="4701"><highlight class="normal"></highlight></codeline>
<codeline lineno="4702"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_bst_find(N,tree,fcompare)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4703"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4704"><highlight class="preprocessor"><sp/><sp/><sp/>int<sp/>c;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4705"><highlight class="preprocessor"><sp/><sp/><sp/>while<sp/>(tree<sp/>!=<sp/>NULL)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4706"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>fcompare<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4707"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(c<sp/>==<sp/>0)<sp/>return<sp/>tree;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4708"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(c<sp/>&lt;<sp/>0)<sp/><sp/>tree<sp/>=<sp/>tree-&gt;STB_(N,left);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4709"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree<sp/>=<sp/>tree-&gt;STB_(N,right);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4710"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4711"><highlight class="preprocessor"><sp/><sp/><sp/>return<sp/>NULL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4712"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4713"><highlight class="normal"></highlight></codeline>
<codeline lineno="4714"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_bst_raw(TYPE,N,TREE,M,vfield,VTYPE,compare,PAR)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4715"><highlight class="preprocessor"><sp/><sp/><sp/>stb_bst_base(TYPE,N,TREE,M,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4716"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VTYPE<sp/>a<sp/>=<sp/>p-&gt;vfield;<sp/>VTYPE<sp/>b<sp/>=<sp/>q-&gt;vfield;<sp/>return<sp/>(compare);,<sp/>PAR<sp/>)<sp/><sp/>\</highlight></codeline>
<codeline lineno="4717"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4718"><highlight class="preprocessor">TYPE<sp/>*STB__(N,find)(TYPE<sp/>*tree,<sp/>VTYPE<sp/>a)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4719"><highlight class="preprocessor"><sp/><sp/><sp/>stb_bst_find(N,tree,VTYPE<sp/>b<sp/>=<sp/>tree-&gt;vfield;<sp/>c<sp/>=<sp/>(compare);)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4720"><highlight class="preprocessor">TYPE<sp/>*STB__(M,Find)(TREE<sp/>*tree,<sp/>VTYPE<sp/>a)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="4721"><highlight class="preprocessor">{<sp/>return<sp/>STB__(N,find)(tree-&gt;root,<sp/>a);<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4722"><highlight class="normal"></highlight></codeline>
<codeline lineno="4723"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_bst(TYPE,N,TREE,M,vfield,VTYPE,compare)<sp/>\</highlight></codeline>
<codeline lineno="4724"><highlight class="preprocessor"><sp/><sp/><sp/>stb_bst_raw(TYPE,N,TREE,M,vfield,VTYPE,compare,stb__bst_noparent)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4725"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_bst_parent(TYPE,N,TREE,M,vfield,VTYPE,compare)<sp/>\</highlight></codeline>
<codeline lineno="4726"><highlight class="preprocessor"><sp/><sp/><sp/>stb_bst_raw(TYPE,N,TREE,M,vfield,VTYPE,compare,stb__bst_parent)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4727"><highlight class="normal"></highlight></codeline>
<codeline lineno="4728"><highlight class="normal"></highlight></codeline>
<codeline lineno="4729"><highlight class="normal"></highlight></codeline>
<codeline lineno="4731"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4732"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>Nulling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4733"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4734"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>This<sp/>lets<sp/>you<sp/>automatically<sp/>NULL<sp/>dangling<sp/>pointers<sp/>to<sp/>&quot;registered&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4735"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>objects.<sp/>Note<sp/>that<sp/>you<sp/>have<sp/>to<sp/>make<sp/>sure<sp/>you<sp/>call<sp/>the<sp/>appropriate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4736"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>functions<sp/>when<sp/>you<sp/>free<sp/>or<sp/>realloc<sp/>blocks<sp/>of<sp/>memory<sp/>that<sp/>contain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4737"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>pointers<sp/>or<sp/>pointer<sp/>targets.<sp/>stb.h<sp/>can<sp/>automatically<sp/>do<sp/>this<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4738"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>stb_arr,<sp/>or<sp/>for<sp/>all<sp/>frees/reallocs<sp/>if<sp/>it&apos;s<sp/>wrapping<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4739"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4740"><highlight class="normal"></highlight></codeline>
<codeline lineno="4741"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_NPTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4742"><highlight class="normal"></highlight></codeline>
<codeline lineno="4743"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_nptr_set(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*address_of_pointer,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*value_to_write);</highlight></codeline>
<codeline lineno="4744"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_nptr_didset(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*address_of_pointer);</highlight></codeline>
<codeline lineno="4745"><highlight class="normal"></highlight></codeline>
<codeline lineno="4746"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_nptr_didfree(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*address_being_freed,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="4747"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_nptr_free(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*address_being_freed,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="4748"><highlight class="normal"></highlight></codeline>
<codeline lineno="4749"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_nptr_didrealloc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*new_address,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*old_address,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="4750"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_nptr_recache(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>recache<sp/>all<sp/>known<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>this<sp/>after<sp/>pointer<sp/>sets<sp/>outside<sp/>your<sp/>control,<sp/>slow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4752"><highlight class="normal"></highlight></codeline>
<codeline lineno="4753"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4754"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>fast<sp/>updating<sp/>on<sp/>free/realloc,<sp/>we<sp/>need<sp/>to<sp/>be<sp/>able<sp/>to<sp/>find</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4755"><highlight class="normal"></highlight><highlight class="comment">//<sp/>all<sp/>the<sp/>objects<sp/>(pointers<sp/>and<sp/>targets)<sp/>within<sp/>a<sp/>given<sp/>block;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4756"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>precludes<sp/>hashing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4757"><highlight class="normal"></highlight></codeline>
<codeline lineno="4758"><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>use<sp/>a<sp/>three-level<sp/>hierarchy<sp/>of<sp/>memory<sp/>to<sp/>minimize<sp/>storage:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4759"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>level<sp/>1:<sp/>65536<sp/>pointers<sp/>to<sp/>stb__memory_node<sp/>(always<sp/>uses<sp/>256<sp/>KB)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4760"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>level<sp/>2:<sp/>each<sp/>stb__memory_node<sp/>represents<sp/>a<sp/>64K<sp/>block<sp/>of<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4761"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>256<sp/>stb__memory_leafs<sp/>(worst<sp/>case<sp/>64MB)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4762"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>level<sp/>3:<sp/>each<sp/>stb__memory_leaf<sp/>represents<sp/>256<sp/>bytes<sp/>of<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4763"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>a<sp/>list<sp/>of<sp/>target<sp/>locations<sp/>and<sp/>a<sp/>list<sp/>of<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4764"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(which<sp/>are<sp/>hopefully<sp/>fairly<sp/>short<sp/>normally!)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4765"><highlight class="normal"></highlight></codeline>
<codeline lineno="4766"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>approach<sp/>won&apos;t<sp/>work<sp/>in<sp/>64-bit,<sp/>which<sp/>has<sp/>a<sp/>much<sp/>larger<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4767"><highlight class="normal"></highlight><highlight class="comment">//<sp/>space.<sp/>need<sp/>to<sp/>redesign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4768"><highlight class="normal"></highlight></codeline>
<codeline lineno="4769"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__NPTR_ROOT_LOG2<sp/><sp/><sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4770"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__NPTR_ROOT_NUM<sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>STB__NPTR_ROOT_LOG2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4771"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__NPTR_ROOT_SHIFT<sp/><sp/>(32<sp/>-<sp/>STB__NPTR_ROOT_LOG2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4772"><highlight class="normal"></highlight></codeline>
<codeline lineno="4773"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__NPTR_NODE_LOG2<sp/><sp/><sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4774"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__NPTR_NODE_NUM<sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>STB__NPTR_NODE_LOG2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4775"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__NPTR_NODE_MASK<sp/><sp/><sp/>(STB__NPTR_NODE_NUM-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4776"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__NPTR_NODE_SHIFT<sp/><sp/>(STB__NPTR_ROOT_SHIFT<sp/>-<sp/>STB__NPTR_NODE_LOG2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4777"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__NPTR_NODE_OFFSET(x)<sp/><sp/><sp/>(((x)<sp/>&gt;&gt;<sp/>STB__NPTR_NODE_SHIFT)<sp/>&amp;<sp/>STB__NPTR_NODE_MASK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4778"><highlight class="normal"></highlight></codeline>
<codeline lineno="4779"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stb__st_nptr</highlight></codeline>
<codeline lineno="4780"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4781"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>address<sp/>of<sp/>actual<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4782"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stb__st_nptr<sp/>*next;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>next<sp/>pointer<sp/>with<sp/>same<sp/>target</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4783"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stb__st_nptr<sp/>**prev;<sp/><sp/></highlight><highlight class="comment">//<sp/>prev<sp/>pointer<sp/>with<sp/>same<sp/>target,<sp/>address<sp/>of<sp/>&apos;next&apos;<sp/>field<sp/>(or<sp/>first)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4784"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stb__st_nptr<sp/>*next_in_block;</highlight></codeline>
<codeline lineno="4785"><highlight class="normal">}<sp/>stb__nptr;</highlight></codeline>
<codeline lineno="4786"><highlight class="normal"></highlight></codeline>
<codeline lineno="4787"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stb__st_nptr_target</highlight></codeline>
<codeline lineno="4788"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4789"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>address<sp/>of<sp/>target</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4790"><highlight class="normal"><sp/><sp/><sp/>stb__nptr<sp/>*first;<sp/></highlight><highlight class="comment">//<sp/>address<sp/>of<sp/>first<sp/>nptr<sp/>pointing<sp/>to<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4791"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stb__st_nptr_target<sp/>*next_in_block;</highlight></codeline>
<codeline lineno="4792"><highlight class="normal">}<sp/>stb__nptr_target;</highlight></codeline>
<codeline lineno="4793"><highlight class="normal"></highlight></codeline>
<codeline lineno="4794"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4795"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4796"><highlight class="normal"><sp/><sp/><sp/>stb__nptr<sp/>*pointers;</highlight></codeline>
<codeline lineno="4797"><highlight class="normal"><sp/><sp/><sp/>stb__nptr_target<sp/>*targets;</highlight></codeline>
<codeline lineno="4798"><highlight class="normal">}<sp/>stb__memory_leaf;</highlight></codeline>
<codeline lineno="4799"><highlight class="normal"></highlight></codeline>
<codeline lineno="4800"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4801"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4802"><highlight class="normal"><sp/><sp/><sp/>stb__memory_leaf<sp/>*children[STB__NPTR_NODE_NUM];</highlight></codeline>
<codeline lineno="4803"><highlight class="normal">}<sp/>stb__memory_node;</highlight></codeline>
<codeline lineno="4804"><highlight class="normal"></highlight></codeline>
<codeline lineno="4805"><highlight class="normal">stb__memory_node<sp/>*stb__memtab_root[STB__NPTR_ROOT_NUM];</highlight></codeline>
<codeline lineno="4806"><highlight class="normal"></highlight></codeline>
<codeline lineno="4807"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb__memory_leaf<sp/>*stb__nptr_find_leaf(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*mem)</highlight></codeline>
<codeline lineno="4808"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4809"><highlight class="normal"><sp/><sp/><sp/>stb_uint32<sp/>address<sp/>=<sp/>(stb_uint32)<sp/>mem;</highlight></codeline>
<codeline lineno="4810"><highlight class="normal"><sp/><sp/><sp/>stb__memory_node<sp/>*z<sp/>=<sp/>stb__memtab_root[address<sp/>&gt;&gt;<sp/>STB__NPTR_ROOT_SHIFT];</highlight></codeline>
<codeline lineno="4811"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z)</highlight></codeline>
<codeline lineno="4812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z-&gt;children[STB__NPTR_NODE_OFFSET(address)];</highlight></codeline>
<codeline lineno="4813"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4815"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4816"><highlight class="normal"></highlight></codeline>
<codeline lineno="4817"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>stb__nptr_alloc(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="4818"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4819"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb__realloc_raw(0,size);</highlight></codeline>
<codeline lineno="4820"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4821"><highlight class="normal"></highlight></codeline>
<codeline lineno="4822"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__nptr_free(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="4823"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4824"><highlight class="normal"><sp/><sp/><sp/>stb__realloc_raw(p,0);</highlight></codeline>
<codeline lineno="4825"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4826"><highlight class="normal"></highlight></codeline>
<codeline lineno="4827"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb__memory_leaf<sp/>*stb__nptr_make_leaf(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*mem)</highlight></codeline>
<codeline lineno="4828"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4829"><highlight class="normal"><sp/><sp/><sp/>stb_uint32<sp/>address<sp/>=<sp/>(stb_uint32)<sp/>mem;</highlight></codeline>
<codeline lineno="4830"><highlight class="normal"><sp/><sp/><sp/>stb__memory_node<sp/>*z<sp/>=<sp/>stb__memtab_root[address<sp/>&gt;&gt;<sp/>STB__NPTR_ROOT_SHIFT];</highlight></codeline>
<codeline lineno="4831"><highlight class="normal"><sp/><sp/><sp/>stb__memory_leaf<sp/>*f;</highlight></codeline>
<codeline lineno="4832"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!z)<sp/>{</highlight></codeline>
<codeline lineno="4833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>(stb__memory_node<sp/>*)<sp/>stb__nptr_alloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*stb__memtab_root[0]));</highlight></codeline>
<codeline lineno="4835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__memtab_root[address<sp/>&gt;&gt;<sp/>STB__NPTR_ROOT_SHIFT]<sp/>=<sp/>z;</highlight></codeline>
<codeline lineno="4836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>256;<sp/>++i)</highlight></codeline>
<codeline lineno="4837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;children[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4838"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4839"><highlight class="normal"><sp/><sp/><sp/>f<sp/>=<sp/>(stb__memory_leaf<sp/>*)<sp/>stb__nptr_alloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*f));</highlight></codeline>
<codeline lineno="4840"><highlight class="normal"><sp/><sp/><sp/>z-&gt;children[STB__NPTR_NODE_OFFSET(address)]<sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="4841"><highlight class="normal"><sp/><sp/><sp/>f-&gt;pointers<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4842"><highlight class="normal"><sp/><sp/><sp/>f-&gt;targets<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4843"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="4844"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4845"><highlight class="normal"></highlight></codeline>
<codeline lineno="4846"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb__nptr_target<sp/>*stb__nptr_find_target(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*target,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>force)</highlight></codeline>
<codeline lineno="4847"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4848"><highlight class="normal"><sp/><sp/><sp/>stb__memory_leaf<sp/>*p<sp/>=<sp/>stb__nptr_find_leaf(target);</highlight></codeline>
<codeline lineno="4849"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p)<sp/>{</highlight></codeline>
<codeline lineno="4850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__nptr_target<sp/>*t<sp/>=<sp/>p-&gt;targets;</highlight></codeline>
<codeline lineno="4851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(t)<sp/>{</highlight></codeline>
<codeline lineno="4852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t-&gt;ptr<sp/>==<sp/>target)</highlight></codeline>
<codeline lineno="4853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="4854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>t-&gt;next_in_block;</highlight></codeline>
<codeline lineno="4855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4856"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4857"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(force)<sp/>{</highlight></codeline>
<codeline lineno="4858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__nptr_target<sp/>*t<sp/>=<sp/>(stb__nptr_target*)<sp/>stb__nptr_alloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*t));</highlight></codeline>
<codeline lineno="4859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p)<sp/>p<sp/>=<sp/>stb__nptr_make_leaf(target);</highlight></codeline>
<codeline lineno="4860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t-&gt;ptr<sp/>=<sp/>target;</highlight></codeline>
<codeline lineno="4861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t-&gt;first<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t-&gt;next_in_block<sp/>=<sp/>p-&gt;targets;</highlight></codeline>
<codeline lineno="4863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;targets<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="4864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="4865"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4867"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4868"><highlight class="normal"></highlight></codeline>
<codeline lineno="4869"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb__nptr<sp/>*stb__nptr_find_pointer(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>force)</highlight></codeline>
<codeline lineno="4870"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4871"><highlight class="normal"><sp/><sp/><sp/>stb__memory_leaf<sp/>*p<sp/>=<sp/>stb__nptr_find_leaf(ptr);</highlight></codeline>
<codeline lineno="4872"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p)<sp/>{</highlight></codeline>
<codeline lineno="4873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__nptr<sp/>*t<sp/>=<sp/>p-&gt;pointers;</highlight></codeline>
<codeline lineno="4874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(t)<sp/>{</highlight></codeline>
<codeline lineno="4875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t-&gt;ptr<sp/>==<sp/>ptr)</highlight></codeline>
<codeline lineno="4876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="4877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>t-&gt;next_in_block;</highlight></codeline>
<codeline lineno="4878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4879"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4880"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(force)<sp/>{</highlight></codeline>
<codeline lineno="4881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__nptr<sp/>*t<sp/>=<sp/>(stb__nptr<sp/>*)<sp/>stb__nptr_alloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*t));</highlight></codeline>
<codeline lineno="4882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p)<sp/>p<sp/>=<sp/>stb__nptr_make_leaf(ptr);</highlight></codeline>
<codeline lineno="4883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t-&gt;ptr<sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="4884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t-&gt;next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t-&gt;prev<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t-&gt;next_in_block<sp/>=<sp/>p-&gt;pointers;</highlight></codeline>
<codeline lineno="4887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;pointers<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="4888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="4889"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4891"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4892"><highlight class="normal"></highlight></codeline>
<codeline lineno="4893"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_nptr_set(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*address_of_pointer,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*value_to_write)</highlight></codeline>
<codeline lineno="4894"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4895"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)address_of_pointer<sp/>!=<sp/>value_to_write)<sp/>{</highlight></codeline>
<codeline lineno="4896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>address_of_pointer<sp/>=<sp/>value_to_write;</highlight></codeline>
<codeline lineno="4897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_nptr_didset(address_of_pointer);</highlight></codeline>
<codeline lineno="4898"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4899"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4900"><highlight class="normal"></highlight></codeline>
<codeline lineno="4901"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_nptr_didset(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*address_of_pointer)</highlight></codeline>
<codeline lineno="4902"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4903"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>unlink<sp/>from<sp/>old<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4904"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*new_address;</highlight></codeline>
<codeline lineno="4905"><highlight class="normal"><sp/><sp/><sp/>stb__nptr<sp/>*p<sp/>=<sp/>stb__nptr_find_pointer(address_of_pointer,<sp/>1);<sp/></highlight><highlight class="comment">//<sp/>force<sp/>building<sp/>if<sp/>doesn&apos;t<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4906"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;prev)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>if<sp/>p-&gt;prev<sp/>is<sp/>NULL,<sp/>we<sp/>just<sp/>built<sp/>it,<sp/>or<sp/>it<sp/>was<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*(p-&gt;prev)<sp/>=<sp/>p-&gt;next;</highlight></codeline>
<codeline lineno="4908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(p-&gt;next)<sp/>p-&gt;next-&gt;prev<sp/>=<sp/>p-&gt;prev;</highlight></codeline>
<codeline lineno="4909"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4910"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>add<sp/>to<sp/>new<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4911"><highlight class="normal"><sp/><sp/><sp/>new_address<sp/>=<sp/>*(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)address_of_pointer;</highlight></codeline>
<codeline lineno="4912"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_address<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__nptr_target<sp/>*t<sp/>=<sp/>stb__nptr_find_target(new_address,<sp/>1);</highlight></codeline>
<codeline lineno="4914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;next<sp/>=<sp/>t-&gt;first;</highlight></codeline>
<codeline lineno="4915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;next)<sp/>p-&gt;next-&gt;prev<sp/>=<sp/>&amp;p-&gt;next;</highlight></codeline>
<codeline lineno="4916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;prev<sp/>=<sp/>&amp;t-&gt;first;</highlight></codeline>
<codeline lineno="4917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t-&gt;first<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="4918"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;prev<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4921"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4922"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4923"><highlight class="normal"></highlight></codeline>
<codeline lineno="4924"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__nptr_block(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*address,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*</highlight><highlight class="keyword">function</highlight><highlight class="normal">)(stb__memory_leaf<sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>datum,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*start,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*end),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>datum)</highlight></codeline>
<codeline lineno="4925"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4926"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*end_address<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>address<sp/>+<sp/>len<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="4927"><highlight class="normal"><sp/><sp/><sp/>stb__memory_node<sp/>*n;</highlight></codeline>
<codeline lineno="4928"><highlight class="normal"><sp/><sp/><sp/>stb_uint32<sp/>start<sp/>=<sp/>(stb_uint32)<sp/>address;</highlight></codeline>
<codeline lineno="4929"><highlight class="normal"><sp/><sp/><sp/>stb_uint32<sp/>end<sp/><sp/><sp/>=<sp/>start<sp/>+<sp/>len<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="4930"><highlight class="normal"></highlight></codeline>
<codeline lineno="4931"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b0<sp/>=<sp/>start<sp/>&gt;&gt;<sp/>STB__NPTR_ROOT_SHIFT;</highlight></codeline>
<codeline lineno="4932"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b1<sp/>=<sp/>end<sp/>&gt;&gt;<sp/>STB__NPTR_ROOT_SHIFT;</highlight></codeline>
<codeline lineno="4933"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b=b0,i,e0,e1;</highlight></codeline>
<codeline lineno="4934"><highlight class="normal"></highlight></codeline>
<codeline lineno="4935"><highlight class="normal"><sp/><sp/><sp/>e0<sp/>=<sp/>STB__NPTR_NODE_OFFSET(start);</highlight></codeline>
<codeline lineno="4936"><highlight class="normal"></highlight></codeline>
<codeline lineno="4937"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(datum<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>stb__memtab_root[b0];</highlight></codeline>
<codeline lineno="4940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n)<sp/>{</highlight></codeline>
<codeline lineno="4941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b0<sp/>!=<sp/>b1)</highlight></codeline>
<codeline lineno="4942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e1<sp/>=<sp/>STB__NPTR_NODE_NUM-1;</highlight></codeline>
<codeline lineno="4943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e1<sp/>=<sp/>STB__NPTR_NODE_OFFSET(end);</highlight></codeline>
<codeline lineno="4945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=e0;<sp/>i<sp/>&lt;=<sp/>e1;<sp/>++i)</highlight></codeline>
<codeline lineno="4946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n-&gt;children[i])</highlight></codeline>
<codeline lineno="4947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(n-&gt;children[i],<sp/>datum,<sp/>address,<sp/>end_address);</highlight></codeline>
<codeline lineno="4948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b1<sp/>&gt;<sp/>b0)<sp/>{</highlight></codeline>
<codeline lineno="4950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>blocks<sp/>other<sp/>than<sp/>the<sp/>first<sp/>and<sp/>last<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(b=b0+1;<sp/>b<sp/>&lt;<sp/>b1;<sp/>++b)<sp/>{</highlight></codeline>
<codeline lineno="4952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>stb__memtab_root[b];</highlight></codeline>
<codeline lineno="4953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n)</highlight></codeline>
<codeline lineno="4954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;=<sp/>STB__NPTR_NODE_NUM-1;<sp/>++i)</highlight></codeline>
<codeline lineno="4955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n-&gt;children[i])</highlight></codeline>
<codeline lineno="4956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(n-&gt;children[i],<sp/>datum,<sp/>address,<sp/>end_address);</highlight></codeline>
<codeline lineno="4957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>last<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>stb__memtab_root[b1];</highlight></codeline>
<codeline lineno="4960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n)<sp/>{</highlight></codeline>
<codeline lineno="4961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e1<sp/>=<sp/>STB__NPTR_NODE_OFFSET(end);</highlight></codeline>
<codeline lineno="4962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;=<sp/>e1;<sp/>++i)</highlight></codeline>
<codeline lineno="4963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n-&gt;children[i])</highlight></codeline>
<codeline lineno="4964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(n-&gt;children[i],<sp/>datum,<sp/>address,<sp/>end_address);</highlight></codeline>
<codeline lineno="4965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4967"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b1<sp/>&gt;<sp/>b0)<sp/>{</highlight></codeline>
<codeline lineno="4969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>last<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>stb__memtab_root[b1];</highlight></codeline>
<codeline lineno="4971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n)<sp/>{</highlight></codeline>
<codeline lineno="4972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e1<sp/>=<sp/>STB__NPTR_NODE_OFFSET(end);</highlight></codeline>
<codeline lineno="4973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=e1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)</highlight></codeline>
<codeline lineno="4974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n-&gt;children[i])</highlight></codeline>
<codeline lineno="4975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(n-&gt;children[i],<sp/>datum,<sp/>address,<sp/>end_address);</highlight></codeline>
<codeline lineno="4976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>blocks<sp/>other<sp/>than<sp/>the<sp/>first<sp/>and<sp/>last<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(b=b1-1;<sp/>b<sp/>&gt;<sp/>b0;<sp/>--b)<sp/>{</highlight></codeline>
<codeline lineno="4979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>stb__memtab_root[b];</highlight></codeline>
<codeline lineno="4980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n)</highlight></codeline>
<codeline lineno="4981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=STB__NPTR_NODE_NUM-1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)</highlight></codeline>
<codeline lineno="4982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n-&gt;children[i])</highlight></codeline>
<codeline lineno="4983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(n-&gt;children[i],<sp/>datum,<sp/>address,<sp/>end_address);</highlight></codeline>
<codeline lineno="4984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>stb__memtab_root[b0];</highlight></codeline>
<codeline lineno="4988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n)<sp/>{</highlight></codeline>
<codeline lineno="4989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b0<sp/>!=<sp/>b1)</highlight></codeline>
<codeline lineno="4990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e1<sp/>=<sp/>STB__NPTR_NODE_NUM-1;</highlight></codeline>
<codeline lineno="4991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e1<sp/>=<sp/>STB__NPTR_NODE_OFFSET(end);</highlight></codeline>
<codeline lineno="4993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=e1;<sp/>i<sp/>&gt;=<sp/>e0;<sp/>--i)</highlight></codeline>
<codeline lineno="4994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n-&gt;children[i])</highlight></codeline>
<codeline lineno="4995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(n-&gt;children[i],<sp/>datum,<sp/>address,<sp/>end_address);</highlight></codeline>
<codeline lineno="4996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4997"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4998"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4999"><highlight class="normal"></highlight></codeline>
<codeline lineno="5000"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__nptr_delete_pointers(stb__memory_leaf<sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*start,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*end)</highlight></codeline>
<codeline lineno="5001"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5002"><highlight class="normal"><sp/><sp/><sp/>stb__nptr<sp/>**p<sp/>=<sp/>&amp;f-&gt;pointers;</highlight></codeline>
<codeline lineno="5003"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*p)<sp/>{</highlight></codeline>
<codeline lineno="5004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__nptr<sp/>*n<sp/>=<sp/>*p;</highlight></codeline>
<codeline lineno="5005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n-&gt;ptr<sp/>&gt;=<sp/>start<sp/>&amp;&amp;<sp/>n-&gt;ptr<sp/>&lt;=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="5006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unlink</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n-&gt;prev)<sp/>{</highlight></codeline>
<codeline lineno="5008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(n-&gt;prev)<sp/>=<sp/>n-&gt;next;</highlight></codeline>
<codeline lineno="5009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(n-&gt;next)<sp/>n-&gt;next-&gt;prev<sp/>=<sp/>n-&gt;prev;</highlight></codeline>
<codeline lineno="5010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p<sp/>=<sp/>n-&gt;next_in_block;</highlight></codeline>
<codeline lineno="5012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__nptr_free(n);</highlight></codeline>
<codeline lineno="5013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>&amp;(n-&gt;next_in_block);</highlight></codeline>
<codeline lineno="5015"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5016"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5017"><highlight class="normal"></highlight></codeline>
<codeline lineno="5018"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__nptr_delete_targets(stb__memory_leaf<sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*start,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*end)</highlight></codeline>
<codeline lineno="5019"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5020"><highlight class="normal"><sp/><sp/><sp/>stb__nptr_target<sp/>**p<sp/>=<sp/>&amp;f-&gt;targets;</highlight></codeline>
<codeline lineno="5021"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*p)<sp/>{</highlight></codeline>
<codeline lineno="5022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__nptr_target<sp/>*n<sp/>=<sp/>*p;</highlight></codeline>
<codeline lineno="5023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n-&gt;ptr<sp/>&gt;=<sp/>start<sp/>&amp;&amp;<sp/>n-&gt;ptr<sp/>&lt;=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="5024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>null<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__nptr<sp/>*z<sp/>=<sp/>n-&gt;first;</highlight></codeline>
<codeline lineno="5026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(z)<sp/>{</highlight></codeline>
<codeline lineno="5027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__nptr<sp/>*y<sp/>=<sp/>z-&gt;next;</highlight></codeline>
<codeline lineno="5028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;prev<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>z-&gt;ptr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="5032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unlink<sp/>this<sp/>target</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p<sp/>=<sp/>n-&gt;next_in_block;</highlight></codeline>
<codeline lineno="5035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__nptr_free(n);</highlight></codeline>
<codeline lineno="5036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>&amp;(n-&gt;next_in_block);</highlight></codeline>
<codeline lineno="5038"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5039"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5040"><highlight class="normal"></highlight></codeline>
<codeline lineno="5041"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_nptr_didfree(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*address_being_freed,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="5042"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5043"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>step<sp/>one:<sp/>delete<sp/>all<sp/>pointers<sp/>in<sp/>this<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5044"><highlight class="normal"><sp/><sp/><sp/>stb__nptr_block(address_being_freed,<sp/>len,<sp/>stb__nptr_delete_pointers,<sp/>0);</highlight></codeline>
<codeline lineno="5045"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>step<sp/>two:<sp/>NULL<sp/>all<sp/>pointers<sp/>to<sp/>this<sp/>block;<sp/>do<sp/>this<sp/>second<sp/>to<sp/>avoid<sp/>NULLing<sp/>deleted<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5046"><highlight class="normal"><sp/><sp/><sp/>stb__nptr_block(address_being_freed,<sp/>len,<sp/>stb__nptr_delete_targets,<sp/>0);</highlight></codeline>
<codeline lineno="5047"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5048"><highlight class="normal"></highlight></codeline>
<codeline lineno="5049"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_nptr_free(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*address_being_freed,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="5050"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5051"><highlight class="normal"><sp/><sp/><sp/>free(address_being_freed);</highlight></codeline>
<codeline lineno="5052"><highlight class="normal"><sp/><sp/><sp/>stb_nptr_didfree(address_being_freed,<sp/>len);</highlight></codeline>
<codeline lineno="5053"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5054"><highlight class="normal"></highlight></codeline>
<codeline lineno="5055"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__nptr_move_targets(stb__memory_leaf<sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*start,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*end)</highlight></codeline>
<codeline lineno="5056"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5057"><highlight class="normal"><sp/><sp/><sp/>stb__nptr_target<sp/>**t<sp/>=<sp/>&amp;f-&gt;targets;</highlight></codeline>
<codeline lineno="5058"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*t)<sp/>{</highlight></codeline>
<codeline lineno="5059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__nptr_target<sp/>*n<sp/>=<sp/>*t;</highlight></codeline>
<codeline lineno="5060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n-&gt;ptr<sp/>&gt;=<sp/>start<sp/>&amp;&amp;<sp/>n-&gt;ptr<sp/>&lt;=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="5061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__nptr<sp/>*z;</highlight></codeline>
<codeline lineno="5062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__memory_leaf<sp/>*f;</highlight></codeline>
<codeline lineno="5063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unlink<sp/>n</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*t<sp/>=<sp/>n-&gt;next_in_block;</highlight></codeline>
<codeline lineno="5065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>n<sp/>to<sp/>new<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>n-&gt;ptr<sp/>+<sp/>offset);</highlight></codeline>
<codeline lineno="5067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>stb__nptr_find_leaf(n-&gt;ptr);</highlight></codeline>
<codeline lineno="5068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f)<sp/>f<sp/>=<sp/>stb__nptr_make_leaf(n-&gt;ptr);</highlight></codeline>
<codeline lineno="5069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;next_in_block<sp/>=<sp/>f-&gt;targets;</highlight></codeline>
<codeline lineno="5070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;targets<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="5071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>go<sp/>through<sp/>all<sp/>pointers<sp/>and<sp/>make<sp/>them<sp/>point<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>n-&gt;first;</highlight></codeline>
<codeline lineno="5073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(z)<sp/>{</highlight></codeline>
<codeline lineno="5074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)<sp/>z-&gt;ptr<sp/>=<sp/>n-&gt;ptr;</highlight></codeline>
<codeline lineno="5075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>z-&gt;next;</highlight></codeline>
<codeline lineno="5076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>&amp;(n-&gt;next_in_block);</highlight></codeline>
<codeline lineno="5079"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5080"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5081"><highlight class="normal"></highlight></codeline>
<codeline lineno="5082"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__nptr_move_pointers(stb__memory_leaf<sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*start,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*end)</highlight></codeline>
<codeline lineno="5083"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5084"><highlight class="normal"><sp/><sp/><sp/>stb__nptr<sp/>**p<sp/>=<sp/>&amp;f-&gt;pointers;</highlight></codeline>
<codeline lineno="5085"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*p)<sp/>{</highlight></codeline>
<codeline lineno="5086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__nptr<sp/>*n<sp/>=<sp/>*p;</highlight></codeline>
<codeline lineno="5087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n-&gt;ptr<sp/>&gt;=<sp/>start<sp/>&amp;&amp;<sp/>n-&gt;ptr<sp/>&lt;=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="5088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unlink</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p<sp/>=<sp/>n-&gt;next_in_block;</highlight></codeline>
<codeline lineno="5090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>n-&gt;ptr<sp/>+<sp/>offset);</highlight></codeline>
<codeline lineno="5091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>move<sp/>to<sp/>new<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>stb__nptr_find_leaf(n-&gt;ptr);</highlight></codeline>
<codeline lineno="5093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f)<sp/>f<sp/>=<sp/>stb__nptr_make_leaf(n-&gt;ptr);</highlight></codeline>
<codeline lineno="5094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;next_in_block<sp/>=<sp/>f-&gt;pointers;</highlight></codeline>
<codeline lineno="5095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;pointers<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="5096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>&amp;(n-&gt;next_in_block);</highlight></codeline>
<codeline lineno="5098"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5099"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5100"><highlight class="normal"></highlight></codeline>
<codeline lineno="5101"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_nptr_realloc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*new_address,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*old_address,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="5102"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5103"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_address<sp/>==<sp/>old_address)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5104"><highlight class="normal"></highlight></codeline>
<codeline lineno="5105"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>to<sp/>move<sp/>the<sp/>pointers<sp/>first,<sp/>because<sp/>moving<sp/>the<sp/>targets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5106"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>requires<sp/>writing<sp/>to<sp/>the<sp/>pointers-to-the-targets,<sp/>and<sp/>if<sp/>some<sp/>of<sp/>those<sp/>moved<sp/>too,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5107"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>we<sp/>need<sp/>to<sp/>make<sp/>sure<sp/>we<sp/>don&apos;t<sp/>write<sp/>to<sp/>the<sp/>old<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5108"><highlight class="normal"></highlight></codeline>
<codeline lineno="5109"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>step<sp/>one:<sp/>move<sp/>all<sp/>pointers<sp/>within<sp/>the<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5110"><highlight class="normal"><sp/><sp/><sp/>stb__nptr_block(old_address,<sp/>len,<sp/>stb__nptr_move_pointers,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>new_address<sp/>-<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>old_address);</highlight></codeline>
<codeline lineno="5111"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>step<sp/>two:<sp/>move<sp/>all<sp/>targets<sp/>within<sp/>the<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5112"><highlight class="normal"><sp/><sp/><sp/>stb__nptr_block(old_address,<sp/>len,<sp/>stb__nptr_move_targets,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>new_address<sp/>-<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>old_address);</highlight></codeline>
<codeline lineno="5113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5114"><highlight class="normal"></highlight></codeline>
<codeline lineno="5115"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_nptr_move(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*new_address,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*old_address)</highlight></codeline>
<codeline lineno="5116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5117"><highlight class="normal"><sp/><sp/><sp/>stb_nptr_realloc(new_address,<sp/>old_address,<sp/>1);</highlight></codeline>
<codeline lineno="5118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5119"><highlight class="normal"></highlight></codeline>
<codeline lineno="5120"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_nptr_recache(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5121"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5122"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j;</highlight></codeline>
<codeline lineno="5123"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>STB__NPTR_ROOT_NUM;<sp/>++i)</highlight></codeline>
<codeline lineno="5124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__memtab_root[i])</highlight></codeline>
<codeline lineno="5125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>STB__NPTR_NODE_NUM;<sp/>++j)</highlight></codeline>
<codeline lineno="5126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__memtab_root[i]-&gt;children[j])<sp/>{</highlight></codeline>
<codeline lineno="5127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__nptr<sp/>*p<sp/>=<sp/>stb__memtab_root[i]-&gt;children[j]-&gt;pointers;</highlight></codeline>
<codeline lineno="5128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p)<sp/>{</highlight></codeline>
<codeline lineno="5129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_nptr_didset(p-&gt;ptr);</highlight></codeline>
<codeline lineno="5130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>p-&gt;next_in_block;</highlight></codeline>
<codeline lineno="5131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5134"><highlight class="normal"></highlight></codeline>
<codeline lineno="5135"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5136"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>STB_NPTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5137"><highlight class="normal"></highlight></codeline>
<codeline lineno="5138"><highlight class="normal"></highlight></codeline>
<codeline lineno="5140"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5141"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>File<sp/>Processing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5142"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5143"><highlight class="normal"></highlight></codeline>
<codeline lineno="5144"><highlight class="normal"></highlight></codeline>
<codeline lineno="5145"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5146"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>stb_rename(x,y)<sp/><sp/><sp/>_wrename((const<sp/>wchar_t<sp/>*)stb__from_utf8(x),<sp/>(const<sp/>wchar_t<sp/>*)stb__from_utf8_alt(y))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5147"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5148"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>stb_rename<sp/><sp/><sp/>rename</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5149"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5150"><highlight class="normal"></highlight></codeline>
<codeline lineno="5151"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>stb_fput_varlen64(FILE<sp/>*f,<sp/>stb_uint64<sp/>v);</highlight></codeline>
<codeline lineno="5152"><highlight class="normal">STB_EXTERN<sp/>stb_uint64<sp/><sp/>stb_fget_varlen64(FILE<sp/>*f);</highlight></codeline>
<codeline lineno="5153"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_size_varlen64(stb_uint64<sp/>v);</highlight></codeline>
<codeline lineno="5154"><highlight class="normal"></highlight></codeline>
<codeline lineno="5155"><highlight class="normal"></highlight></codeline>
<codeline lineno="5156"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_filec<sp/><sp/><sp/><sp/>(char<sp/>*)<sp/>stb_file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5157"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_fileu<sp/><sp/><sp/><sp/>(unsigned<sp/>char<sp/>*)<sp/>stb_file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5158"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><sp/>stb_file(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*length);</highlight></codeline>
<codeline lineno="5159"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><sp/>stb_file_max(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*length);</highlight></codeline>
<codeline lineno="5160"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/>stb_filelen(FILE<sp/>*f);</highlight></codeline>
<codeline lineno="5161"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>stb_filewrite(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="5162"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>stb_filewritestr(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="5163"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<sp/>stb_stringfile(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*len);</highlight></codeline>
<codeline lineno="5164"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<sp/>stb_stringfile_trimmed(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*len,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>comm);</highlight></codeline>
<codeline lineno="5165"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><sp/>stb_fgets(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buflen,<sp/>FILE<sp/>*f);</highlight></codeline>
<codeline lineno="5166"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><sp/>stb_fgets_malloc(FILE<sp/>*f);</highlight></codeline>
<codeline lineno="5167"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>stb_fexists(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename);</highlight></codeline>
<codeline lineno="5168"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>stb_fcmp(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s1,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s2);</highlight></codeline>
<codeline lineno="5169"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>stb_feq(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s1,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s2);</highlight></codeline>
<codeline lineno="5170"><highlight class="normal">STB_EXTERN<sp/>time_t<sp/><sp/>stb_ftimestamp(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename);</highlight></codeline>
<codeline lineno="5171"><highlight class="normal"></highlight></codeline>
<codeline lineno="5172"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>stb_fullpath(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="group__core__func__common_1ga693d77696ff36572a0da79efec965acd" kindref="member">abs</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>abs_size,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*rel);</highlight></codeline>
<codeline lineno="5173"><highlight class="normal">STB_EXTERN<sp/>FILE<sp/>*<sp/><sp/>stb_fopen(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mode);</highlight></codeline>
<codeline lineno="5174"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>stb_fclose(FILE<sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keep);</highlight></codeline>
<codeline lineno="5175"><highlight class="normal"></highlight></codeline>
<codeline lineno="5176"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5177"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5178"><highlight class="normal"><sp/><sp/><sp/>stb_keep_no<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="5179"><highlight class="normal"><sp/><sp/><sp/>stb_keep_yes<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="5180"><highlight class="normal"><sp/><sp/><sp/>stb_keep_if_different<sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="5181"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5182"><highlight class="normal"></highlight></codeline>
<codeline lineno="5183"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>stb_copyfile(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dest);</highlight></codeline>
<codeline lineno="5184"><highlight class="normal"></highlight></codeline>
<codeline lineno="5185"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>stb_fput_varlen64(FILE<sp/>*f,<sp/>stb_uint64<sp/>v);</highlight></codeline>
<codeline lineno="5186"><highlight class="normal">STB_EXTERN<sp/>stb_uint64<sp/><sp/>stb_fget_varlen64(FILE<sp/>*f);</highlight></codeline>
<codeline lineno="5187"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_size_varlen64(stb_uint64<sp/>v);</highlight></codeline>
<codeline lineno="5188"><highlight class="normal"></highlight></codeline>
<codeline lineno="5189"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>stb_fwrite32(FILE<sp/>*f,<sp/>stb_uint32<sp/>datum);</highlight></codeline>
<codeline lineno="5190"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>stb_fput_varlen<sp/>(FILE<sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v);</highlight></codeline>
<codeline lineno="5191"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>stb_fput_varlenu(FILE<sp/>*f,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v);</highlight></codeline>
<codeline lineno="5192"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>stb_fget_varlen<sp/>(FILE<sp/>*f);</highlight></codeline>
<codeline lineno="5193"><highlight class="normal">STB_EXTERN<sp/>stb_uint<sp/>stb_fget_varlenu(FILE<sp/>*f);</highlight></codeline>
<codeline lineno="5194"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>stb_fput_ranged<sp/>(FILE<sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/>stb_uint<sp/>n);</highlight></codeline>
<codeline lineno="5195"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>stb_fget_ranged<sp/>(FILE<sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/>stb_uint<sp/>n);</highlight></codeline>
<codeline lineno="5196"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>stb_size_varlen<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v);</highlight></codeline>
<codeline lineno="5197"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>stb_size_varlenu(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v);</highlight></codeline>
<codeline lineno="5198"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>stb_size_ranged<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/>stb_uint<sp/>n);</highlight></codeline>
<codeline lineno="5199"><highlight class="normal"></highlight></codeline>
<codeline lineno="5200"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>stb_fread(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*f);</highlight></codeline>
<codeline lineno="5201"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>stb_fwrite(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*f);</highlight></codeline>
<codeline lineno="5202"><highlight class="normal"></highlight></codeline>
<codeline lineno="5203"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5204"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5205"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5206"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/><sp/>*base_file;</highlight></codeline>
<codeline lineno="5207"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>;</highlight></codeline>
<codeline lineno="5208"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>buffer_size;</highlight></codeline>
<codeline lineno="5209"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>buffer_off;</highlight></codeline>
<codeline lineno="5210"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>buffer_left;</highlight></codeline>
<codeline lineno="5211"><highlight class="normal">}<sp/>STBF;</highlight></codeline>
<codeline lineno="5212"><highlight class="normal"></highlight></codeline>
<codeline lineno="5213"><highlight class="normal">STB_EXTERN<sp/>STBF<sp/>*stb_tfopen(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mode);</highlight></codeline>
<codeline lineno="5214"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_tfread(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,<sp/>STBF<sp/>*f);</highlight></codeline>
<codeline lineno="5215"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_tfwrite(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,<sp/>STBF<sp/>*f);</highlight></codeline>
<codeline lineno="5216"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5217"><highlight class="normal"></highlight></codeline>
<codeline lineno="5218"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5219"><highlight class="normal"></highlight></codeline>
<codeline lineno="5220"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5221"><highlight class="normal">STBF<sp/>*stb_tfopen(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mode)</highlight></codeline>
<codeline lineno="5222"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5223"><highlight class="normal"><sp/><sp/><sp/>STBF<sp/>*z;</highlight></codeline>
<codeline lineno="5224"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*f<sp/>=<sp/>stb_p_fopen(filename,<sp/>mode);</highlight></codeline>
<codeline lineno="5225"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5226"><highlight class="normal"><sp/><sp/><sp/>z<sp/>=<sp/>(STBF<sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*z));</highlight></codeline>
<codeline lineno="5227"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!z)<sp/>{<sp/>fclose(f);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/>}</highlight></codeline>
<codeline lineno="5228"><highlight class="normal"><sp/><sp/><sp/>z-&gt;base_file<sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="5229"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(mode,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">)<sp/>||<sp/>!strcmp(mode,<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="5230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;buffer_size<sp/>=<sp/>4096;</highlight></codeline>
<codeline lineno="5231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;buffer_off<sp/>=<sp/>z-&gt;buffer_size;</highlight></codeline>
<codeline lineno="5232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;buffer_left<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;buffer<sp/>=<sp/>malloc(z-&gt;buffer_size);</highlight></codeline>
<codeline lineno="5234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!z-&gt;buffer)<sp/>{<sp/>free(z);<sp/>fclose(f);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/>}</highlight></codeline>
<codeline lineno="5235"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;buffer<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;buffer_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;buffer_left<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5239"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5240"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z;</highlight></codeline>
<codeline lineno="5241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5242"><highlight class="normal"></highlight></codeline>
<codeline lineno="5243"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_tfread(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,<sp/>STBF<sp/>*f)</highlight></codeline>
<codeline lineno="5244"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5245"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total<sp/>=<sp/>len*count,<sp/>done=0;</highlight></codeline>
<codeline lineno="5246"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!total)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5247"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(total<sp/>&lt;=<sp/>z-&gt;buffer_left)<sp/>{</highlight></codeline>
<codeline lineno="5248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(data,<sp/>z-&gt;buffer<sp/>+<sp/>z-&gt;buffer_off,<sp/>total);</highlight></codeline>
<codeline lineno="5249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;buffer_off<sp/>+=<sp/>total;</highlight></codeline>
<codeline lineno="5250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;buffer_left<sp/>-=<sp/>total;</highlight></codeline>
<codeline lineno="5251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="5252"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>data;</highlight></codeline>
<codeline lineno="5254"><highlight class="normal"></highlight></codeline>
<codeline lineno="5255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>consume<sp/>all<sp/>buffered<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(data,<sp/>z-&gt;buffer<sp/>+<sp/>z-&gt;buffer_off,<sp/>z-&gt;buffer_left);</highlight></codeline>
<codeline lineno="5257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>done<sp/>=<sp/>z-&gt;buffer_left;</highlight></codeline>
<codeline lineno="5258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>+=<sp/>z-&gt;buffer_left;</highlight></codeline>
<codeline lineno="5259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;buffer_left=0;</highlight></codeline>
<codeline lineno="5260"><highlight class="normal"></highlight></codeline>
<codeline lineno="5261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(total-done<sp/>&gt;<sp/>(z-&gt;buffer_size<sp/>&gt;&gt;<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="5262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>done<sp/>+=<sp/>fread(out</highlight></codeline>
<codeline lineno="5263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5264"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5266"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5267"><highlight class="normal"></highlight></codeline>
<codeline lineno="5268"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_fwrite32(FILE<sp/>*f,<sp/>stb_uint32<sp/>x)</highlight></codeline>
<codeline lineno="5269"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5270"><highlight class="normal"><sp/><sp/><sp/>fwrite(&amp;x,<sp/>4,<sp/>1,<sp/>f);</highlight></codeline>
<codeline lineno="5271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5272"><highlight class="normal"></highlight></codeline>
<codeline lineno="5273"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5274"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>stb__stat<sp/><sp/><sp/>_stat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5275"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5276"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>stb__stat<sp/><sp/><sp/>stat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5277"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5278"><highlight class="normal"></highlight></codeline>
<codeline lineno="5279"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_fexists(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename)</highlight></codeline>
<codeline lineno="5280"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5281"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stb__stat<sp/>buf;</highlight></codeline>
<codeline lineno="5282"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb__windows(</highlight></codeline>
<codeline lineno="5283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_wstat((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*)stb__from_utf8(filename),<sp/>&amp;buf),</highlight></codeline>
<codeline lineno="5284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stat(filename,&amp;buf)</highlight></codeline>
<codeline lineno="5285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="5286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5287"><highlight class="normal"></highlight></codeline>
<codeline lineno="5288"><highlight class="normal">time_t<sp/>stb_ftimestamp(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename)</highlight></codeline>
<codeline lineno="5289"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5290"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stb__stat<sp/>buf;</highlight></codeline>
<codeline lineno="5291"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__windows(</highlight></codeline>
<codeline lineno="5292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_wstat((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*)stb__from_utf8(filename),<sp/>&amp;buf),</highlight></codeline>
<codeline lineno="5293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stat(filename,&amp;buf)</highlight></codeline>
<codeline lineno="5294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="5295"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf.st_mtime;</highlight></codeline>
<codeline lineno="5297"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5299"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5301"><highlight class="normal"></highlight></codeline>
<codeline lineno="5302"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/>stb_filelen(FILE<sp/>*f)</highlight></codeline>
<codeline lineno="5303"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5304"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>len,<sp/>pos;</highlight></codeline>
<codeline lineno="5305"><highlight class="normal"><sp/><sp/><sp/>pos<sp/>=<sp/>ftell(f);</highlight></codeline>
<codeline lineno="5306"><highlight class="normal"><sp/><sp/><sp/>fseek(f,<sp/>0,<sp/>SEEK_END);</highlight></codeline>
<codeline lineno="5307"><highlight class="normal"><sp/><sp/><sp/>len<sp/>=<sp/>ftell(f);</highlight></codeline>
<codeline lineno="5308"><highlight class="normal"><sp/><sp/><sp/>fseek(f,<sp/>pos,<sp/>SEEK_SET);</highlight></codeline>
<codeline lineno="5309"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>len;</highlight></codeline>
<codeline lineno="5310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5311"><highlight class="normal"></highlight></codeline>
<codeline lineno="5312"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb_file(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*length)</highlight></codeline>
<codeline lineno="5313"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5314"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*f<sp/>=<sp/>stb__fopen(filename,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5315"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>;</highlight></codeline>
<codeline lineno="5316"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/>len2;</highlight></codeline>
<codeline lineno="5317"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5318"><highlight class="normal"><sp/><sp/><sp/>len<sp/>=<sp/>stb_filelen(f);</highlight></codeline>
<codeline lineno="5319"><highlight class="normal"><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(len+2);<sp/></highlight><highlight class="comment">//<sp/>nul<sp/>+<sp/>extra</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5320"><highlight class="normal"><sp/><sp/><sp/>len2<sp/>=<sp/>fread(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>1,<sp/>len,<sp/>f);</highlight></codeline>
<codeline lineno="5321"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len2<sp/>==<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="5322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length)<sp/>*length<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="5323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[len]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5324"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(<ref refid="classbuffer" kindref="compound">buffer</ref>);</highlight></codeline>
<codeline lineno="5326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5327"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5328"><highlight class="normal"><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="5329"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>;</highlight></codeline>
<codeline lineno="5330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5331"><highlight class="normal"></highlight></codeline>
<codeline lineno="5332"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_filewrite(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length)</highlight></codeline>
<codeline lineno="5333"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5334"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*f<sp/>=<sp/>stb_fopen(filename,<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5335"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f)<sp/>{</highlight></codeline>
<codeline lineno="5336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data_ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>data;</highlight></codeline>
<codeline lineno="5337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>remaining<sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="5338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(remaining<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len2<sp/>=<sp/>remaining<sp/>&gt;<sp/>65536<sp/>?<sp/>65536<sp/>:<sp/>remaining;</highlight></codeline>
<codeline lineno="5340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len3<sp/>=<sp/>fwrite(data_ptr,<sp/>1,<sp/>len2,<sp/>f);</highlight></codeline>
<codeline lineno="5341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len2<sp/>!=<sp/>len3)<sp/>{</highlight></codeline>
<codeline lineno="5342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>while<sp/>writing<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>filename);</highlight></codeline>
<codeline lineno="5343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remaining<sp/>-=<sp/>len2;</highlight></codeline>
<codeline lineno="5346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_ptr<sp/>+=<sp/>len2;</highlight></codeline>
<codeline lineno="5347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_fclose(f,<sp/>stb_keep_if_different);</highlight></codeline>
<codeline lineno="5349"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5350"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f<sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="5351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5352"><highlight class="normal"></highlight></codeline>
<codeline lineno="5353"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_filewritestr(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data)</highlight></codeline>
<codeline lineno="5354"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5355"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_filewrite(filename,<sp/>data,<sp/>strlen(data));</highlight></codeline>
<codeline lineno="5356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5357"><highlight class="normal"></highlight></codeline>
<codeline lineno="5358"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><sp/>stb_file_max(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*length)</highlight></codeline>
<codeline lineno="5359"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5360"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*f<sp/>=<sp/>stb__fopen(filename,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5361"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>;</highlight></codeline>
<codeline lineno="5362"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/>maxlen;</highlight></codeline>
<codeline lineno="5363"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5364"><highlight class="normal"><sp/><sp/><sp/>maxlen<sp/>=<sp/>*length;</highlight></codeline>
<codeline lineno="5365"><highlight class="normal"><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(maxlen+1);</highlight></codeline>
<codeline lineno="5366"><highlight class="normal"><sp/><sp/><sp/>len<sp/>=<sp/>fread(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>1,<sp/>maxlen,<sp/>f);</highlight></codeline>
<codeline lineno="5367"><highlight class="normal"><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[len]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5368"><highlight class="normal"><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="5369"><highlight class="normal"><sp/><sp/><sp/>*length<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="5370"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>;</highlight></codeline>
<codeline lineno="5371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5372"><highlight class="normal"></highlight></codeline>
<codeline lineno="5373"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<sp/>stb_stringfile(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*plen)</highlight></codeline>
<codeline lineno="5374"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5375"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*f<sp/>=<sp/>stb__fopen(filename,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5376"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>**list=NULL,<sp/>*s;</highlight></codeline>
<codeline lineno="5377"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/>count,<sp/>i;</highlight></codeline>
<codeline lineno="5378"><highlight class="normal"></highlight></codeline>
<codeline lineno="5379"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5380"><highlight class="normal"><sp/><sp/><sp/>len<sp/>=<sp/>stb_filelen(f);</highlight></codeline>
<codeline lineno="5381"><highlight class="normal"><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(len+1);</highlight></codeline>
<codeline lineno="5382"><highlight class="normal"><sp/><sp/><sp/>len<sp/>=<sp/>fread(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>1,<sp/>len,<sp/>f);</highlight></codeline>
<codeline lineno="5383"><highlight class="normal"><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[len]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5384"><highlight class="normal"><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="5385"><highlight class="normal"></highlight></codeline>
<codeline lineno="5386"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>two<sp/>passes<sp/>through:<sp/>first<sp/>time<sp/>count<sp/>lines,<sp/>second<sp/>time<sp/>set<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5387"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>2;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>;</highlight></codeline>
<codeline lineno="5389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="5390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list[0]<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="5391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*s)<sp/>{</highlight></codeline>
<codeline lineno="5393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>||<sp/>*s<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>detect<sp/>if<sp/>both<sp/>cr<sp/>&amp;<sp/>lf<sp/>are<sp/>together</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>crlf<sp/>=<sp/>(s[0]<sp/>+<sp/>s[1])<sp/>==<sp/>(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>1)<sp/>*s<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(crlf)<sp/>++s;</highlight></codeline>
<codeline lineno="5398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[1])<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>not<sp/>over<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>1)<sp/>list[count]<sp/>=<sp/>s+1;</highlight></codeline>
<codeline lineno="5400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++count;</highlight></codeline>
<codeline lineno="5401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++s;</highlight></codeline>
<codeline lineno="5404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*list)<sp/>*<sp/>(count+1)<sp/>+<sp/>len+1);</highlight></codeline>
<codeline lineno="5407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!list)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list[count]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>recopy<sp/>the<sp/>file<sp/>so<sp/>there&apos;s<sp/>just<sp/>a<sp/>single<sp/>allocation<sp/>to<sp/>free</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;list[count+1],<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>len+1);</highlight></codeline>
<codeline lineno="5411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(<ref refid="classbuffer" kindref="compound">buffer</ref>);</highlight></codeline>
<codeline lineno="5412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>&amp;list[count+1];</highlight></codeline>
<codeline lineno="5413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(plen)<sp/>*plen<sp/>=<sp/>(int)<sp/>count;</highlight></codeline>
<codeline lineno="5414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5415"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5416"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>list;</highlight></codeline>
<codeline lineno="5417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5418"><highlight class="normal"></highlight></codeline>
<codeline lineno="5419"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<sp/>stb_stringfile_trimmed(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*len,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>comment)</highlight></codeline>
<codeline lineno="5420"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5421"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,n,o=0;</highlight></codeline>
<codeline lineno="5422"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**s<sp/>=<sp/>stb_stringfile(name,<sp/>&amp;n);</highlight></codeline>
<codeline lineno="5423"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5424"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>stb_skipwhite(s[i]);</highlight></codeline>
<codeline lineno="5426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*p<sp/>&amp;&amp;<sp/>*p<sp/>!=<sp/>comment)</highlight></codeline>
<codeline lineno="5427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s[o++]<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="5428"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5429"><highlight class="normal"><sp/><sp/><sp/>s[o]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5430"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len)<sp/>*len<sp/>=<sp/>o;</highlight></codeline>
<codeline lineno="5431"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="5432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5433"><highlight class="normal"></highlight></codeline>
<codeline lineno="5434"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>stb_fgets(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buflen,<sp/>FILE<sp/>*f)</highlight></codeline>
<codeline lineno="5435"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5436"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="5437"><highlight class="normal"><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5438"><highlight class="normal"><sp/><sp/><sp/>p<sp/>=<sp/>fgets(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>buflen,<sp/>f);</highlight></codeline>
<codeline lineno="5439"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p)<sp/>{</highlight></codeline>
<codeline lineno="5440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>(int)<sp/>(strlen(p)-1);</highlight></codeline>
<codeline lineno="5441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="5442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p[n]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[n]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5444"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5445"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="5446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5447"><highlight class="normal"></highlight></codeline>
<codeline lineno="5448"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>stb_fgets_malloc(FILE<sp/>*f)</highlight></codeline>
<codeline lineno="5449"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5450"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>avoid<sp/>reallocing<sp/>for<sp/>small<sp/>strings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5451"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>quick_buffer[800];</highlight></codeline>
<codeline lineno="5452"><highlight class="normal"><sp/><sp/><sp/>quick_buffer[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(quick_buffer)-2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5453"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fgets(quick_buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(quick_buffer),<sp/>f))</highlight></codeline>
<codeline lineno="5454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5455"><highlight class="normal"></highlight></codeline>
<codeline lineno="5456"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(quick_buffer[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(quick_buffer)-2]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>strlen(quick_buffer);</highlight></codeline>
<codeline lineno="5458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>quick_buffer[n-1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quick_buffer[n-1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_p_strdup(quick_buffer);</highlight></codeline>
<codeline lineno="5461"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="5463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/>stb_p_strdup(quick_buffer);</highlight></codeline>
<codeline lineno="5464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(quick_buffer)-1;</highlight></codeline>
<codeline lineno="5465"><highlight class="normal"></highlight></codeline>
<codeline lineno="5466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!feof(f))<sp/>{</highlight></codeline>
<codeline lineno="5467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a[len-1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>realloc(a,<sp/>len*2);</highlight></codeline>
<codeline lineno="5469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>&amp;a[len];</highlight></codeline>
<codeline lineno="5470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[len-2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fgets(p,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>len,<sp/>f))</highlight></codeline>
<codeline lineno="5472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p[len-2]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>+=<sp/>strlen(p);</highlight></codeline>
<codeline lineno="5475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>len<sp/>+<sp/>(len-1);</highlight></codeline>
<codeline lineno="5478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a[len-1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[len-1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="5482"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5484"><highlight class="normal"></highlight></codeline>
<codeline lineno="5485"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_fullpath(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="group__core__func__common_1ga693d77696ff36572a0da79efec965acd" kindref="member">abs</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>abs_size,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*rel)</highlight></codeline>
<codeline lineno="5486"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5487"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5488"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_fullpath(<ref refid="group__core__func__common_1ga693d77696ff36572a0da79efec965acd" kindref="member">abs</ref>,<sp/>rel,<sp/>abs_size)<sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="5489"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5490"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rel[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>||<sp/>rel[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>strlen(rel)<sp/>&gt;=<sp/>abs_size)</highlight></codeline>
<codeline lineno="5492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_p_strcpy_s(<ref refid="group__core__func__common_1ga693d77696ff36572a0da79efec965acd" kindref="member">abs</ref>,65536,rel);</highlight></codeline>
<codeline lineno="5494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_TRUE;</highlight></codeline>
<codeline lineno="5495"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="5497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>getcwd(<ref refid="group__core__func__common_1ga693d77696ff36572a0da79efec965acd" kindref="member">abs</ref>,<sp/>abs_size);</highlight></codeline>
<codeline lineno="5498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>strlen(<ref refid="group__core__func__common_1ga693d77696ff36572a0da79efec965acd" kindref="member">abs</ref>);</highlight></codeline>
<codeline lineno="5499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n+(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>strlen(rel)+2<sp/>&lt;=<sp/>abs_size)<sp/>{</highlight></codeline>
<codeline lineno="5500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__core__func__common_1ga693d77696ff36572a0da79efec965acd" kindref="member">abs</ref>[n]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_p_strcpy_s(<ref refid="group__core__func__common_1ga693d77696ff36572a0da79efec965acd" kindref="member">abs</ref>+n+1,<sp/>65536,rel);</highlight></codeline>
<codeline lineno="5502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_TRUE;</highlight></codeline>
<codeline lineno="5503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_FALSE;</highlight></codeline>
<codeline lineno="5505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5506"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5507"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5508"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5509"><highlight class="normal"></highlight></codeline>
<codeline lineno="5510"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_fcmp_core(FILE<sp/>*f,<sp/>FILE<sp/>*g)</highlight></codeline>
<codeline lineno="5511"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5512"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf1[1024],buf2[1024];</highlight></codeline>
<codeline lineno="5513"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n1,n2,<sp/>res=0;</highlight></codeline>
<codeline lineno="5514"><highlight class="normal"></highlight></codeline>
<codeline lineno="5515"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="5516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n1<sp/>=<sp/>(int)<sp/>fread(buf1,<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf1),<sp/>f);</highlight></codeline>
<codeline lineno="5517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n2<sp/>=<sp/>(int)<sp/>fread(buf2,<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf2),<sp/>g);</highlight></codeline>
<codeline lineno="5518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>memcmp(buf1,buf2,stb_min(n1,n2));</highlight></codeline>
<codeline lineno="5519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res)</highlight></codeline>
<codeline lineno="5520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n1<sp/>!=<sp/>n2)<sp/>{</highlight></codeline>
<codeline lineno="5522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>n1<sp/>&lt;<sp/>n2<sp/>?<sp/>-1<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="5523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n1<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="5526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5527"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5528"><highlight class="normal"></highlight></codeline>
<codeline lineno="5529"><highlight class="normal"><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="5530"><highlight class="normal"><sp/><sp/><sp/>fclose(g);</highlight></codeline>
<codeline lineno="5531"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="5532"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5533"><highlight class="normal"></highlight></codeline>
<codeline lineno="5534"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_fcmp(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s1,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s2)</highlight></codeline>
<codeline lineno="5535"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5536"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*f<sp/>=<sp/>stb__fopen(s1,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5537"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*g<sp/>=<sp/>stb__fopen(s2,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5538"><highlight class="normal"></highlight></codeline>
<codeline lineno="5539"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>==<sp/>NULL<sp/>||<sp/>g<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="5540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f)<sp/>fclose(f);</highlight></codeline>
<codeline lineno="5541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g)<sp/>{</highlight></codeline>
<codeline lineno="5542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(g);</highlight></codeline>
<codeline lineno="5543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_TRUE;</highlight></codeline>
<codeline lineno="5544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f<sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="5546"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5547"><highlight class="normal"></highlight></codeline>
<codeline lineno="5548"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_fcmp_core(f,g);</highlight></codeline>
<codeline lineno="5549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5550"><highlight class="normal"></highlight></codeline>
<codeline lineno="5551"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_feq(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s1,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s2)</highlight></codeline>
<codeline lineno="5552"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5553"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*f<sp/>=<sp/>stb__fopen(s1,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5554"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*g<sp/>=<sp/>stb__fopen(s2,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5555"><highlight class="normal"></highlight></codeline>
<codeline lineno="5556"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>==<sp/>NULL<sp/>||<sp/>g<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="5557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f)<sp/>fclose(f);</highlight></codeline>
<codeline lineno="5558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g)<sp/>fclose(g);</highlight></codeline>
<codeline lineno="5559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f<sp/>==<sp/>g;</highlight></codeline>
<codeline lineno="5560"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5561"><highlight class="normal"></highlight></codeline>
<codeline lineno="5562"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>feq<sp/>is<sp/>faster<sp/>because<sp/>it<sp/>shortcuts<sp/>if<sp/>they&apos;re<sp/>different<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5563"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb_filelen(f)<sp/>!=<sp/>stb_filelen(g))<sp/>{</highlight></codeline>
<codeline lineno="5564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="5565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fclose(g);</highlight></codeline>
<codeline lineno="5566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5567"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5568"><highlight class="normal"></highlight></codeline>
<codeline lineno="5569"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!stb_fcmp_core(f,g);</highlight></codeline>
<codeline lineno="5570"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5571"><highlight class="normal"></highlight></codeline>
<codeline lineno="5572"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb_ptrmap<sp/>*stb__files;</highlight></codeline>
<codeline lineno="5573"><highlight class="normal"></highlight></codeline>
<codeline lineno="5574"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5575"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5576"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*temp_name;</highlight></codeline>
<codeline lineno="5577"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name;</highlight></codeline>
<codeline lineno="5578"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>errors;</highlight></codeline>
<codeline lineno="5579"><highlight class="normal">}<sp/>stb__file_data;</highlight></codeline>
<codeline lineno="5580"><highlight class="normal"></highlight></codeline>
<codeline lineno="5581"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FILE<sp/>*stb__open_temp_file(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*temp_name,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mode)</highlight></codeline>
<codeline lineno="5582"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5583"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="5584"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5585"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="5586"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5587"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*f;</highlight></codeline>
<codeline lineno="5588"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>generate<sp/>a<sp/>temporary<sp/>file<sp/>in<sp/>the<sp/>same<sp/>directory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5589"><highlight class="normal"><sp/><sp/><sp/>p<sp/>=<sp/>strlen(src_name)-1;</highlight></codeline>
<codeline lineno="5590"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>src_name[p]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>src_name[p]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>src_name[p]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>src_name[p]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--p;</highlight></codeline>
<codeline lineno="5593"><highlight class="normal"><sp/><sp/><sp/>++p;</highlight></codeline>
<codeline lineno="5594"><highlight class="normal"></highlight></codeline>
<codeline lineno="5595"><highlight class="normal"><sp/><sp/><sp/>memcpy(temp_name,<sp/>src_name,<sp/>p);</highlight></codeline>
<codeline lineno="5596"><highlight class="normal"></highlight></codeline>
<codeline lineno="5597"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5598"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>multiple<sp/>times<sp/>to<sp/>make<sp/>a<sp/>temp<sp/>file...<sp/>just<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5599"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>case<sp/>some<sp/>other<sp/>process<sp/>makes<sp/>the<sp/>name<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5600"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>32;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_p_strcpy_s(temp_name+p,<sp/>65536,<sp/></highlight><highlight class="stringliteral">&quot;stmpXXXXXX&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb_p_mktemp(temp_name))</highlight></codeline>
<codeline lineno="5603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5604"><highlight class="normal"></highlight></codeline>
<codeline lineno="5605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>stb_p_fopen(temp_name,<sp/>mode);</highlight></codeline>
<codeline lineno="5606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="5607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5608"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5609"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5610"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_p_strcpy_s(temp_name+p,<sp/>65536,<sp/></highlight><highlight class="stringliteral">&quot;stmpXXXXXX&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5612"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>__MINGW32__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd<sp/>=<sp/>open(stb_p_mktemp(temp_name),<sp/>O_RDWR);</highlight></codeline>
<codeline lineno="5614"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd<sp/>=<sp/>mkstemp(temp_name);</highlight></codeline>
<codeline lineno="5616"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd<sp/>==<sp/>-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>fdopen(fd,<sp/>mode);</highlight></codeline>
<codeline lineno="5619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="5620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unlink(temp_name);</highlight></codeline>
<codeline lineno="5621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close(fd);</highlight></codeline>
<codeline lineno="5622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5624"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5625"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5626"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="5627"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5628"><highlight class="normal"></highlight></codeline>
<codeline lineno="5629"><highlight class="normal"></highlight></codeline>
<codeline lineno="5630"><highlight class="normal">FILE<sp/>*<sp/><sp/>stb_fopen(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mode)</highlight></codeline>
<codeline lineno="5631"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5632"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*f;</highlight></codeline>
<codeline lineno="5633"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>name_full[4096];</highlight></codeline>
<codeline lineno="5634"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>temp_full[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(name_full)<sp/>+<sp/>12];</highlight></codeline>
<codeline lineno="5635"><highlight class="normal"></highlight></codeline>
<codeline lineno="5636"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>if<sp/>the<sp/>file<sp/>doesn&apos;t<sp/>exist,<sp/>we<sp/>can<sp/>also<sp/>use<sp/>the<sp/>fastpath<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5637"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;w&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>!strchr(mode,<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="5638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb__fopen(filename,<sp/>mode);</highlight></codeline>
<codeline lineno="5639"><highlight class="normal"></highlight></codeline>
<codeline lineno="5640"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>save<sp/>away<sp/>the<sp/>full<sp/>path<sp/>to<sp/>the<sp/>file<sp/>so<sp/>if<sp/>the<sp/>program</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5641"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>changes<sp/>the<sp/>cwd<sp/>everything<sp/>still<sp/>works<sp/>right!<sp/>unix<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5642"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>better<sp/>ways<sp/>to<sp/>do<sp/>this,<sp/>but<sp/>we<sp/>have<sp/>to<sp/>work<sp/>in<sp/>windows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5643"><highlight class="normal"><sp/><sp/><sp/>name_full[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>stb_fullpath<sp/>reads<sp/>name_full[0]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5644"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb_fullpath(name_full,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(name_full),<sp/>filename)==0)</highlight></codeline>
<codeline lineno="5645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5646"><highlight class="normal"></highlight></codeline>
<codeline lineno="5647"><highlight class="normal"><sp/><sp/><sp/>f<sp/>=<sp/>stb__open_temp_file(temp_full,<sp/>name_full,<sp/>mode);</highlight></codeline>
<codeline lineno="5648"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="5649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__file_data<sp/>*d<sp/>=<sp/>(stb__file_data<sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*d));</highlight></codeline>
<codeline lineno="5650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!d)<sp/>{<sp/>assert(0);<sp/><sp/></highlight><highlight class="comment">/*<sp/>NOTREACHED<sp/>*/</highlight><highlight class="normal">fclose(f);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/>}</highlight></codeline>
<codeline lineno="5651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__files<sp/>==<sp/>NULL)<sp/>stb__files<sp/>=<sp/>stb_ptrmap_create();</highlight></codeline>
<codeline lineno="5652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>d-&gt;temp_name<sp/>=<sp/>stb_p_strdup(temp_full);</highlight></codeline>
<codeline lineno="5653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>d-&gt;name<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>stb_p_strdup(name_full);</highlight></codeline>
<codeline lineno="5654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>d-&gt;errors<sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_ptrmap_add(stb__files,<sp/>f,<sp/>d);</highlight></codeline>
<codeline lineno="5656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="5657"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5658"><highlight class="normal"></highlight></codeline>
<codeline lineno="5659"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5660"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5661"><highlight class="normal"></highlight></codeline>
<codeline lineno="5662"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>stb_fclose(FILE<sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>keep)</highlight></codeline>
<codeline lineno="5663"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5664"><highlight class="normal"><sp/><sp/><sp/>stb__file_data<sp/>*d;</highlight></codeline>
<codeline lineno="5665"><highlight class="normal"></highlight></codeline>
<codeline lineno="5666"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/>STB_FALSE;</highlight></codeline>
<codeline lineno="5667"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5668"><highlight class="normal"></highlight></codeline>
<codeline lineno="5669"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ferror(f))</highlight></codeline>
<codeline lineno="5670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>keep<sp/>=<sp/>stb_keep_no;</highlight></codeline>
<codeline lineno="5671"><highlight class="normal"></highlight></codeline>
<codeline lineno="5672"><highlight class="normal"><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="5673"><highlight class="normal"></highlight></codeline>
<codeline lineno="5674"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__files<sp/>&amp;&amp;<sp/>stb_ptrmap_remove(stb__files,<sp/>f,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>&amp;d))<sp/>{</highlight></codeline>
<codeline lineno="5675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__files-&gt;count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ptrmap_destroy(stb__files);</highlight></codeline>
<codeline lineno="5677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__files<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5679"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_TRUE;<sp/></highlight><highlight class="comment">//<sp/>not<sp/>special</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5681"><highlight class="normal"></highlight></codeline>
<codeline lineno="5682"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(keep<sp/>==<sp/>stb_keep_if_different)<sp/>{</highlight></codeline>
<codeline lineno="5683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>the<sp/>files<sp/>are<sp/>identical</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb_feq(d-&gt;name,<sp/>d-&gt;temp_name))<sp/>{</highlight></codeline>
<codeline lineno="5685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keep<sp/>=<sp/>stb_keep_no;</highlight></codeline>
<codeline lineno="5686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>STB_TRUE;<sp/><sp/></highlight><highlight class="comment">//<sp/>report<sp/>success<sp/>if<sp/>no<sp/>change</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5688"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5689"><highlight class="normal"></highlight></codeline>
<codeline lineno="5690"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(keep<sp/>==<sp/>stb_keep_no)<sp/>{</highlight></codeline>
<codeline lineno="5691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>remove(d-&gt;temp_name);</highlight></codeline>
<codeline lineno="5692"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb_fexists(d-&gt;name))<sp/>{</highlight></codeline>
<codeline lineno="5694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>old<sp/>file<sp/>doesn&apos;t<sp/>exist,<sp/>so<sp/>just<sp/>move<sp/>the<sp/>new<sp/>file<sp/>over<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_rename(d-&gt;temp_name,<sp/>d-&gt;name);</highlight></codeline>
<codeline lineno="5696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>delete<sp/>the<sp/>old<sp/>file<sp/>yet<sp/>in<sp/>case<sp/>there<sp/>are<sp/>troubles!<sp/>First<sp/>rename<sp/>it!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>preserved_old_file[4096];</highlight></codeline>
<codeline lineno="5699"><highlight class="normal"></highlight></codeline>
<codeline lineno="5700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>generate<sp/>a<sp/>temp<sp/>filename<sp/>in<sp/>the<sp/>same<sp/>directory<sp/>(also<sp/>creates<sp/>it,<sp/>which<sp/>we<sp/>don&apos;t<sp/>need)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/>*dummy<sp/>=<sp/>stb__open_temp_file(preserved_old_file,<sp/>d-&gt;name,<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dummy<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="5703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>don&apos;t<sp/>actually<sp/>want<sp/>the<sp/>open<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(dummy);</highlight></codeline>
<codeline lineno="5705"><highlight class="normal"></highlight></codeline>
<codeline lineno="5706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>discard<sp/>what<sp/>we<sp/>just<sp/>created</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remove(preserved_old_file);<sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>this<sp/>fails,<sp/>there&apos;s<sp/>nothing<sp/>we<sp/>can<sp/>do,<sp/>and<sp/>following<sp/>logic<sp/>handles<sp/>it<sp/>as<sp/>best<sp/>as<sp/>possible<sp/>anyway</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5708"><highlight class="normal"></highlight></codeline>
<codeline lineno="5709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>move<sp/>the<sp/>existing<sp/>file<sp/>to<sp/>the<sp/>preserved<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>!=<sp/>stb_rename(d-&gt;name,<sp/>preserved_old_file))<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>0<sp/>on<sp/>success</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>failed,<sp/>state<sp/>is:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>filename<sp/><sp/>-&gt;<sp/>old<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>tempname<sp/><sp/>-&gt;<sp/>new<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>keep<sp/>tempname<sp/>around<sp/>so<sp/>we<sp/>don&apos;t<sp/>lose<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>state<sp/>is:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>preserved<sp/>-&gt;<sp/>old<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>tempname<sp/><sp/>-&gt;<sp/>new<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>move<sp/>the<sp/>new<sp/>file<sp/>to<sp/>the<sp/>old<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>==<sp/>stb_rename(d-&gt;temp_name,<sp/>d-&gt;name))<sp/>{</highlight></codeline>
<codeline lineno="5721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>state<sp/>is:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>preserved<sp/>-&gt;<sp/>old<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>filename<sp/><sp/>-&gt;<sp/>new<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>STB_TRUE;</highlight></codeline>
<codeline lineno="5725"><highlight class="normal"></highlight></codeline>
<codeline lineno="5726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;filename<sp/>-&gt;<sp/>new<sp/>file&apos;<sp/>has<sp/>always<sp/>been<sp/>the<sp/>goal,<sp/>so<sp/>clean<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remove(preserved_old_file);<sp/></highlight><highlight class="comment">//<sp/>nothing<sp/>to<sp/>be<sp/>done<sp/>if<sp/>it<sp/>fails</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>couldn&apos;t<sp/>rename,<sp/>so<sp/>try<sp/>renaming<sp/>preserved<sp/>file<sp/>back</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5730"><highlight class="normal"></highlight></codeline>
<codeline lineno="5731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>state<sp/>is:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>preserved<sp/>-&gt;<sp/>old<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>tempname<sp/><sp/>-&gt;<sp/>new<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_rename(preserved_old_file,<sp/>d-&gt;name);</highlight></codeline>
<codeline lineno="5735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>rename<sp/>failed,<sp/>there&apos;s<sp/>nothing<sp/>more<sp/>we<sp/>can<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>couldn&apos;t<sp/>get<sp/>a<sp/>temp<sp/>filename.<sp/>do<sp/>this<sp/>the<sp/>naive<sp/>way;<sp/>the<sp/>worst<sp/>case<sp/>failure<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>leaves<sp/>the<sp/>filename<sp/>pointing<sp/>to<sp/>nothing<sp/>and<sp/>the<sp/>new<sp/>file<sp/>as<sp/>a<sp/>tempfile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remove(d-&gt;name);</highlight></codeline>
<codeline lineno="5742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_rename(d-&gt;temp_name,<sp/>d-&gt;name);</highlight></codeline>
<codeline lineno="5743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5745"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5746"><highlight class="normal"></highlight></codeline>
<codeline lineno="5747"><highlight class="normal"><sp/><sp/><sp/>free(d-&gt;temp_name);</highlight></codeline>
<codeline lineno="5748"><highlight class="normal"><sp/><sp/><sp/>free(d-&gt;name);</highlight></codeline>
<codeline lineno="5749"><highlight class="normal"><sp/><sp/><sp/>free(d);</highlight></codeline>
<codeline lineno="5750"><highlight class="normal"></highlight></codeline>
<codeline lineno="5751"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ok;</highlight></codeline>
<codeline lineno="5752"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5753"><highlight class="normal"></highlight></codeline>
<codeline lineno="5754"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_copyfile(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dest)</highlight></codeline>
<codeline lineno="5755"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5756"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>raw_buffer[1024];</highlight></codeline>
<codeline lineno="5757"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>;</highlight></codeline>
<codeline lineno="5758"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buf_size<sp/>=<sp/>65536;</highlight></codeline>
<codeline lineno="5759"><highlight class="normal"></highlight></codeline>
<codeline lineno="5760"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*f,<sp/>*g;</highlight></codeline>
<codeline lineno="5761"><highlight class="normal"></highlight></codeline>
<codeline lineno="5762"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>file<sp/>already<sp/>exists<sp/>at<sp/>destination,<sp/>do<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5763"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb_feq(src,<sp/>dest))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_TRUE;</highlight></codeline>
<codeline lineno="5764"><highlight class="normal"></highlight></codeline>
<codeline lineno="5765"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>open<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5766"><highlight class="normal"><sp/><sp/><sp/>f<sp/>=<sp/>stb__fopen(src,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5767"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_FALSE;</highlight></codeline>
<codeline lineno="5768"><highlight class="normal"></highlight></codeline>
<codeline lineno="5769"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>open<sp/>file<sp/>for<sp/>writing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5770"><highlight class="normal"><sp/><sp/><sp/>g<sp/>=<sp/>stb__fopen(dest,<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5771"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="5772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="5773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_FALSE;</highlight></codeline>
<codeline lineno="5774"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5775"><highlight class="normal"></highlight></codeline>
<codeline lineno="5776"><highlight class="normal"><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(buf_size);</highlight></codeline>
<codeline lineno="5777"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classbuffer" kindref="compound">buffer</ref><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="5778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref><sp/>=<sp/>raw_buffer;</highlight></codeline>
<codeline lineno="5779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf_size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(raw_buffer);</highlight></codeline>
<codeline lineno="5780"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5781"><highlight class="normal"></highlight></codeline>
<codeline lineno="5782"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!feof(f))<sp/>{</highlight></codeline>
<codeline lineno="5783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>fread(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>1,<sp/>buf_size,<sp/>f);</highlight></codeline>
<codeline lineno="5784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="5785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>1,<sp/>n,<sp/>g);</highlight></codeline>
<codeline lineno="5786"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5787"><highlight class="normal"></highlight></codeline>
<codeline lineno="5788"><highlight class="normal"><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="5789"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classbuffer" kindref="compound">buffer</ref><sp/>!=<sp/>raw_buffer)</highlight></codeline>
<codeline lineno="5790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(<ref refid="classbuffer" kindref="compound">buffer</ref>);</highlight></codeline>
<codeline lineno="5791"><highlight class="normal"></highlight></codeline>
<codeline lineno="5792"><highlight class="normal"><sp/><sp/><sp/>fclose(g);</highlight></codeline>
<codeline lineno="5793"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_TRUE;</highlight></codeline>
<codeline lineno="5794"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5795"><highlight class="normal"></highlight></codeline>
<codeline lineno="5796"><highlight class="normal"></highlight><highlight class="comment">//<sp/>varlen:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5797"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>v&apos;<sp/>=<sp/>(v<sp/>&gt;&gt;<sp/>31)<sp/>+<sp/>(v<sp/>&lt;<sp/>0<sp/>?<sp/>~v<sp/>:<sp/>v)&lt;&lt;1;<sp/><sp/>//<sp/>small<sp/>abs(v)<sp/>=&gt;<sp/>small<sp/>v&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5798"><highlight class="normal"></highlight><highlight class="comment">//<sp/>output<sp/>v<sp/>as<sp/>big<sp/>endian<sp/>v&apos;+k<sp/>for<sp/>v&apos;<sp/>&lt;=<sp/>k:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5799"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>1<sp/>byte<sp/>:<sp/><sp/>v&apos;<sp/>&lt;=<sp/>0x00000080<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/><sp/>-64<sp/>&lt;=<sp/>v<sp/>&lt;<sp/><sp/><sp/>64)<sp/><sp/><sp/>7<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5800"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>2<sp/>bytes:<sp/><sp/>v&apos;<sp/>&lt;=<sp/>0x00004000<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-8192<sp/>&lt;=<sp/>v<sp/>&lt;<sp/>8192)<sp/><sp/>14<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5801"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>3<sp/>bytes:<sp/><sp/>v&apos;<sp/>&lt;=<sp/>0x00200000<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>21<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5802"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>4<sp/>bytes:<sp/><sp/>v&apos;<sp/>&lt;=<sp/>0x10000000<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>28<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5803"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>number<sp/>of<sp/>most<sp/>significant<sp/>1-bits<sp/>in<sp/>the<sp/>first<sp/>byte</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5804"><highlight class="normal"></highlight><highlight class="comment">//<sp/>equals<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>after<sp/>the<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5805"><highlight class="normal"></highlight></codeline>
<codeline lineno="5806"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb__varlen_xform(v)<sp/><sp/><sp/><sp/><sp/>(v&lt;0<sp/>?<sp/>(~v<sp/>&lt;&lt;<sp/>1)+1<sp/>:<sp/>(v<sp/>&lt;&lt;<sp/>1))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5807"><highlight class="normal"></highlight></codeline>
<codeline lineno="5808"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_size_varlen(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_size_varlenu(stb__varlen_xform(v));<sp/>}</highlight></codeline>
<codeline lineno="5809"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_size_varlenu(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v)</highlight></codeline>
<codeline lineno="5810"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5811"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v<sp/>&lt;<sp/>0x00000080)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="5812"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v<sp/>&lt;<sp/>0x00004000)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="5813"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v<sp/>&lt;<sp/>0x00200000)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>3;</highlight></codeline>
<codeline lineno="5814"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v<sp/>&lt;<sp/>0x10000000)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4;</highlight></codeline>
<codeline lineno="5815"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>5;</highlight></codeline>
<codeline lineno="5816"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5817"><highlight class="normal"></highlight></codeline>
<codeline lineno="5818"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>stb_fput_varlen(FILE<sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v)<sp/>{<sp/>stb_fput_varlenu(f,<sp/>stb__varlen_xform(v));<sp/>}</highlight></codeline>
<codeline lineno="5819"><highlight class="normal"></highlight></codeline>
<codeline lineno="5820"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>stb_fput_varlenu(FILE<sp/>*f,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z)</highlight></codeline>
<codeline lineno="5821"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5822"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&gt;=<sp/>0x10000000)<sp/>fputc(0xF0,f);</highlight></codeline>
<codeline lineno="5823"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&gt;=<sp/>0x00200000)<sp/>fputc((z<sp/>&lt;<sp/>0x10000000<sp/>?<sp/>0xE0<sp/>:<sp/>0)+(z&gt;&gt;24),f);</highlight></codeline>
<codeline lineno="5824"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&gt;=<sp/>0x00004000)<sp/>fputc((z<sp/>&lt;<sp/>0x00200000<sp/>?<sp/>0xC0<sp/>:<sp/>0)+(z&gt;&gt;16),f);</highlight></codeline>
<codeline lineno="5825"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&gt;=<sp/>0x00000080)<sp/>fputc((z<sp/>&lt;<sp/>0x00004000<sp/>?<sp/>0x80<sp/>:<sp/>0)+(z&gt;&gt;<sp/>8),f);</highlight></codeline>
<codeline lineno="5826"><highlight class="normal"><sp/><sp/><sp/>fputc(z,f);</highlight></codeline>
<codeline lineno="5827"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5828"><highlight class="normal"></highlight></codeline>
<codeline lineno="5829"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_fgetc(f)<sp/><sp/><sp/><sp/>((unsigned<sp/>char)<sp/>fgetc(f))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5830"><highlight class="normal"></highlight></codeline>
<codeline lineno="5831"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>stb_fget_varlen(FILE<sp/>*f)</highlight></codeline>
<codeline lineno="5832"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5833"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>stb_fget_varlenu(f);</highlight></codeline>
<codeline lineno="5834"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(z<sp/>&amp;<sp/>1)<sp/>?<sp/>~(z&gt;&gt;1)<sp/>:<sp/>(z&gt;&gt;1);</highlight></codeline>
<codeline lineno="5835"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5836"><highlight class="normal"></highlight></codeline>
<codeline lineno="5837"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_fget_varlenu(FILE<sp/>*f)</highlight></codeline>
<codeline lineno="5838"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5839"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z;</highlight></codeline>
<codeline lineno="5840"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>d;</highlight></codeline>
<codeline lineno="5841"><highlight class="normal"><sp/><sp/><sp/>d<sp/>=<sp/>stb_fgetc(f);</highlight></codeline>
<codeline lineno="5842"><highlight class="normal"></highlight></codeline>
<codeline lineno="5843"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>&gt;=<sp/>0x80)<sp/>{</highlight></codeline>
<codeline lineno="5844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>&gt;=<sp/>0xc0)<sp/>{</highlight></codeline>
<codeline lineno="5845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>&gt;=<sp/>0xe0)<sp/>{</highlight></codeline>
<codeline lineno="5846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>==<sp/>0xf0)<sp/>z<sp/>=<sp/>stb_fgetc(f)<sp/>&lt;&lt;<sp/>24;</highlight></codeline>
<codeline lineno="5847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>(d<sp/>-<sp/>0xe0)<sp/>&lt;&lt;<sp/>24;</highlight></codeline>
<codeline lineno="5848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>+=<sp/>stb_fgetc(f)<sp/>&lt;&lt;<sp/>16;</highlight></codeline>
<codeline lineno="5849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>(d<sp/>-<sp/>0xc0)<sp/>&lt;&lt;<sp/>16;</highlight></codeline>
<codeline lineno="5852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>+=<sp/>stb_fgetc(f)<sp/>&lt;&lt;<sp/>8;</highlight></codeline>
<codeline lineno="5853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>(d<sp/>-<sp/>0x80)<sp/>&lt;&lt;<sp/><sp/>8;</highlight></codeline>
<codeline lineno="5855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>+=<sp/>stb_fgetc(f);</highlight></codeline>
<codeline lineno="5856"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="5858"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z;</highlight></codeline>
<codeline lineno="5859"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5860"><highlight class="normal"></highlight></codeline>
<codeline lineno="5861"><highlight class="normal">stb_uint64<sp/><sp/><sp/>stb_fget_varlen64(FILE<sp/>*f)</highlight></codeline>
<codeline lineno="5862"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5863"><highlight class="normal"><sp/><sp/><sp/>stb_uint64<sp/>z;</highlight></codeline>
<codeline lineno="5864"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>d;</highlight></codeline>
<codeline lineno="5865"><highlight class="normal"><sp/><sp/><sp/>d<sp/>=<sp/>stb_fgetc(f);</highlight></codeline>
<codeline lineno="5866"><highlight class="normal"></highlight></codeline>
<codeline lineno="5867"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>&gt;=<sp/>0x80)<sp/>{</highlight></codeline>
<codeline lineno="5868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>&gt;=<sp/>0xc0)<sp/>{</highlight></codeline>
<codeline lineno="5869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>&gt;=<sp/>0xe0)<sp/>{</highlight></codeline>
<codeline lineno="5870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>&gt;=<sp/>0xf0)<sp/>{</highlight></codeline>
<codeline lineno="5871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>&gt;=<sp/>0xf8)<sp/>{</highlight></codeline>
<codeline lineno="5872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>&gt;=<sp/>0xfc)<sp/>{</highlight></codeline>
<codeline lineno="5873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>&gt;=<sp/>0xfe)<sp/>{</highlight></codeline>
<codeline lineno="5874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>&gt;=<sp/>0xff)</highlight></codeline>
<codeline lineno="5875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>(stb_uint64)<sp/>stb_fgetc(f)<sp/>&lt;&lt;<sp/>56;</highlight></codeline>
<codeline lineno="5876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>(stb_uint64)<sp/>(d<sp/>-<sp/>0xfe)<sp/>&lt;&lt;<sp/>56;</highlight></codeline>
<codeline lineno="5878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>|=<sp/>(stb_uint64)<sp/>stb_fgetc(f)<sp/>&lt;&lt;<sp/>48;</highlight></codeline>
<codeline lineno="5879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>(stb_uint64)<sp/>(d<sp/>-<sp/>0xfc)<sp/>&lt;&lt;<sp/>48;</highlight></codeline>
<codeline lineno="5880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>|=<sp/>(stb_uint64)<sp/>stb_fgetc(f)<sp/>&lt;&lt;<sp/>40;</highlight></codeline>
<codeline lineno="5881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>(stb_uint64)<sp/>(d<sp/>-<sp/>0xf8)<sp/>&lt;&lt;<sp/>40;</highlight></codeline>
<codeline lineno="5882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>|=<sp/>(stb_uint64)<sp/>stb_fgetc(f)<sp/>&lt;&lt;<sp/>32;</highlight></codeline>
<codeline lineno="5883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>(stb_uint64)<sp/>(d<sp/>-<sp/>0xf0)<sp/>&lt;&lt;<sp/>32;</highlight></codeline>
<codeline lineno="5884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>|=<sp/>(stb_uint)<sp/>stb_fgetc(f)<sp/>&lt;&lt;<sp/>24;</highlight></codeline>
<codeline lineno="5885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>(stb_uint)<sp/>(d<sp/>-<sp/>0xe0)<sp/>&lt;&lt;<sp/>24;</highlight></codeline>
<codeline lineno="5886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>|=<sp/>(stb_uint)<sp/>stb_fgetc(f)<sp/>&lt;&lt;<sp/>16;</highlight></codeline>
<codeline lineno="5887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>(stb_uint)<sp/>(d<sp/>-<sp/>0xc0)<sp/>&lt;&lt;<sp/>16;</highlight></codeline>
<codeline lineno="5888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>|=<sp/>(stb_uint)<sp/>stb_fgetc(f)<sp/>&lt;&lt;<sp/>8;</highlight></codeline>
<codeline lineno="5889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>(stb_uint)<sp/>(d<sp/>-<sp/>0x80)<sp/>&lt;&lt;<sp/>8;</highlight></codeline>
<codeline lineno="5890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>|=<sp/>stb_fgetc(f);</highlight></codeline>
<codeline lineno="5891"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="5893"><highlight class="normal"></highlight></codeline>
<codeline lineno="5894"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(z<sp/>&amp;<sp/>1)<sp/>?<sp/>~(z<sp/>&gt;&gt;<sp/>1)<sp/>:<sp/>(z<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="5895"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5896"><highlight class="normal"></highlight></codeline>
<codeline lineno="5897"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_size_varlen64(stb_uint64<sp/>v)</highlight></codeline>
<codeline lineno="5898"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5899"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v<sp/>&lt;<sp/>0x00000080)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="5900"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v<sp/>&lt;<sp/>0x00004000)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="5901"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v<sp/>&lt;<sp/>0x00200000)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>3;</highlight></codeline>
<codeline lineno="5902"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v<sp/>&lt;<sp/>0x10000000)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4;</highlight></codeline>
<codeline lineno="5903"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v<sp/>&lt;<sp/>STB_IMM_UINT64(0x0000000800000000))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>5;</highlight></codeline>
<codeline lineno="5904"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v<sp/>&lt;<sp/>STB_IMM_UINT64(0x0000040000000000))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>6;</highlight></codeline>
<codeline lineno="5905"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v<sp/>&lt;<sp/>STB_IMM_UINT64(0x0002000000000000))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>7;</highlight></codeline>
<codeline lineno="5906"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v<sp/>&lt;<sp/>STB_IMM_UINT64(0x0100000000000000))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>8;</highlight></codeline>
<codeline lineno="5907"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>9;</highlight></codeline>
<codeline lineno="5908"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5909"><highlight class="normal"></highlight></codeline>
<codeline lineno="5910"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>stb_fput_varlen64(FILE<sp/>*f,<sp/>stb_uint64<sp/>v)</highlight></codeline>
<codeline lineno="5911"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5912"><highlight class="normal"><sp/><sp/><sp/>stb_uint64<sp/>z<sp/>=<sp/>stb__varlen_xform(v);</highlight></codeline>
<codeline lineno="5913"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>first=1;</highlight></codeline>
<codeline lineno="5914"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&gt;=<sp/>STB_IMM_UINT64(0x100000000000000))<sp/>{</highlight></codeline>
<codeline lineno="5915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fputc(0xff,f);</highlight></codeline>
<codeline lineno="5916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>first=0;</highlight></codeline>
<codeline lineno="5917"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5918"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&gt;=<sp/>STB_IMM_UINT64(0x02000000000000))<sp/>fputc((first<sp/>?<sp/>0xFE<sp/>:<sp/>0)+(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)(z&gt;&gt;56),f),<sp/>first=0;</highlight></codeline>
<codeline lineno="5919"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&gt;=<sp/>STB_IMM_UINT64(0x00040000000000))<sp/>fputc((first<sp/>?<sp/>0xFC<sp/>:<sp/>0)+(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)(z&gt;&gt;48),f),<sp/>first=0;</highlight></codeline>
<codeline lineno="5920"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&gt;=<sp/>STB_IMM_UINT64(0x00000800000000))<sp/>fputc((first<sp/>?<sp/>0xF8<sp/>:<sp/>0)+(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)(z&gt;&gt;40),f),<sp/>first=0;</highlight></codeline>
<codeline lineno="5921"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&gt;=<sp/>STB_IMM_UINT64(0x00000010000000))<sp/>fputc((first<sp/>?<sp/>0xF0<sp/>:<sp/>0)+(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)(z&gt;&gt;32),f),<sp/>first=0;</highlight></codeline>
<codeline lineno="5922"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&gt;=<sp/>STB_IMM_UINT64(0x00000000200000))<sp/>fputc((first<sp/>?<sp/>0xE0<sp/>:<sp/>0)+(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)(z&gt;&gt;24),f),<sp/>first=0;</highlight></codeline>
<codeline lineno="5923"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&gt;=<sp/>STB_IMM_UINT64(0x00000000004000))<sp/>fputc((first<sp/>?<sp/>0xC0<sp/>:<sp/>0)+(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)(z&gt;&gt;16),f),<sp/>first=0;</highlight></codeline>
<codeline lineno="5924"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&gt;=<sp/>STB_IMM_UINT64(0x00000000000080))<sp/>fputc((first<sp/>?<sp/>0x80<sp/>:<sp/>0)+(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)(z&gt;&gt;<sp/>8),f),<sp/>first=0;</highlight></codeline>
<codeline lineno="5925"><highlight class="normal"><sp/><sp/><sp/>fputc((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)z,f);</highlight></codeline>
<codeline lineno="5926"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5927"><highlight class="normal"></highlight></codeline>
<codeline lineno="5928"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>stb_fput_ranged(FILE<sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/>stb_uint<sp/>n)</highlight></codeline>
<codeline lineno="5929"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5930"><highlight class="normal"><sp/><sp/><sp/>v<sp/>-=<sp/>b;</highlight></codeline>
<codeline lineno="5931"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;=<sp/>(1<sp/>&lt;&lt;<sp/>31))</highlight></codeline>
<codeline lineno="5932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert((stb_uint)<sp/>v<sp/>&lt;<sp/>n);</highlight></codeline>
<codeline lineno="5933"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>(1<sp/>&lt;&lt;<sp/>24))<sp/>fputc(v<sp/>&gt;&gt;<sp/>24,<sp/>f);</highlight></codeline>
<codeline lineno="5934"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>(1<sp/>&lt;&lt;<sp/>16))<sp/>fputc(v<sp/>&gt;&gt;<sp/>16,<sp/>f);</highlight></codeline>
<codeline lineno="5935"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>(1<sp/>&lt;&lt;<sp/><sp/>8))<sp/>fputc(v<sp/>&gt;&gt;<sp/><sp/>8,<sp/>f);</highlight></codeline>
<codeline lineno="5936"><highlight class="normal"><sp/><sp/><sp/>fputc(v,f);</highlight></codeline>
<codeline lineno="5937"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5938"><highlight class="normal"></highlight></codeline>
<codeline lineno="5939"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>stb_fget_ranged(FILE<sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/>stb_uint<sp/>n)</highlight></codeline>
<codeline lineno="5940"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5941"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v=0;</highlight></codeline>
<codeline lineno="5942"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>(1<sp/>&lt;&lt;<sp/>24))<sp/>v<sp/>+=<sp/>stb_fgetc(f)<sp/>&lt;&lt;<sp/>24;</highlight></codeline>
<codeline lineno="5943"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>(1<sp/>&lt;&lt;<sp/>16))<sp/>v<sp/>+=<sp/>stb_fgetc(f)<sp/>&lt;&lt;<sp/>16;</highlight></codeline>
<codeline lineno="5944"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>(1<sp/>&lt;&lt;<sp/><sp/>8))<sp/>v<sp/>+=<sp/>stb_fgetc(f)<sp/>&lt;&lt;<sp/><sp/>8;</highlight></codeline>
<codeline lineno="5945"><highlight class="normal"><sp/><sp/><sp/>v<sp/>+=<sp/>stb_fgetc(f);</highlight></codeline>
<codeline lineno="5946"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b+v;</highlight></codeline>
<codeline lineno="5947"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5948"><highlight class="normal"></highlight></codeline>
<codeline lineno="5949"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>stb_size_ranged(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/>stb_uint<sp/>n)</highlight></codeline>
<codeline lineno="5950"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5951"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>(1<sp/>&lt;&lt;<sp/>24))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4;</highlight></codeline>
<codeline lineno="5952"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>(1<sp/>&lt;&lt;<sp/>16))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>3;</highlight></codeline>
<codeline lineno="5953"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>(1<sp/>&lt;&lt;<sp/><sp/>8))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="5954"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="5955"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5956"><highlight class="normal"></highlight></codeline>
<codeline lineno="5957"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_fput_string(FILE<sp/>*f,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)</highlight></codeline>
<codeline lineno="5958"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5959"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>strlen(s);</highlight></codeline>
<codeline lineno="5960"><highlight class="normal"><sp/><sp/><sp/>stb_fput_varlenu(f,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>len);</highlight></codeline>
<codeline lineno="5961"><highlight class="normal"><sp/><sp/><sp/>fwrite(s,<sp/>1,<sp/>len,<sp/>f);</highlight></codeline>
<codeline lineno="5962"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5963"><highlight class="normal"></highlight></codeline>
<codeline lineno="5964"><highlight class="normal"></highlight><highlight class="comment">//<sp/>inverse<sp/>of<sp/>the<sp/>above<sp/>algorithm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5965"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb_fget_string(FILE<sp/>*f,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="5966"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5967"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="5968"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>stb_fget_varlenu(f);</highlight></codeline>
<codeline lineno="5969"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>4096)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5970"><highlight class="normal"><sp/><sp/><sp/>s<sp/>=<sp/>p<sp/>?<sp/>stb_malloc_string(p,<sp/>len+1)<sp/>:<sp/>(char<sp/>*)<sp/>malloc(len+1);</highlight></codeline>
<codeline lineno="5971"><highlight class="normal"><sp/><sp/><sp/>fread(s,<sp/>1,<sp/>len,<sp/>f);</highlight></codeline>
<codeline lineno="5972"><highlight class="normal"><sp/><sp/><sp/>s[len]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5973"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="5974"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5975"><highlight class="normal"></highlight></codeline>
<codeline lineno="5976"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb_strdup(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pool)</highlight></codeline>
<codeline lineno="5977"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5978"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>strlen(str);</highlight></codeline>
<codeline lineno="5979"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>stb_malloc_string(pool,<sp/>len+1);</highlight></codeline>
<codeline lineno="5980"><highlight class="normal"><sp/><sp/><sp/>stb_p_strcpy_s(p,<sp/>len+1,<sp/>str);</highlight></codeline>
<codeline lineno="5981"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="5982"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5983"><highlight class="normal"></highlight></codeline>
<codeline lineno="5984"><highlight class="normal"></highlight><highlight class="comment">//<sp/>strip<sp/>the<sp/>trailing<sp/>&apos;/&apos;<sp/>or<sp/>&apos;\\&apos;<sp/>from<sp/>a<sp/>directory<sp/>so<sp/>we<sp/>can<sp/>refer<sp/>to<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5985"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>a<sp/>file<sp/>for<sp/>_stat()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5986"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb_strip_final_slash(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*t)</highlight></codeline>
<codeline lineno="5987"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5988"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t[0])<sp/>{</highlight></codeline>
<codeline lineno="5989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*z<sp/>=<sp/>t<sp/>+<sp/>strlen(t)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="5990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*z<sp/>is<sp/>the<sp/>last<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*z<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal"><sp/>||<sp/>*z<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>!=<sp/>t+2<sp/>||<sp/>t[1]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>but<sp/>don&apos;t<sp/>strip<sp/>it<sp/>if<sp/>it&apos;s<sp/>e.g.<sp/>&quot;c:/&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*z<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*z<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="5995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*z<sp/>=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>canonicalize<sp/>to<sp/>make<sp/>sure<sp/>it<sp/>matches<sp/>db</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5996"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5997"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="5998"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5999"><highlight class="normal"></highlight></codeline>
<codeline lineno="6000"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb_strip_final_slash_regardless(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*t)</highlight></codeline>
<codeline lineno="6001"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6002"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t[0])<sp/>{</highlight></codeline>
<codeline lineno="6003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*z<sp/>=<sp/>t<sp/>+<sp/>strlen(t)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="6004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*z<sp/>is<sp/>the<sp/>last<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*z<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal"><sp/>||<sp/>*z<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="6006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*z<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*z<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="6008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*z<sp/>=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>canonicalize<sp/>to<sp/>make<sp/>sure<sp/>it<sp/>matches<sp/>db</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6009"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6010"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="6011"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6012"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6013"><highlight class="normal"></highlight></codeline>
<codeline lineno="6015"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6016"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Options<sp/>parsing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6017"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6018"><highlight class="normal"></highlight></codeline>
<codeline lineno="6019"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**stb_getopt_param(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*param);</highlight></codeline>
<codeline lineno="6020"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**stb_getopt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv);</highlight></codeline>
<codeline lineno="6021"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>stb_getopt_free(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**opts);</highlight></codeline>
<codeline lineno="6022"><highlight class="normal"></highlight></codeline>
<codeline lineno="6023"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6024"><highlight class="normal"></highlight></codeline>
<codeline lineno="6025"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>stb_getopt_free(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**opts)</highlight></codeline>
<codeline lineno="6026"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6027"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="6028"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<sp/>o2<sp/>=<sp/>opts;</highlight></codeline>
<codeline lineno="6029"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stb_arr_len(o2);<sp/>++i)</highlight></codeline>
<codeline lineno="6030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(o2[i]);</highlight></codeline>
<codeline lineno="6031"><highlight class="normal"><sp/><sp/><sp/>stb_arr_free(o2);</highlight></codeline>
<codeline lineno="6032"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6033"><highlight class="normal"></highlight></codeline>
<codeline lineno="6034"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**stb_getopt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)</highlight></codeline>
<codeline lineno="6035"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6036"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_getopt_param(argc,<sp/>argv,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6037"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6038"><highlight class="normal"></highlight></codeline>
<codeline lineno="6039"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**stb_getopt_param(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*param)</highlight></codeline>
<codeline lineno="6040"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6041"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<sp/>opts=NULL;</highlight></codeline>
<codeline lineno="6042"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j=1;</highlight></codeline>
<codeline lineno="6043"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=1;<sp/>i<sp/>&lt;<sp/>*argc;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="6044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argv[i][0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argv[j++]<sp/>=<sp/>argv[i];</highlight></codeline>
<codeline lineno="6046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argv[i][1]<sp/>==<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>plain<sp/>-<sp/>==<sp/>don&apos;t<sp/>parse<sp/>further<sp/>options</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="6049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>*argc)</highlight></codeline>
<codeline lineno="6050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argv[j++]<sp/>=<sp/>argv[i++];</highlight></codeline>
<codeline lineno="6051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argv[i][1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="6053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>argument<sp/>through<sp/>including<sp/>initial<sp/>&apos;-&apos;<sp/>for<sp/>clarity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_push(opts,<sp/>stb_p_strdup(argv[i]));</highlight></codeline>
<codeline lineno="6055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="6057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*q<sp/>=<sp/>argv[i];<sp/><sp/></highlight><highlight class="comment">//<sp/>traverse<sp/>options<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=1;<sp/>q[k];<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="6059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="6060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strchr(param,<sp/>q[k]))<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>does<sp/>it<sp/>take<sp/>a<sp/>parameter?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*t<sp/>=<sp/>&amp;q[k+1],<sp/>z<sp/>=<sp/>q[k];</highlight></codeline>
<codeline lineno="6062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len=0;</highlight></codeline>
<codeline lineno="6063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*t<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="6064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>*argc-1)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>takes<sp/>a<sp/>parameter,<sp/>but<sp/>none<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*argc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_getopt_free(opts);</highlight></codeline>
<codeline lineno="6067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="6068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>argv[++i];</highlight></codeline>
<codeline lineno="6070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>+=<sp/>(int)<sp/>strlen(t);</highlight></codeline>
<codeline lineno="6072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>strlen(t);</highlight></codeline>
<codeline lineno="6073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(len+2);</highlight></codeline>
<codeline lineno="6074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="6075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s[0]<sp/>=<sp/>z;</highlight></codeline>
<codeline lineno="6076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_p_strcpy_s(s+1,<sp/>len+2,<sp/>t);</highlight></codeline>
<codeline lineno="6077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(2);</highlight></codeline>
<codeline lineno="6080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="6081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s[0]<sp/>=<sp/>q[k];</highlight></codeline>
<codeline lineno="6082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_push(opts,<sp/>s);</highlight></codeline>
<codeline lineno="6085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6088"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6089"><highlight class="normal"><sp/><sp/><sp/>stb_arr_push(opts,<sp/>NULL);</highlight></codeline>
<codeline lineno="6090"><highlight class="normal"><sp/><sp/><sp/>*argc<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="6091"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opts;</highlight></codeline>
<codeline lineno="6092"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6093"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6094"><highlight class="normal"></highlight></codeline>
<codeline lineno="6095"><highlight class="normal"></highlight></codeline>
<codeline lineno="6097"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6098"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Portable<sp/>directory<sp/>reading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6099"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6100"><highlight class="normal"></highlight></codeline>
<codeline lineno="6101"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**stb_readdir_files<sp/><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir);</highlight></codeline>
<codeline lineno="6102"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**stb_readdir_files_mask(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*wild);</highlight></codeline>
<codeline lineno="6103"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**stb_readdir_subdirs(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir);</highlight></codeline>
<codeline lineno="6104"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**stb_readdir_subdirs_mask(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*wild);</highlight></codeline>
<codeline lineno="6105"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>stb_readdir_free<sp/><sp/><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**files);</highlight></codeline>
<codeline lineno="6106"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**stb_readdir_recursive(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filespec);</highlight></codeline>
<codeline lineno="6107"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_delete_directory_recursive(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir);</highlight></codeline>
<codeline lineno="6108"><highlight class="normal"></highlight></codeline>
<codeline lineno="6109"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6110"><highlight class="normal"></highlight></codeline>
<codeline lineno="6111"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6112"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;io.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6113"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6114"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6115"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dirent.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6116"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6117"><highlight class="normal"></highlight></codeline>
<codeline lineno="6118"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_readdir_free(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**files)</highlight></codeline>
<codeline lineno="6119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6120"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**f2<sp/>=<sp/>files;</highlight></codeline>
<codeline lineno="6121"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="6122"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stb_arr_len(f2);<sp/>++i)</highlight></codeline>
<codeline lineno="6123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(f2[i]);</highlight></codeline>
<codeline lineno="6124"><highlight class="normal"><sp/><sp/><sp/>stb_arr_free(f2);</highlight></codeline>
<codeline lineno="6125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6126"><highlight class="normal"></highlight></codeline>
<codeline lineno="6127"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isdotdirname(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight></codeline>
<codeline lineno="6128"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6129"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="6130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(name[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>?<sp/>!name[2]<sp/>:<sp/>!name[1];</highlight></codeline>
<codeline lineno="6131"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="6132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6133"><highlight class="normal"></highlight></codeline>
<codeline lineno="6134"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_wildmatchi(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*expr,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*candidate);</highlight></codeline>
<codeline lineno="6135"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**readdir_raw(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>return_subdirs,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structmask" kindref="compound">mask</ref>)</highlight></codeline>
<codeline lineno="6136"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6137"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**results<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6138"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[4096],<sp/>with_slash[4096];</highlight></codeline>
<codeline lineno="6139"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="6140"><highlight class="normal"></highlight></codeline>
<codeline lineno="6141"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__wchar<sp/>*ws;</highlight></codeline>
<codeline lineno="6143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_wfinddata_t<sp/>data;</highlight></codeline>
<codeline lineno="6144"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>_WIN64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>intptr_t<sp/>none<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="6146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>intptr_t<sp/>z;</highlight></codeline>
<codeline lineno="6147"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>none<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="6149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>z;</highlight></codeline>
<codeline lineno="6150"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6151"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else<sp/></highlight><highlight class="comment">//<sp/>!WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DIR<sp/>*none<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DIR<sp/>*z;</highlight></codeline>
<codeline lineno="6154"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6155"><highlight class="normal"></highlight></codeline>
<codeline lineno="6156"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>stb_strscpy(<ref refid="classbuffer" kindref="compound">buffer</ref>,dir,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classbuffer" kindref="compound">buffer</ref>));</highlight></codeline>
<codeline lineno="6157"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!n<sp/>||<sp/>n<sp/>&gt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classbuffer" kindref="compound">buffer</ref>))</highlight></codeline>
<codeline lineno="6158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="6159"><highlight class="normal"><sp/><sp/><sp/>stb_fixpath(<ref refid="classbuffer" kindref="compound">buffer</ref>);</highlight></codeline>
<codeline lineno="6160"><highlight class="normal"></highlight></codeline>
<codeline lineno="6161"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>(<ref refid="classbuffer" kindref="compound">buffer</ref>[n-1]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="6162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[n++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6163"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6164"><highlight class="normal"><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[n]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6165"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb_strscpy(with_slash,<ref refid="classbuffer" kindref="compound">buffer</ref>,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(with_slash)))</highlight></codeline>
<codeline lineno="6166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="6167"><highlight class="normal"></highlight></codeline>
<codeline lineno="6168"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb_strscpy(<ref refid="classbuffer" kindref="compound">buffer</ref>+n,</highlight><highlight class="stringliteral">&quot;*.*&quot;</highlight><highlight class="normal">,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classbuffer" kindref="compound">buffer</ref>)-n))</highlight></codeline>
<codeline lineno="6170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="6171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ws<sp/>=<sp/>stb__from_utf8(<ref refid="classbuffer" kindref="compound">buffer</ref>);</highlight></codeline>
<codeline lineno="6172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>_wfindfirst((</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*)ws,<sp/>&amp;data);</highlight></codeline>
<codeline lineno="6173"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>opendir(dir);</highlight></codeline>
<codeline lineno="6175"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6176"><highlight class="normal"></highlight></codeline>
<codeline lineno="6177"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>!=<sp/>none)<sp/>{</highlight></codeline>
<codeline lineno="6178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nonempty<sp/>=<sp/>STB_TRUE;</highlight></codeline>
<codeline lineno="6179"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#ifndef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">dirent<sp/>*data<sp/>=<sp/>readdir(z);</highlight></codeline>
<codeline lineno="6181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nonempty<sp/>=<sp/>(data<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="6182"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6183"><highlight class="normal"></highlight></codeline>
<codeline lineno="6184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nonempty)<sp/>{</highlight></codeline>
<codeline lineno="6185"><highlight class="normal"></highlight></codeline>
<codeline lineno="6186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>is_subdir;</highlight></codeline>
<codeline lineno="6188"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name<sp/>=<sp/>stb__to_utf8((stb__wchar<sp/>*)data.name);</highlight></codeline>
<codeline lineno="6190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="6191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>to<sp/>convert<sp/>&apos;%S&apos;<sp/>to<sp/>%s!\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unable&quot;</highlight><highlight class="normal">,<sp/>data.name,<sp/></highlight><highlight class="stringliteral">&quot;utf8&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_subdir<sp/>=<sp/>!!(data.attrib<sp/>&amp;<sp/>_A_SUBDIR);</highlight></codeline>
<codeline lineno="6195"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name<sp/>=<sp/>data-&gt;d_name;</highlight></codeline>
<codeline lineno="6197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb_strscpy(<ref refid="classbuffer" kindref="compound">buffer</ref>+n,name,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classbuffer" kindref="compound">buffer</ref>)-n))</highlight></codeline>
<codeline lineno="6198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Could<sp/>follow<sp/>DT_LNK,<sp/>but<sp/>would<sp/>need<sp/>to<sp/>check<sp/>for<sp/>recursive<sp/>links.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_subdir<sp/>=<sp/>!!(data-&gt;d_type<sp/>&amp;<sp/>DT_DIR);</highlight></codeline>
<codeline lineno="6201"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6202"><highlight class="normal"></highlight></codeline>
<codeline lineno="6203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_subdir<sp/>==<sp/>return_subdirs)<sp/>{</highlight></codeline>
<codeline lineno="6204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_subdir<sp/>||<sp/>!isdotdirname(name))<sp/>{</highlight></codeline>
<codeline lineno="6205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="structmask" kindref="compound">mask</ref><sp/>||<sp/>stb_wildmatchi(<ref refid="structmask" kindref="compound">mask</ref>,<sp/>name))<sp/>{</highlight></codeline>
<codeline lineno="6206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[4096],*p=<ref refid="classbuffer" kindref="compound">buffer</ref>;</highlight></codeline>
<codeline lineno="6207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>stb_snprintf(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classbuffer" kindref="compound">buffer</ref>),<sp/></highlight><highlight class="stringliteral">&quot;%s%s&quot;</highlight><highlight class="normal">,<sp/>with_slash,<sp/>name)<sp/>&lt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="6208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classbuffer" kindref="compound">buffer</ref>[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="6210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>+2;</highlight></codeline>
<codeline lineno="6211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_push(results,<sp/>stb_p_strdup(p));</highlight></codeline>
<codeline lineno="6212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6216"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(0<sp/>==<sp/>_wfindnext(z,<sp/>&amp;data));</highlight></codeline>
<codeline lineno="6218"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((data<sp/>=<sp/>readdir(z))<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="6220"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6222"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_findclose(z);</highlight></codeline>
<codeline lineno="6224"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>closedir(z);</highlight></codeline>
<codeline lineno="6226"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6227"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6228"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>results;</highlight></codeline>
<codeline lineno="6229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6230"><highlight class="normal"></highlight></codeline>
<codeline lineno="6231"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**stb_readdir_files<sp/><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>readdir_raw(dir,<sp/>0,<sp/>NULL);<sp/>}</highlight></codeline>
<codeline lineno="6232"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**stb_readdir_subdirs(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>readdir_raw(dir,<sp/>1,<sp/>NULL);<sp/>}</highlight></codeline>
<codeline lineno="6233"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**stb_readdir_files_mask(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*wild)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>readdir_raw(dir,<sp/>0,<sp/>wild);<sp/>}</highlight></codeline>
<codeline lineno="6234"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**stb_readdir_subdirs_mask(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*wild)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>readdir_raw(dir,<sp/>1,<sp/>wild);<sp/>}</highlight></codeline>
<codeline lineno="6235"><highlight class="normal"></highlight></codeline>
<codeline lineno="6236"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__rec_max=0x7fffffff;</highlight></codeline>
<codeline lineno="6237"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**stb_readdir_rec(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**sofar,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filespec)</highlight></codeline>
<codeline lineno="6238"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6239"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**files;</highlight></codeline>
<codeline lineno="6240"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<sp/>dirs;</highlight></codeline>
<codeline lineno="6241"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**p;</highlight></codeline>
<codeline lineno="6242"><highlight class="normal"></highlight></codeline>
<codeline lineno="6243"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb_arr_len(sofar)<sp/>&gt;=<sp/>stb__rec_max)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sofar;</highlight></codeline>
<codeline lineno="6244"><highlight class="normal"></highlight></codeline>
<codeline lineno="6245"><highlight class="normal"><sp/><sp/><sp/>files<sp/>=<sp/>stb_readdir_files_mask(dir,<sp/>filespec);</highlight></codeline>
<codeline lineno="6246"><highlight class="normal"><sp/><sp/><sp/>stb_arr_for(p,<sp/>files)<sp/>{</highlight></codeline>
<codeline lineno="6247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_push(sofar,<sp/>stb_p_strdup(*p));</highlight></codeline>
<codeline lineno="6248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb_arr_len(sofar)<sp/>&gt;=<sp/>stb__rec_max)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6249"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6250"><highlight class="normal"><sp/><sp/><sp/>stb_readdir_free(files);</highlight></codeline>
<codeline lineno="6251"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb_arr_len(sofar)<sp/>&gt;=<sp/>stb__rec_max)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sofar;</highlight></codeline>
<codeline lineno="6252"><highlight class="normal"></highlight></codeline>
<codeline lineno="6253"><highlight class="normal"><sp/><sp/><sp/>dirs<sp/>=<sp/>stb_readdir_subdirs(dir);</highlight></codeline>
<codeline lineno="6254"><highlight class="normal"><sp/><sp/><sp/>stb_arr_for(p,<sp/>dirs)</highlight></codeline>
<codeline lineno="6255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sofar<sp/>=<sp/>stb_readdir_rec(sofar,<sp/>*p,<sp/>filespec);</highlight></codeline>
<codeline lineno="6256"><highlight class="normal"><sp/><sp/><sp/>stb_readdir_free(dirs);</highlight></codeline>
<codeline lineno="6257"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sofar;</highlight></codeline>
<codeline lineno="6258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6259"><highlight class="normal"></highlight></codeline>
<codeline lineno="6260"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**stb_readdir_recursive(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filespec)</highlight></codeline>
<codeline lineno="6261"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6262"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_readdir_rec(NULL,<sp/>dir,<sp/>filespec);</highlight></codeline>
<codeline lineno="6263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6264"><highlight class="normal"></highlight></codeline>
<codeline lineno="6265"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_delete_directory_recursive(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir)</highlight></codeline>
<codeline lineno="6266"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6267"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**list<sp/>=<sp/>stb_readdir_subdirs(dir);</highlight></codeline>
<codeline lineno="6268"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="6269"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stb_arr_len(list);<sp/>++i)</highlight></codeline>
<codeline lineno="6270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_delete_directory_recursive(list[i]);</highlight></codeline>
<codeline lineno="6271"><highlight class="normal"><sp/><sp/><sp/>stb_arr_free(list);</highlight></codeline>
<codeline lineno="6272"><highlight class="normal"><sp/><sp/><sp/>list<sp/>=<sp/>stb_readdir_files(dir);</highlight></codeline>
<codeline lineno="6273"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stb_arr_len(list);<sp/>++i)</highlight></codeline>
<codeline lineno="6274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!remove(list[i]))<sp/>{</highlight></codeline>
<codeline lineno="6275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>windows,<sp/>try<sp/>again<sp/>after<sp/>making<sp/>it<sp/>writeable;<sp/>don&apos;t<sp/>ALWAYS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>this<sp/>first<sp/>since<sp/>that<sp/>would<sp/>be<sp/>slow<sp/>in<sp/>the<sp/>normal<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6277"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_chmod(list[i],<sp/>_S_IWRITE);</highlight></codeline>
<codeline lineno="6279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remove(list[i]);</highlight></codeline>
<codeline lineno="6280"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6282"><highlight class="normal"><sp/><sp/><sp/>stb_arr_free(list);</highlight></codeline>
<codeline lineno="6283"><highlight class="normal"><sp/><sp/><sp/>stb__windows(_rmdir,rmdir)(dir);</highlight></codeline>
<codeline lineno="6284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6285"><highlight class="normal"></highlight></codeline>
<codeline lineno="6286"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6287"><highlight class="normal"></highlight></codeline>
<codeline lineno="6289"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6290"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>construct<sp/>trees<sp/>from<sp/>filenames;<sp/>useful<sp/>for<sp/>cmirror<sp/>summaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6291"><highlight class="normal"></highlight></codeline>
<codeline lineno="6292"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstb__dirtree2" kindref="compound">stb_dirtree2</ref><sp/><ref refid="structstb__dirtree2" kindref="compound">stb_dirtree2</ref>;</highlight></codeline>
<codeline lineno="6293"><highlight class="normal"></highlight></codeline>
<codeline lineno="6294" refid="structstb__dirtree2" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstb__dirtree2" kindref="compound">stb_dirtree2</ref></highlight></codeline>
<codeline lineno="6295"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6296"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstb__dirtree2" kindref="compound">stb_dirtree2</ref><sp/>**subdirs;</highlight></codeline>
<codeline lineno="6297"><highlight class="normal"></highlight></codeline>
<codeline lineno="6298"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>convenient<sp/>for<sp/>stb_summarize_tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6299"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_subdir;</highlight></codeline>
<codeline lineno="6300"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>weight;</highlight></codeline>
<codeline lineno="6301"><highlight class="normal"></highlight></codeline>
<codeline lineno="6302"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>actual<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6303"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fullpath;</highlight></codeline>
<codeline lineno="6304"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*relpath;</highlight></codeline>
<codeline lineno="6305"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**files;</highlight></codeline>
<codeline lineno="6306"><highlight class="normal">};</highlight></codeline>
<codeline lineno="6307"><highlight class="normal"></highlight></codeline>
<codeline lineno="6308"><highlight class="normal">STB_EXTERN<sp/><ref refid="structstb__dirtree2" kindref="compound">stb_dirtree2</ref><sp/>*stb_dirtree2_from_files_relative(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**filelist,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count);</highlight></codeline>
<codeline lineno="6309"><highlight class="normal">STB_EXTERN<sp/><ref refid="structstb__dirtree2" kindref="compound">stb_dirtree2</ref><sp/>*stb_dirtree2_from_files(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**filelist,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count);</highlight></codeline>
<codeline lineno="6310"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_dir_is_prefix(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dirlen,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file);</highlight></codeline>
<codeline lineno="6311"><highlight class="normal"></highlight></codeline>
<codeline lineno="6312"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6313"><highlight class="normal"></highlight></codeline>
<codeline lineno="6314"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_dir_is_prefix(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dirlen,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file)</highlight></codeline>
<codeline lineno="6315"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6316"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dirlen<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_TRUE;</highlight></codeline>
<codeline lineno="6317"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb_strnicmp(dir,<sp/>file,<sp/>dirlen))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_FALSE;</highlight></codeline>
<codeline lineno="6318"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file[dirlen]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>||<sp/>file[dirlen]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_TRUE;</highlight></codeline>
<codeline lineno="6319"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_FALSE;</highlight></codeline>
<codeline lineno="6320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6321"><highlight class="normal"></highlight></codeline>
<codeline lineno="6322"><highlight class="normal"><ref refid="structstb__dirtree2" kindref="compound">stb_dirtree2</ref><sp/>*stb_dirtree2_from_files_relative(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**filelist,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count)</highlight></codeline>
<codeline lineno="6323"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6324"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer1[1024];</highlight></codeline>
<codeline lineno="6325"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="6326"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dlen<sp/>=<sp/>(int)<sp/>strlen(src),<sp/>elen;</highlight></codeline>
<codeline lineno="6327"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstb__dirtree2" kindref="compound">stb_dirtree2</ref><sp/>*d;</highlight></codeline>
<codeline lineno="6328"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<sp/>descendents<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6329"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<sp/>files<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6330"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="6331"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!count)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="6332"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>find<sp/>all<sp/>the<sp/>ones<sp/>that<sp/>belong<sp/>here...<sp/>note<sp/>this<sp/>is<sp/>will<sp/>take<sp/>O(NM)<sp/>with<sp/>N<sp/>files<sp/>and<sp/>M<sp/>subdirs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6333"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>count;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="6334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb_dir_is_prefix(src,<sp/>dlen,<sp/>filelist[i]))<sp/>{</highlight></codeline>
<codeline lineno="6335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_push(descendents,<sp/>filelist[i]);</highlight></codeline>
<codeline lineno="6336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6337"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6338"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(descendents<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="6339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="6340"><highlight class="normal"><sp/><sp/><sp/>elen<sp/>=<sp/>dlen;</highlight></codeline>
<codeline lineno="6341"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>a<sp/>leading<sp/>slash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6342"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(elen<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>(descendents[0][0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>||<sp/>descendents[0][0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="6343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++elen;</highlight></codeline>
<codeline lineno="6344"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(elen)</highlight></codeline>
<codeline lineno="6345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++elen;</highlight></codeline>
<codeline lineno="6346"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>extract<sp/>all<sp/>the<sp/>ones<sp/>that<sp/>have<sp/>their<sp/>root<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6347"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stb_arr_len(descendents);)<sp/>{</highlight></codeline>
<codeline lineno="6348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb_strchr2(descendents[i]+elen,<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="6349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_push(files,<sp/>descendents[i]);</highlight></codeline>
<codeline lineno="6350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>descendents[i]<sp/>=<sp/>descendents[stb_arr_len(descendents)-1];</highlight></codeline>
<codeline lineno="6351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_pop(descendents);</highlight></codeline>
<codeline lineno="6352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="6354"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6355"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>create<sp/>a<sp/>record</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6356"><highlight class="normal"><sp/><sp/><sp/>d<sp/>=<sp/>(<ref refid="structstb__dirtree2" kindref="compound">stb_dirtree2</ref><sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*d));</highlight></codeline>
<codeline lineno="6357"><highlight class="normal"><sp/><sp/><sp/>d-&gt;files<sp/>=<sp/>files;</highlight></codeline>
<codeline lineno="6358"><highlight class="normal"><sp/><sp/><sp/>d-&gt;subdirs<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6359"><highlight class="normal"><sp/><sp/><sp/>d-&gt;fullpath<sp/>=<sp/>stb_p_strdup(src);</highlight></codeline>
<codeline lineno="6360"><highlight class="normal"><sp/><sp/><sp/>s<sp/>=<sp/>stb_strrchr2(d-&gt;fullpath,<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6361"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)</highlight></codeline>
<codeline lineno="6362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++s;</highlight></codeline>
<codeline lineno="6363"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>d-&gt;fullpath;</highlight></codeline>
<codeline lineno="6365"><highlight class="normal"><sp/><sp/><sp/>d-&gt;relpath<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="6366"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>create<sp/>the<sp/>children</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6367"><highlight class="normal"><sp/><sp/><sp/>qsort(descendents,<sp/>stb_arr_len(descendents),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*),<sp/>stb_qsort_stricmp(0));</highlight></codeline>
<codeline lineno="6368"><highlight class="normal"><sp/><sp/><sp/>buffer1[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6369"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stb_arr_len(descendents);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="6370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer2[1024];</highlight></codeline>
<codeline lineno="6371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s<sp/>=<sp/>descendents[i]<sp/>+<sp/>elen,<sp/>*t;</highlight></codeline>
<codeline lineno="6372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>stb_strchr2(s,<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(t);</highlight></codeline>
<codeline lineno="6374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_strncpy(buffer2,<sp/>descendents[i],<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>(t-descendents[i]+1));</highlight></codeline>
<codeline lineno="6375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb_stricmp(buffer1,<sp/>buffer2))<sp/>{</highlight></codeline>
<codeline lineno="6376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structstb__dirtree2" kindref="compound">stb_dirtree2</ref><sp/>*t<sp/>=<sp/>stb_dirtree2_from_files_relative(buffer2,<sp/>descendents,<sp/>stb_arr_len(descendents));</highlight></codeline>
<codeline lineno="6377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(t<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="6378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_p_strcpy_s(buffer1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer1),<sp/>buffer2);</highlight></codeline>
<codeline lineno="6379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_push(d-&gt;subdirs,<sp/>t);</highlight></codeline>
<codeline lineno="6380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6381"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6382"><highlight class="normal"><sp/><sp/><sp/>d-&gt;num_subdir<sp/>=<sp/>stb_arr_len(d-&gt;subdirs);</highlight></codeline>
<codeline lineno="6383"><highlight class="normal"><sp/><sp/><sp/>d-&gt;weight<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6384"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d;</highlight></codeline>
<codeline lineno="6385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6386"><highlight class="normal"></highlight></codeline>
<codeline lineno="6387"><highlight class="normal"><ref refid="structstb__dirtree2" kindref="compound">stb_dirtree2</ref><sp/>*stb_dirtree2_from_files(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**filelist,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count)</highlight></codeline>
<codeline lineno="6388"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6389"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_dirtree2_from_files_relative((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>filelist,<sp/>count);</highlight></codeline>
<codeline lineno="6390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6391"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6392"><highlight class="normal"></highlight></codeline>
<codeline lineno="6394"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6395"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Checksums:<sp/>CRC-32,<sp/>ADLER32,<sp/>SHA-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6396"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6397"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>CRC-32<sp/>and<sp/>ADLER32<sp/>allow<sp/>streaming<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6398"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>SHA-1<sp/>requires<sp/>either<sp/>a<sp/>complete<sp/>buffer,<sp/>max<sp/>size<sp/>2^32<sp/>-<sp/>73</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6399"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/>it<sp/>can<sp/>checksum<sp/>directly<sp/>from<sp/>a<sp/>file,<sp/>max<sp/>2^61</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6400"><highlight class="normal"></highlight></codeline>
<codeline lineno="6401"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_ADLER32_SEED<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6402"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_CRC32_SEED<sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>that<sp/>we<sp/>logical<sp/>NOT<sp/>this<sp/>in<sp/>the<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6403"><highlight class="normal"></highlight></codeline>
<codeline lineno="6404"><highlight class="normal">STB_EXTERN<sp/>stb_uint</highlight></codeline>
<codeline lineno="6405"><highlight class="normal"><sp/><sp/>stb_adler32(stb_uint<sp/>adler32,<sp/>stb_uchar<sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>stb_uint<sp/>buflen);</highlight></codeline>
<codeline lineno="6406"><highlight class="normal">STB_EXTERN<sp/>stb_uint</highlight></codeline>
<codeline lineno="6407"><highlight class="normal"><sp/><sp/>stb_crc32_block(stb_uint<sp/>crc32,<sp/>stb_uchar<sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>stb_uint<sp/>len);</highlight></codeline>
<codeline lineno="6408"><highlight class="normal">STB_EXTERN<sp/>stb_uint<sp/>stb_crc32(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>stb_uint<sp/>len);</highlight></codeline>
<codeline lineno="6409"><highlight class="normal"></highlight></codeline>
<codeline lineno="6410"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_sha1(</highlight></codeline>
<codeline lineno="6411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structoutput" kindref="compound">output</ref>[20],<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="6412"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_sha1_file(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structoutput" kindref="compound">output</ref>[20],<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file);</highlight></codeline>
<codeline lineno="6413"><highlight class="normal"></highlight></codeline>
<codeline lineno="6414"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_sha1_readable(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>display[27],<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sha[20]);</highlight></codeline>
<codeline lineno="6415"><highlight class="normal"></highlight></codeline>
<codeline lineno="6416"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6417"><highlight class="normal">stb_uint<sp/>stb_crc32_block(stb_uint<sp/>crc,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>stb_uint<sp/>len)</highlight></codeline>
<codeline lineno="6418"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6419"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb_uint<sp/>crc_table[256];</highlight></codeline>
<codeline lineno="6420"><highlight class="normal"><sp/><sp/><sp/>stb_uint<sp/>i,j,s;</highlight></codeline>
<codeline lineno="6421"><highlight class="normal"><sp/><sp/><sp/>crc<sp/>=<sp/>~crc;</highlight></codeline>
<codeline lineno="6422"><highlight class="normal"></highlight></codeline>
<codeline lineno="6423"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(crc_table[1]<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="6424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i<sp/>&lt;<sp/>256;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="6425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(s=i,<sp/>j=0;<sp/>j<sp/>&lt;<sp/>8;<sp/>++j)</highlight></codeline>
<codeline lineno="6426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>(s<sp/>&gt;&gt;<sp/>1)<sp/>^<sp/>(s<sp/>&amp;<sp/>1<sp/>?<sp/>0xedb88320<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="6427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crc_table[i]<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="6428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6429"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>len;<sp/>++i)</highlight></codeline>
<codeline lineno="6430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>crc<sp/>=<sp/>(crc<sp/>&gt;&gt;<sp/>8)<sp/>^<sp/>crc_table[<ref refid="classbuffer" kindref="compound">buffer</ref>[i]<sp/>^<sp/>(crc<sp/>&amp;<sp/>0xff)];</highlight></codeline>
<codeline lineno="6431"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>~crc;</highlight></codeline>
<codeline lineno="6432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6433"><highlight class="normal"></highlight></codeline>
<codeline lineno="6434"><highlight class="normal">stb_uint<sp/>stb_crc32(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>stb_uint<sp/>len)</highlight></codeline>
<codeline lineno="6435"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6436"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_crc32_block(0,<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>len);</highlight></codeline>
<codeline lineno="6437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6438"><highlight class="normal"></highlight></codeline>
<codeline lineno="6439"><highlight class="normal">stb_uint<sp/>stb_adler32(stb_uint<sp/>adler32,<sp/>stb_uchar<sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>stb_uint<sp/>buflen)</highlight></codeline>
<codeline lineno="6440"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6441"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ADLER_MOD<sp/>=<sp/>65521;</highlight></codeline>
<codeline lineno="6442"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>s1<sp/>=<sp/>adler32<sp/>&amp;<sp/>0xffff,<sp/>s2<sp/>=<sp/>adler32<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="6443"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>blocklen,<sp/>i;</highlight></codeline>
<codeline lineno="6444"><highlight class="normal"></highlight></codeline>
<codeline lineno="6445"><highlight class="normal"><sp/><sp/><sp/>blocklen<sp/>=<sp/>buflen<sp/>%<sp/>5552;</highlight></codeline>
<codeline lineno="6446"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(buflen)<sp/>{</highlight></codeline>
<codeline lineno="6447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>+<sp/>7<sp/>&lt;<sp/>blocklen;<sp/>i<sp/>+=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="6448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/>+=<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[0],<sp/>s2<sp/>+=<sp/>s1;</highlight></codeline>
<codeline lineno="6449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/>+=<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[1],<sp/>s2<sp/>+=<sp/>s1;</highlight></codeline>
<codeline lineno="6450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/>+=<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[2],<sp/>s2<sp/>+=<sp/>s1;</highlight></codeline>
<codeline lineno="6451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/>+=<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[3],<sp/>s2<sp/>+=<sp/>s1;</highlight></codeline>
<codeline lineno="6452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/>+=<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[4],<sp/>s2<sp/>+=<sp/>s1;</highlight></codeline>
<codeline lineno="6453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/>+=<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[5],<sp/>s2<sp/>+=<sp/>s1;</highlight></codeline>
<codeline lineno="6454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/>+=<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[6],<sp/>s2<sp/>+=<sp/>s1;</highlight></codeline>
<codeline lineno="6455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/>+=<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[7],<sp/>s2<sp/>+=<sp/>s1;</highlight></codeline>
<codeline lineno="6456"><highlight class="normal"></highlight></codeline>
<codeline lineno="6457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref><sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="6458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6459"><highlight class="normal"></highlight></codeline>
<codeline lineno="6460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>i<sp/>&lt;<sp/>blocklen;<sp/>++i)</highlight></codeline>
<codeline lineno="6461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/>+=<sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>++,<sp/>s2<sp/>+=<sp/>s1;</highlight></codeline>
<codeline lineno="6462"><highlight class="normal"></highlight></codeline>
<codeline lineno="6463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/>%=<sp/>ADLER_MOD,<sp/>s2<sp/>%=<sp/>ADLER_MOD;</highlight></codeline>
<codeline lineno="6464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buflen<sp/>-=<sp/>blocklen;</highlight></codeline>
<codeline lineno="6465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>blocklen<sp/>=<sp/>5552;</highlight></codeline>
<codeline lineno="6466"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6467"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(s2<sp/>&lt;&lt;<sp/>16)<sp/>+<sp/>s1;</highlight></codeline>
<codeline lineno="6468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6469"><highlight class="normal"></highlight></codeline>
<codeline lineno="6470"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__sha1(stb_uchar<sp/>*<ref refid="structchunk" kindref="compound">chunk</ref>,<sp/>stb_uint<sp/>h[5])</highlight></codeline>
<codeline lineno="6471"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6472"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="6473"><highlight class="normal"><sp/><sp/><sp/>stb_uint<sp/>a,b,c,d,<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>;</highlight></codeline>
<codeline lineno="6474"><highlight class="normal"><sp/><sp/><sp/>stb_uint<sp/>w[80];</highlight></codeline>
<codeline lineno="6475"><highlight class="normal"></highlight></codeline>
<codeline lineno="6476"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>16;<sp/>++i)</highlight></codeline>
<codeline lineno="6477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w[i]<sp/>=<sp/>stb_big32(&amp;<ref refid="structchunk" kindref="compound">chunk</ref>[i*4]);</highlight></codeline>
<codeline lineno="6478"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=16;<sp/>i<sp/>&lt;<sp/>80;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="6479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_uint<sp/>t;</highlight></codeline>
<codeline lineno="6480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>w[i-3]<sp/>^<sp/>w[i-8]<sp/>^<sp/>w[i-14]<sp/>^<sp/>w[i-16];</highlight></codeline>
<codeline lineno="6481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w[i]<sp/>=<sp/>(t<sp/>+<sp/>t)<sp/>|<sp/>(t<sp/>&gt;&gt;<sp/>31);</highlight></codeline>
<codeline lineno="6482"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6483"><highlight class="normal"></highlight></codeline>
<codeline lineno="6484"><highlight class="normal"><sp/><sp/><sp/>a<sp/>=<sp/>h[0];</highlight></codeline>
<codeline lineno="6485"><highlight class="normal"><sp/><sp/><sp/>b<sp/>=<sp/>h[1];</highlight></codeline>
<codeline lineno="6486"><highlight class="normal"><sp/><sp/><sp/>c<sp/>=<sp/>h[2];</highlight></codeline>
<codeline lineno="6487"><highlight class="normal"><sp/><sp/><sp/>d<sp/>=<sp/>h[3];</highlight></codeline>
<codeline lineno="6488"><highlight class="normal"><sp/><sp/><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref><sp/>=<sp/>h[4];</highlight></codeline>
<codeline lineno="6489"><highlight class="normal"></highlight></codeline>
<codeline lineno="6490"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>STB__SHA1(k,f)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6491"><highlight class="preprocessor"><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6492"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>stb_uint<sp/>temp<sp/>=<sp/>(a<sp/>&lt;&lt;<sp/>5)<sp/>+<sp/>(a<sp/>&gt;&gt;<sp/>27)<sp/>+<sp/>(f)<sp/>+<sp/>e<sp/>+<sp/>(k)<sp/>+<sp/>w[i];<sp/><sp/>\</highlight></codeline>
<codeline lineno="6493"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/>d;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6494"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>c;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6495"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>(b<sp/>&lt;&lt;<sp/>30)<sp/>+<sp/>(b<sp/>&gt;&gt;<sp/>2);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6496"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>a;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6497"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>temp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6498"><highlight class="preprocessor"><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6499"><highlight class="normal"></highlight></codeline>
<codeline lineno="6500"><highlight class="normal"><sp/><sp/><sp/>i=0;</highlight></codeline>
<codeline lineno="6501"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>i<sp/>&lt;<sp/>20;<sp/>++i)<sp/>STB__SHA1(0x5a827999,<sp/>d<sp/>^<sp/>(b<sp/>&amp;<sp/>(c<sp/>^<sp/>d))<sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="6502"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>i<sp/>&lt;<sp/>40;<sp/>++i)<sp/>STB__SHA1(0x6ed9eba1,<sp/>b<sp/>^<sp/>c<sp/>^<sp/>d<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="6503"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>i<sp/>&lt;<sp/>60;<sp/>++i)<sp/>STB__SHA1(0x8f1bbcdc,<sp/>(b<sp/>&amp;<sp/>c)<sp/>+<sp/>(d<sp/>&amp;<sp/>(b<sp/>^<sp/>c))<sp/>);</highlight></codeline>
<codeline lineno="6504"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>i<sp/>&lt;<sp/>80;<sp/>++i)<sp/>STB__SHA1(0xca62c1d6,<sp/>b<sp/>^<sp/>c<sp/>^<sp/>d<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="6505"><highlight class="normal"></highlight></codeline>
<codeline lineno="6506"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#undef<sp/>STB__SHA1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6507"><highlight class="normal"></highlight></codeline>
<codeline lineno="6508"><highlight class="normal"><sp/><sp/><sp/>h[0]<sp/>+=<sp/>a;</highlight></codeline>
<codeline lineno="6509"><highlight class="normal"><sp/><sp/><sp/>h[1]<sp/>+=<sp/>b;</highlight></codeline>
<codeline lineno="6510"><highlight class="normal"><sp/><sp/><sp/>h[2]<sp/>+=<sp/>c;</highlight></codeline>
<codeline lineno="6511"><highlight class="normal"><sp/><sp/><sp/>h[3]<sp/>+=<sp/>d;</highlight></codeline>
<codeline lineno="6512"><highlight class="normal"><sp/><sp/><sp/>h[4]<sp/>+=<sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>;</highlight></codeline>
<codeline lineno="6513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6514"><highlight class="normal"></highlight></codeline>
<codeline lineno="6515"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_sha1(stb_uchar<sp/><ref refid="structoutput" kindref="compound">output</ref>[20],<sp/>stb_uchar<sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>stb_uint<sp/>len)</highlight></codeline>
<codeline lineno="6516"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6517"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>final_block[128];</highlight></codeline>
<codeline lineno="6518"><highlight class="normal"><sp/><sp/><sp/>stb_uint<sp/>end_start,<sp/>final_len,<sp/>j;</highlight></codeline>
<codeline lineno="6519"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="6520"><highlight class="normal"></highlight></codeline>
<codeline lineno="6521"><highlight class="normal"><sp/><sp/><sp/>stb_uint<sp/>h[5];</highlight></codeline>
<codeline lineno="6522"><highlight class="normal"></highlight></codeline>
<codeline lineno="6523"><highlight class="normal"><sp/><sp/><sp/>h[0]<sp/>=<sp/>0x67452301;</highlight></codeline>
<codeline lineno="6524"><highlight class="normal"><sp/><sp/><sp/>h[1]<sp/>=<sp/>0xefcdab89;</highlight></codeline>
<codeline lineno="6525"><highlight class="normal"><sp/><sp/><sp/>h[2]<sp/>=<sp/>0x98badcfe;</highlight></codeline>
<codeline lineno="6526"><highlight class="normal"><sp/><sp/><sp/>h[3]<sp/>=<sp/>0x10325476;</highlight></codeline>
<codeline lineno="6527"><highlight class="normal"><sp/><sp/><sp/>h[4]<sp/>=<sp/>0xc3d2e1f0;</highlight></codeline>
<codeline lineno="6528"><highlight class="normal"></highlight></codeline>
<codeline lineno="6529"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>need<sp/>to<sp/>write<sp/>padding<sp/>to<sp/>the<sp/>last<sp/>one<sp/>or<sp/>two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6530"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>blocks,<sp/>so<sp/>build<sp/>those<sp/>first<sp/>into<sp/>&apos;final_block&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6531"><highlight class="normal"></highlight></codeline>
<codeline lineno="6532"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>to<sp/>write<sp/>one<sp/>special<sp/>byte,<sp/>plus<sp/>the<sp/>8-byte<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6533"><highlight class="normal"></highlight></codeline>
<codeline lineno="6534"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>block<sp/>where<sp/>the<sp/>data<sp/>runs<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6535"><highlight class="normal"><sp/><sp/><sp/>end_start<sp/>=<sp/>len<sp/>&amp;<sp/>~63;</highlight></codeline>
<codeline lineno="6536"><highlight class="normal"></highlight></codeline>
<codeline lineno="6537"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>earliest<sp/>we<sp/>can<sp/>encode<sp/>the<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6538"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((len+9)<sp/>&amp;<sp/>~63)<sp/>==<sp/>end_start)<sp/>{</highlight></codeline>
<codeline lineno="6539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>all<sp/>fits<sp/>in<sp/>one<sp/>block,<sp/>so<sp/>fill<sp/>a<sp/>second-to-last<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end_start<sp/>-=<sp/>64;</highlight></codeline>
<codeline lineno="6541"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6542"><highlight class="normal"></highlight></codeline>
<codeline lineno="6543"><highlight class="normal"><sp/><sp/><sp/>final_len<sp/>=<sp/>end_start<sp/>+<sp/>128;</highlight></codeline>
<codeline lineno="6544"><highlight class="normal"></highlight></codeline>
<codeline lineno="6545"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>we<sp/>need<sp/>to<sp/>copy<sp/>the<sp/>data<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6546"><highlight class="normal"><sp/><sp/><sp/>assert(end_start<sp/>+<sp/>128<sp/>&gt;=<sp/>len+9);</highlight></codeline>
<codeline lineno="6547"><highlight class="normal"><sp/><sp/><sp/>assert(end_start<sp/>&lt;<sp/>len<sp/>||<sp/>len<sp/>&lt;<sp/>64-9);</highlight></codeline>
<codeline lineno="6548"><highlight class="normal"></highlight></codeline>
<codeline lineno="6549"><highlight class="normal"><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6550"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end_start<sp/>&gt;<sp/>len)</highlight></codeline>
<codeline lineno="6551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>(stb_uint)<sp/>-<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>end_start;</highlight></codeline>
<codeline lineno="6552"><highlight class="normal"></highlight></codeline>
<codeline lineno="6553"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>end_start<sp/>+<sp/>j<sp/>&lt;<sp/>len;<sp/>++j)</highlight></codeline>
<codeline lineno="6554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>final_block[j]<sp/>=<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[end_start<sp/>+<sp/>j];</highlight></codeline>
<codeline lineno="6555"><highlight class="normal"><sp/><sp/><sp/>final_block[j++]<sp/>=<sp/>0x80;</highlight></codeline>
<codeline lineno="6556"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>128-5)<sp/></highlight><highlight class="comment">//<sp/>5<sp/>byte<sp/>length,<sp/>so<sp/>write<sp/>4<sp/>extra<sp/>padding<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>final_block[j++]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6558"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>big-endian<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6559"><highlight class="normal"><sp/><sp/><sp/>final_block[j++]<sp/>=<sp/>len<sp/>&gt;&gt;<sp/>29;</highlight></codeline>
<codeline lineno="6560"><highlight class="normal"><sp/><sp/><sp/>final_block[j++]<sp/>=<sp/>len<sp/>&gt;&gt;<sp/>21;</highlight></codeline>
<codeline lineno="6561"><highlight class="normal"><sp/><sp/><sp/>final_block[j++]<sp/>=<sp/>len<sp/>&gt;&gt;<sp/>13;</highlight></codeline>
<codeline lineno="6562"><highlight class="normal"><sp/><sp/><sp/>final_block[j++]<sp/>=<sp/>len<sp/>&gt;&gt;<sp/><sp/>5;</highlight></codeline>
<codeline lineno="6563"><highlight class="normal"><sp/><sp/><sp/>final_block[j++]<sp/>=<sp/>len<sp/>&lt;&lt;<sp/><sp/>3;</highlight></codeline>
<codeline lineno="6564"><highlight class="normal"><sp/><sp/><sp/>assert(j<sp/>==<sp/>128<sp/>&amp;&amp;<sp/>end_start<sp/>+<sp/>j<sp/>==<sp/>final_len);</highlight></codeline>
<codeline lineno="6565"><highlight class="normal"></highlight></codeline>
<codeline lineno="6566"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>final_len;<sp/>j<sp/>+=<sp/>64)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>512-bit<sp/>chunks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j+64<sp/>&gt;=<sp/>end_start+64)</highlight></codeline>
<codeline lineno="6568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__sha1(&amp;final_block[j<sp/>-<sp/>end_start],<sp/>h);</highlight></codeline>
<codeline lineno="6569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__sha1(&amp;<ref refid="classbuffer" kindref="compound">buffer</ref>[j],<sp/>h);</highlight></codeline>
<codeline lineno="6571"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6572"><highlight class="normal"></highlight></codeline>
<codeline lineno="6573"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>5;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="6574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structoutput" kindref="compound">output</ref>[i*4<sp/>+<sp/>0]<sp/>=<sp/>h[i]<sp/>&gt;&gt;<sp/>24;</highlight></codeline>
<codeline lineno="6575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structoutput" kindref="compound">output</ref>[i*4<sp/>+<sp/>1]<sp/>=<sp/>h[i]<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="6576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structoutput" kindref="compound">output</ref>[i*4<sp/>+<sp/>2]<sp/>=<sp/>h[i]<sp/>&gt;&gt;<sp/><sp/>8;</highlight></codeline>
<codeline lineno="6577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structoutput" kindref="compound">output</ref>[i*4<sp/>+<sp/>3]<sp/>=<sp/>h[i]<sp/>&gt;&gt;<sp/><sp/>0;</highlight></codeline>
<codeline lineno="6578"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6580"><highlight class="normal"></highlight></codeline>
<codeline lineno="6581"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6582"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_sha1_file(stb_uchar<sp/><ref refid="structoutput" kindref="compound">output</ref>[20],<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file)</highlight></codeline>
<codeline lineno="6583"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6584"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="6585"><highlight class="normal"><sp/><sp/><sp/>stb_uint64<sp/>length=0;</highlight></codeline>
<codeline lineno="6586"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[128];</highlight></codeline>
<codeline lineno="6587"><highlight class="normal"></highlight></codeline>
<codeline lineno="6588"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*f<sp/>=<sp/>stb__fopen(file,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6589"><highlight class="normal"><sp/><sp/><sp/>stb_uint<sp/>h[5];</highlight></codeline>
<codeline lineno="6590"><highlight class="normal"></highlight></codeline>
<codeline lineno="6591"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">//<sp/>file<sp/>not<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6592"><highlight class="normal"></highlight></codeline>
<codeline lineno="6593"><highlight class="normal"><sp/><sp/><sp/>h[0]<sp/>=<sp/>0x67452301;</highlight></codeline>
<codeline lineno="6594"><highlight class="normal"><sp/><sp/><sp/>h[1]<sp/>=<sp/>0xefcdab89;</highlight></codeline>
<codeline lineno="6595"><highlight class="normal"><sp/><sp/><sp/>h[2]<sp/>=<sp/>0x98badcfe;</highlight></codeline>
<codeline lineno="6596"><highlight class="normal"><sp/><sp/><sp/>h[3]<sp/>=<sp/>0x10325476;</highlight></codeline>
<codeline lineno="6597"><highlight class="normal"><sp/><sp/><sp/>h[4]<sp/>=<sp/>0xc3d2e1f0;</highlight></codeline>
<codeline lineno="6598"><highlight class="normal"></highlight></codeline>
<codeline lineno="6599"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)<sp/>{</highlight></codeline>
<codeline lineno="6600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>fread(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>1,<sp/>64,<sp/>f);</highlight></codeline>
<codeline lineno="6601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>64)<sp/>{</highlight></codeline>
<codeline lineno="6602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__sha1(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>h);</highlight></codeline>
<codeline lineno="6603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="6604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>block<sp/>=<sp/>64;</highlight></codeline>
<codeline lineno="6606"><highlight class="normal"></highlight></codeline>
<codeline lineno="6607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="6608"><highlight class="normal"></highlight></codeline>
<codeline lineno="6609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[n++]<sp/>=<sp/>0x80;</highlight></codeline>
<codeline lineno="6610"><highlight class="normal"></highlight></codeline>
<codeline lineno="6611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>there<sp/>isn&apos;t<sp/>enough<sp/>room<sp/>for<sp/>the<sp/>length,<sp/>double<sp/>the<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>+<sp/>8<sp/>&gt;<sp/>64)</highlight></codeline>
<codeline lineno="6613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>=<sp/>128;</highlight></codeline>
<codeline lineno="6614"><highlight class="normal"></highlight></codeline>
<codeline lineno="6615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pad<sp/>to<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(<ref refid="classbuffer" kindref="compound">buffer</ref>+n,<sp/>0,<sp/>block-8-n);</highlight></codeline>
<codeline lineno="6617"><highlight class="normal"></highlight></codeline>
<codeline lineno="6618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>block<sp/>-<sp/>8;</highlight></codeline>
<codeline lineno="6619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[i++]<sp/>=<sp/>(stb_uchar)<sp/>(length<sp/>&gt;&gt;<sp/>53);</highlight></codeline>
<codeline lineno="6620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[i++]<sp/>=<sp/>(stb_uchar)<sp/>(length<sp/>&gt;&gt;<sp/>45);</highlight></codeline>
<codeline lineno="6621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[i++]<sp/>=<sp/>(stb_uchar)<sp/>(length<sp/>&gt;&gt;<sp/>37);</highlight></codeline>
<codeline lineno="6622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[i++]<sp/>=<sp/>(stb_uchar)<sp/>(length<sp/>&gt;&gt;<sp/>29);</highlight></codeline>
<codeline lineno="6623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[i++]<sp/>=<sp/>(stb_uchar)<sp/>(length<sp/>&gt;&gt;<sp/>21);</highlight></codeline>
<codeline lineno="6624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[i++]<sp/>=<sp/>(stb_uchar)<sp/>(length<sp/>&gt;&gt;<sp/>13);</highlight></codeline>
<codeline lineno="6625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[i++]<sp/>=<sp/>(stb_uchar)<sp/>(length<sp/>&gt;&gt;<sp/><sp/>5);</highlight></codeline>
<codeline lineno="6626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[i++]<sp/>=<sp/>(stb_uchar)<sp/>(length<sp/>&lt;&lt;<sp/><sp/>3);</highlight></codeline>
<codeline lineno="6627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(i<sp/>==<sp/>block);</highlight></codeline>
<codeline lineno="6628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__sha1(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>h);</highlight></codeline>
<codeline lineno="6629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(block<sp/>==<sp/>128)</highlight></codeline>
<codeline lineno="6630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__sha1(<ref refid="classbuffer" kindref="compound">buffer</ref>+64,<sp/>h);</highlight></codeline>
<codeline lineno="6631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(block<sp/>==<sp/>64);</highlight></codeline>
<codeline lineno="6633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6635"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6636"><highlight class="normal"><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="6637"><highlight class="normal"></highlight></codeline>
<codeline lineno="6638"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>5;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="6639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structoutput" kindref="compound">output</ref>[i*4<sp/>+<sp/>0]<sp/>=<sp/>h[i]<sp/>&gt;&gt;<sp/>24;</highlight></codeline>
<codeline lineno="6640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structoutput" kindref="compound">output</ref>[i*4<sp/>+<sp/>1]<sp/>=<sp/>h[i]<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="6641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structoutput" kindref="compound">output</ref>[i*4<sp/>+<sp/>2]<sp/>=<sp/>h[i]<sp/>&gt;&gt;<sp/><sp/>8;</highlight></codeline>
<codeline lineno="6642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structoutput" kindref="compound">output</ref>[i*4<sp/>+<sp/>3]<sp/>=<sp/>h[i]<sp/>&gt;&gt;<sp/><sp/>0;</highlight></codeline>
<codeline lineno="6643"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6644"><highlight class="normal"></highlight></codeline>
<codeline lineno="6645"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="6646"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6647"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6648"><highlight class="normal"></highlight></codeline>
<codeline lineno="6649"><highlight class="normal"></highlight><highlight class="comment">//<sp/>client<sp/>can<sp/>truncate<sp/>this<sp/>wherever<sp/>they<sp/>like</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6650"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_sha1_readable(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>display[27],<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sha[20])</highlight></codeline>
<codeline lineno="6651"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6652"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>encoding[65]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;0123456789abcdefghijklmnopqrstuv&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;wxyzABCDEFGHIJKLMNOPQRSTUVWXYZ%$&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6654"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bits<sp/>=<sp/>0,<sp/>acc=0;</highlight></codeline>
<codeline lineno="6655"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0,o=0;</highlight></codeline>
<codeline lineno="6656"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(o<sp/>&lt;<sp/>26)<sp/>{</highlight></codeline>
<codeline lineno="6657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="6658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>expand<sp/>the<sp/>accumulator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_bits<sp/>&lt;<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="6660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(i<sp/>!=<sp/>20);</highlight></codeline>
<codeline lineno="6661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acc<sp/>+=<sp/>sha[i++]<sp/>&lt;&lt;<sp/>num_bits;</highlight></codeline>
<codeline lineno="6662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_bits<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="6663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>acc<sp/>&amp;<sp/>((1<sp/>&lt;&lt;<sp/>6)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="6665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>display[o++]<sp/>=<sp/>encoding[v];</highlight></codeline>
<codeline lineno="6666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acc<sp/>&gt;&gt;=<sp/>6;</highlight></codeline>
<codeline lineno="6667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num_bits<sp/>-=<sp/>6;</highlight></codeline>
<codeline lineno="6668"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6669"><highlight class="normal"><sp/><sp/><sp/>assert(num_bits<sp/>==<sp/>20*8<sp/>-<sp/>26*6);</highlight></codeline>
<codeline lineno="6670"><highlight class="normal"><sp/><sp/><sp/>display[o++]<sp/>=<sp/>encoding[acc];</highlight></codeline>
<codeline lineno="6671"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6672"><highlight class="normal"></highlight></codeline>
<codeline lineno="6673"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6674"><highlight class="normal"></highlight></codeline>
<codeline lineno="6676"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6677"><highlight class="normal"></highlight><highlight class="comment">//<sp/>simplified<sp/>WINDOWS<sp/>registry<sp/>interface...<sp/>hopefully</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6678"><highlight class="normal"></highlight><highlight class="comment">//<sp/>we&apos;ll<sp/>never<sp/>actually<sp/>use<sp/>this?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6679"><highlight class="normal"></highlight></codeline>
<codeline lineno="6680"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6681"><highlight class="normal"></highlight></codeline>
<codeline lineno="6682"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>stb_reg_open(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mode,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*where);<sp/></highlight><highlight class="comment">//<sp/>mode:<sp/>&quot;rHKLM&quot;<sp/>or<sp/>&quot;rHKCU&quot;<sp/>or<sp/>&quot;w..&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6683"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>stb_reg_close(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*reg);</highlight></codeline>
<codeline lineno="6684"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>stb_reg_read(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*zreg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="6685"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>stb_reg_read_string(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*zreg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="6686"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>stb_reg_write(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*zreg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="6687"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>stb_reg_write_string(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*zreg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="6688"><highlight class="normal"></highlight></codeline>
<codeline lineno="6689"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(STB_DEFINE)<sp/>&amp;&amp;<sp/>!defined(STB_NO_REGISTRY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6690"><highlight class="normal"></highlight></codeline>
<codeline lineno="6691"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_HAS_REGISTRY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6692"><highlight class="normal"></highlight></codeline>
<codeline lineno="6693"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_WINDOWS_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6694"><highlight class="normal"></highlight></codeline>
<codeline lineno="6695"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HKEY<sp/>void<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6696"><highlight class="normal"></highlight></codeline>
<codeline lineno="6697"><highlight class="normal">STB_EXTERN<sp/>__declspec(dllimport)<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>__stdcall<sp/>RegCloseKey<sp/>(<sp/>HKEY<sp/>hKey<sp/>);</highlight></codeline>
<codeline lineno="6698"><highlight class="normal">STB_EXTERN<sp/>__declspec(dllimport)<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>__stdcall<sp/>RegCreateKeyExA<sp/>(<sp/>HKEY<sp/>hKey,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>lpSubKey,</highlight></codeline>
<codeline lineno="6699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>Reserved,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>lpClass,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>dwOptions,</highlight></codeline>
<codeline lineno="6700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>samDesired,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*lpSecurityAttributes,<sp/><sp/><sp/><sp/><sp/>HKEY<sp/>*<sp/>phkResult,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>lpdwDisposition<sp/>);</highlight></codeline>
<codeline lineno="6701"><highlight class="normal">STB_EXTERN<sp/>__declspec(dllimport)<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>__stdcall<sp/>RegDeleteKeyA<sp/>(<sp/>HKEY<sp/>hKey,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>lpSubKey<sp/>);</highlight></codeline>
<codeline lineno="6702"><highlight class="normal">STB_EXTERN<sp/>__declspec(dllimport)<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>__stdcall<sp/>RegQueryValueExA<sp/>(<sp/>HKEY<sp/>hKey,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>lpValueName,</highlight></codeline>
<codeline lineno="6703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>lpReserved,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*<sp/>lpType,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>lpData,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*<sp/>lpcbData<sp/>);</highlight></codeline>
<codeline lineno="6704"><highlight class="normal">STB_EXTERN<sp/>__declspec(dllimport)<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>__stdcall<sp/>RegSetValueExA<sp/>(<sp/>HKEY<sp/>hKey,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>lpValueName,</highlight></codeline>
<codeline lineno="6705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>Reserved,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>dwType,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lpData,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>cbData<sp/>);</highlight></codeline>
<codeline lineno="6706"><highlight class="normal">STB_EXTERN<sp/>__declspec(dllimport)<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>__stdcall<sp/><sp/>RegOpenKeyExA<sp/>(<sp/>HKEY<sp/>hKey,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>lpSubKey,</highlight></codeline>
<codeline lineno="6707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ulOptions,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>samDesired,<sp/>HKEY<sp/>*<sp/>phkResult<sp/>);</highlight></codeline>
<codeline lineno="6708"><highlight class="normal"></highlight></codeline>
<codeline lineno="6709"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>_WINDOWS_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6710"><highlight class="normal"></highlight></codeline>
<codeline lineno="6711"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__REG_OPTION_NON_VOLATILE<sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6712"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__REG_KEY_ALL_ACCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x000f003f</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6713"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__REG_KEY_READ<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x00020019</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6714"><highlight class="normal"></highlight></codeline>
<codeline lineno="6715"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_M_AMD64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6716"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__HKEY_CURRENT_USER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x80000001ull</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6717"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__HKEY_LOCAL_MACHINE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x80000002ull</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6718"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6719"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__HKEY_CURRENT_USER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x80000001</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6720"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__HKEY_LOCAL_MACHINE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x80000002</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6721"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6722"><highlight class="normal"></highlight></codeline>
<codeline lineno="6723"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb_reg_open(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mode,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*where)</highlight></codeline>
<codeline lineno="6724"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6725"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="6726"><highlight class="normal"><sp/><sp/><sp/>HKEY<sp/>base;</highlight></codeline>
<codeline lineno="6727"><highlight class="normal"><sp/><sp/><sp/>HKEY<sp/>zreg;</highlight></codeline>
<codeline lineno="6728"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb_stricmp(mode+1,<sp/></highlight><highlight class="stringliteral">&quot;cu&quot;</highlight><highlight class="normal">)<sp/>||<sp/>!stb_stricmp(mode+1,<sp/></highlight><highlight class="stringliteral">&quot;hkcu&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="6729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base<sp/>=<sp/>(HKEY)<sp/>STB__HKEY_CURRENT_USER;</highlight></codeline>
<codeline lineno="6730"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb_stricmp(mode+1,<sp/></highlight><highlight class="stringliteral">&quot;lm&quot;</highlight><highlight class="normal">)<sp/>||<sp/>!stb_stricmp(mode+1,<sp/></highlight><highlight class="stringliteral">&quot;hklm&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="6731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base<sp/>=<sp/>(HKEY)<sp/>STB__HKEY_LOCAL_MACHINE;</highlight></codeline>
<codeline lineno="6732"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="6734"><highlight class="normal"></highlight></codeline>
<codeline lineno="6735"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="6736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>RegOpenKeyExA(base,<sp/>where,<sp/>0,<sp/>STB__REG_KEY_READ,<sp/>&amp;zreg);</highlight></codeline>
<codeline lineno="6737"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;w&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="6738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>RegCreateKeyExA(base,<sp/>where,<sp/><sp/>0,<sp/>NULL,<sp/>STB__REG_OPTION_NON_VOLATILE,<sp/>STB__REG_KEY_ALL_ACCESS,<sp/>NULL,<sp/>&amp;zreg,<sp/>NULL);</highlight></codeline>
<codeline lineno="6739"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="6741"><highlight class="normal"></highlight></codeline>
<codeline lineno="6742"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res<sp/>?<sp/>NULL<sp/>:<sp/>zreg;</highlight></codeline>
<codeline lineno="6743"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6744"><highlight class="normal"></highlight></codeline>
<codeline lineno="6745"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_reg_close(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*reg)</highlight></codeline>
<codeline lineno="6746"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6747"><highlight class="normal"><sp/><sp/><sp/>RegCloseKey((HKEY)<sp/>reg);</highlight></codeline>
<codeline lineno="6748"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6749"><highlight class="normal"></highlight></codeline>
<codeline lineno="6750"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__REG_SZ<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6751"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__REG_BINARY<sp/><sp/><sp/><sp/><sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6752"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__REG_DWORD<sp/><sp/><sp/><sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6753"><highlight class="normal"></highlight></codeline>
<codeline lineno="6754"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_reg_read(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*zreg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="6755"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6756"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>type;</highlight></codeline>
<codeline lineno="6757"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>alen<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="6758"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>==<sp/>RegQueryValueExA((HKEY)<sp/>zreg,<sp/>str,<sp/>0,<sp/>&amp;type,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>data,<sp/>&amp;len))</highlight></codeline>
<codeline lineno="6759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>STB__REG_BINARY<sp/>||<sp/>type<sp/>==<sp/>STB__REG_SZ<sp/>||<sp/>type<sp/>==<sp/>STB__REG_DWORD)<sp/>{</highlight></codeline>
<codeline lineno="6760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&lt;<sp/>alen)</highlight></codeline>
<codeline lineno="6761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>data<sp/>+<sp/>len)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="6763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6764"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="6765"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6766"><highlight class="normal"></highlight></codeline>
<codeline lineno="6767"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_reg_write(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*zreg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="6768"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6769"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(zreg)</highlight></codeline>
<codeline lineno="6770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RegSetValueExA((HKEY)<sp/>zreg,<sp/>str,<sp/>0,<sp/>STB__REG_BINARY,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>data,<sp/>len);</highlight></codeline>
<codeline lineno="6771"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6772"><highlight class="normal"></highlight></codeline>
<codeline lineno="6773"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_reg_read_string(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*zreg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="6774"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6775"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb_reg_read(zreg,<sp/>str,<sp/>data,<sp/>len))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="6776"><highlight class="normal"><sp/><sp/><sp/>data[len-1]<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>force<sp/>a<sp/>0<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>string<sp/>no<sp/>matter<sp/>what</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6777"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="6778"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6779"><highlight class="normal"></highlight></codeline>
<codeline lineno="6780"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_reg_write_string(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*zreg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data)</highlight></codeline>
<codeline lineno="6781"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6782"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(zreg)</highlight></codeline>
<codeline lineno="6783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RegSetValueExA((HKEY)<sp/>zreg,<sp/>str,<sp/>0,<sp/>STB__REG_SZ,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/><sp/>data,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>strlen(data)+1);</highlight></codeline>
<codeline lineno="6784"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6785"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6786"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6787"><highlight class="normal"></highlight></codeline>
<codeline lineno="6788"><highlight class="normal"></highlight></codeline>
<codeline lineno="6790"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6791"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>stb_cfg<sp/>-<sp/>This<sp/>is<sp/>like<sp/>the<sp/>registry,<sp/>but<sp/>the<sp/>config<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6792"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>all<sp/>stored<sp/>in<sp/>plain<sp/>old<sp/>files<sp/>where<sp/>we<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6793"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backup<sp/>and<sp/>restore<sp/>them<sp/>easily.<sp/>The<sp/>LOCATION<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6794"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>config<sp/>files<sp/>is<sp/>gotten<sp/>from...<sp/>the<sp/>registry!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6795"><highlight class="normal"></highlight></codeline>
<codeline lineno="6796"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_NO_STB_STRINGS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6797"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stb_cfg_st<sp/>stb_cfg;</highlight></codeline>
<codeline lineno="6798"><highlight class="normal"></highlight></codeline>
<codeline lineno="6799"><highlight class="normal">STB_EXTERN<sp/>stb_cfg<sp/>*<sp/>stb_cfg_open(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*config,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mode);<sp/></highlight><highlight class="comment">//<sp/>mode<sp/>=<sp/>&quot;r&quot;,<sp/>&quot;w&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6800"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_cfg_close(stb_cfg<sp/>*cfg);</highlight></codeline>
<codeline lineno="6801"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_cfg_read(stb_cfg<sp/>*cfg,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="classvalue" kindref="compound">value</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="6802"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_cfg_write(stb_cfg<sp/>*cfg,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="classvalue" kindref="compound">value</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="6803"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_cfg_read_string(stb_cfg<sp/>*cfg,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classvalue" kindref="compound">value</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="6804"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_cfg_write_string(stb_cfg<sp/>*cfg,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="6805"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_cfg_delete(stb_cfg<sp/>*cfg,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="6806"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_cfg_set_directory(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir);</highlight></codeline>
<codeline lineno="6807"><highlight class="normal"></highlight></codeline>
<codeline lineno="6808"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6809"><highlight class="normal"></highlight></codeline>
<codeline lineno="6810"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6811"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6812"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key;</highlight></codeline>
<codeline lineno="6813"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="6814"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_len;</highlight></codeline>
<codeline lineno="6815"><highlight class="normal">}<sp/>stb__cfg_item;</highlight></codeline>
<codeline lineno="6816"><highlight class="normal"></highlight></codeline>
<codeline lineno="6817"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stb_cfg_st</highlight></codeline>
<codeline lineno="6818"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6819"><highlight class="normal"><sp/><sp/><sp/>stb__cfg_item<sp/>*data;</highlight></codeline>
<codeline lineno="6820"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*loaded_file;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>needs<sp/>to<sp/>be<sp/>freed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6821"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*f;<sp/></highlight><highlight class="comment">//<sp/>write<sp/>the<sp/>data<sp/>to<sp/>this<sp/>file<sp/>on<sp/>close</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6822"><highlight class="normal">};</highlight></codeline>
<codeline lineno="6823"><highlight class="normal"></highlight></codeline>
<codeline lineno="6824"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb__cfg_sig<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;sTbCoNfIg!\0\0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6825"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>stb__cfg_dir[512];</highlight></codeline>
<codeline lineno="6826"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_cfg_set_directory(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir)</highlight></codeline>
<codeline lineno="6827"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6828"><highlight class="normal"><sp/><sp/><sp/>stb_p_strcpy_s(stb__cfg_dir,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stb__cfg_dir),<sp/>dir);</highlight></codeline>
<codeline lineno="6829"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6830"><highlight class="normal"></highlight></codeline>
<codeline lineno="6831"><highlight class="normal">STB_EXTERN<sp/>stb_cfg<sp/>*<sp/>stb_cfg_open(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*config,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mode)</highlight></codeline>
<codeline lineno="6832"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6833"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="6834"><highlight class="normal"><sp/><sp/><sp/>stb_cfg<sp/>*z;</highlight></codeline>
<codeline lineno="6835"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>file[512];</highlight></codeline>
<codeline lineno="6836"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>mode[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;w&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="6837"><highlight class="normal"></highlight></codeline>
<codeline lineno="6838"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb__cfg_dir[0])<sp/>{</highlight></codeline>
<codeline lineno="6839"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_p_strcpy_s(stb__cfg_dir,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stb__cfg_dir),<sp/></highlight><highlight class="stringliteral">&quot;c:/stb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6841"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(stb__cfg_dir,<sp/></highlight><highlight class="stringliteral">&quot;~/.stbconfig&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6843"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6844"><highlight class="normal"></highlight></codeline>
<codeline lineno="6845"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>STB_HAS_REGISTRY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*reg<sp/>=<sp/>stb_reg_open(</highlight><highlight class="stringliteral">&quot;rHKLM&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Software\\SilverSpaceship\\stb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reg)<sp/>{</highlight></codeline>
<codeline lineno="6849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_reg_read_string(reg,<sp/></highlight><highlight class="stringliteral">&quot;config_dir&quot;</highlight><highlight class="normal">,<sp/>stb__cfg_dir,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stb__cfg_dir));</highlight></codeline>
<codeline lineno="6850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_reg_close(reg);</highlight></codeline>
<codeline lineno="6851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6853"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6854"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6855"><highlight class="normal"></highlight></codeline>
<codeline lineno="6856"><highlight class="normal"><sp/><sp/><sp/>stb_p_sprintf(file<sp/>stb_p_size(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(file)),<sp/></highlight><highlight class="stringliteral">&quot;%s/%s.cfg&quot;</highlight><highlight class="normal">,<sp/>stb__cfg_dir,<sp/>config);</highlight></codeline>
<codeline lineno="6857"><highlight class="normal"></highlight></codeline>
<codeline lineno="6858"><highlight class="normal"><sp/><sp/><sp/>z<sp/>=<sp/>(stb_cfg<sp/>*)<sp/>stb_malloc(0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*z));</highlight></codeline>
<codeline lineno="6859"><highlight class="normal"><sp/><sp/><sp/>z-&gt;data<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6860"><highlight class="normal"></highlight></codeline>
<codeline lineno="6861"><highlight class="normal"><sp/><sp/><sp/>z-&gt;loaded_file<sp/>=<sp/>stb_filec(file,<sp/>&amp;len);</highlight></codeline>
<codeline lineno="6862"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z-&gt;loaded_file)<sp/>{</highlight></codeline>
<codeline lineno="6863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s<sp/>=<sp/>z-&gt;loaded_file;</highlight></codeline>
<codeline lineno="6864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!memcmp(s,<sp/>stb__cfg_sig,<sp/>12))<sp/>{</highlight></codeline>
<codeline lineno="6865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s<sp/>=<sp/>z-&gt;loaded_file<sp/>+<sp/>12;</highlight></codeline>
<codeline lineno="6866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s<sp/>&lt;<sp/>z-&gt;loaded_file<sp/>+<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="6867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__cfg_item<sp/>a;</highlight></codeline>
<codeline lineno="6868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>*(stb_int16<sp/>*)<sp/>s;</highlight></codeline>
<codeline lineno="6869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.key<sp/>=<sp/>s+2;</highlight></codeline>
<codeline lineno="6870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>s+2<sp/>+<sp/>n;</highlight></codeline>
<codeline lineno="6871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.value_len<sp/>=<sp/>*(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>s;</highlight></codeline>
<codeline lineno="6872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="6873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.value<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="6874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>a.value_len;</highlight></codeline>
<codeline lineno="6875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_push(z-&gt;data,<sp/>a);</highlight></codeline>
<codeline lineno="6876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(s<sp/>==<sp/>z-&gt;loaded_file<sp/>+<sp/>len);</highlight></codeline>
<codeline lineno="6878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6879"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6880"><highlight class="normal"></highlight></codeline>
<codeline lineno="6881"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;w&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="6882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;f<sp/>=<sp/>stb_p_fopen(file,<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6883"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;f<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6885"><highlight class="normal"></highlight></codeline>
<codeline lineno="6886"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z;</highlight></codeline>
<codeline lineno="6887"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6888"><highlight class="normal"></highlight></codeline>
<codeline lineno="6889"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_cfg_close(stb_cfg<sp/>*z)</highlight></codeline>
<codeline lineno="6890"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6891"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z-&gt;f)<sp/>{</highlight></codeline>
<codeline lineno="6892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="6893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>the<sp/>file<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(stb__cfg_sig,<sp/>12,<sp/>1,<sp/>z-&gt;f);</highlight></codeline>
<codeline lineno="6895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stb_arr_len(z-&gt;data);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="6896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_int16<sp/>n<sp/>=<sp/>(stb_int16)<sp/>strlen(z-&gt;data[i].key)+1;</highlight></codeline>
<codeline lineno="6897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(&amp;n,<sp/>2,<sp/>1,<sp/>z-&gt;f);</highlight></codeline>
<codeline lineno="6898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(z-&gt;data[i].key,<sp/>n,<sp/>1,<sp/>z-&gt;f);</highlight></codeline>
<codeline lineno="6899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(&amp;z-&gt;data[i].value_len,<sp/>4,<sp/>1,<sp/>z-&gt;f);</highlight></codeline>
<codeline lineno="6900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(z-&gt;data[i].value,<sp/>z-&gt;data[i].value_len,<sp/>1,<sp/>z-&gt;f);</highlight></codeline>
<codeline lineno="6901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fclose(z-&gt;f);</highlight></codeline>
<codeline lineno="6903"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6904"><highlight class="normal"><sp/><sp/><sp/>stb_arr_free(z-&gt;data);</highlight></codeline>
<codeline lineno="6905"><highlight class="normal"><sp/><sp/><sp/>stb_free(z);</highlight></codeline>
<codeline lineno="6906"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6907"><highlight class="normal"></highlight></codeline>
<codeline lineno="6908"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_cfg_read(stb_cfg<sp/>*z,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="classvalue" kindref="compound">value</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="6909"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6910"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="6911"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stb_arr_len(z-&gt;data);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="6912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb_stricmp(z-&gt;data[i].key,<sp/>key))<sp/>{</highlight></codeline>
<codeline lineno="6913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>stb_min(len,<sp/>z-&gt;data[i].value_len);</highlight></codeline>
<codeline lineno="6914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<ref refid="classvalue" kindref="compound">value</ref>,<sp/>z-&gt;data[i].value,<sp/>n);</highlight></codeline>
<codeline lineno="6915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>len)</highlight></codeline>
<codeline lineno="6916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>+<sp/>n)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="6918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6919"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6920"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="6921"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6922"><highlight class="normal"></highlight></codeline>
<codeline lineno="6923"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_cfg_write(stb_cfg<sp/>*z,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="classvalue" kindref="compound">value</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="6924"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6925"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="6926"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stb_arr_len(z-&gt;data);<sp/>++i)</highlight></codeline>
<codeline lineno="6927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb_stricmp(z-&gt;data[i].key,<sp/>key))</highlight></codeline>
<codeline lineno="6928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6929"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>stb_arr_len(z-&gt;data))<sp/>{</highlight></codeline>
<codeline lineno="6930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__cfg_item<sp/>p;</highlight></codeline>
<codeline lineno="6931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p.key<sp/>=<sp/>stb_strdup(key,<sp/>z);</highlight></codeline>
<codeline lineno="6932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p.value<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="6933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p.value_len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_push(z-&gt;data,<sp/>p);</highlight></codeline>
<codeline lineno="6935"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6936"><highlight class="normal"><sp/><sp/><sp/>z-&gt;data[i].value<sp/>=<sp/>stb_malloc(z,<sp/>len);</highlight></codeline>
<codeline lineno="6937"><highlight class="normal"><sp/><sp/><sp/>z-&gt;data[i].value_len<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="6938"><highlight class="normal"><sp/><sp/><sp/>memcpy(z-&gt;data[i].value,<sp/><ref refid="classvalue" kindref="compound">value</ref>,<sp/>len);</highlight></codeline>
<codeline lineno="6939"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6940"><highlight class="normal"></highlight></codeline>
<codeline lineno="6941"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_cfg_delete(stb_cfg<sp/>*z,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key)</highlight></codeline>
<codeline lineno="6942"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6943"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="6944"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stb_arr_len(z-&gt;data);<sp/>++i)</highlight></codeline>
<codeline lineno="6945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb_stricmp(z-&gt;data[i].key,<sp/>key))<sp/>{</highlight></codeline>
<codeline lineno="6946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_fastdelete(z-&gt;data,<sp/>i);</highlight></codeline>
<codeline lineno="6947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="6948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6949"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="6950"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6951"><highlight class="normal"></highlight></codeline>
<codeline lineno="6952"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_cfg_read_string(stb_cfg<sp/>*z,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classvalue" kindref="compound">value</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="6953"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6954"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb_cfg_read(z,<sp/>key,<sp/><ref refid="classvalue" kindref="compound">value</ref>,<sp/>len))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="6955"><highlight class="normal"><sp/><sp/><sp/><ref refid="classvalue" kindref="compound">value</ref>[len-1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6956"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="6957"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6958"><highlight class="normal"></highlight></codeline>
<codeline lineno="6959"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_cfg_write_string(stb_cfg<sp/>*z,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classvalue" kindref="compound">value</ref>)</highlight></codeline>
<codeline lineno="6960"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6961"><highlight class="normal"><sp/><sp/><sp/>stb_cfg_write(z,<sp/>key,<sp/><ref refid="classvalue" kindref="compound">value</ref>,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>strlen(<ref refid="classvalue" kindref="compound">value</ref>)+1);</highlight></codeline>
<codeline lineno="6962"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6963"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6964"><highlight class="normal"></highlight></codeline>
<codeline lineno="6966"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6967"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>stb_dirtree<sp/><sp/>-<sp/>load<sp/>a<sp/>description<sp/>of<sp/>a<sp/>directory<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6968"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uses<sp/>a<sp/>cache<sp/>and<sp/>stat()s<sp/>the<sp/>directories<sp/>for<sp/>changes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6969"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MUCH<sp/>faster<sp/>on<sp/>NTFS,<sp/>_wrong_<sp/>on<sp/>FAT32,<sp/>so<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6970"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ignore<sp/>the<sp/>db<sp/>on<sp/>FAT32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6971"><highlight class="normal"></highlight></codeline>
<codeline lineno="6972"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6973"><highlight class="normal"></highlight></codeline>
<codeline lineno="6974"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6975"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6976"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/>*<sp/>path;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>full<sp/>path<sp/>from<sp/>passed-in<sp/>root</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6977"><highlight class="normal"><sp/><sp/><sp/>time_t<sp/><sp/><sp/>last_modified;</highlight></codeline>
<codeline lineno="6978"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num_files;</highlight></codeline>
<codeline lineno="6979"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flag;</highlight></codeline>
<codeline lineno="6980"><highlight class="normal">}<sp/>stb_dirtree_dir;</highlight></codeline>
<codeline lineno="6981"><highlight class="normal"></highlight></codeline>
<codeline lineno="6982"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6983"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6984"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>name<sp/>relative<sp/>to<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6985"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>dir;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>index<sp/>into<sp/>dirs[]<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6986"><highlight class="normal"><sp/><sp/><sp/>stb_int64<sp/>size;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>size,<sp/>max<sp/>4GB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6987"><highlight class="normal"><sp/><sp/><sp/>time_t<sp/><sp/><sp/>last_modified;</highlight></codeline>
<codeline lineno="6988"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flag;</highlight></codeline>
<codeline lineno="6989"><highlight class="normal">}<sp/>stb_dirtree_file;</highlight></codeline>
<codeline lineno="6990"><highlight class="normal"></highlight></codeline>
<codeline lineno="6991"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6992"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6993"><highlight class="normal"><sp/><sp/><sp/>stb_dirtree_dir<sp/><sp/>*dirs;</highlight></codeline>
<codeline lineno="6994"><highlight class="normal"><sp/><sp/><sp/>stb_dirtree_file<sp/>*files;</highlight></codeline>
<codeline lineno="6995"><highlight class="normal"></highlight></codeline>
<codeline lineno="6996"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>internal<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6997"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>string_pool;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>used<sp/>to<sp/>free<sp/>data<sp/>en<sp/>masse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6998"><highlight class="normal">}<sp/>stb_dirtree;</highlight></codeline>
<codeline lineno="6999"><highlight class="normal"></highlight></codeline>
<codeline lineno="7000"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_dirtree_free<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>stb_dirtree<sp/>*d<sp/>);</highlight></codeline>
<codeline lineno="7001"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>stb_dirtree<sp/>*stb_dirtree_get<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir);</highlight></codeline>
<codeline lineno="7002"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>stb_dirtree<sp/>*stb_dirtree_get_dir<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cache_dir);</highlight></codeline>
<codeline lineno="7003"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>stb_dirtree<sp/>*stb_dirtree_get_with_file<sp/>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cache_file);</highlight></codeline>
<codeline lineno="7004"><highlight class="normal"></highlight></codeline>
<codeline lineno="7005"><highlight class="normal"></highlight><highlight class="comment">//<sp/>get<sp/>a<sp/>list<sp/>of<sp/>all<sp/>the<sp/>files<sp/>recursively<sp/>underneath<sp/>&apos;dir&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7006"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7007"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cache_file<sp/>is<sp/>used<sp/>to<sp/>store<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>directory<sp/>tree<sp/>to<sp/>speed<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7008"><highlight class="normal"></highlight><highlight class="comment">//<sp/>later<sp/>calls.<sp/>It<sp/>must<sp/>be<sp/>unique<sp/>to<sp/>&apos;dir&apos;<sp/>and<sp/>the<sp/>current<sp/>working</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7009"><highlight class="normal"></highlight><highlight class="comment">//<sp/>directory!<sp/>Otherwise<sp/>who<sp/>knows<sp/>what<sp/>will<sp/>happen<sp/>(a<sp/>good<sp/>solution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7010"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>to<sp/>put<sp/>it<sp/>_in_<sp/>dir,<sp/>but<sp/>this<sp/>API<sp/>doesn&apos;t<sp/>force<sp/>that).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7011"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7012"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Also,<sp/>it<sp/>might<sp/>be<sp/>possible<sp/>to<sp/>break<sp/>this<sp/>if<sp/>you<sp/>have<sp/>two<sp/>different<sp/>processes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7013"><highlight class="normal"></highlight><highlight class="comment">//<sp/>do<sp/>a<sp/>call<sp/>to<sp/>stb_dirtree_get()<sp/>with<sp/>the<sp/>same<sp/>cache<sp/>file<sp/>at<sp/>about<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7014"><highlight class="normal"></highlight><highlight class="comment">//<sp/>time,<sp/>but<sp/>I<sp/>_think_<sp/>it<sp/>might<sp/>just<sp/>work.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7015"><highlight class="normal"></highlight></codeline>
<codeline lineno="7016"><highlight class="normal"></highlight><highlight class="comment">//<sp/>i<sp/>needed<sp/>to<sp/>build<sp/>an<sp/>identical<sp/>data<sp/>structure<sp/>representing<sp/>the<sp/>state<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7017"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>mirrored<sp/>copy<sp/>WITHOUT<sp/>bothering<sp/>to<sp/>rescan<sp/>it<sp/>(i.e.<sp/>we&apos;re<sp/>mirroring<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7018"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>WITHOUT<sp/>scanning<sp/>it,<sp/>e.g.<sp/>it&apos;s<sp/>over<sp/>the<sp/>net),<sp/>so<sp/>this<sp/>requires<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7019"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>all<sp/>of<sp/>the<sp/>innards.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7020"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_dirtree_db_add_dir(stb_dirtree<sp/>*active,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/>time_t<sp/>last);</highlight></codeline>
<codeline lineno="7021"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_dirtree_db_add_file(stb_dirtree<sp/>*active,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dir,<sp/>stb_int64<sp/>size,<sp/>time_t<sp/>last);</highlight></codeline>
<codeline lineno="7022"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_dirtree_db_read(stb_dirtree<sp/>*target,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir);</highlight></codeline>
<codeline lineno="7023"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_dirtree_db_write(stb_dirtree<sp/>*target,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir);</highlight></codeline>
<codeline lineno="7024"><highlight class="normal"></highlight></codeline>
<codeline lineno="7025"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7026"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__dirtree_add_dir(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/>time_t<sp/>last,<sp/>stb_dirtree<sp/>*active)</highlight></codeline>
<codeline lineno="7027"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7028"><highlight class="normal"><sp/><sp/><sp/>stb_dirtree_dir<sp/>d;</highlight></codeline>
<codeline lineno="7029"><highlight class="normal"><sp/><sp/><sp/>d.last_modified<sp/>=<sp/>last;</highlight></codeline>
<codeline lineno="7030"><highlight class="normal"><sp/><sp/><sp/>d.num_files<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7031"><highlight class="normal"><sp/><sp/><sp/>d.path<sp/>=<sp/>stb_strdup(path,<sp/>active-&gt;string_pool);</highlight></codeline>
<codeline lineno="7032"><highlight class="normal"><sp/><sp/><sp/>stb_arr_push(active-&gt;dirs,<sp/>d);</highlight></codeline>
<codeline lineno="7033"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7034"><highlight class="normal"></highlight></codeline>
<codeline lineno="7035"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__dirtree_add_file(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dir,<sp/>stb_int64<sp/>size,<sp/>time_t<sp/>last,<sp/>stb_dirtree<sp/>*active)</highlight></codeline>
<codeline lineno="7036"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7037"><highlight class="normal"><sp/><sp/><sp/>stb_dirtree_file<sp/>f;</highlight></codeline>
<codeline lineno="7038"><highlight class="normal"><sp/><sp/><sp/>f.dir<sp/>=<sp/>dir;</highlight></codeline>
<codeline lineno="7039"><highlight class="normal"><sp/><sp/><sp/>f.size<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="7040"><highlight class="normal"><sp/><sp/><sp/>f.last_modified<sp/>=<sp/>last;</highlight></codeline>
<codeline lineno="7041"><highlight class="normal"><sp/><sp/><sp/>f.name<sp/>=<sp/>stb_strdup(name,<sp/>active-&gt;string_pool);</highlight></codeline>
<codeline lineno="7042"><highlight class="normal"><sp/><sp/><sp/>++active-&gt;dirs[dir].num_files;</highlight></codeline>
<codeline lineno="7043"><highlight class="normal"><sp/><sp/><sp/>stb_arr_push(active-&gt;files,<sp/>f);</highlight></codeline>
<codeline lineno="7044"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7045"><highlight class="normal"></highlight></codeline>
<codeline lineno="7046"><highlight class="normal"></highlight><highlight class="comment">//<sp/>version<sp/>02<sp/>supports<sp/>&gt;<sp/>4GB<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7047"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>stb__signature[12]<sp/>=<sp/>{<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;T&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;D&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;R&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;R&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;E&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="7048"><highlight class="normal"></highlight></codeline>
<codeline lineno="7049"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__dirtree_save_db(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/>stb_dirtree<sp/>*data,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*root)</highlight></codeline>
<codeline lineno="7050"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7051"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>num_dirs_final=0,<sp/>num_files_final;</highlight></codeline>
<codeline lineno="7052"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structinfo" kindref="compound">info</ref><sp/>=<sp/>root<sp/>?<sp/>root<sp/>:<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7053"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*remap;</highlight></codeline>
<codeline lineno="7054"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*f<sp/>=<sp/>stb_p_fopen(filename,<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7055"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7056"><highlight class="normal"></highlight></codeline>
<codeline lineno="7057"><highlight class="normal"><sp/><sp/><sp/>fwrite(stb__signature,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stb__signature),<sp/>1,<sp/>f);</highlight></codeline>
<codeline lineno="7058"><highlight class="normal"><sp/><sp/><sp/>fwrite(<ref refid="structinfo" kindref="compound">info</ref>,<sp/>strlen(<ref refid="structinfo" kindref="compound">info</ref>)+1,<sp/>1,<sp/>f);</highlight></codeline>
<codeline lineno="7059"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>be<sp/>slightly<sp/>tricky<sp/>and<sp/>not<sp/>write<sp/>out<sp/>NULLed<sp/>directories,<sp/>nor<sp/>the<sp/>root</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7060"><highlight class="normal"></highlight></codeline>
<codeline lineno="7061"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>remapping<sp/>table<sp/>of<sp/>all<sp/>dirs<sp/>we&apos;ll<sp/>be<sp/>writing<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7062"><highlight class="normal"><sp/><sp/><sp/>remap<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(remap[0])<sp/>*<sp/>stb_arr_len(data-&gt;dirs));</highlight></codeline>
<codeline lineno="7063"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stb_arr_len(data-&gt;dirs);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data-&gt;dirs[i].path<sp/>==<sp/>NULL<sp/>||<sp/>(root<sp/>&amp;&amp;<sp/>0==stb_stricmp(data-&gt;dirs[i].path,<sp/>root)))<sp/>{</highlight></codeline>
<codeline lineno="7065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remap[i]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="7066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remap[i]<sp/>=<sp/>num_dirs_final++;</highlight></codeline>
<codeline lineno="7068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7069"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7070"><highlight class="normal"></highlight></codeline>
<codeline lineno="7071"><highlight class="normal"><sp/><sp/><sp/>fwrite(&amp;num_dirs_final,<sp/>4,<sp/>1,<sp/>f);</highlight></codeline>
<codeline lineno="7072"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stb_arr_len(data-&gt;dirs);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remap[i]<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="7074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(&amp;data-&gt;dirs[i].last_modified,<sp/>4,<sp/>1,<sp/>f);</highlight></codeline>
<codeline lineno="7075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_fput_string(f,<sp/>data-&gt;dirs[i].path);</highlight></codeline>
<codeline lineno="7076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7077"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7078"><highlight class="normal"></highlight></codeline>
<codeline lineno="7079"><highlight class="normal"><sp/><sp/><sp/>num_files_final<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7080"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stb_arr_len(data-&gt;files);<sp/>++i)</highlight></codeline>
<codeline lineno="7081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remap[data-&gt;files[i].dir]<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>data-&gt;files[i].name)</highlight></codeline>
<codeline lineno="7082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++num_files_final;</highlight></codeline>
<codeline lineno="7083"><highlight class="normal"></highlight></codeline>
<codeline lineno="7084"><highlight class="normal"><sp/><sp/><sp/>fwrite(&amp;num_files_final,<sp/>4,<sp/>1,<sp/>f);</highlight></codeline>
<codeline lineno="7085"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stb_arr_len(data-&gt;files);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remap[data-&gt;files[i].dir]<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>data-&gt;files[i].name)<sp/>{</highlight></codeline>
<codeline lineno="7087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_fput_ranged(f,<sp/>remap[data-&gt;files[i].dir],<sp/>0,<sp/>num_dirs_final);</highlight></codeline>
<codeline lineno="7088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_fput_varlen64(f,<sp/>data-&gt;files[i].size);</highlight></codeline>
<codeline lineno="7089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(&amp;data-&gt;files[i].last_modified,<sp/>4,<sp/>1,<sp/>f);</highlight></codeline>
<codeline lineno="7090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_fput_string(f,<sp/>data-&gt;files[i].name);</highlight></codeline>
<codeline lineno="7091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7092"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7093"><highlight class="normal"></highlight></codeline>
<codeline lineno="7094"><highlight class="normal"><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="7095"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7096"><highlight class="normal"></highlight></codeline>
<codeline lineno="7097"><highlight class="normal"></highlight><highlight class="comment">//<sp/>note:<sp/>stomps<sp/>any<sp/>existing<sp/>data,<sp/>rather<sp/>than<sp/>appending</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7098"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__dirtree_load_db(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/>stb_dirtree<sp/>*data,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir)</highlight></codeline>
<codeline lineno="7099"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7100"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sig[2048];</highlight></codeline>
<codeline lineno="7101"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,n;</highlight></codeline>
<codeline lineno="7102"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*f<sp/>=<sp/>stb_p_fopen(filename,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7103"><highlight class="normal"></highlight></codeline>
<codeline lineno="7104"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7105"><highlight class="normal"></highlight></codeline>
<codeline lineno="7106"><highlight class="normal"><sp/><sp/><sp/>data-&gt;string_pool<sp/>=<sp/>stb_malloc(0,1);</highlight></codeline>
<codeline lineno="7107"><highlight class="normal"></highlight></codeline>
<codeline lineno="7108"><highlight class="normal"><sp/><sp/><sp/>fread(sig,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stb__signature),<sp/>1,<sp/>f);</highlight></codeline>
<codeline lineno="7109"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memcmp(stb__signature,<sp/>sig,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stb__signature)))<sp/>{<sp/>fclose(f);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="7110"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fread(sig,<sp/>strlen(dir)+1,<sp/>1,<sp/>f))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>fclose(f);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="7111"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb_stricmp(sig,dir))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>fclose(f);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="7112"><highlight class="normal"></highlight></codeline>
<codeline lineno="7113"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>can<sp/>just<sp/>read<sp/>them<sp/>straight<sp/>in,<sp/>because<sp/>they&apos;re<sp/>guaranteed<sp/>to<sp/>be<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7114"><highlight class="normal"><sp/><sp/><sp/>fread(&amp;n,<sp/>4,<sp/>1,<sp/>f);</highlight></codeline>
<codeline lineno="7115"><highlight class="normal"><sp/><sp/><sp/>stb_arr_setlen(data-&gt;dirs,<sp/>n);</highlight></codeline>
<codeline lineno="7116"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i<sp/>&lt;<sp/>stb_arr_len(data-&gt;dirs);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fread(&amp;data-&gt;dirs[i].last_modified,<sp/>4,<sp/>1,<sp/>f);</highlight></codeline>
<codeline lineno="7118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;dirs[i].path<sp/>=<sp/>stb_fget_string(f,<sp/>data-&gt;string_pool);</highlight></codeline>
<codeline lineno="7119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data-&gt;dirs[i].path<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bail;</highlight></codeline>
<codeline lineno="7120"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7121"><highlight class="normal"><sp/><sp/><sp/>fread(&amp;n,<sp/>4,<sp/>1,<sp/>f);</highlight></codeline>
<codeline lineno="7122"><highlight class="normal"><sp/><sp/><sp/>stb_arr_setlen(data-&gt;files,<sp/>n);</highlight></codeline>
<codeline lineno="7123"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stb_arr_len(data-&gt;files);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;files[i].dir<sp/><sp/>=<sp/>stb_fget_ranged(f,<sp/>0,<sp/>stb_arr_len(data-&gt;dirs));</highlight></codeline>
<codeline lineno="7125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;files[i].size<sp/>=<sp/>stb_fget_varlen64(f);</highlight></codeline>
<codeline lineno="7126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fread(&amp;data-&gt;files[i].last_modified,<sp/>4,<sp/>1,<sp/>f);</highlight></codeline>
<codeline lineno="7127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;files[i].name<sp/>=<sp/>stb_fget_string(f,<sp/>data-&gt;string_pool);</highlight></codeline>
<codeline lineno="7128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data-&gt;files[i].name<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bail;</highlight></codeline>
<codeline lineno="7129"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7130"><highlight class="normal"></highlight></codeline>
<codeline lineno="7131"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0)<sp/>{</highlight></codeline>
<codeline lineno="7132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bail:</highlight></codeline>
<codeline lineno="7133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_free(data-&gt;dirs);</highlight></codeline>
<codeline lineno="7134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_free(data-&gt;files);</highlight></codeline>
<codeline lineno="7135"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7136"><highlight class="normal"><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="7137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7138"><highlight class="normal"></highlight></codeline>
<codeline lineno="7139"><highlight class="normal">FILE<sp/>*hlog;</highlight></codeline>
<codeline lineno="7140"><highlight class="normal"></highlight></codeline>
<codeline lineno="7141"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__dircount,<sp/>stb__dircount_mask,<sp/>stb__showfile;</highlight></codeline>
<codeline lineno="7142"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__dirtree_scandir(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/>time_t<sp/>last_time,<sp/>stb_dirtree<sp/>*active)</highlight></codeline>
<codeline lineno="7143"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7144"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>dumb<sp/>depth<sp/>first;<sp/>theoretically<sp/>it<sp/>might<sp/>be<sp/>faster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7145"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>fully<sp/>traverse<sp/>each<sp/>directory<sp/>before<sp/>visiting<sp/>its<sp/>children,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7146"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>it&apos;s<sp/>complicated<sp/>and<sp/>didn&apos;t<sp/>seem<sp/>like<sp/>a<sp/>gain<sp/>in<sp/>the<sp/>test<sp/>app</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7147"><highlight class="normal"></highlight></codeline>
<codeline lineno="7148"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="7149"><highlight class="normal"></highlight></codeline>
<codeline lineno="7150"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_wfinddatai64_t<sp/>c_file;</highlight></codeline>
<codeline lineno="7151"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>hFile;</highlight></codeline>
<codeline lineno="7152"><highlight class="normal"><sp/><sp/><sp/>stb__wchar<sp/>full_path[1024];</highlight></codeline>
<codeline lineno="7153"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>has_slash;</highlight></codeline>
<codeline lineno="7154"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__showfile)<sp/>printf(</highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7155"><highlight class="normal"></highlight></codeline>
<codeline lineno="7156"><highlight class="normal"><sp/><sp/><sp/>has_slash<sp/>=<sp/>(path[0]<sp/>&amp;&amp;<sp/>path[strlen(path)-1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7157"><highlight class="normal"></highlight></codeline>
<codeline lineno="7158"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>do<sp/>this<sp/>concatenation<sp/>without<sp/>using<sp/>swprintf<sp/>to<sp/>avoid<sp/>this<sp/>mess:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7159"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(_MSC_VER)<sp/>&amp;&amp;<sp/>_MSC_VER<sp/>&lt;<sp/>1400)<sp/></highlight><highlight class="comment">//<sp/>||<sp/>(defined(__clang__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7160"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>confusingly,<sp/>Windows<sp/>Kits\10<sp/>needs<sp/>to<sp/>go<sp/>down<sp/>this<sp/>path?!?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7161"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>except<sp/>now<sp/>it<sp/>doesn&apos;t,<sp/>I<sp/>don&apos;t<sp/>know<sp/>what<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7162"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_slash)</highlight></codeline>
<codeline lineno="7163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>swprintf(full_path,<sp/>L</highlight><highlight class="stringliteral">&quot;%s*&quot;</highlight><highlight class="normal">,<sp/>stb__from_utf8(path));</highlight></codeline>
<codeline lineno="7164"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>swprintf(full_path,<sp/>L</highlight><highlight class="stringliteral">&quot;%s/*&quot;</highlight><highlight class="normal">,<sp/>stb__from_utf8(path));</highlight></codeline>
<codeline lineno="7166"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7167"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_slash)</highlight></codeline>
<codeline lineno="7168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>swprintf((</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*)<sp/>full_path,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>1024,<sp/>L</highlight><highlight class="stringliteral">&quot;%s*&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*)<sp/>stb__from_utf8(path));</highlight></codeline>
<codeline lineno="7169"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>swprintf((</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*)<sp/>full_path,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>1024,<sp/>L</highlight><highlight class="stringliteral">&quot;%s/*&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*)<sp/>stb__from_utf8(path));</highlight></codeline>
<codeline lineno="7171"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7172"><highlight class="normal"></highlight></codeline>
<codeline lineno="7173"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>possible<sp/>this<sp/>directory<sp/>is<sp/>already<sp/>present:<sp/>that<sp/>means<sp/>it<sp/>was<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7174"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cache,<sp/>but<sp/>its<sp/>parent<sp/>wasn&apos;t...<sp/>in<sp/>that<sp/>case,<sp/>we&apos;re<sp/>done<sp/>with<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7175"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__showfile)<sp/>printf(</highlight><highlight class="stringliteral">&quot;C[%d]&quot;</highlight><highlight class="normal">,<sp/>stb_arr_len(active-&gt;dirs));</highlight></codeline>
<codeline lineno="7176"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/>stb_arr_len(active-&gt;dirs);<sp/>++n)</highlight></codeline>
<codeline lineno="7177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>==<sp/>stb_stricmp(active-&gt;dirs[n].path,<sp/>path))<sp/>{</highlight></codeline>
<codeline lineno="7178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__showfile)<sp/>printf(</highlight><highlight class="stringliteral">&quot;D&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7181"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__showfile)<sp/>printf(</highlight><highlight class="stringliteral">&quot;E&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7182"><highlight class="normal"></highlight></codeline>
<codeline lineno="7183"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise,<sp/>we<sp/>need<sp/>to<sp/>add<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7184"><highlight class="normal"><sp/><sp/><sp/>stb__dirtree_add_dir(path,<sp/>last_time,<sp/>active);</highlight></codeline>
<codeline lineno="7185"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>stb_arr_lastn(active-&gt;dirs);</highlight></codeline>
<codeline lineno="7186"><highlight class="normal"></highlight></codeline>
<codeline lineno="7187"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__showfile)<sp/>printf(</highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7188"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(hFile<sp/>=<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>_wfindfirsti64(<sp/>(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*)<sp/>full_path,<sp/>&amp;c_file<sp/>))<sp/>!=<sp/>-1L<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="7189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__showfile)<sp/>printf(</highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c_file.attrib<sp/>&amp;<sp/>_A_SUBDIR)<sp/>{</highlight></codeline>
<codeline lineno="7192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ignore<sp/>subdirectories<sp/>starting<sp/>with<sp/>&apos;.&apos;,<sp/>e.g.<sp/>&quot;.&quot;<sp/>and<sp/>&quot;..&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c_file.name[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="7194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*new_path<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>full_path;</highlight></codeline>
<codeline lineno="7195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*temp<sp/>=<sp/>stb__to_utf8((stb__wchar<sp/>*)<sp/>c_file.name);</highlight></codeline>
<codeline lineno="7196"><highlight class="normal"></highlight></codeline>
<codeline lineno="7197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_slash)</highlight></codeline>
<codeline lineno="7198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_p_sprintf(new_path<sp/>stb_p_size(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(full_path)),<sp/></highlight><highlight class="stringliteral">&quot;%s%s&quot;</highlight><highlight class="normal">,<sp/>path,<sp/>temp);</highlight></codeline>
<codeline lineno="7199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_p_sprintf(new_path<sp/>stb_p_size(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(full_path)),<sp/></highlight><highlight class="stringliteral">&quot;%s/%s&quot;</highlight><highlight class="normal">,<sp/>path,<sp/>temp);</highlight></codeline>
<codeline lineno="7201"><highlight class="normal"></highlight></codeline>
<codeline lineno="7202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__dircount_mask)<sp/>{</highlight></codeline>
<codeline lineno="7203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++stb__dircount;</highlight></codeline>
<codeline lineno="7204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(stb__dircount<sp/>&amp;<sp/>stb__dircount_mask))<sp/>{</highlight></codeline>
<codeline lineno="7205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dummy_path[128],<sp/>*pad;</highlight></codeline>
<codeline lineno="7206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_strncpy(dummy_path,<sp/>new_path,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dummy_path)-1);</highlight></codeline>
<codeline lineno="7207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strlen(dummy_path)<sp/>&gt;<sp/>96)<sp/>{</highlight></codeline>
<codeline lineno="7208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_p_strcpy_s(dummy_path+96/2-1,128,<sp/></highlight><highlight class="stringliteral">&quot;...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_p_strcpy_s(dummy_path+96/2+2,128,<sp/>new_path<sp/>+<sp/>strlen(new_path)-96/2+2);</highlight></codeline>
<codeline lineno="7210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pad<sp/>=<sp/>dummy_path<sp/>+<sp/>strlen(dummy_path);</highlight></codeline>
<codeline lineno="7212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pad<sp/>&lt;<sp/>dummy_path+98)</highlight></codeline>
<codeline lineno="7213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pad++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pad<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s\r&quot;</highlight><highlight class="normal">,<sp/>dummy_path);</highlight></codeline>
<codeline lineno="7216"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hlog<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="7218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hlog<sp/>=<sp/>stb_p_fopen(</highlight><highlight class="stringliteral">&quot;c:/x/temp.log&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(hlog,<sp/></highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>dummy_path);</highlight></codeline>
<codeline lineno="7220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7221"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7224"><highlight class="normal"></highlight></codeline>
<codeline lineno="7225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__dirtree_scandir(new_path,<sp/>c_file.time_write,<sp/>active);</highlight></codeline>
<codeline lineno="7226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*temp<sp/>=<sp/>stb__to_utf8((stb__wchar<sp/>*)<sp/>c_file.name);</highlight></codeline>
<codeline lineno="7229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__dirtree_add_file(temp,<sp/>n,<sp/>c_file.size,<sp/>c_file.time_write,<sp/>active);</highlight></codeline>
<codeline lineno="7230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__showfile)<sp/>printf(</highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>_wfindnexti64(<sp/>hFile,<sp/>&amp;c_file<sp/>)<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="7233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__showfile)<sp/>printf(</highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_findclose(<sp/>hFile<sp/>);</highlight></codeline>
<codeline lineno="7235"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7236"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__showfile)<sp/>printf(</highlight><highlight class="stringliteral">&quot;&gt;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7238"><highlight class="normal"></highlight></codeline>
<codeline lineno="7239"><highlight class="normal"></highlight><highlight class="comment">//<sp/>scan<sp/>the<sp/>database<sp/>and<sp/>see<sp/>if<sp/>it&apos;s<sp/>all<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7240"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__dirtree_update_db(stb_dirtree<sp/>*db,<sp/>stb_dirtree<sp/>*active)</highlight></codeline>
<codeline lineno="7241"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7242"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>changes_detected<sp/>=<sp/>STB_FALSE;</highlight></codeline>
<codeline lineno="7243"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="7244"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*remap;</highlight></codeline>
<codeline lineno="7245"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*rescan=NULL;</highlight></codeline>
<codeline lineno="7246"><highlight class="normal"><sp/><sp/><sp/>remap<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(remap[0])<sp/>*<sp/>stb_arr_len(db-&gt;dirs));</highlight></codeline>
<codeline lineno="7247"><highlight class="normal"><sp/><sp/><sp/>memset(remap,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(remap[0])<sp/>*<sp/>stb_arr_len(db-&gt;dirs));</highlight></codeline>
<codeline lineno="7248"><highlight class="normal"><sp/><sp/><sp/>rescan<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="7249"><highlight class="normal"></highlight></codeline>
<codeline lineno="7250"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stb_arr_len(db-&gt;dirs);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_stat<sp/><ref refid="structinfo" kindref="compound">info</ref>;</highlight></codeline>
<codeline lineno="7252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__dircount_mask)<sp/>{</highlight></codeline>
<codeline lineno="7253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++stb__dircount;</highlight></codeline>
<codeline lineno="7254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(stb__dircount<sp/>&amp;<sp/>stb__dircount_mask))<sp/>{</highlight></codeline>
<codeline lineno="7255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>==<sp/>_stat(db-&gt;dirs[i].path,<sp/>&amp;<ref refid="structinfo" kindref="compound">info</ref>))<sp/>{</highlight></codeline>
<codeline lineno="7259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structinfo" kindref="compound">info</ref>.st_mode<sp/>&amp;<sp/>_S_IFDIR)<sp/>{</highlight></codeline>
<codeline lineno="7260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>still<sp/>a<sp/>directory,<sp/>as<sp/>expected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/><ref refid="group__core__func__common_1ga693d77696ff36572a0da79efec965acd" kindref="member">abs</ref>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>(<ref refid="structinfo" kindref="compound">info</ref>.st_mtime<sp/>-<sp/>db-&gt;dirs[i].last_modified));</highlight></codeline>
<codeline lineno="7262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>n<sp/>!=<sp/>3600)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>3600<sp/>is<sp/>a<sp/>hack<sp/>because<sp/>sometimes<sp/>this<sp/>jumps<sp/>for<sp/>no<sp/>apparent<sp/>reason,<sp/>even<sp/>when<sp/>no<sp/>time<sp/>zone<sp/>or<sp/>DST<sp/>issues<sp/>are<sp/>at<sp/>play</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>changed!<sp/>force<sp/>a<sp/>rescan</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>don&apos;t<sp/>want<sp/>to<sp/>scan<sp/>it<sp/>until<sp/>we&apos;ve<sp/>stat()d<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>subdirs,<sp/>though,<sp/>so<sp/>we<sp/>queue<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__showfile)<sp/>printf(</highlight><highlight class="stringliteral">&quot;Changed:<sp/>%s<sp/>-<sp/>%08x:%08x\n&quot;</highlight><highlight class="normal">,<sp/>db-&gt;dirs[i].path,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>db-&gt;dirs[i].last_modified,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/><ref refid="structinfo" kindref="compound">info</ref>.st_mtime);</highlight></codeline>
<codeline lineno="7267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_push(rescan,<sp/>i);</highlight></codeline>
<codeline lineno="7268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>the<sp/>last_mod<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>db-&gt;dirs[i].last_modified<sp/>=<sp/><ref refid="structinfo" kindref="compound">info</ref>.st_mtime;</highlight></codeline>
<codeline lineno="7270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ignore<sp/>existing<sp/>files<sp/>in<sp/>this<sp/>dir</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remap[i]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="7272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>changes_detected<sp/>=<sp/>STB_TRUE;</highlight></codeline>
<codeline lineno="7273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>hasn&apos;t<sp/>changed,<sp/>just<sp/>copy<sp/>it<sp/>through<sp/>unchanged</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__dirtree_add_dir(db-&gt;dirs[i].path,<sp/>db-&gt;dirs[i].last_modified,<sp/>active);</highlight></codeline>
<codeline lineno="7276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remap[i]<sp/>=<sp/>stb_arr_lastn(active-&gt;dirs);</highlight></codeline>
<codeline lineno="7277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>path<sp/>used<sp/>to<sp/>refer<sp/>to<sp/>a<sp/>directory,<sp/>but<sp/>now<sp/>it&apos;s<sp/>a<sp/>file!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assume<sp/>that<sp/>the<sp/>parent<sp/>directory<sp/>is<sp/>going<sp/>to<sp/>be<sp/>forced<sp/>to<sp/>rescan<sp/>anyway</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>delete_entry;</highlight></codeline>
<codeline lineno="7282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delete_entry:</highlight></codeline>
<codeline lineno="7285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>directory<sp/>no<sp/>longer<sp/>exists,<sp/>so<sp/>don&apos;t<sp/>copy<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>don&apos;t<sp/>free<sp/>it<sp/>because<sp/>it&apos;s<sp/>in<sp/>the<sp/>string<sp/>pool<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>db-&gt;dirs[i].path<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="7288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remap[i]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="7289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>changes_detected<sp/>=<sp/>STB_TRUE;</highlight></codeline>
<codeline lineno="7290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7291"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7292"><highlight class="normal"></highlight></codeline>
<codeline lineno="7293"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>at<sp/>this<sp/>point,<sp/>we<sp/>have:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7294"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7295"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>&lt;rescan&gt;<sp/>holds<sp/>a<sp/>list<sp/>of<sp/>directory<sp/>indices<sp/>that<sp/>need<sp/>to<sp/>be<sp/>scanned<sp/>due<sp/>to<sp/>being<sp/>out<sp/>of<sp/>date</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7296"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>&lt;remap&gt;<sp/>holds<sp/>the<sp/>directory<sp/>index<sp/>in<sp/>&lt;active&gt;<sp/>for<sp/>each<sp/>dir<sp/>in<sp/>&lt;db&gt;,<sp/>if<sp/>it<sp/>exists;<sp/>-1<sp/>if<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7297"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>directories<sp/>in<sp/>&lt;rescan&gt;<sp/>are<sp/>not<sp/>in<sp/>&lt;active&gt;<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7298"><highlight class="normal"></highlight></codeline>
<codeline lineno="7299"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>we<sp/>can<sp/>go<sp/>ahead<sp/>and<sp/>remap<sp/>all<sp/>the<sp/>known<sp/>files<sp/>right<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7300"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stb_arr_len(db-&gt;files);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dir<sp/>=<sp/>db-&gt;files[i].dir;</highlight></codeline>
<codeline lineno="7302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remap[dir]<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="7303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__dirtree_add_file(db-&gt;files[i].name,<sp/>remap[dir],<sp/>db-&gt;files[i].size,<sp/>db-&gt;files[i].last_modified,<sp/>active);</highlight></codeline>
<codeline lineno="7304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7305"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7306"><highlight class="normal"></highlight></codeline>
<codeline lineno="7307"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>at<sp/>this<sp/>point<sp/>we&apos;re<sp/>done<sp/>with<sp/>db-&gt;files,<sp/>and<sp/>done<sp/>with<sp/>remap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7308"><highlight class="normal"><sp/><sp/><sp/>free(remap);</highlight></codeline>
<codeline lineno="7309"><highlight class="normal"></highlight></codeline>
<codeline lineno="7310"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>scan<sp/>those<sp/>directories<sp/>using<sp/>the<sp/>standard<sp/>scan</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7311"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stb_arr_len(rescan);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>rescan[i];</highlight></codeline>
<codeline lineno="7313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__dirtree_scandir(db-&gt;dirs[z].path,<sp/>db-&gt;dirs[z].last_modified,<sp/>active);</highlight></codeline>
<codeline lineno="7314"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7315"><highlight class="normal"><sp/><sp/><sp/>stb_arr_free(rescan);</highlight></codeline>
<codeline lineno="7316"><highlight class="normal"></highlight></codeline>
<codeline lineno="7317"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>changes_detected;</highlight></codeline>
<codeline lineno="7318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7319"><highlight class="normal"></highlight></codeline>
<codeline lineno="7320"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__dirtree_free_raw(stb_dirtree<sp/>*d)</highlight></codeline>
<codeline lineno="7321"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7322"><highlight class="normal"><sp/><sp/><sp/>stb_free(d-&gt;string_pool);</highlight></codeline>
<codeline lineno="7323"><highlight class="normal"><sp/><sp/><sp/>stb_arr_free(d-&gt;dirs);</highlight></codeline>
<codeline lineno="7324"><highlight class="normal"><sp/><sp/><sp/>stb_arr_free(d-&gt;files);</highlight></codeline>
<codeline lineno="7325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7326"><highlight class="normal"></highlight></codeline>
<codeline lineno="7327"><highlight class="normal">stb_dirtree<sp/>*stb_dirtree_get_with_file(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cache_file)</highlight></codeline>
<codeline lineno="7328"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7329"><highlight class="normal"><sp/><sp/><sp/>stb_dirtree<sp/>*<ref refid="structoutput" kindref="compound">output</ref><sp/>=<sp/>(stb_dirtree<sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*<ref refid="structoutput" kindref="compound">output</ref>));</highlight></codeline>
<codeline lineno="7330"><highlight class="normal"><sp/><sp/><sp/>stb_dirtree<sp/>db,active;</highlight></codeline>
<codeline lineno="7331"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prev_dir_count,<sp/>cache_mismatch;</highlight></codeline>
<codeline lineno="7332"><highlight class="normal"></highlight></codeline>
<codeline lineno="7333"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stripped_dir;<sp/></highlight><highlight class="comment">//<sp/>store<sp/>the<sp/>directory<sp/>name<sp/>without<sp/>a<sp/>trailing<sp/>&apos;/&apos;<sp/>or<sp/>&apos;\\&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7334"><highlight class="normal"></highlight></codeline>
<codeline lineno="7335"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>load<sp/>the<sp/>database<sp/>of<sp/>last-known<sp/>state<sp/>on<sp/>disk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7336"><highlight class="normal"><sp/><sp/><sp/>db.string_pool<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="7337"><highlight class="normal"><sp/><sp/><sp/>db.files<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="7338"><highlight class="normal"><sp/><sp/><sp/>db.dirs<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="7339"><highlight class="normal"></highlight></codeline>
<codeline lineno="7340"><highlight class="normal"><sp/><sp/><sp/>stripped_dir<sp/>=<sp/>stb_strip_final_slash(stb_p_strdup(dir));</highlight></codeline>
<codeline lineno="7341"><highlight class="normal"></highlight></codeline>
<codeline lineno="7342"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cache_file<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="7343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__dirtree_load_db(cache_file,<sp/>&amp;db,<sp/>stripped_dir);</highlight></codeline>
<codeline lineno="7344"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__showfile)</highlight></codeline>
<codeline lineno="7345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;No<sp/>cache<sp/>file\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7346"><highlight class="normal"></highlight></codeline>
<codeline lineno="7347"><highlight class="normal"><sp/><sp/><sp/>active.files<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="7348"><highlight class="normal"><sp/><sp/><sp/>active.dirs<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="7349"><highlight class="normal"><sp/><sp/><sp/>active.string_pool<sp/>=<sp/>stb_malloc(0,1);<sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>share<sp/>string<sp/>pools<sp/>between<sp/>both?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7350"><highlight class="normal"></highlight></codeline>
<codeline lineno="7351"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>all<sp/>the<sp/>directories<sp/>in<sp/>the<sp/>database;<sp/>make<sp/>note<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7352"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>anything<sp/>we<sp/>scanned<sp/>had<sp/>changed,<sp/>and<sp/>rescan<sp/>those<sp/>things</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7353"><highlight class="normal"><sp/><sp/><sp/>cache_mismatch<sp/>=<sp/>stb__dirtree_update_db(&amp;db,<sp/>&amp;active);</highlight></codeline>
<codeline lineno="7354"><highlight class="normal"></highlight></codeline>
<codeline lineno="7355"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>the<sp/>root<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7356"><highlight class="normal"><sp/><sp/><sp/>prev_dir_count<sp/>=<sp/>stb_arr_len(active.dirs);<sp/><sp/></highlight><highlight class="comment">//<sp/>record<sp/>how<sp/>many<sp/>directories<sp/>we&apos;ve<sp/>seen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7357"><highlight class="normal"></highlight></codeline>
<codeline lineno="7358"><highlight class="normal"><sp/><sp/><sp/>stb__dirtree_scandir(stripped_dir,<sp/>0,<sp/>&amp;active);<sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>last_modified<sp/>time<sp/>available<sp/>for<sp/>root</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7359"><highlight class="normal"></highlight></codeline>
<codeline lineno="7360"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__dircount_mask)</highlight></codeline>
<codeline lineno="7361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7362"><highlight class="normal"></highlight></codeline>
<codeline lineno="7363"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>done<sp/>with<sp/>the<sp/>DB;<sp/>write<sp/>it<sp/>back<sp/>out<sp/>if<sp/>any<sp/>changes,<sp/>i.e.<sp/>either</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7364"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>1.<sp/>any<sp/>inconsistency<sp/>found<sp/>between<sp/>cached<sp/>information<sp/>and<sp/>actual<sp/>disk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7365"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>or<sp/>2.<sp/>if<sp/>scanning<sp/>the<sp/>root<sp/>found<sp/>any<sp/>new<sp/>directories--which<sp/>we<sp/>detect<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7366"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>more<sp/>than<sp/>one<sp/>directory<sp/>got<sp/>added<sp/>to<sp/>the<sp/>active<sp/>db<sp/>during<sp/>that<sp/>scan</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7367"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cache_mismatch<sp/>||<sp/>stb_arr_len(active.dirs)<sp/>&gt;<sp/>prev_dir_count+1)</highlight></codeline>
<codeline lineno="7368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__dirtree_save_db(cache_file,<sp/>&amp;active,<sp/>stripped_dir);</highlight></codeline>
<codeline lineno="7369"><highlight class="normal"></highlight></codeline>
<codeline lineno="7370"><highlight class="normal"><sp/><sp/><sp/>free(stripped_dir);</highlight></codeline>
<codeline lineno="7371"><highlight class="normal"></highlight></codeline>
<codeline lineno="7372"><highlight class="normal"><sp/><sp/><sp/>stb__dirtree_free_raw(&amp;db);</highlight></codeline>
<codeline lineno="7373"><highlight class="normal"></highlight></codeline>
<codeline lineno="7374"><highlight class="normal"><sp/><sp/><sp/>*<ref refid="structoutput" kindref="compound">output</ref><sp/>=<sp/>active;</highlight></codeline>
<codeline lineno="7375"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structoutput" kindref="compound">output</ref>;</highlight></codeline>
<codeline lineno="7376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7377"><highlight class="normal"></highlight></codeline>
<codeline lineno="7378"><highlight class="normal">stb_dirtree<sp/>*stb_dirtree_get_dir(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cache_dir)</highlight></codeline>
<codeline lineno="7379"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7380"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="7381"><highlight class="normal"><sp/><sp/><sp/>stb_uint8<sp/>sha[20];</highlight></codeline>
<codeline lineno="7382"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dir_lower[1024];</highlight></codeline>
<codeline lineno="7383"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cache_file[1024],*s;</highlight></codeline>
<codeline lineno="7384"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cache_dir<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="7385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_dirtree_get_with_file(dir,<sp/>NULL);</highlight></codeline>
<codeline lineno="7386"><highlight class="normal"><sp/><sp/><sp/>stb_p_strcpy_s(dir_lower,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dir_lower),<sp/>dir);</highlight></codeline>
<codeline lineno="7387"><highlight class="normal"><sp/><sp/><sp/>stb_tolower(dir_lower);</highlight></codeline>
<codeline lineno="7388"><highlight class="normal"><sp/><sp/><sp/>stb_sha1(sha,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>dir_lower,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>strlen(dir_lower));</highlight></codeline>
<codeline lineno="7389"><highlight class="normal"><sp/><sp/><sp/>stb_p_strcpy_s(cache_file,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cache_file),<sp/>cache_dir);</highlight></codeline>
<codeline lineno="7390"><highlight class="normal"><sp/><sp/><sp/>s<sp/>=<sp/>cache_file<sp/>+<sp/>strlen(cache_file);</highlight></codeline>
<codeline lineno="7391"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[-1]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>s[-1]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)<sp/>*s++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7392"><highlight class="normal"><sp/><sp/><sp/>stb_p_strcpy_s(s,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cache_file),<sp/></highlight><highlight class="stringliteral">&quot;dirtree_&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7393"><highlight class="normal"><sp/><sp/><sp/>s<sp/>+=<sp/>strlen(s);</highlight></codeline>
<codeline lineno="7394"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>8;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hex<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;0123456789abcdef&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_uint<sp/>z<sp/>=<sp/>sha[i];</highlight></codeline>
<codeline lineno="7397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*s++<sp/>=<sp/>hex[z<sp/>&gt;&gt;<sp/>4];</highlight></codeline>
<codeline lineno="7398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*s++<sp/>=<sp/>hex[z<sp/>&amp;<sp/>15];</highlight></codeline>
<codeline lineno="7399"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7400"><highlight class="normal"><sp/><sp/><sp/>stb_p_strcpy_s(s,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cache_file),<sp/></highlight><highlight class="stringliteral">&quot;.bin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7401"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_dirtree_get_with_file(dir,<sp/>cache_file);</highlight></codeline>
<codeline lineno="7402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7403"><highlight class="normal"></highlight></codeline>
<codeline lineno="7404"><highlight class="normal">stb_dirtree<sp/>*stb_dirtree_get(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir)</highlight></codeline>
<codeline lineno="7405"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7406"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cache_dir[256];</highlight></codeline>
<codeline lineno="7407"><highlight class="normal"><sp/><sp/><sp/>stb_p_strcpy_s(cache_dir,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cache_dir),<sp/></highlight><highlight class="stringliteral">&quot;c:/bindata&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7408"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>STB_HAS_REGISTRY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7409"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*reg<sp/>=<sp/>stb_reg_open(</highlight><highlight class="stringliteral">&quot;rHKLM&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Software\\SilverSpaceship\\stb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reg)<sp/>{</highlight></codeline>
<codeline lineno="7412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_reg_read(reg,<sp/></highlight><highlight class="stringliteral">&quot;dirtree&quot;</highlight><highlight class="normal">,<sp/>cache_dir,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cache_dir));</highlight></codeline>
<codeline lineno="7413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_reg_close(reg);</highlight></codeline>
<codeline lineno="7414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7415"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7416"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7417"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_dirtree_get_dir(dir,<sp/>cache_dir);</highlight></codeline>
<codeline lineno="7418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7419"><highlight class="normal"></highlight></codeline>
<codeline lineno="7420"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_dirtree_free(stb_dirtree<sp/>*d)</highlight></codeline>
<codeline lineno="7421"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7422"><highlight class="normal"><sp/><sp/><sp/>stb__dirtree_free_raw(d);</highlight></codeline>
<codeline lineno="7423"><highlight class="normal"><sp/><sp/><sp/>free(d);</highlight></codeline>
<codeline lineno="7424"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7425"><highlight class="normal"></highlight></codeline>
<codeline lineno="7426"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_dirtree_db_add_dir(stb_dirtree<sp/>*active,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/>time_t<sp/>last)</highlight></codeline>
<codeline lineno="7427"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7428"><highlight class="normal"><sp/><sp/><sp/>stb__dirtree_add_dir(path,<sp/>last,<sp/>active);</highlight></codeline>
<codeline lineno="7429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7430"><highlight class="normal"></highlight></codeline>
<codeline lineno="7431"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_dirtree_db_add_file(stb_dirtree<sp/>*active,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dir,<sp/>stb_int64<sp/>size,<sp/>time_t<sp/>last)</highlight></codeline>
<codeline lineno="7432"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7433"><highlight class="normal"><sp/><sp/><sp/>stb__dirtree_add_file(name,<sp/>dir,<sp/>size,<sp/>last,<sp/>active);</highlight></codeline>
<codeline lineno="7434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7435"><highlight class="normal"></highlight></codeline>
<codeline lineno="7436"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_dirtree_db_read(stb_dirtree<sp/>*target,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir)</highlight></codeline>
<codeline lineno="7437"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7438"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s<sp/>=<sp/>stb_strip_final_slash(stb_p_strdup(dir));</highlight></codeline>
<codeline lineno="7439"><highlight class="normal"><sp/><sp/><sp/>target-&gt;dirs<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7440"><highlight class="normal"><sp/><sp/><sp/>target-&gt;files<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7441"><highlight class="normal"><sp/><sp/><sp/>target-&gt;string_pool<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7442"><highlight class="normal"><sp/><sp/><sp/>stb__dirtree_load_db(filename,<sp/>target,<sp/>s);</highlight></codeline>
<codeline lineno="7443"><highlight class="normal"><sp/><sp/><sp/>free(s);</highlight></codeline>
<codeline lineno="7444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7445"><highlight class="normal"></highlight></codeline>
<codeline lineno="7446"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_dirtree_db_write(stb_dirtree<sp/>*target,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir)</highlight></codeline>
<codeline lineno="7447"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7448"><highlight class="normal"><sp/><sp/><sp/>stb__dirtree_save_db(filename,<sp/>target,<sp/>0);<sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>strip<sp/>out<sp/>any<sp/>directories</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7450"><highlight class="normal"></highlight></codeline>
<codeline lineno="7451"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7452"><highlight class="normal"></highlight></codeline>
<codeline lineno="7453"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7454"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>STB_NO_STB_STRINGS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7455"><highlight class="normal"></highlight></codeline>
<codeline lineno="7457"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7458"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>STB_MALLOC_WRAPPER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7459"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7460"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>you<sp/>can<sp/>use<sp/>the<sp/>wrapper<sp/>functions<sp/>with<sp/>your<sp/>own<sp/>malloc<sp/>wrapper,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7461"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>or<sp/>define<sp/>STB_MALLOC_WRAPPER<sp/>project-wide<sp/>to<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7462"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>malloc/free/realloc/strdup<sp/>all<sp/>get<sp/>vectored<sp/>to<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7463"><highlight class="normal"></highlight></codeline>
<codeline lineno="7464"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>has<sp/>too<sp/>many<sp/>very<sp/>specific<sp/>error<sp/>messages<sp/>you<sp/>could<sp/>google<sp/>for<sp/>and<sp/>find<sp/>in<sp/>stb.h,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7465"><highlight class="normal"></highlight><highlight class="comment">//<sp/>so<sp/>don&apos;t<sp/>use<sp/>it<sp/>if<sp/>they<sp/>don&apos;t<sp/>want<sp/>any<sp/>stb.h-identifiable<sp/>strings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7466"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(STB_DEFINE)<sp/>&amp;&amp;<sp/>!defined(STB_NO_STB_STRINGS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7467"><highlight class="normal"></highlight></codeline>
<codeline lineno="7468"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7469"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7470"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="7471"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file;</highlight></codeline>
<codeline lineno="7472"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>line;</highlight></codeline>
<codeline lineno="7473"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="7474"><highlight class="normal">}<sp/>stb_malloc_record;</highlight></codeline>
<codeline lineno="7475"><highlight class="normal"></highlight></codeline>
<codeline lineno="7476"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_MALLOC_HISTORY_COUNT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7477"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_MALLOC_HISTORY_COUNT<sp/>50<sp/></highlight><highlight class="comment">//<sp/>800<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7478"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7479"><highlight class="normal"></highlight></codeline>
<codeline lineno="7480"><highlight class="normal">stb_malloc_record<sp/>*stb__allocations;</highlight></codeline>
<codeline lineno="7481"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__alloc_size,<sp/>stb__alloc_limit,<sp/>stb__alloc_mask;</highlight></codeline>
<codeline lineno="7482"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__alloc_count;</highlight></codeline>
<codeline lineno="7483"><highlight class="normal"></highlight></codeline>
<codeline lineno="7484"><highlight class="normal">stb_malloc_record<sp/>stb__alloc_history[STB_MALLOC_HISTORY_COUNT];</highlight></codeline>
<codeline lineno="7485"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__history_pos;</highlight></codeline>
<codeline lineno="7486"><highlight class="normal"></highlight></codeline>
<codeline lineno="7487"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__hashfind(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="7488"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7489"><highlight class="normal"><sp/><sp/><sp/>stb_uint32<sp/>h<sp/>=<sp/>stb_hashptr(p);</highlight></codeline>
<codeline lineno="7490"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s,n<sp/>=<sp/>h<sp/>&amp;<sp/>stb__alloc_mask;</highlight></codeline>
<codeline lineno="7491"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__allocations[n].p<sp/>==<sp/>p)</highlight></codeline>
<codeline lineno="7492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="7493"><highlight class="normal"><sp/><sp/><sp/>s<sp/>=<sp/>stb_rehash(h)|1;</highlight></codeline>
<codeline lineno="7494"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)<sp/>{</highlight></codeline>
<codeline lineno="7495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__allocations[n].p<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="7496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="7497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(n+s)<sp/>&amp;<sp/>stb__alloc_mask;</highlight></codeline>
<codeline lineno="7498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__allocations[n].p<sp/>==<sp/>p)</highlight></codeline>
<codeline lineno="7499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="7500"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7502"><highlight class="normal"></highlight></codeline>
<codeline lineno="7503"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>stb_wrapper_allocsize(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="7504"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7505"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>stb__hashfind(p);</highlight></codeline>
<codeline lineno="7506"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="7507"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb__allocations[n].size;</highlight></codeline>
<codeline lineno="7508"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7509"><highlight class="normal"></highlight></codeline>
<codeline lineno="7510"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__historyfind(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="7511"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7512"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>stb__history_pos;</highlight></codeline>
<codeline lineno="7513"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="7514"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>STB_MALLOC_HISTORY_COUNT;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--n<sp/>&lt;<sp/>0)<sp/>n<sp/>=<sp/>STB_MALLOC_HISTORY_COUNT-1;</highlight></codeline>
<codeline lineno="7516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__alloc_history[n].p<sp/>==<sp/>p)</highlight></codeline>
<codeline lineno="7517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="7518"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7519"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="7520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7521"><highlight class="normal"></highlight></codeline>
<codeline lineno="7522"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__add_alloc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line);</highlight></codeline>
<codeline lineno="7523"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__grow_alloc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="7524"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7525"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,old_num<sp/>=<sp/>stb__alloc_size;</highlight></codeline>
<codeline lineno="7526"><highlight class="normal"><sp/><sp/><sp/>stb_malloc_record<sp/>*old<sp/>=<sp/>stb__allocations;</highlight></codeline>
<codeline lineno="7527"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__alloc_size<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="7528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__alloc_size<sp/>=<sp/>64;</highlight></codeline>
<codeline lineno="7529"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__alloc_size<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="7531"><highlight class="normal"></highlight></codeline>
<codeline lineno="7532"><highlight class="normal"><sp/><sp/><sp/>stb__allocations<sp/>=<sp/>(stb_malloc_record<sp/>*)<sp/>stb__realloc_raw(NULL,<sp/>stb__alloc_size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stb__allocations[0]));</highlight></codeline>
<codeline lineno="7533"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__allocations<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="7534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_fatal(</highlight><highlight class="stringliteral">&quot;Internal<sp/>error:<sp/>couldn&apos;t<sp/>grow<sp/>malloc<sp/>wrapper<sp/>table&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7535"><highlight class="normal"><sp/><sp/><sp/>memset(stb__allocations,<sp/>0,<sp/>stb__alloc_size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stb__allocations[0]));</highlight></codeline>
<codeline lineno="7536"><highlight class="normal"><sp/><sp/><sp/>stb__alloc_limit<sp/>=<sp/>(stb__alloc_size*3)&gt;&gt;2;</highlight></codeline>
<codeline lineno="7537"><highlight class="normal"><sp/><sp/><sp/>stb__alloc_mask<sp/>=<sp/>stb__alloc_size-1;</highlight></codeline>
<codeline lineno="7538"><highlight class="normal"></highlight></codeline>
<codeline lineno="7539"><highlight class="normal"><sp/><sp/><sp/>stb__alloc_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7540"><highlight class="normal"></highlight></codeline>
<codeline lineno="7541"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>old_num;<sp/>++i)</highlight></codeline>
<codeline lineno="7542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(old[i].p<sp/>&gt;<sp/>STB_DEL)<sp/>{</highlight></codeline>
<codeline lineno="7543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__add_alloc(old[i].p,<sp/>old[i].size,<sp/>old[i].file,<sp/>old[i].line);</highlight></codeline>
<codeline lineno="7544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(stb__hashfind(old[i].p)<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="7545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7546"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>old_num;<sp/>++i)</highlight></codeline>
<codeline lineno="7547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(old[i].p<sp/>&gt;<sp/>STB_DEL)</highlight></codeline>
<codeline lineno="7548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(stb__hashfind(old[i].p)<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="7549"><highlight class="normal"><sp/><sp/><sp/>stb__realloc_raw(old,<sp/>0);</highlight></codeline>
<codeline lineno="7550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7551"><highlight class="normal"></highlight></codeline>
<codeline lineno="7552"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__add_alloc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line)</highlight></codeline>
<codeline lineno="7553"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7554"><highlight class="normal"><sp/><sp/><sp/>stb_uint32<sp/>h;</highlight></codeline>
<codeline lineno="7555"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="7556"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__alloc_count<sp/>&gt;=<sp/>stb__alloc_limit)</highlight></codeline>
<codeline lineno="7557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__grow_alloc();</highlight></codeline>
<codeline lineno="7558"><highlight class="normal"><sp/><sp/><sp/>h<sp/>=<sp/>stb_hashptr(p);</highlight></codeline>
<codeline lineno="7559"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>h<sp/>&amp;<sp/>stb__alloc_mask;</highlight></codeline>
<codeline lineno="7560"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__allocations[n].p<sp/>&gt;<sp/>STB_DEL)<sp/>{</highlight></codeline>
<codeline lineno="7561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>stb_rehash(h)|1;</highlight></codeline>
<codeline lineno="7562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(n+s)<sp/>&amp;<sp/>stb__alloc_mask;</highlight></codeline>
<codeline lineno="7564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(stb__allocations[n].p<sp/>&gt;<sp/>STB_DEL);</highlight></codeline>
<codeline lineno="7565"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7566"><highlight class="normal"><sp/><sp/><sp/>assert(stb__allocations[n].p<sp/>==<sp/>NULL<sp/>||<sp/>stb__allocations[n].p<sp/>==<sp/>STB_DEL);</highlight></codeline>
<codeline lineno="7567"><highlight class="normal"><sp/><sp/><sp/>stb__allocations[n].p<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="7568"><highlight class="normal"><sp/><sp/><sp/>stb__allocations[n].size<sp/>=<sp/>sz;</highlight></codeline>
<codeline lineno="7569"><highlight class="normal"><sp/><sp/><sp/>stb__allocations[n].line<sp/>=<sp/>line;</highlight></codeline>
<codeline lineno="7570"><highlight class="normal"><sp/><sp/><sp/>stb__allocations[n].file<sp/>=<sp/>file;</highlight></codeline>
<codeline lineno="7571"><highlight class="normal"><sp/><sp/><sp/>++stb__alloc_count;</highlight></codeline>
<codeline lineno="7572"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7573"><highlight class="normal"></highlight></codeline>
<codeline lineno="7574"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__remove_alloc(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line)</highlight></codeline>
<codeline lineno="7575"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7576"><highlight class="normal"><sp/><sp/><sp/>stb__alloc_history[stb__history_pos]<sp/>=<sp/>stb__allocations[n];</highlight></codeline>
<codeline lineno="7577"><highlight class="normal"><sp/><sp/><sp/>stb__alloc_history[stb__history_pos].file<sp/>=<sp/>file;</highlight></codeline>
<codeline lineno="7578"><highlight class="normal"><sp/><sp/><sp/>stb__alloc_history[stb__history_pos].line<sp/>=<sp/>line;</highlight></codeline>
<codeline lineno="7579"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++stb__history_pos<sp/>==<sp/>STB_MALLOC_HISTORY_COUNT)</highlight></codeline>
<codeline lineno="7580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__history_pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7581"><highlight class="normal"><sp/><sp/><sp/>stb__allocations[n].p<sp/>=<sp/>STB_DEL;</highlight></codeline>
<codeline lineno="7582"><highlight class="normal"><sp/><sp/><sp/>--stb__alloc_count;</highlight></codeline>
<codeline lineno="7583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7584"><highlight class="normal"></highlight></codeline>
<codeline lineno="7585"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_wrapper_malloc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line)</highlight></codeline>
<codeline lineno="7586"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7587"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7588"><highlight class="normal"><sp/><sp/><sp/>stb__add_alloc(p,sz,file,line);</highlight></codeline>
<codeline lineno="7589"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7590"><highlight class="normal"></highlight></codeline>
<codeline lineno="7591"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_wrapper_free(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line)</highlight></codeline>
<codeline lineno="7592"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7593"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="7594"><highlight class="normal"></highlight></codeline>
<codeline lineno="7595"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7596"><highlight class="normal"></highlight></codeline>
<codeline lineno="7597"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>stb__hashfind(p);</highlight></codeline>
<codeline lineno="7598"><highlight class="normal"></highlight></codeline>
<codeline lineno="7599"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="7600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__remove_alloc(n,<sp/>file,<sp/>line);</highlight></codeline>
<codeline lineno="7601"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tried<sp/>to<sp/>free<sp/>something<sp/>we<sp/>hadn&apos;t<sp/>allocated!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>stb__historyfind(p);</highlight></codeline>
<codeline lineno="7604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(0);<sp/></highlight><highlight class="comment">/*<sp/>NOTREACHED<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="7606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_fatal(</highlight><highlight class="stringliteral">&quot;Attempted<sp/>to<sp/>free<sp/>%d-byte<sp/>block<sp/>%p<sp/>at<sp/>%s:%d<sp/>previously<sp/>freed/realloced<sp/>at<sp/>%s:%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__alloc_history[n].size,<sp/>p,</highlight></codeline>
<codeline lineno="7608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file,<sp/>line,</highlight></codeline>
<codeline lineno="7609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__alloc_history[n].file,<sp/>stb__alloc_history[n].line);</highlight></codeline>
<codeline lineno="7610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_fatal(</highlight><highlight class="stringliteral">&quot;Attempted<sp/>to<sp/>free<sp/>unknown<sp/>block<sp/>%p<sp/>at<sp/>%s:%d&quot;</highlight><highlight class="normal">,<sp/>p,<sp/>file,line);</highlight></codeline>
<codeline lineno="7612"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7614"><highlight class="normal"></highlight></codeline>
<codeline lineno="7615"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_wrapper_check(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="7616"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7617"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="7618"><highlight class="normal"></highlight></codeline>
<codeline lineno="7619"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7620"><highlight class="normal"></highlight></codeline>
<codeline lineno="7621"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>stb__hashfind(p);</highlight></codeline>
<codeline lineno="7622"><highlight class="normal"></highlight></codeline>
<codeline lineno="7623"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7624"><highlight class="normal"></highlight></codeline>
<codeline lineno="7625"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/>stb__alloc_size;<sp/>++n)</highlight></codeline>
<codeline lineno="7626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__allocations[n].p<sp/>==<sp/>p)</highlight></codeline>
<codeline lineno="7627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_fatal(</highlight><highlight class="stringliteral">&quot;Internal<sp/>error:<sp/>pointer<sp/>%p<sp/>was<sp/>allocated,<sp/>but<sp/>hash<sp/>search<sp/>failed&quot;</highlight><highlight class="normal">,<sp/>p);</highlight></codeline>
<codeline lineno="7628"><highlight class="normal"></highlight></codeline>
<codeline lineno="7629"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tried<sp/>to<sp/>free<sp/>something<sp/>that<sp/>wasn&apos;t<sp/>allocated!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7630"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>stb__historyfind(p);</highlight></codeline>
<codeline lineno="7631"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="7632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_fatal(</highlight><highlight class="stringliteral">&quot;Checked<sp/>%d-byte<sp/>block<sp/>%p<sp/>previously<sp/>freed/realloced<sp/>at<sp/>%s:%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__alloc_history[n].size,<sp/>p,</highlight></codeline>
<codeline lineno="7634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__alloc_history[n].file,<sp/>stb__alloc_history[n].line);</highlight></codeline>
<codeline lineno="7635"><highlight class="normal"><sp/><sp/><sp/>stb_fatal(</highlight><highlight class="stringliteral">&quot;Checked<sp/>unknown<sp/>block<sp/>%p&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7636"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7637"><highlight class="normal"></highlight></codeline>
<codeline lineno="7638"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_wrapper_realloc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*q,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line)</highlight></codeline>
<codeline lineno="7639"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7640"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="7641"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/>{<sp/>stb_wrapper_malloc(q,<sp/>sz,<sp/>file,<sp/>line);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="7642"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>nothing<sp/>happened</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7643"><highlight class="normal"></highlight></codeline>
<codeline lineno="7644"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>stb__hashfind(p);</highlight></codeline>
<codeline lineno="7645"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="7646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tried<sp/>to<sp/>free<sp/>something<sp/>we<sp/>hadn&apos;t<sp/>allocated!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>weird,<sp/>though,<sp/>because<sp/>we<sp/>got<sp/>past<sp/>the<sp/>realloc!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>stb__historyfind(p);</highlight></codeline>
<codeline lineno="7649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(0);<sp/></highlight><highlight class="comment">/*<sp/>NOTREACHED<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="7651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_fatal(</highlight><highlight class="stringliteral">&quot;Attempted<sp/>to<sp/>realloc<sp/>%d-byte<sp/>block<sp/>%p<sp/>at<sp/>%s:%d<sp/>previously<sp/>freed/realloced<sp/>at<sp/>%s:%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__alloc_history[n].size,<sp/>p,</highlight></codeline>
<codeline lineno="7653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file,<sp/>line,</highlight></codeline>
<codeline lineno="7654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__alloc_history[n].file,<sp/>stb__alloc_history[n].line);</highlight></codeline>
<codeline lineno="7655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_fatal(</highlight><highlight class="stringliteral">&quot;Attempted<sp/>to<sp/>realloc<sp/>unknown<sp/>block<sp/>%p<sp/>at<sp/>%s:%d&quot;</highlight><highlight class="normal">,<sp/>p,<sp/>file,line);</highlight></codeline>
<codeline lineno="7657"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q<sp/>==<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="7659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__allocations[n].size<sp/>=<sp/>sz;</highlight></codeline>
<codeline lineno="7660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__allocations[n].file<sp/>=<sp/>file;</highlight></codeline>
<codeline lineno="7661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__allocations[n].line<sp/>=<sp/>line;</highlight></codeline>
<codeline lineno="7662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__remove_alloc(n,<sp/>file,<sp/>line);</highlight></codeline>
<codeline lineno="7664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__add_alloc(q,sz,file,line);</highlight></codeline>
<codeline lineno="7665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7666"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7667"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7668"><highlight class="normal"></highlight></codeline>
<codeline lineno="7669"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_wrapper_listall(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*func)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line))</highlight></codeline>
<codeline lineno="7670"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7671"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="7672"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stb__alloc_size;<sp/>++i)</highlight></codeline>
<codeline lineno="7673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__allocations[i].p<sp/>&gt;<sp/>STB_DEL)</highlight></codeline>
<codeline lineno="7674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func(stb__allocations[i].p<sp/><sp/><sp/>,<sp/>stb__allocations[i].size,</highlight></codeline>
<codeline lineno="7675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__allocations[i].file,<sp/>stb__allocations[i].line);</highlight></codeline>
<codeline lineno="7676"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7677"><highlight class="normal"></highlight></codeline>
<codeline lineno="7678"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_wrapper_dump(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename)</highlight></codeline>
<codeline lineno="7679"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7680"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="7681"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*f<sp/>=<sp/>stb_p_fopen(filename,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7682"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7683"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stb__alloc_size;<sp/>++i)</highlight></codeline>
<codeline lineno="7684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__allocations[i].p<sp/>&gt;<sp/>STB_DEL)</highlight></codeline>
<codeline lineno="7685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;%p<sp/>%7d<sp/>-<sp/>%4d<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="7686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__allocations[i].p<sp/><sp/><sp/>,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>stb__allocations[i].size,</highlight></codeline>
<codeline lineno="7687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__allocations[i].line,<sp/>stb__allocations[i].file);</highlight></codeline>
<codeline lineno="7688"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7689"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7690"><highlight class="normal"></highlight></codeline>
<codeline lineno="7691"><highlight class="normal"></highlight></codeline>
<codeline lineno="7693"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7694"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_pointer_set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7695"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7696"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7697"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>data<sp/>structures<sp/>that<sp/>support<sp/>querying<sp/>by<sp/>key,<sp/>data<sp/>structure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7698"><highlight class="normal"></highlight><highlight class="comment">//<sp/>classes<sp/>always<sp/>hand-wave<sp/>away<sp/>the<sp/>issue<sp/>of<sp/>what<sp/>to<sp/>do<sp/>if<sp/>two<sp/>entries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7699"><highlight class="normal"></highlight><highlight class="comment">//<sp/>have<sp/>the<sp/>same<sp/>key:<sp/>basically,<sp/>store<sp/>a<sp/>linked<sp/>list<sp/>of<sp/>all<sp/>the<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7700"><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>have<sp/>the<sp/>same<sp/>key<sp/>(a<sp/>LISP-style<sp/>list).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7701"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7702"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>thing<sp/>is,<sp/>it&apos;s<sp/>not<sp/>that<sp/>trivial.<sp/>If<sp/>you<sp/>have<sp/>an<sp/>O(log<sp/>n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7703"><highlight class="normal"></highlight><highlight class="comment">//<sp/>lookup<sp/>data<sp/>structure,<sp/>but<sp/>then<sp/>n/4<sp/>items<sp/>have<sp/>the<sp/>same<sp/>value,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7704"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>don&apos;t<sp/>want<sp/>to<sp/>spend<sp/>O(n)<sp/>time<sp/>scanning<sp/>that<sp/>list<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7705"><highlight class="normal"></highlight><highlight class="comment">//<sp/>deleting<sp/>an<sp/>item<sp/>if<sp/>you<sp/>already<sp/>have<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>item.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7706"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(You<sp/>have<sp/>to<sp/>spend<sp/>O(n)<sp/>time<sp/>enumerating<sp/>all<sp/>the<sp/>items<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7707"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>given<sp/>key,<sp/>sure,<sp/>and<sp/>you<sp/>can&apos;t<sp/>accelerate<sp/>deleting<sp/>a<sp/>particular</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7708"><highlight class="normal"></highlight><highlight class="comment">//<sp/>item<sp/>if<sp/>you<sp/>only<sp/>have<sp/>the<sp/>key,<sp/>not<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>item.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7709"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7710"><highlight class="normal"></highlight><highlight class="comment">//<sp/>I&apos;m<sp/>going<sp/>to<sp/>call<sp/>this<sp/>data<sp/>structure,<sp/>whatever<sp/>it<sp/>turns<sp/>out<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7711"><highlight class="normal"></highlight><highlight class="comment">//<sp/>be,<sp/>a<sp/>&quot;pointer<sp/>set&quot;,<sp/>because<sp/>we<sp/>don&apos;t<sp/>store<sp/>any<sp/>associated<sp/>data<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7712"><highlight class="normal"></highlight><highlight class="comment">//<sp/>items<sp/>in<sp/>this<sp/>data<sp/>structure,<sp/>we<sp/>just<sp/>answer<sp/>the<sp/>question<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7713"><highlight class="normal"></highlight><highlight class="comment">//<sp/>whether<sp/>an<sp/>item<sp/>is<sp/>in<sp/>it<sp/>or<sp/>not<sp/>(it&apos;s<sp/>effectively<sp/>one<sp/>bit<sp/>per<sp/>pointer).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7714"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Technically<sp/>they<sp/>don&apos;t<sp/>have<sp/>to<sp/>be<sp/>pointers;<sp/>you<sp/>could<sp/>cast<sp/>ints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7715"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>(void<sp/>*)<sp/>if<sp/>you<sp/>want,<sp/>but<sp/>you<sp/>can&apos;t<sp/>store<sp/>0<sp/>or<sp/>1<sp/>because<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7716"><highlight class="normal"></highlight><highlight class="comment">//<sp/>hash<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7717"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7718"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Since<sp/>the<sp/>fastest<sp/>data<sp/>structure<sp/>we<sp/>might<sp/>want<sp/>to<sp/>add<sp/>support<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7719"><highlight class="normal"></highlight><highlight class="comment">//<sp/>identical-keys<sp/>to<sp/>is<sp/>a<sp/>hash<sp/>table<sp/>with<sp/>O(1)-ish<sp/>lookup<sp/>time,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7720"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>means<sp/>that<sp/>the<sp/>conceptual<sp/>&quot;linked<sp/>list<sp/>of<sp/>all<sp/>items<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7721"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>same<sp/>indexed<sp/>value&quot;<sp/>that<sp/>we<sp/>build<sp/>needs<sp/>to<sp/>have<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7722"><highlight class="normal"></highlight><highlight class="comment">//<sp/>performance;<sp/>that<sp/>way<sp/>when<sp/>we<sp/>index<sp/>a<sp/>table<sp/>we<sp/>think<sp/>is<sp/>arbitrary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7723"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ints,<sp/>but<sp/>in<sp/>fact<sp/>half<sp/>of<sp/>them<sp/>are<sp/>0,<sp/>we<sp/>don&apos;t<sp/>get<sp/>screwed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7724"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7725"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Therefore,<sp/>it<sp/>needs<sp/>to<sp/>be<sp/>a<sp/>hash<sp/>table,<sp/>at<sp/>least<sp/>when<sp/>it<sp/>gets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7726"><highlight class="normal"></highlight><highlight class="comment">//<sp/>large.<sp/>On<sp/>the<sp/>other<sp/>hand,<sp/>when<sp/>the<sp/>data<sp/>has<sp/>totally<sp/>arbitrary<sp/>ints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7727"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>floats,<sp/>there<sp/>won&apos;t<sp/>be<sp/>many<sp/>collisions,<sp/>and<sp/>we&apos;ll<sp/>have<sp/>tons<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7728"><highlight class="normal"></highlight><highlight class="comment">//<sp/>1-item<sp/>bitmaps.<sp/>That<sp/>will<sp/>be<sp/>grossly<sp/>inefficient<sp/>as<sp/>hash<sp/>tables;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7729"><highlight class="normal"></highlight><highlight class="comment">//<sp/>trade-off;<sp/>the<sp/>hash<sp/>table<sp/>is<sp/>reasonably<sp/>efficient<sp/>per-item<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7730"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>large,<sp/>but<sp/>not<sp/>when<sp/>it&apos;s<sp/>small.<sp/>So<sp/>we<sp/>need<sp/>to<sp/>do<sp/>something</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7731"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Judy-like<sp/>and<sp/>use<sp/>different<sp/>strategies<sp/>depending<sp/>on<sp/>the<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7732"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7733"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Like<sp/>Judy,<sp/>we&apos;ll<sp/>use<sp/>the<sp/>bottom<sp/>bit<sp/>to<sp/>encode<sp/>the<sp/>strategy:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7734"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7735"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>bottom<sp/>bits:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7736"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>00<sp/><sp/><sp/><sp/><sp/>-<sp/><sp/><sp/>direct<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7737"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>01<sp/><sp/><sp/><sp/><sp/>-<sp/><sp/><sp/>4-item<sp/>bucket<sp/>(16<sp/>bytes,<sp/>no<sp/>length,<sp/>NULLs)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7738"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>10<sp/><sp/><sp/><sp/><sp/>-<sp/><sp/><sp/>N-item<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7739"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>11<sp/><sp/><sp/><sp/><sp/>-<sp/><sp/><sp/>hash<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7740"><highlight class="normal"></highlight></codeline>
<codeline lineno="7741"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stb_ps<sp/>stb_ps;</highlight></codeline>
<codeline lineno="7742"><highlight class="normal"></highlight></codeline>
<codeline lineno="7743"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_find<sp/><sp/>(stb_ps<sp/>*ps,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="7744"><highlight class="normal">STB_EXTERN<sp/>stb_ps<sp/>*<sp/>stb_ps_add<sp/><sp/><sp/>(stb_ps<sp/>*ps,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="7745"><highlight class="normal">STB_EXTERN<sp/>stb_ps<sp/>*<sp/>stb_ps_remove(stb_ps<sp/>*ps,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="7746"><highlight class="normal">STB_EXTERN<sp/>stb_ps<sp/>*<sp/>stb_ps_remove_any(stb_ps<sp/>*ps,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**<ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="7747"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>stb_ps_delete(stb_ps<sp/>*ps);</highlight></codeline>
<codeline lineno="7748"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_count<sp/>(stb_ps<sp/>*ps);</highlight></codeline>
<codeline lineno="7749"><highlight class="normal"></highlight></codeline>
<codeline lineno="7750"><highlight class="normal">STB_EXTERN<sp/>stb_ps<sp/>*<sp/>stb_ps_copy<sp/><sp/>(stb_ps<sp/>*ps);</highlight></codeline>
<codeline lineno="7751"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_subset(stb_ps<sp/>*bigger,<sp/>stb_ps<sp/>*smaller);</highlight></codeline>
<codeline lineno="7752"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_eq<sp/><sp/><sp/><sp/>(stb_ps<sp/>*p0,<sp/>stb_ps<sp/>*p1);</highlight></codeline>
<codeline lineno="7753"><highlight class="normal"></highlight></codeline>
<codeline lineno="7754"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**<sp/>stb_ps_getlist<sp/><sp/>(stb_ps<sp/>*ps,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*count);</highlight></codeline>
<codeline lineno="7755"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>stb_ps_writelist(stb_ps<sp/>*ps,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**list,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>);</highlight></codeline>
<codeline lineno="7756"><highlight class="normal"></highlight></codeline>
<codeline lineno="7757"><highlight class="normal"></highlight><highlight class="comment">//<sp/>enum<sp/>and<sp/>fastlist<sp/>don&apos;t<sp/>allocate<sp/>storage,<sp/>but<sp/>you<sp/>must<sp/>consume<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7758"><highlight class="normal"></highlight><highlight class="comment">//<sp/>list<sp/>before<sp/>there&apos;s<sp/>any<sp/>chance<sp/>the<sp/>data<sp/>structure<sp/>gets<sp/>screwed<sp/>up;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7759"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>stb_ps_enum<sp/><sp/><sp/><sp/><sp/>(stb_ps<sp/>*ps,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,</highlight></codeline>
<codeline lineno="7760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*func)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="classvalue" kindref="compound">value</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*data)<sp/>);</highlight></codeline>
<codeline lineno="7761"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**<sp/>stb_ps_fastlist(stb_ps<sp/>*ps,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*count);</highlight></codeline>
<codeline lineno="7762"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>result:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7763"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>returns<sp/>a<sp/>list,<sp/>*count<sp/>is<sp/>the<sp/>length<sp/>of<sp/>that<sp/>list,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7764"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>but<sp/>some<sp/>entries<sp/>of<sp/>the<sp/>list<sp/>may<sp/>be<sp/>invalid;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7765"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>test<sp/>with<sp/>&apos;stb_ps_fastlist_valid(x)&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7766"><highlight class="normal"></highlight></codeline>
<codeline lineno="7767"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_ps_fastlist_valid(x)<sp/><sp/><sp/>((stb_uinta)<sp/>(x)<sp/>&gt;<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7768"><highlight class="normal"></highlight></codeline>
<codeline lineno="7769"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7770"><highlight class="normal"></highlight></codeline>
<codeline lineno="7771"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7772"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7773"><highlight class="normal"><sp/><sp/><sp/>STB_ps_direct<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="7774"><highlight class="normal"><sp/><sp/><sp/>STB_ps_bucket<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="7775"><highlight class="normal"><sp/><sp/><sp/>STB_ps_array<sp/><sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="7776"><highlight class="normal"><sp/><sp/><sp/>STB_ps_hash<sp/><sp/><sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="7777"><highlight class="normal">};</highlight></codeline>
<codeline lineno="7778"><highlight class="normal"></highlight></codeline>
<codeline lineno="7779"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_BUCKET_SIZE<sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7780"><highlight class="normal"></highlight></codeline>
<codeline lineno="7781"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7782"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7783"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p[STB_BUCKET_SIZE];</highlight></codeline>
<codeline lineno="7784"><highlight class="normal">}<sp/>stb_ps_bucket;</highlight></codeline>
<codeline lineno="7785"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GetBucket(p)<sp/><sp/><sp/><sp/>((stb_ps_bucket<sp/>*)<sp/>((char<sp/>*)<sp/>(p)<sp/>-<sp/>STB_ps_bucket))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7786"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EncodeBucket(p)<sp/>((stb_ps<sp/>*)<sp/>((char<sp/>*)<sp/>(p)<sp/>+<sp/>STB_ps_bucket))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7787"><highlight class="normal"></highlight></codeline>
<codeline lineno="7788"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_bucket_free(stb_ps_bucket<sp/>*b)</highlight></codeline>
<codeline lineno="7789"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7790"><highlight class="normal"><sp/><sp/><sp/>free(b);</highlight></codeline>
<codeline lineno="7791"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7792"><highlight class="normal"></highlight></codeline>
<codeline lineno="7793"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb_ps_bucket<sp/>*stb_bucket_create2(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*v0,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*v1)</highlight></codeline>
<codeline lineno="7794"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7795"><highlight class="normal"><sp/><sp/><sp/>stb_ps_bucket<sp/>*b<sp/>=<sp/>(stb_ps_bucket*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*b));</highlight></codeline>
<codeline lineno="7796"><highlight class="normal"><sp/><sp/><sp/>b-&gt;p[0]<sp/>=<sp/>v0;</highlight></codeline>
<codeline lineno="7797"><highlight class="normal"><sp/><sp/><sp/>b-&gt;p[1]<sp/>=<sp/>v1;</highlight></codeline>
<codeline lineno="7798"><highlight class="normal"><sp/><sp/><sp/>b-&gt;p[2]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="7799"><highlight class="normal"><sp/><sp/><sp/>b-&gt;p[3]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="7800"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b;</highlight></codeline>
<codeline lineno="7801"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7802"><highlight class="normal"></highlight></codeline>
<codeline lineno="7803"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb_ps_bucket<sp/>*<sp/>stb_bucket_create3(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**v)</highlight></codeline>
<codeline lineno="7804"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7805"><highlight class="normal"><sp/><sp/><sp/>stb_ps_bucket<sp/>*b<sp/>=<sp/>(stb_ps_bucket*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*b));</highlight></codeline>
<codeline lineno="7806"><highlight class="normal"><sp/><sp/><sp/>b-&gt;p[0]<sp/>=<sp/>v[0];</highlight></codeline>
<codeline lineno="7807"><highlight class="normal"><sp/><sp/><sp/>b-&gt;p[1]<sp/>=<sp/>v[1];</highlight></codeline>
<codeline lineno="7808"><highlight class="normal"><sp/><sp/><sp/>b-&gt;p[2]<sp/>=<sp/>v[2];</highlight></codeline>
<codeline lineno="7809"><highlight class="normal"><sp/><sp/><sp/>b-&gt;p[3]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="7810"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b;</highlight></codeline>
<codeline lineno="7811"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7812"><highlight class="normal"></highlight></codeline>
<codeline lineno="7813"><highlight class="normal"></highlight></codeline>
<codeline lineno="7814"><highlight class="normal"></highlight><highlight class="comment">//<sp/>could<sp/>use<sp/>stb_arr,<sp/>but<sp/>this<sp/>will<sp/>save<sp/>us<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7815"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7816"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7817"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="7818"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p[1];</highlight></codeline>
<codeline lineno="7819"><highlight class="normal">}<sp/>stb_ps_array;</highlight></codeline>
<codeline lineno="7820"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GetArray(p)<sp/><sp/><sp/><sp/><sp/>((stb_ps_array<sp/>*)<sp/>((char<sp/>*)<sp/>(p)<sp/>-<sp/>STB_ps_array))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7821"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EncodeArray(p)<sp/><sp/>((stb_ps<sp/>*)<sp/>((char<sp/>*)<sp/>(p)<sp/>+<sp/>STB_ps_array))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7822"><highlight class="normal"></highlight></codeline>
<codeline lineno="7823"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_ps_array_max<sp/>=<sp/>13;</highlight></codeline>
<codeline lineno="7824"><highlight class="normal"></highlight></codeline>
<codeline lineno="7825"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7826"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7827"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/><ref refid="structmask" kindref="compound">mask</ref>;</highlight></codeline>
<codeline lineno="7828"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/>count_deletes;</highlight></codeline>
<codeline lineno="7829"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>grow_threshhold;</highlight></codeline>
<codeline lineno="7830"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shrink_threshhold;</highlight></codeline>
<codeline lineno="7831"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rehash_threshhold;</highlight></codeline>
<codeline lineno="7832"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>any_offset;</highlight></codeline>
<codeline lineno="7833"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structtable" kindref="compound">table</ref>[1];</highlight></codeline>
<codeline lineno="7834"><highlight class="normal">}<sp/>stb_ps_hash;</highlight></codeline>
<codeline lineno="7835"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GetHash(p)<sp/><sp/><sp/><sp/><sp/><sp/>((stb_ps_hash<sp/>*)<sp/>((char<sp/>*)<sp/>(p)<sp/>-<sp/>STB_ps_hash))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7836"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EncodeHash(p)<sp/><sp/><sp/>((stb_ps<sp/>*)<sp/>((char<sp/>*)<sp/>(p)<sp/>+<sp/>STB_ps_hash))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7837"><highlight class="normal"></highlight></codeline>
<codeline lineno="7838"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_ps_empty(v)<sp/><sp/><sp/>(((stb_uint32)<sp/>v)<sp/>&lt;=<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7839"><highlight class="normal"></highlight></codeline>
<codeline lineno="7840"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb_ps_hash<sp/>*stb_ps_makehash(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>old_size,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**old_data)</highlight></codeline>
<codeline lineno="7841"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7842"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="7843"><highlight class="normal"><sp/><sp/><sp/>stb_ps_hash<sp/>*h<sp/>=<sp/>(stb_ps_hash<sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*h)<sp/>+<sp/>(size-1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(h-&gt;table[0]));</highlight></codeline>
<codeline lineno="7844"><highlight class="normal"><sp/><sp/><sp/>assert(stb_is_pow2(size));</highlight></codeline>
<codeline lineno="7845"><highlight class="normal"><sp/><sp/><sp/>h-&gt;size<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="7846"><highlight class="normal"><sp/><sp/><sp/>h-&gt;mask<sp/>=<sp/>size-1;</highlight></codeline>
<codeline lineno="7847"><highlight class="normal"><sp/><sp/><sp/>h-&gt;shrink_threshhold<sp/>=<sp/>(int)<sp/>(0.3f<sp/>*<sp/>size);</highlight></codeline>
<codeline lineno="7848"><highlight class="normal"><sp/><sp/><sp/>h-&gt;<sp/><sp/>grow_threshhold<sp/>=<sp/>(int)<sp/>(0.8f<sp/>*<sp/>size);</highlight></codeline>
<codeline lineno="7849"><highlight class="normal"><sp/><sp/><sp/>h-&gt;rehash_threshhold<sp/>=<sp/>(int)<sp/>(0.9f<sp/>*<sp/>size);</highlight></codeline>
<codeline lineno="7850"><highlight class="normal"><sp/><sp/><sp/>h-&gt;count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7851"><highlight class="normal"><sp/><sp/><sp/>h-&gt;count_deletes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7852"><highlight class="normal"><sp/><sp/><sp/>h-&gt;any_offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7853"><highlight class="normal"><sp/><sp/><sp/>memset(h-&gt;table,<sp/>0,<sp/>size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(h-&gt;table[0]));</highlight></codeline>
<codeline lineno="7854"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>old_size;<sp/>++i)</highlight></codeline>
<codeline lineno="7855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb_ps_empty((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)old_data[i]))</highlight></codeline>
<codeline lineno="7856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_add(EncodeHash(h),<sp/>old_data[i]);</highlight></codeline>
<codeline lineno="7857"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h;</highlight></codeline>
<codeline lineno="7858"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7859"><highlight class="normal"></highlight></codeline>
<codeline lineno="7860"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_ps_delete(stb_ps<sp/>*ps)</highlight></codeline>
<codeline lineno="7861"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(3<sp/>&amp;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>ps)<sp/>{</highlight></codeline>
<codeline lineno="7863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_direct:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_bucket:<sp/>stb_bucket_free(GetBucket(ps));<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_array<sp/>:<sp/>free(GetArray(ps));<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_hash<sp/><sp/>:<sp/>free(GetHash(ps));<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7867"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7868"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7869"><highlight class="normal"></highlight></codeline>
<codeline lineno="7870"><highlight class="normal">stb_ps<sp/>*stb_ps_copy(stb_ps<sp/>*ps)</highlight></codeline>
<codeline lineno="7871"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7872"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="7873"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>a<sp/>switch:<sp/>order<sp/>based<sp/>on<sp/>expected<sp/>performance/power-law<sp/>distribution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(3<sp/>&amp;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>ps)<sp/>{</highlight></codeline>
<codeline lineno="7875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_direct:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ps;</highlight></codeline>
<codeline lineno="7876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_bucket:<sp/>{</highlight></codeline>
<codeline lineno="7877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_bucket<sp/>*n<sp/>=<sp/>(stb_ps_bucket<sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*n));</highlight></codeline>
<codeline lineno="7878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*n<sp/>=<sp/>*GetBucket(ps);</highlight></codeline>
<codeline lineno="7879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EncodeBucket(n);</highlight></codeline>
<codeline lineno="7880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_array:<sp/>{</highlight></codeline>
<codeline lineno="7882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_array<sp/>*a<sp/>=<sp/>GetArray(ps);</highlight></codeline>
<codeline lineno="7883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_array<sp/>*n<sp/>=<sp/>(stb_ps_array<sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*n)<sp/>+<sp/>stb_ps_array_max<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(n-&gt;p[0]));</highlight></codeline>
<codeline lineno="7884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;count<sp/>=<sp/>a-&gt;count;</highlight></codeline>
<codeline lineno="7885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>a-&gt;count;<sp/>++i)</highlight></codeline>
<codeline lineno="7886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;p[i]<sp/>=<sp/>a-&gt;p[i];</highlight></codeline>
<codeline lineno="7887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EncodeArray(n);</highlight></codeline>
<codeline lineno="7888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_hash:<sp/>{</highlight></codeline>
<codeline lineno="7890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_hash<sp/>*h<sp/>=<sp/>GetHash(ps);</highlight></codeline>
<codeline lineno="7891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_hash<sp/>*n<sp/>=<sp/>stb_ps_makehash(h-&gt;size,<sp/>h-&gt;size,<sp/>h-&gt;table);</highlight></codeline>
<codeline lineno="7892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EncodeHash(n);</highlight></codeline>
<codeline lineno="7893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7894"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7895"><highlight class="normal"><sp/><sp/><sp/>assert(0);<sp/></highlight><highlight class="comment">/*<sp/>NOTREACHED<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7896"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="7897"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7898"><highlight class="normal"></highlight></codeline>
<codeline lineno="7899"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_ps_find(stb_ps<sp/>*ps,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="classvalue" kindref="compound">value</ref>)</highlight></codeline>
<codeline lineno="7900"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>code<sp/>=<sp/>3<sp/>&amp;<sp/>(int)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>ps;</highlight></codeline>
<codeline lineno="7902"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((3<sp/>&amp;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>==<sp/>STB_ps_direct);</highlight></codeline>
<codeline lineno="7903"><highlight class="normal"><sp/><sp/><sp/>assert(stb_ps_fastlist_valid(<ref refid="classvalue" kindref="compound">value</ref>));</highlight></codeline>
<codeline lineno="7904"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>a<sp/>switch:<sp/>order<sp/>based<sp/>on<sp/>expected<sp/>performance/power-law<sp/>distribution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7905"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/>STB_ps_direct)</highlight></codeline>
<codeline lineno="7906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>==<sp/>ps;</highlight></codeline>
<codeline lineno="7907"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/>STB_ps_bucket)<sp/>{</highlight></codeline>
<codeline lineno="7908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_bucket<sp/>*b<sp/>=<sp/>GetBucket(ps);</highlight></codeline>
<codeline lineno="7909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(STB_BUCKET_SIZE<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="7910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b-&gt;p[0]<sp/>==<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>||<sp/>b-&gt;p[1]<sp/>==<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>||</highlight></codeline>
<codeline lineno="7911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b-&gt;p[2]<sp/>==<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>||<sp/>b-&gt;p[3]<sp/>==<sp/><ref refid="classvalue" kindref="compound">value</ref>)</highlight></codeline>
<codeline lineno="7912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_TRUE;</highlight></codeline>
<codeline lineno="7913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_FALSE;</highlight></codeline>
<codeline lineno="7914"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7915"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/>STB_ps_array)<sp/>{</highlight></codeline>
<codeline lineno="7916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_array<sp/>*a<sp/>=<sp/>GetArray(ps);</highlight></codeline>
<codeline lineno="7917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>a-&gt;count;<sp/>++i)</highlight></codeline>
<codeline lineno="7918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;p[i]<sp/>==<sp/><ref refid="classvalue" kindref="compound">value</ref>)</highlight></codeline>
<codeline lineno="7919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_TRUE;</highlight></codeline>
<codeline lineno="7920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_FALSE;</highlight></codeline>
<codeline lineno="7921"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_hash<sp/>*h<sp/>=<sp/>GetHash(ps);</highlight></codeline>
<codeline lineno="7923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_uint32<sp/>hash<sp/>=<sp/>stb_hashptr(<ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="7924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_uint32<sp/>s,<sp/>n<sp/>=<sp/>hash<sp/>&amp;<sp/>h-&gt;mask;</highlight></codeline>
<codeline lineno="7925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**t<sp/>=<sp/>h-&gt;table;</highlight></codeline>
<codeline lineno="7926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t[n]<sp/>==<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_TRUE;</highlight></codeline>
<codeline lineno="7927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t[n]<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_FALSE;</highlight></codeline>
<codeline lineno="7928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>stb_rehash(hash)<sp/>|<sp/>1;</highlight></codeline>
<codeline lineno="7929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(n<sp/>+<sp/>s)<sp/>&amp;<sp/>h-&gt;mask;</highlight></codeline>
<codeline lineno="7931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(t[n]<sp/>==<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_TRUE;</highlight></codeline>
<codeline lineno="7932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(t[n]<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="7933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_FALSE;</highlight></codeline>
<codeline lineno="7934"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7935"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7936"><highlight class="normal"></highlight></codeline>
<codeline lineno="7937"><highlight class="normal">stb_ps<sp/>*<sp/><sp/>stb_ps_add<sp/><sp/><sp/>(stb_ps<sp/>*ps,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="classvalue" kindref="compound">value</ref>)</highlight></codeline>
<codeline lineno="7938"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7939"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>STB_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7940"><highlight class="normal"><sp/><sp/><sp/>assert(!stb_ps_find(ps,<ref refid="classvalue" kindref="compound">value</ref>));</highlight></codeline>
<codeline lineno="7941"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7942"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classvalue" kindref="compound">value</ref><sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ps;<sp/></highlight><highlight class="comment">//<sp/>ignore<sp/>NULL<sp/>adds<sp/>to<sp/>avoid<sp/>bad<sp/>breakage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7943"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((3<sp/>&amp;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>==<sp/>STB_ps_direct);</highlight></codeline>
<codeline lineno="7944"><highlight class="normal"><sp/><sp/><sp/>assert(stb_ps_fastlist_valid(<ref refid="classvalue" kindref="compound">value</ref>));</highlight></codeline>
<codeline lineno="7945"><highlight class="normal"><sp/><sp/><sp/>assert(<ref refid="classvalue" kindref="compound">value</ref><sp/>!=<sp/>STB_DEL);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>STB_DEL<sp/>is<sp/>less<sp/>likely</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7946"><highlight class="normal"></highlight></codeline>
<codeline lineno="7947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(3<sp/>&amp;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>ps)<sp/>{</highlight></codeline>
<codeline lineno="7948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_direct:</highlight></codeline>
<codeline lineno="7949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ps<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(stb_ps<sp/>*)<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="7950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EncodeBucket(stb_bucket_create2(ps,<ref refid="classvalue" kindref="compound">value</ref>));</highlight></codeline>
<codeline lineno="7951"><highlight class="normal"></highlight></codeline>
<codeline lineno="7952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_bucket:<sp/>{</highlight></codeline>
<codeline lineno="7953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_bucket<sp/>*b<sp/>=<sp/>GetBucket(ps);</highlight></codeline>
<codeline lineno="7954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_array<sp/><sp/>*a;</highlight></codeline>
<codeline lineno="7955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(STB_BUCKET_SIZE<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="7956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b-&gt;p[0]<sp/>==<sp/>NULL)<sp/>{<sp/>b-&gt;p[0]<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ps;<sp/>}</highlight></codeline>
<codeline lineno="7957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b-&gt;p[1]<sp/>==<sp/>NULL)<sp/>{<sp/>b-&gt;p[1]<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ps;<sp/>}</highlight></codeline>
<codeline lineno="7958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b-&gt;p[2]<sp/>==<sp/>NULL)<sp/>{<sp/>b-&gt;p[2]<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ps;<sp/>}</highlight></codeline>
<codeline lineno="7959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b-&gt;p[3]<sp/>==<sp/>NULL)<sp/>{<sp/>b-&gt;p[3]<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ps;<sp/>}</highlight></codeline>
<codeline lineno="7960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>(stb_ps_array<sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*a)<sp/>+<sp/>7<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(a-&gt;p[0]));<sp/></highlight><highlight class="comment">//<sp/>8<sp/>slots,<sp/>must<sp/>be<sp/>2^k</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(a-&gt;p,<sp/>b,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*b));</highlight></codeline>
<codeline lineno="7962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;p[4]<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="7963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;count<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="7964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_bucket_free(b);</highlight></codeline>
<codeline lineno="7965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EncodeArray(a);</highlight></codeline>
<codeline lineno="7966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7967"><highlight class="normal"></highlight></codeline>
<codeline lineno="7968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_array:<sp/>{</highlight></codeline>
<codeline lineno="7969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_array<sp/>*a<sp/>=<sp/>GetArray(ps);</highlight></codeline>
<codeline lineno="7970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;count<sp/>==<sp/>stb_ps_array_max)<sp/>{</highlight></codeline>
<codeline lineno="7971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>promote<sp/>from<sp/>array<sp/>to<sp/>hash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_hash<sp/>*h<sp/>=<sp/>stb_ps_makehash(2<sp/>&lt;&lt;<sp/>stb_log2_ceil(a-&gt;count),<sp/>a-&gt;count,<sp/>a-&gt;p);</highlight></codeline>
<codeline lineno="7973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(a);</highlight></codeline>
<codeline lineno="7974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_ps_add(EncodeHash(h),<sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="7975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>we<sp/>need<sp/>to<sp/>resize<sp/>the<sp/>array?<sp/>the<sp/>array<sp/>doubles<sp/>in<sp/>size<sp/>when<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>crosses<sp/>a<sp/>power-of-two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((a-&gt;count<sp/>&amp;<sp/>(a-&gt;count-1))==0)<sp/>{</highlight></codeline>
<codeline lineno="7979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newsize<sp/>=<sp/>a-&gt;count*2;</highlight></codeline>
<codeline lineno="7980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clamp<sp/>newsize<sp/>to<sp/>max<sp/>if:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>1.<sp/>it&apos;s<sp/>larger<sp/>than<sp/>max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>2.<sp/>newsize*1.5<sp/>is<sp/>larger<sp/>than<sp/>max<sp/>(to<sp/>avoid<sp/>extra<sp/>resizing)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newsize<sp/>+<sp/>a-&gt;count<sp/>&gt;<sp/>stb_ps_array_max)</highlight></codeline>
<codeline lineno="7984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newsize<sp/>=<sp/>stb_ps_array_max;</highlight></codeline>
<codeline lineno="7985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>(stb_ps_array<sp/>*)<sp/>realloc(a,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*a)<sp/>+<sp/>(newsize-1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(a-&gt;p[0]));</highlight></codeline>
<codeline lineno="7986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;p[a-&gt;count++]<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="7988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EncodeArray(a);</highlight></codeline>
<codeline lineno="7989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_hash:<sp/>{</highlight></codeline>
<codeline lineno="7991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_hash<sp/>*h<sp/>=<sp/>GetHash(ps);</highlight></codeline>
<codeline lineno="7992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_uint32<sp/>hash<sp/>=<sp/>stb_hashptr(<ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="7993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_uint32<sp/>n<sp/>=<sp/>hash<sp/>&amp;<sp/>h-&gt;mask;</highlight></codeline>
<codeline lineno="7994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**t<sp/>=<sp/>h-&gt;table;</highlight></codeline>
<codeline lineno="7995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>first<sp/>NULL<sp/>or<sp/>STB_DEL<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb_ps_empty((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)t[n]))<sp/>{</highlight></codeline>
<codeline lineno="7997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_uint32<sp/>s<sp/>=<sp/>stb_rehash(hash)<sp/>|<sp/>1;</highlight></codeline>
<codeline lineno="7998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(n<sp/>+<sp/>s)<sp/>&amp;<sp/>h-&gt;mask;</highlight></codeline>
<codeline lineno="8000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!stb_ps_empty((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)t[n]));</highlight></codeline>
<codeline lineno="8001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t[n]<sp/>==<sp/>STB_DEL)</highlight></codeline>
<codeline lineno="8003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<sp/>h-&gt;count_deletes;</highlight></codeline>
<codeline lineno="8004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t[n]<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="8005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++<sp/>h-&gt;count;</highlight></codeline>
<codeline lineno="8006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h-&gt;count<sp/>==<sp/>h-&gt;grow_threshhold)<sp/>{</highlight></codeline>
<codeline lineno="8007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_hash<sp/>*h2<sp/>=<sp/>stb_ps_makehash(h-&gt;size*2,<sp/>h-&gt;size,<sp/>t);</highlight></codeline>
<codeline lineno="8008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(h);</highlight></codeline>
<codeline lineno="8009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EncodeHash(h2);</highlight></codeline>
<codeline lineno="8010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h-&gt;count<sp/>+<sp/>h-&gt;count_deletes<sp/>==<sp/>h-&gt;rehash_threshhold)<sp/>{</highlight></codeline>
<codeline lineno="8012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_hash<sp/>*h2<sp/>=<sp/>stb_ps_makehash(h-&gt;size,<sp/>h-&gt;size,<sp/>t);</highlight></codeline>
<codeline lineno="8013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(h);</highlight></codeline>
<codeline lineno="8014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EncodeHash(h2);</highlight></codeline>
<codeline lineno="8015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ps;</highlight></codeline>
<codeline lineno="8017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8018"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8019"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/></highlight><highlight class="comment">/*<sp/>NOTREACHED<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8020"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8021"><highlight class="normal"></highlight></codeline>
<codeline lineno="8022"><highlight class="normal">stb_ps<sp/>*stb_ps_remove(stb_ps<sp/>*ps,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="classvalue" kindref="compound">value</ref>)</highlight></codeline>
<codeline lineno="8023"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8024"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>STB_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8025"><highlight class="normal"><sp/><sp/><sp/>assert(stb_ps_find(ps,<sp/><ref refid="classvalue" kindref="compound">value</ref>));</highlight></codeline>
<codeline lineno="8026"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8027"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((3<sp/>&amp;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>==<sp/>STB_ps_direct);</highlight></codeline>
<codeline lineno="8028"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classvalue" kindref="compound">value</ref><sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ps;<sp/></highlight><highlight class="comment">//<sp/>ignore<sp/>NULL<sp/>removes<sp/>to<sp/>avoid<sp/>bad<sp/>breakage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(3<sp/>&amp;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>ps)<sp/>{</highlight></codeline>
<codeline lineno="8030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_direct:</highlight></codeline>
<codeline lineno="8031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ps<sp/>==<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>?<sp/>NULL<sp/>:<sp/>ps;</highlight></codeline>
<codeline lineno="8032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_bucket:<sp/>{</highlight></codeline>
<codeline lineno="8033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_bucket<sp/>*b<sp/>=<sp/>GetBucket(ps);</highlight></codeline>
<codeline lineno="8034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count=0;</highlight></codeline>
<codeline lineno="8035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(STB_BUCKET_SIZE<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="8036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b-&gt;p[0]<sp/>==<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>b-&gt;p[0]<sp/>=<sp/>NULL;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>count<sp/>+=<sp/>(b-&gt;p[0]<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="8037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b-&gt;p[1]<sp/>==<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>b-&gt;p[1]<sp/>=<sp/>NULL;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>count<sp/>+=<sp/>(b-&gt;p[1]<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="8038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b-&gt;p[2]<sp/>==<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>b-&gt;p[2]<sp/>=<sp/>NULL;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>count<sp/>+=<sp/>(b-&gt;p[2]<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="8039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b-&gt;p[3]<sp/>==<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>b-&gt;p[3]<sp/>=<sp/>NULL;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>count<sp/>+=<sp/>(b-&gt;p[3]<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="8040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>==<sp/>1)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>shrink<sp/>bucket<sp/>at<sp/>size<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>=<sp/>b-&gt;p[0];</highlight></codeline>
<codeline lineno="8042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classvalue" kindref="compound">value</ref><sp/>==<sp/>NULL)<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>=<sp/>b-&gt;p[1];</highlight></codeline>
<codeline lineno="8043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classvalue" kindref="compound">value</ref><sp/>==<sp/>NULL)<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>=<sp/>b-&gt;p[2];</highlight></codeline>
<codeline lineno="8044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classvalue" kindref="compound">value</ref><sp/>==<sp/>NULL)<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>=<sp/>b-&gt;p[3];</highlight></codeline>
<codeline lineno="8045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="classvalue" kindref="compound">value</ref><sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="8046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_bucket_free(b);</highlight></codeline>
<codeline lineno="8047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(stb_ps<sp/>*)<sp/><ref refid="classvalue" kindref="compound">value</ref>;<sp/></highlight><highlight class="comment">//<sp/>return<sp/>STB_ps_direct<sp/>of<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ps;</highlight></codeline>
<codeline lineno="8050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_array:<sp/>{</highlight></codeline>
<codeline lineno="8052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_array<sp/>*a<sp/>=<sp/>GetArray(ps);</highlight></codeline>
<codeline lineno="8053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="8054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>a-&gt;count;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="8055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;p[i]<sp/>==<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="8056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;p[i]<sp/>=<sp/>a-&gt;p[--a-&gt;count];</highlight></codeline>
<codeline lineno="8057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;count<sp/>==<sp/>3)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>shrink<sp/>to<sp/>bucket!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_bucket<sp/>*b<sp/>=<sp/>stb_bucket_create3(a-&gt;p);</highlight></codeline>
<codeline lineno="8059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(a);</highlight></codeline>
<codeline lineno="8060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EncodeBucket(b);</highlight></codeline>
<codeline lineno="8061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ps;</highlight></codeline>
<codeline lineno="8063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ps;</highlight></codeline>
<codeline lineno="8066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_hash:<sp/>{</highlight></codeline>
<codeline lineno="8068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_hash<sp/>*h<sp/>=<sp/>GetHash(ps);</highlight></codeline>
<codeline lineno="8069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_uint32<sp/>hash<sp/>=<sp/>stb_hashptr(<ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="8070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_uint32<sp/>s,<sp/>n<sp/>=<sp/>hash<sp/>&amp;<sp/>h-&gt;mask;</highlight></codeline>
<codeline lineno="8071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**t<sp/>=<sp/>h-&gt;table;</highlight></codeline>
<codeline lineno="8072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t[n]<sp/>!=<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="8073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>stb_rehash(hash)<sp/>|<sp/>1;</highlight></codeline>
<codeline lineno="8074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(n<sp/>+<sp/>s)<sp/>&amp;<sp/>h-&gt;mask;</highlight></codeline>
<codeline lineno="8076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(t[n]<sp/>!=<sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="8077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t[n]<sp/>=<sp/>STB_DEL;</highlight></codeline>
<codeline lineno="8079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<sp/>h-&gt;count;</highlight></codeline>
<codeline lineno="8080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++<sp/>h-&gt;count_deletes;</highlight></codeline>
<codeline lineno="8081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>we<sp/>shrink<sp/>down<sp/>to<sp/>an<sp/>array?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h-&gt;count<sp/>&lt;<sp/>stb_ps_array_max)<sp/>{</highlight></codeline>
<codeline lineno="8083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>stb_log2_floor(stb_ps_array_max);</highlight></codeline>
<codeline lineno="8084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h-&gt;count<sp/>&lt;<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="8085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_array<sp/>*a<sp/>=<sp/>(stb_ps_array<sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*a)<sp/>+<sp/>(n-1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(a-&gt;p[0]));</highlight></codeline>
<codeline lineno="8086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j=0;</highlight></codeline>
<codeline lineno="8087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>h-&gt;size;<sp/>++i)</highlight></codeline>
<codeline lineno="8088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb_ps_empty((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)t[i]))</highlight></codeline>
<codeline lineno="8089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;p[j++]<sp/>=<sp/>t[i];</highlight></codeline>
<codeline lineno="8090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(j<sp/>==<sp/>h-&gt;count);</highlight></codeline>
<codeline lineno="8091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;count<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="8092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(h);</highlight></codeline>
<codeline lineno="8093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EncodeArray(a);</highlight></codeline>
<codeline lineno="8094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h-&gt;count<sp/>==<sp/>h-&gt;shrink_threshhold)<sp/>{</highlight></codeline>
<codeline lineno="8097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_hash<sp/>*h2<sp/>=<sp/>stb_ps_makehash(h-&gt;size<sp/>&gt;&gt;<sp/>1,<sp/>h-&gt;size,<sp/>t);</highlight></codeline>
<codeline lineno="8098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(h);</highlight></codeline>
<codeline lineno="8099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EncodeHash(h2);</highlight></codeline>
<codeline lineno="8100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ps;</highlight></codeline>
<codeline lineno="8102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8103"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8104"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ps;<sp/></highlight><highlight class="comment">/*<sp/>NOTREACHED<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8106"><highlight class="normal"></highlight></codeline>
<codeline lineno="8107"><highlight class="normal">stb_ps<sp/>*stb_ps_remove_any(stb_ps<sp/>*ps,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**<ref refid="classvalue" kindref="compound">value</ref>)</highlight></codeline>
<codeline lineno="8108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8109"><highlight class="normal"><sp/><sp/><sp/>assert(ps<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="8110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(3<sp/>&amp;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>ps)<sp/>{</highlight></codeline>
<codeline lineno="8111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_direct:</highlight></codeline>
<codeline lineno="8112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="classvalue" kindref="compound">value</ref><sp/>=<sp/>ps;</highlight></codeline>
<codeline lineno="8113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="8114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_bucket:<sp/>{</highlight></codeline>
<codeline lineno="8115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_bucket<sp/>*b<sp/>=<sp/>GetBucket(ps);</highlight></codeline>
<codeline lineno="8116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count=0,<sp/>slast=0,<sp/>last=0;</highlight></codeline>
<codeline lineno="8117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(STB_BUCKET_SIZE<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="8118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b-&gt;p[0])<sp/>{<sp/>++count;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last<sp/>=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="8119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b-&gt;p[1])<sp/>{<sp/>++count;<sp/>slast<sp/>=<sp/>last;<sp/>last<sp/>=<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="8120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b-&gt;p[2])<sp/>{<sp/>++count;<sp/>slast<sp/>=<sp/>last;<sp/>last<sp/>=<sp/>2;<sp/>}</highlight></codeline>
<codeline lineno="8121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b-&gt;p[3])<sp/>{<sp/>++count;<sp/>slast<sp/>=<sp/>last;<sp/>last<sp/>=<sp/>3;<sp/>}</highlight></codeline>
<codeline lineno="8122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="classvalue" kindref="compound">value</ref><sp/>=<sp/>b-&gt;p[last];</highlight></codeline>
<codeline lineno="8123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b-&gt;p[last]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="8124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="8125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*leftover<sp/>=<sp/>b-&gt;p[slast];<sp/></highlight><highlight class="comment">//<sp/>second<sp/>to<sp/>last</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_bucket_free(b);</highlight></codeline>
<codeline lineno="8127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(stb_ps<sp/>*)<sp/>leftover;</highlight></codeline>
<codeline lineno="8128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ps;</highlight></codeline>
<codeline lineno="8130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_array:<sp/>{</highlight></codeline>
<codeline lineno="8132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_array<sp/>*a<sp/>=<sp/>GetArray(ps);</highlight></codeline>
<codeline lineno="8133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="classvalue" kindref="compound">value</ref><sp/>=<sp/>a-&gt;p[a-&gt;count-1];</highlight></codeline>
<codeline lineno="8134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;count<sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="8135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_ps_remove(ps,<sp/>*<ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="8136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--a-&gt;count;</highlight></codeline>
<codeline lineno="8137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ps;</highlight></codeline>
<codeline lineno="8138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_hash:<sp/>{</highlight></codeline>
<codeline lineno="8140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_hash<sp/>*h<sp/>=<sp/>GetHash(ps);</highlight></codeline>
<codeline lineno="8141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**t<sp/>=<sp/>h-&gt;table;</highlight></codeline>
<codeline lineno="8142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_uint32<sp/>n<sp/>=<sp/>h-&gt;any_offset;</highlight></codeline>
<codeline lineno="8143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(stb_ps_empty((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)t[n]))</highlight></codeline>
<codeline lineno="8144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(n<sp/>+<sp/>1)<sp/>&amp;<sp/>h-&gt;mask;</highlight></codeline>
<codeline lineno="8145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="classvalue" kindref="compound">value</ref><sp/>=<sp/>t[n];</highlight></codeline>
<codeline lineno="8146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h-&gt;any_offset<sp/>=<sp/>(n+1)<sp/>&amp;<sp/>h-&gt;mask;</highlight></codeline>
<codeline lineno="8147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>we<sp/>need<sp/>to<sp/>skip<sp/>down<sp/>to<sp/>the<sp/>previous<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h-&gt;count-1<sp/>&lt;<sp/>stb_ps_array_max<sp/>||<sp/>h-&gt;count-1<sp/>==<sp/>h-&gt;shrink_threshhold)</highlight></codeline>
<codeline lineno="8149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_ps_remove(ps,<sp/>*<ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="8150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t[n]<sp/>=<sp/>STB_DEL;</highlight></codeline>
<codeline lineno="8151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<sp/>h-&gt;count;</highlight></codeline>
<codeline lineno="8152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++<sp/>h-&gt;count_deletes;</highlight></codeline>
<codeline lineno="8153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ps;</highlight></codeline>
<codeline lineno="8154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8155"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8156"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ps;<sp/></highlight><highlight class="comment">/*<sp/>NOTREACHED<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8158"><highlight class="normal"></highlight></codeline>
<codeline lineno="8159"><highlight class="normal"></highlight></codeline>
<codeline lineno="8160"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**<sp/>stb_ps_getlist(stb_ps<sp/>*ps,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*count)</highlight></codeline>
<codeline lineno="8161"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8162"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,n=0;</highlight></codeline>
<codeline lineno="8163"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**p<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="8164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(3<sp/>&amp;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>ps)<sp/>{</highlight></codeline>
<codeline lineno="8165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_direct:</highlight></codeline>
<codeline lineno="8166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ps<sp/>==<sp/>NULL)<sp/>{<sp/>*count<sp/>=<sp/>0;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/>}</highlight></codeline>
<codeline lineno="8167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*p)<sp/>*<sp/>1);</highlight></codeline>
<codeline lineno="8168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[0]<sp/>=<sp/>ps;</highlight></codeline>
<codeline lineno="8169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*count<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="8170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="8171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_bucket:<sp/>{</highlight></codeline>
<codeline lineno="8172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_bucket<sp/>*b<sp/>=<sp/>GetBucket(ps);</highlight></codeline>
<codeline lineno="8173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*p)<sp/>*<sp/>STB_BUCKET_SIZE);</highlight></codeline>
<codeline lineno="8174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>STB_BUCKET_SIZE;<sp/>++i)</highlight></codeline>
<codeline lineno="8175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b-&gt;p[i]<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="8176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[n++]<sp/>=<sp/>b-&gt;p[i];</highlight></codeline>
<codeline lineno="8177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_array:<sp/>{</highlight></codeline>
<codeline lineno="8180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_array<sp/>*a<sp/>=<sp/>GetArray(ps);</highlight></codeline>
<codeline lineno="8181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*p)<sp/>*<sp/>a-&gt;count);</highlight></codeline>
<codeline lineno="8182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(p,<sp/>a-&gt;p,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*p)<sp/>*<sp/>a-&gt;count);</highlight></codeline>
<codeline lineno="8183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*count<sp/>=<sp/>a-&gt;count;</highlight></codeline>
<codeline lineno="8184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="8185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_hash:<sp/>{</highlight></codeline>
<codeline lineno="8187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_hash<sp/>*h<sp/>=<sp/>GetHash(ps);</highlight></codeline>
<codeline lineno="8188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*p)<sp/>*<sp/>h-&gt;count);</highlight></codeline>
<codeline lineno="8189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>h-&gt;size;<sp/>++i)</highlight></codeline>
<codeline lineno="8190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb_ps_empty((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)h-&gt;table[i]))</highlight></codeline>
<codeline lineno="8191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[n++]<sp/>=<sp/>h-&gt;table[i];</highlight></codeline>
<codeline lineno="8192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8194"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8195"><highlight class="normal"><sp/><sp/><sp/>*count<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="8196"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="8197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8198"><highlight class="normal"></highlight></codeline>
<codeline lineno="8199"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_ps_writelist(stb_ps<sp/>*ps,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**list,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>)</highlight></codeline>
<codeline lineno="8200"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8201"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,n=0;</highlight></codeline>
<codeline lineno="8202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(3<sp/>&amp;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>ps)<sp/>{</highlight></codeline>
<codeline lineno="8203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_direct:</highlight></codeline>
<codeline lineno="8204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ps<sp/>==<sp/>NULL<sp/>||<sp/>size<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="8205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list[0]<sp/>=<sp/>ps;</highlight></codeline>
<codeline lineno="8206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="8207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_bucket:<sp/>{</highlight></codeline>
<codeline lineno="8208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_bucket<sp/>*b<sp/>=<sp/>GetBucket(ps);</highlight></codeline>
<codeline lineno="8209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>STB_BUCKET_SIZE;<sp/>++i)</highlight></codeline>
<codeline lineno="8210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b-&gt;p[i]<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>n<sp/>&lt;<sp/>size)</highlight></codeline>
<codeline lineno="8211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list[n++]<sp/>=<sp/>b-&gt;p[i];</highlight></codeline>
<codeline lineno="8212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="8213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_array:<sp/>{</highlight></codeline>
<codeline lineno="8215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_array<sp/>*a<sp/>=<sp/>GetArray(ps);</highlight></codeline>
<codeline lineno="8216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>stb_min(size,<sp/>a-&gt;count);</highlight></codeline>
<codeline lineno="8217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(list,<sp/>a-&gt;p,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*list)<sp/>*<sp/>n);</highlight></codeline>
<codeline lineno="8218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="8219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_hash:<sp/>{</highlight></codeline>
<codeline lineno="8221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_hash<sp/>*h<sp/>=<sp/>GetHash(ps);</highlight></codeline>
<codeline lineno="8222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="8223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>h-&gt;count;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="8224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb_ps_empty((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)h-&gt;table[i]))<sp/>{</highlight></codeline>
<codeline lineno="8225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list[n++]<sp/>=<sp/>h-&gt;table[i];</highlight></codeline>
<codeline lineno="8226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>size)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="8230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8231"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8232"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>NOTREACHED<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8234"><highlight class="normal"></highlight></codeline>
<codeline lineno="8235"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_ps_enum(stb_ps<sp/>*ps,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*func)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="classvalue" kindref="compound">value</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data))</highlight></codeline>
<codeline lineno="8236"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8237"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="8238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(3<sp/>&amp;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>ps)<sp/>{</highlight></codeline>
<codeline lineno="8239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_direct:</highlight></codeline>
<codeline lineno="8240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ps<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_TRUE;</highlight></codeline>
<codeline lineno="8241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>func(ps,<sp/>data);</highlight></codeline>
<codeline lineno="8242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_bucket:<sp/>{</highlight></codeline>
<codeline lineno="8243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_bucket<sp/>*b<sp/>=<sp/>GetBucket(ps);</highlight></codeline>
<codeline lineno="8244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>STB_BUCKET_SIZE;<sp/>++i)</highlight></codeline>
<codeline lineno="8245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b-&gt;p[i]<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="8246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!func(b-&gt;p[i],<sp/>data))</highlight></codeline>
<codeline lineno="8247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_FALSE;</highlight></codeline>
<codeline lineno="8248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_TRUE;</highlight></codeline>
<codeline lineno="8249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_array:<sp/>{</highlight></codeline>
<codeline lineno="8251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_array<sp/>*a<sp/>=<sp/>GetArray(ps);</highlight></codeline>
<codeline lineno="8252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>a-&gt;count;<sp/>++i)</highlight></codeline>
<codeline lineno="8253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!func(a-&gt;p[i],<sp/>data))</highlight></codeline>
<codeline lineno="8254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_FALSE;</highlight></codeline>
<codeline lineno="8255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_TRUE;</highlight></codeline>
<codeline lineno="8256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_hash:<sp/>{</highlight></codeline>
<codeline lineno="8258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_hash<sp/>*h<sp/>=<sp/>GetHash(ps);</highlight></codeline>
<codeline lineno="8259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>h-&gt;count;<sp/>++i)</highlight></codeline>
<codeline lineno="8260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb_ps_empty((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)h-&gt;table[i]))</highlight></codeline>
<codeline lineno="8261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!func(h-&gt;table[i],<sp/>data))</highlight></codeline>
<codeline lineno="8262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_FALSE;</highlight></codeline>
<codeline lineno="8263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_TRUE;</highlight></codeline>
<codeline lineno="8264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8265"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8266"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_TRUE;<sp/></highlight><highlight class="comment">/*<sp/>NOTREACHED<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8268"><highlight class="normal"></highlight></codeline>
<codeline lineno="8269"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_ps_count<sp/>(stb_ps<sp/>*ps)</highlight></codeline>
<codeline lineno="8270"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(3<sp/>&amp;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>ps)<sp/>{</highlight></codeline>
<codeline lineno="8272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_direct:</highlight></codeline>
<codeline lineno="8273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ps<sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="8274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_bucket:<sp/>{</highlight></codeline>
<codeline lineno="8275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_bucket<sp/>*b<sp/>=<sp/>GetBucket(ps);</highlight></codeline>
<codeline lineno="8276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(b-&gt;p[0]<sp/>!=<sp/>NULL)<sp/>+<sp/>(b-&gt;p[1]<sp/>!=<sp/>NULL)<sp/>+</highlight></codeline>
<codeline lineno="8277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(b-&gt;p[2]<sp/>!=<sp/>NULL)<sp/>+<sp/>(b-&gt;p[3]<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="8278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_array:<sp/>{</highlight></codeline>
<codeline lineno="8280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_array<sp/>*a<sp/>=<sp/>GetArray(ps);</highlight></codeline>
<codeline lineno="8281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a-&gt;count;</highlight></codeline>
<codeline lineno="8282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_hash:<sp/>{</highlight></codeline>
<codeline lineno="8284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_hash<sp/>*h<sp/>=<sp/>GetHash(ps);</highlight></codeline>
<codeline lineno="8285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h-&gt;count;</highlight></codeline>
<codeline lineno="8286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8287"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8288"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="8289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8290"><highlight class="normal"></highlight></codeline>
<codeline lineno="8291"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**<sp/>stb_ps_fastlist(stb_ps<sp/>*ps,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*count)</highlight></codeline>
<codeline lineno="8292"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8293"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*storage;</highlight></codeline>
<codeline lineno="8294"><highlight class="normal"></highlight></codeline>
<codeline lineno="8295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(3<sp/>&amp;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>ps)<sp/>{</highlight></codeline>
<codeline lineno="8296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_direct:</highlight></codeline>
<codeline lineno="8297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ps<sp/>==<sp/>NULL)<sp/>{<sp/>*count<sp/>=<sp/>0;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/>}</highlight></codeline>
<codeline lineno="8298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>storage<sp/>=<sp/>ps;</highlight></codeline>
<codeline lineno="8299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*count<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="8300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;storage;</highlight></codeline>
<codeline lineno="8301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_bucket:<sp/>{</highlight></codeline>
<codeline lineno="8302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_bucket<sp/>*b<sp/>=<sp/>GetBucket(ps);</highlight></codeline>
<codeline lineno="8303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*count<sp/>=<sp/>STB_BUCKET_SIZE;</highlight></codeline>
<codeline lineno="8304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b-&gt;p;</highlight></codeline>
<codeline lineno="8305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_array:<sp/>{</highlight></codeline>
<codeline lineno="8307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_array<sp/>*a<sp/>=<sp/>GetArray(ps);</highlight></codeline>
<codeline lineno="8308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*count<sp/>=<sp/>a-&gt;count;</highlight></codeline>
<codeline lineno="8309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a-&gt;p;</highlight></codeline>
<codeline lineno="8310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB_ps_hash:<sp/>{</highlight></codeline>
<codeline lineno="8312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_ps_hash<sp/>*h<sp/>=<sp/>GetHash(ps);</highlight></codeline>
<codeline lineno="8313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*count<sp/>=<sp/>h-&gt;size;</highlight></codeline>
<codeline lineno="8314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h-&gt;table;</highlight></codeline>
<codeline lineno="8315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8316"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8317"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/></highlight><highlight class="comment">/*<sp/>NOTREACHED<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8319"><highlight class="normal"></highlight></codeline>
<codeline lineno="8320"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_ps_subset(stb_ps<sp/>*bigger,<sp/>stb_ps<sp/>*smaller)</highlight></codeline>
<codeline lineno="8321"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8322"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>listlen;</highlight></codeline>
<codeline lineno="8323"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**list<sp/>=<sp/>stb_ps_fastlist(smaller,<sp/>&amp;listlen);</highlight></codeline>
<codeline lineno="8324"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i<sp/>&lt;<sp/>listlen;<sp/>++i)</highlight></codeline>
<codeline lineno="8325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb_ps_fastlist_valid(list[i]))</highlight></codeline>
<codeline lineno="8326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb_ps_find(bigger,<sp/>list[i]))</highlight></codeline>
<codeline lineno="8327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="8328"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="8329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8330"><highlight class="normal"></highlight></codeline>
<codeline lineno="8331"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_ps_eq(stb_ps<sp/>*p0,<sp/>stb_ps<sp/>*p1)</highlight></codeline>
<codeline lineno="8332"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8333"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb_ps_count(p0)<sp/>!=<sp/>stb_ps_count(p1))</highlight></codeline>
<codeline lineno="8334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="8335"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_ps_subset(p0,<sp/>p1);</highlight></codeline>
<codeline lineno="8336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8337"><highlight class="normal"></highlight></codeline>
<codeline lineno="8338"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>GetBucket</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8339"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>GetArray</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8340"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>GetHash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8341"><highlight class="normal"></highlight></codeline>
<codeline lineno="8342"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>EncodeBucket</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8343"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>EncodeArray</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8344"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>EncodeHash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8345"><highlight class="normal"></highlight></codeline>
<codeline lineno="8346"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8347"><highlight class="normal"></highlight></codeline>
<codeline lineno="8348"><highlight class="normal"></highlight></codeline>
<codeline lineno="8350"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8351"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Random<sp/>Numbers<sp/>via<sp/>Meresenne<sp/>Twister<sp/>or<sp/>LCG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8352"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8353"><highlight class="normal"></highlight></codeline>
<codeline lineno="8354"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>stb_srandLCG(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seed);</highlight></codeline>
<codeline lineno="8355"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>stb_randLCG(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8356"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_frandLCG(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8357"><highlight class="normal"></highlight></codeline>
<codeline lineno="8358"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_srand(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seed);</highlight></codeline>
<codeline lineno="8359"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>stb_rand(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8360"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_frand(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8361"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_shuffle(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz,</highlight></codeline>
<codeline lineno="8362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seed);</highlight></codeline>
<codeline lineno="8363"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_reverse(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz);</highlight></codeline>
<codeline lineno="8364"><highlight class="normal"></highlight></codeline>
<codeline lineno="8365"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>stb_randLCG_explicit(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>seed);</highlight></codeline>
<codeline lineno="8366"><highlight class="normal"></highlight></codeline>
<codeline lineno="8367"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_rand_define(x,y)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8368"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8369"><highlight class="preprocessor"><sp/><sp/><sp/>unsigned<sp/>int<sp/><sp/>x(void)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8370"><highlight class="preprocessor"><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8371"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>unsigned<sp/>int<sp/><sp/>stb__rand<sp/>=<sp/>y;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8372"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>stb__rand<sp/>=<sp/>stb__rand<sp/>*<sp/>2147001325<sp/>+<sp/>715136305;<sp/></highlight><highlight class="comment">/*<sp/>BCPL<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8373"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0x31415926<sp/>^<sp/>((stb__rand<sp/>&gt;&gt;<sp/>16)<sp/>+<sp/>(stb__rand<sp/>&lt;&lt;<sp/>16));<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8374"><highlight class="preprocessor"><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8375"><highlight class="normal"></highlight></codeline>
<codeline lineno="8376"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8377"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>stb_randLCG_explicit(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seed)</highlight></codeline>
<codeline lineno="8378"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8379"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>seed<sp/>*<sp/>2147001325<sp/>+<sp/>715136305;</highlight></codeline>
<codeline lineno="8380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8381"><highlight class="normal"></highlight></codeline>
<codeline lineno="8382"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>stb__rand_seed=0;</highlight></codeline>
<codeline lineno="8383"><highlight class="normal"></highlight></codeline>
<codeline lineno="8384"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>stb_srandLCG(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seed)</highlight></codeline>
<codeline lineno="8385"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8386"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>previous<sp/>=<sp/>stb__rand_seed;</highlight></codeline>
<codeline lineno="8387"><highlight class="normal"><sp/><sp/><sp/>stb__rand_seed<sp/>=<sp/>seed;</highlight></codeline>
<codeline lineno="8388"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>previous;</highlight></codeline>
<codeline lineno="8389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8390"><highlight class="normal"></highlight></codeline>
<codeline lineno="8391"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>stb_randLCG(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="8392"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8393"><highlight class="normal"><sp/><sp/><sp/>stb__rand_seed<sp/>=<sp/>stb__rand_seed<sp/>*<sp/>2147001325<sp/>+<sp/>715136305;<sp/></highlight><highlight class="comment">//<sp/>BCPL<sp/>generator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8394"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>shuffle<sp/>non-random<sp/>bits<sp/>to<sp/>the<sp/>middle,<sp/>and<sp/>xor<sp/>to<sp/>decorrelate<sp/>with<sp/>seed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8395"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0x31415926<sp/>^<sp/>((stb__rand_seed<sp/>&gt;&gt;<sp/>16)<sp/>+<sp/>(stb__rand_seed<sp/>&lt;&lt;<sp/>16));</highlight></codeline>
<codeline lineno="8396"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8397"><highlight class="normal"></highlight></codeline>
<codeline lineno="8398"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>stb_frandLCG(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="8399"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8400"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_randLCG()<sp/>/<sp/>((double)<sp/>(1<sp/>&lt;&lt;<sp/>16)<sp/>*<sp/>(1<sp/>&lt;&lt;<sp/>16));</highlight></codeline>
<codeline lineno="8401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8402"><highlight class="normal"></highlight></codeline>
<codeline lineno="8403"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_shuffle(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seed)</highlight></codeline>
<codeline lineno="8404"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8405"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*a;</highlight></codeline>
<codeline lineno="8406"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>old_seed;</highlight></codeline>
<codeline lineno="8407"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="8408"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seed)</highlight></codeline>
<codeline lineno="8409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>old_seed<sp/>=<sp/>stb_srandLCG(seed);</highlight></codeline>
<codeline lineno="8410"><highlight class="normal"><sp/><sp/><sp/>a<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>p<sp/>+<sp/>(n-1)<sp/>*<sp/>sz;</highlight></codeline>
<codeline lineno="8411"><highlight class="normal"></highlight></codeline>
<codeline lineno="8412"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>n;<sp/>i<sp/>&gt;<sp/>1;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="8413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>stb_randLCG()<sp/>%<sp/>i;</highlight></codeline>
<codeline lineno="8414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_swap(a,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>p<sp/>+<sp/>j<sp/>*<sp/>sz,<sp/>sz);</highlight></codeline>
<codeline lineno="8415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>-=<sp/>sz;</highlight></codeline>
<codeline lineno="8416"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8417"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seed)</highlight></codeline>
<codeline lineno="8418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_srandLCG(old_seed);</highlight></codeline>
<codeline lineno="8419"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8420"><highlight class="normal"></highlight></codeline>
<codeline lineno="8421"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_reverse(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz)</highlight></codeline>
<codeline lineno="8422"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8423"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,j<sp/>=<sp/>n-1;</highlight></codeline>
<codeline lineno="8424"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>j;<sp/>++i,--j)<sp/>{</highlight></codeline>
<codeline lineno="8425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_swap((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>p<sp/>+<sp/>i<sp/>*<sp/>sz,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>p<sp/>+<sp/>j<sp/>*<sp/>sz,<sp/>sz);</highlight></codeline>
<codeline lineno="8426"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8428"><highlight class="normal"></highlight></codeline>
<codeline lineno="8429"><highlight class="normal"></highlight><highlight class="comment">//<sp/>public<sp/>domain<sp/>Mersenne<sp/>Twister<sp/>by<sp/>Michael<sp/>Brundage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8430"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__MT_LEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/>624</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8431"><highlight class="normal"></highlight></codeline>
<codeline lineno="8432"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__mt_index<sp/>=<sp/>STB__MT_LEN*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int)+1;</highlight></codeline>
<codeline lineno="8433"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__mt_buffer[STB__MT_LEN];</highlight></codeline>
<codeline lineno="8434"><highlight class="normal"></highlight></codeline>
<codeline lineno="8435"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_srand(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seed)</highlight></codeline>
<codeline lineno="8436"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8437"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="8438"><highlight class="normal"><sp/><sp/><sp/>stb__mt_buffer[0]=<sp/>seed<sp/>&amp;<sp/>0xffffffffUL;</highlight></codeline>
<codeline lineno="8439"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=1<sp/>;<sp/>i<sp/>&lt;<sp/>STB__MT_LEN;<sp/>++i)</highlight></codeline>
<codeline lineno="8440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__mt_buffer[i]<sp/>=<sp/>(1812433253UL<sp/>*<sp/>(stb__mt_buffer[i-1]<sp/>^<sp/>(stb__mt_buffer[i-1]<sp/>&gt;&gt;<sp/>30))<sp/>+<sp/>i);</highlight></codeline>
<codeline lineno="8441"><highlight class="normal"><sp/><sp/><sp/>stb__mt_index<sp/>=<sp/>STB__MT_LEN*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int);</highlight></codeline>
<codeline lineno="8442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8443"><highlight class="normal"></highlight></codeline>
<codeline lineno="8444"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__MT_IA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>397</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8445"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__MT_IB<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(STB__MT_LEN<sp/>-<sp/>STB__MT_IA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8446"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__UPPER_MASK<sp/><sp/><sp/><sp/><sp/><sp/>0x80000000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8447"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__LOWER_MASK<sp/><sp/><sp/><sp/><sp/><sp/>0x7FFFFFFF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8448"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__MATRIX_A<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x9908B0DF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8449"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__TWIST(b,i,j)<sp/><sp/><sp/><sp/>((b)[i]<sp/>&amp;<sp/>STB__UPPER_MASK)<sp/>|<sp/>((b)[j]<sp/>&amp;<sp/>STB__LOWER_MASK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8450"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__MAGIC(s)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((s)&amp;1)*STB__MATRIX_A)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8451"><highlight class="normal"></highlight></codeline>
<codeline lineno="8452"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_rand()</highlight></codeline>
<codeline lineno="8453"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8454"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>*<sp/>b<sp/>=<sp/>stb__mt_buffer;</highlight></codeline>
<codeline lineno="8455"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>stb__mt_index;</highlight></codeline>
<codeline lineno="8456"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>s,r;</highlight></codeline>
<codeline lineno="8457"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="8458"><highlight class="normal"></highlight></codeline>
<codeline lineno="8459"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>&gt;=<sp/>STB__MT_LEN*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="8460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>&gt;<sp/>STB__MT_LEN*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="8461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_srand(0);</highlight></codeline>
<codeline lineno="8462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>idx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="8463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="8464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>i<sp/>&lt;<sp/>STB__MT_IB;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="8465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>STB__TWIST(b,<sp/>i,<sp/>i+1);</highlight></codeline>
<codeline lineno="8466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b[i]<sp/>=<sp/>b[i<sp/>+<sp/>STB__MT_IA]<sp/>^<sp/>(s<sp/>&gt;&gt;<sp/>1)<sp/>^<sp/>STB__MAGIC(s);</highlight></codeline>
<codeline lineno="8467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>i<sp/>&lt;<sp/>STB__MT_LEN-1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="8469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>STB__TWIST(b,<sp/>i,<sp/>i+1);</highlight></codeline>
<codeline lineno="8470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b[i]<sp/>=<sp/>b[i<sp/>-<sp/>STB__MT_IB]<sp/>^<sp/>(s<sp/>&gt;&gt;<sp/>1)<sp/>^<sp/>STB__MAGIC(s);</highlight></codeline>
<codeline lineno="8471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8472"><highlight class="normal"></highlight></codeline>
<codeline lineno="8473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>STB__TWIST(b,<sp/>STB__MT_LEN-1,<sp/>0);</highlight></codeline>
<codeline lineno="8474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b[STB__MT_LEN-1]<sp/>=<sp/>b[STB__MT_IA-1]<sp/>^<sp/>(s<sp/>&gt;&gt;<sp/>1)<sp/>^<sp/>STB__MAGIC(s);</highlight></codeline>
<codeline lineno="8475"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8476"><highlight class="normal"><sp/><sp/><sp/>stb__mt_index<sp/>=<sp/>idx<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int);</highlight></codeline>
<codeline lineno="8477"><highlight class="normal"></highlight></codeline>
<codeline lineno="8478"><highlight class="normal"><sp/><sp/><sp/>r<sp/>=<sp/>*(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)b<sp/>+<sp/>idx);</highlight></codeline>
<codeline lineno="8479"><highlight class="normal"></highlight></codeline>
<codeline lineno="8480"><highlight class="normal"><sp/><sp/><sp/>r<sp/>^=<sp/>(r<sp/>&gt;&gt;<sp/>11);</highlight></codeline>
<codeline lineno="8481"><highlight class="normal"><sp/><sp/><sp/>r<sp/>^=<sp/>(r<sp/>&lt;&lt;<sp/>7)<sp/>&amp;<sp/>0x9D2C5680;</highlight></codeline>
<codeline lineno="8482"><highlight class="normal"><sp/><sp/><sp/>r<sp/>^=<sp/>(r<sp/>&lt;&lt;<sp/>15)<sp/>&amp;<sp/>0xEFC60000;</highlight></codeline>
<codeline lineno="8483"><highlight class="normal"><sp/><sp/><sp/>r<sp/>^=<sp/>(r<sp/>&gt;&gt;<sp/>18);</highlight></codeline>
<codeline lineno="8484"><highlight class="normal"></highlight></codeline>
<codeline lineno="8485"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="8486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8487"><highlight class="normal"></highlight></codeline>
<codeline lineno="8488"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>stb_frand(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="8489"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8490"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_rand()<sp/>/<sp/>((double)<sp/>(1<sp/>&lt;&lt;<sp/>16)<sp/>*<sp/>(1<sp/>&lt;&lt;<sp/>16));</highlight></codeline>
<codeline lineno="8491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8492"><highlight class="normal"></highlight></codeline>
<codeline lineno="8493"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8494"><highlight class="normal"></highlight></codeline>
<codeline lineno="8495"><highlight class="normal"></highlight></codeline>
<codeline lineno="8497"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8498"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_dupe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8499"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8500"><highlight class="normal"></highlight><highlight class="comment">//<sp/>stb_dupe<sp/>is<sp/>a<sp/>duplicate-finding<sp/>system<sp/>for<sp/>very,<sp/>very<sp/>large<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8501"><highlight class="normal"></highlight><highlight class="comment">//<sp/>structures--large<sp/>enough<sp/>that<sp/>sorting<sp/>is<sp/>too<sp/>slow,<sp/>but<sp/>not<sp/>so<sp/>large</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8502"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>we<sp/>can&apos;t<sp/>keep<sp/>all<sp/>the<sp/>data<sp/>in<sp/>memory.<sp/>using<sp/>it<sp/>works<sp/>as<sp/>follows:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8503"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8504"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>1.<sp/>create<sp/>an<sp/>stb_dupe:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8505"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>provide<sp/>a<sp/>hash<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8506"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>provide<sp/>an<sp/>equality<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8507"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>provide<sp/>an<sp/>estimate<sp/>for<sp/>the<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8508"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optionally<sp/>provide<sp/>a<sp/>comparison<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8509"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8510"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>2.<sp/>traverse<sp/>your<sp/>data,<sp/>&apos;adding&apos;<sp/>pointers<sp/>to<sp/>the<sp/>stb_dupe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8511"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8512"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>3.<sp/>finish<sp/>and<sp/>ask<sp/>for<sp/>duplicates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8513"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8514"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>stb_dupe<sp/>will<sp/>discard<sp/>its<sp/>intermediate<sp/>data<sp/>and<sp/>build</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8515"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>collection<sp/>of<sp/>sorted<sp/>lists<sp/>of<sp/>duplicates,<sp/>with<sp/>non-duplicate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8516"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entries<sp/>omitted<sp/>entirely</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8517"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8518"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8519"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Implementation<sp/>strategy:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8520"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8521"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>while<sp/>collecting<sp/>the<sp/>N<sp/>items,<sp/>we<sp/>keep<sp/>a<sp/>hash<sp/>table<sp/>of<sp/>approximate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8522"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>size<sp/>sqrt(N).<sp/>(if<sp/>you<sp/>tell<sp/>use<sp/>the<sp/>N<sp/>up<sp/>front,<sp/>the<sp/>hash<sp/>table<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8523"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>just<sp/>that<sp/>size<sp/>exactly)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8524"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8525"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>each<sp/>entry<sp/>in<sp/>the<sp/>hash<sp/>table<sp/>is<sp/>just<sp/>an<sp/>stb__arr<sp/>of<sp/>pointers<sp/>(no<sp/>need</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8526"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>to<sp/>use<sp/>stb_ps,<sp/>because<sp/>we<sp/>don&apos;t<sp/>need<sp/>to<sp/>delete<sp/>from<sp/>these)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8527"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8528"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for<sp/>step<sp/>3,<sp/>for<sp/>each<sp/>entry<sp/>in<sp/>the<sp/>hash<sp/>table,<sp/>we<sp/>apply<sp/>stb_dupe<sp/>to<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8529"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>recursively.<sp/>once<sp/>the<sp/>size<sp/>gets<sp/>small<sp/>enough<sp/>(or<sp/>doesn&apos;t<sp/>decrease</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8530"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>significantly),<sp/>we<sp/>switch<sp/>to<sp/>either<sp/>using<sp/>qsort()<sp/>on<sp/>the<sp/>comparison</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8531"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>function,<sp/>or<sp/>else<sp/>we<sp/>just<sp/>do<sp/>the<sp/>icky<sp/>N^2<sp/>gather</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8532"><highlight class="normal"></highlight></codeline>
<codeline lineno="8533"><highlight class="normal"></highlight></codeline>
<codeline lineno="8534"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstb__dupe" kindref="compound">stb_dupe</ref><sp/><ref refid="structstb__dupe" kindref="compound">stb_dupe</ref>;</highlight></codeline>
<codeline lineno="8535"><highlight class="normal"></highlight></codeline>
<codeline lineno="8536"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*stb_compare_func)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b);</highlight></codeline>
<codeline lineno="8537"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*stb_hash_func)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seed);</highlight></codeline>
<codeline lineno="8538"><highlight class="normal"></highlight></codeline>
<codeline lineno="8539"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_dupe_free(<ref refid="structstb__dupe" kindref="compound">stb_dupe</ref><sp/>*sd);</highlight></codeline>
<codeline lineno="8540"><highlight class="normal">STB_EXTERN<sp/><ref refid="structstb__dupe" kindref="compound">stb_dupe</ref><sp/>*stb_dupe_create(stb_hash_func<sp/>hash,</highlight></codeline>
<codeline lineno="8541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_compare_func<sp/>eq,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/>stb_compare_func<sp/>ineq);</highlight></codeline>
<codeline lineno="8542"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_dupe_add(<ref refid="structstb__dupe" kindref="compound">stb_dupe</ref><sp/>*sd,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*item);</highlight></codeline>
<codeline lineno="8543"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_dupe_finish(<ref refid="structstb__dupe" kindref="compound">stb_dupe</ref><sp/>*sd);</highlight></codeline>
<codeline lineno="8544"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_dupe_numsets(<ref refid="structstb__dupe" kindref="compound">stb_dupe</ref><sp/>*sd);</highlight></codeline>
<codeline lineno="8545"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**stb_dupe_set(<ref refid="structstb__dupe" kindref="compound">stb_dupe</ref><sp/>*sd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num);</highlight></codeline>
<codeline lineno="8546"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_dupe_set_count(<ref refid="structstb__dupe" kindref="compound">stb_dupe</ref><sp/>*sd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num);</highlight></codeline>
<codeline lineno="8547"><highlight class="normal"></highlight></codeline>
<codeline lineno="8548" refid="structstb__dupe" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstb__dupe" kindref="compound">stb_dupe</ref></highlight></codeline>
<codeline lineno="8549"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8550"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>***hash_table;</highlight></codeline>
<codeline lineno="8551"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hash_size;</highlight></codeline>
<codeline lineno="8552"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size_log2;</highlight></codeline>
<codeline lineno="8553"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>population;</highlight></codeline>
<codeline lineno="8554"><highlight class="normal"></highlight></codeline>
<codeline lineno="8555"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hash_shift;</highlight></codeline>
<codeline lineno="8556"><highlight class="normal"><sp/><sp/><sp/>stb_hash_func<sp/><sp/><sp/><sp/><sp/>hash;</highlight></codeline>
<codeline lineno="8557"><highlight class="normal"></highlight></codeline>
<codeline lineno="8558"><highlight class="normal"><sp/><sp/><sp/>stb_compare_func<sp/><sp/>eq;</highlight></codeline>
<codeline lineno="8559"><highlight class="normal"><sp/><sp/><sp/>stb_compare_func<sp/><sp/>ineq;</highlight></codeline>
<codeline lineno="8560"><highlight class="normal"></highlight></codeline>
<codeline lineno="8561"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>***dupes;</highlight></codeline>
<codeline lineno="8562"><highlight class="normal">};</highlight></codeline>
<codeline lineno="8563"><highlight class="normal"></highlight></codeline>
<codeline lineno="8564"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8565"><highlight class="normal"></highlight></codeline>
<codeline lineno="8566"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_dupe_numsets(<ref refid="structstb__dupe" kindref="compound">stb_dupe</ref><sp/>*sd)</highlight></codeline>
<codeline lineno="8567"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8568"><highlight class="normal"><sp/><sp/><sp/>assert(sd-&gt;hash_table<sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="8569"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_arr_len(sd-&gt;dupes);</highlight></codeline>
<codeline lineno="8570"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8571"><highlight class="normal"></highlight></codeline>
<codeline lineno="8572"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**stb_dupe_set(<ref refid="structstb__dupe" kindref="compound">stb_dupe</ref><sp/>*sd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num)</highlight></codeline>
<codeline lineno="8573"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8574"><highlight class="normal"><sp/><sp/><sp/>assert(sd-&gt;hash_table<sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="8575"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sd-&gt;dupes[num];</highlight></codeline>
<codeline lineno="8576"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8577"><highlight class="normal"></highlight></codeline>
<codeline lineno="8578"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_dupe_set_count(<ref refid="structstb__dupe" kindref="compound">stb_dupe</ref><sp/>*sd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num)</highlight></codeline>
<codeline lineno="8579"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8580"><highlight class="normal"><sp/><sp/><sp/>assert(sd-&gt;hash_table<sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="8581"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_arr_len(sd-&gt;dupes[num]);</highlight></codeline>
<codeline lineno="8582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8583"><highlight class="normal"></highlight></codeline>
<codeline lineno="8584"><highlight class="normal"><ref refid="structstb__dupe" kindref="compound">stb_dupe</ref><sp/>*stb_dupe_create(stb_hash_func<sp/>hash,<sp/>stb_compare_func<sp/>eq,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,</highlight></codeline>
<codeline lineno="8585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_compare_func<sp/>ineq)</highlight></codeline>
<codeline lineno="8586"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8587"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>hsize;</highlight></codeline>
<codeline lineno="8588"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstb__dupe" kindref="compound">stb_dupe</ref><sp/>*sd<sp/>=<sp/>(<ref refid="structstb__dupe" kindref="compound">stb_dupe</ref><sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*sd));</highlight></codeline>
<codeline lineno="8589"><highlight class="normal"></highlight></codeline>
<codeline lineno="8590"><highlight class="normal"><sp/><sp/><sp/>sd-&gt;size_log2<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="8591"><highlight class="normal"><sp/><sp/><sp/>hsize<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>sd-&gt;size_log2;</highlight></codeline>
<codeline lineno="8592"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(hsize<sp/>*<sp/>hsize<sp/>&lt;<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="8593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++sd-&gt;size_log2;</highlight></codeline>
<codeline lineno="8594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hsize<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="8595"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8596"><highlight class="normal"></highlight></codeline>
<codeline lineno="8597"><highlight class="normal"><sp/><sp/><sp/>sd-&gt;hash<sp/>=<sp/>hash;</highlight></codeline>
<codeline lineno="8598"><highlight class="normal"><sp/><sp/><sp/>sd-&gt;eq<sp/><sp/><sp/>=<sp/>eq;</highlight></codeline>
<codeline lineno="8599"><highlight class="normal"><sp/><sp/><sp/>sd-&gt;ineq<sp/>=<sp/>ineq;</highlight></codeline>
<codeline lineno="8600"><highlight class="normal"><sp/><sp/><sp/>sd-&gt;hash_shift<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="8601"><highlight class="normal"></highlight></codeline>
<codeline lineno="8602"><highlight class="normal"><sp/><sp/><sp/>sd-&gt;population<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="8603"><highlight class="normal"><sp/><sp/><sp/>sd-&gt;hash_size<sp/>=<sp/>hsize;</highlight></codeline>
<codeline lineno="8604"><highlight class="normal"><sp/><sp/><sp/>sd-&gt;hash_table<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>***)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*sd-&gt;hash_table)<sp/>*<sp/>hsize);</highlight></codeline>
<codeline lineno="8605"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>hsize;<sp/>++i)</highlight></codeline>
<codeline lineno="8606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sd-&gt;hash_table[i]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="8607"><highlight class="normal"></highlight></codeline>
<codeline lineno="8608"><highlight class="normal"><sp/><sp/><sp/>sd-&gt;dupes<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="8609"><highlight class="normal"></highlight></codeline>
<codeline lineno="8610"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sd;</highlight></codeline>
<codeline lineno="8611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8612"><highlight class="normal"></highlight></codeline>
<codeline lineno="8613"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_dupe_add(<ref refid="structstb__dupe" kindref="compound">stb_dupe</ref><sp/>*sd,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*item)</highlight></codeline>
<codeline lineno="8614"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8615"><highlight class="normal"><sp/><sp/><sp/>stb_uint32<sp/>hash<sp/>=<sp/>sd-&gt;hash(item,<sp/>sd-&gt;hash_shift);</highlight></codeline>
<codeline lineno="8616"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>hash<sp/>&amp;<sp/>(sd-&gt;hash_size-1);</highlight></codeline>
<codeline lineno="8617"><highlight class="normal"><sp/><sp/><sp/>stb_arr_push(sd-&gt;hash_table[z],<sp/>item);</highlight></codeline>
<codeline lineno="8618"><highlight class="normal"><sp/><sp/><sp/>++sd-&gt;population;</highlight></codeline>
<codeline lineno="8619"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8620"><highlight class="normal"></highlight></codeline>
<codeline lineno="8621"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_dupe_free(<ref refid="structstb__dupe" kindref="compound">stb_dupe</ref><sp/>*sd)</highlight></codeline>
<codeline lineno="8622"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8623"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="8624"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stb_arr_len(sd-&gt;dupes);<sp/>++i)</highlight></codeline>
<codeline lineno="8625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sd-&gt;dupes[i])</highlight></codeline>
<codeline lineno="8626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_free(sd-&gt;dupes[i]);</highlight></codeline>
<codeline lineno="8627"><highlight class="normal"><sp/><sp/><sp/>stb_arr_free(sd-&gt;dupes);</highlight></codeline>
<codeline lineno="8628"><highlight class="normal"><sp/><sp/><sp/>free(sd);</highlight></codeline>
<codeline lineno="8629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8630"><highlight class="normal"></highlight></codeline>
<codeline lineno="8631"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb_compare_func<sp/>stb__compare;</highlight></codeline>
<codeline lineno="8632"><highlight class="normal"></highlight></codeline>
<codeline lineno="8633"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__dupe_compare(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b)</highlight></codeline>
<codeline lineno="8634"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8635"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>*(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>a;</highlight></codeline>
<codeline lineno="8636"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*q<sp/>=<sp/>*(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>b;</highlight></codeline>
<codeline lineno="8637"><highlight class="normal"></highlight></codeline>
<codeline lineno="8638"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb__compare(p,q);</highlight></codeline>
<codeline lineno="8639"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8640"><highlight class="normal"></highlight></codeline>
<codeline lineno="8641"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_dupe_finish(<ref refid="structstb__dupe" kindref="compound">stb_dupe</ref><sp/>*sd)</highlight></codeline>
<codeline lineno="8642"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8643"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,k;</highlight></codeline>
<codeline lineno="8644"><highlight class="normal"><sp/><sp/><sp/>assert(sd-&gt;dupes<sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="8645"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>sd-&gt;hash_size;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="8646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**<sp/>list<sp/>=<sp/>sd-&gt;hash_table[i];</highlight></codeline>
<codeline lineno="8647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="8648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>stb_arr_len(list);</highlight></codeline>
<codeline lineno="8649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>measure<sp/>to<sp/>find<sp/>good<sp/>numbers<sp/>instead<sp/>of<sp/>just<sp/>making<sp/>them<sp/>up!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thresh<sp/>=<sp/>(sd-&gt;ineq<sp/>?<sp/>200<sp/>:<sp/>20);</highlight></codeline>
<codeline lineno="8651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>n<sp/>is<sp/>large<sp/>enough<sp/>to<sp/>be<sp/>worth<sp/>it,<sp/>and<sp/>n<sp/>is<sp/>smaller<sp/>than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>before<sp/>(so<sp/>we<sp/>can<sp/>guarantee<sp/>we&apos;ll<sp/>use<sp/>a<sp/>smaller<sp/>hash<sp/>table);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>there<sp/>are<sp/>enough<sp/>hash<sp/>bits<sp/>left,<sp/>assuming<sp/>full<sp/>32-bit<sp/>hash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>thresh<sp/>&amp;&amp;<sp/>n<sp/>&lt;<sp/>(sd-&gt;population<sp/>&gt;&gt;<sp/>3)<sp/>&amp;&amp;<sp/>sd-&gt;hash_shift<sp/>+<sp/>sd-&gt;size_log2*2<sp/>&lt;<sp/>32)<sp/>{</highlight></codeline>
<codeline lineno="8655"><highlight class="normal"></highlight></codeline>
<codeline lineno="8656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>recursively<sp/>process<sp/>this<sp/>row<sp/>using<sp/>stb_dupe,<sp/>O(N<sp/>log<sp/>log<sp/>N)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8657"><highlight class="normal"></highlight></codeline>
<codeline lineno="8658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structstb__dupe" kindref="compound">stb_dupe</ref><sp/>*d<sp/>=<sp/>stb_dupe_create(sd-&gt;hash,<sp/>sd-&gt;eq,<sp/>n,<sp/>sd-&gt;ineq);</highlight></codeline>
<codeline lineno="8659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d-&gt;hash_shift<sp/>=<sp/>stb_randLCG_explicit(sd-&gt;hash_shift);</highlight></codeline>
<codeline lineno="8660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>n;<sp/>++j)</highlight></codeline>
<codeline lineno="8661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_dupe_add(d,<sp/>list[j]);</highlight></codeline>
<codeline lineno="8662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_free(sd-&gt;hash_table[i]);</highlight></codeline>
<codeline lineno="8663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_dupe_finish(d);</highlight></codeline>
<codeline lineno="8664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>stb_arr_len(d-&gt;dupes);<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="8665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_push(sd-&gt;dupes,<sp/>d-&gt;dupes[j]);</highlight></codeline>
<codeline lineno="8666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d-&gt;dupes[j]<sp/>=<sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>take<sp/>over<sp/>ownership</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_dupe_free(d);</highlight></codeline>
<codeline lineno="8669"><highlight class="normal"></highlight></codeline>
<codeline lineno="8670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sd-&gt;ineq)<sp/>{</highlight></codeline>
<codeline lineno="8671"><highlight class="normal"></highlight></codeline>
<codeline lineno="8672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>process<sp/>this<sp/>row<sp/>using<sp/>qsort(),<sp/>O(N<sp/>log<sp/>N)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__compare<sp/>=<sp/>sd-&gt;ineq;</highlight></codeline>
<codeline lineno="8674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qsort(list,<sp/>n,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(list[0]),<sp/>stb__dupe_compare);</highlight></codeline>
<codeline lineno="8675"><highlight class="normal"></highlight></codeline>
<codeline lineno="8676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>equal<sp/>subsequences<sp/>of<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>n-1;<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="8678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>a<sp/>subsequence<sp/>from<sp/>j..k</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=j;<sp/>k<sp/>&lt;<sp/>n;<sp/>++k)</highlight></codeline>
<codeline lineno="8680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>use<sp/>ineq<sp/>so<sp/>eq<sp/>can<sp/>be<sp/>left<sp/>undefined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sd-&gt;ineq(list[j],<sp/>list[k]))</highlight></codeline>
<codeline lineno="8682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>k<sp/>is<sp/>the<sp/>first<sp/>one<sp/>not<sp/>in<sp/>the<sp/>subsequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k-j<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="8685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**mylist<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="8686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_setlen(mylist,<sp/>k-j);</highlight></codeline>
<codeline lineno="8687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(mylist,<sp/>list+j,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(list[j])<sp/>*<sp/>(k-j));</highlight></codeline>
<codeline lineno="8688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_push(sd-&gt;dupes,<sp/>mylist);</highlight></codeline>
<codeline lineno="8689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="8691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_free(sd-&gt;hash_table[i]);</highlight></codeline>
<codeline lineno="8693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8694"><highlight class="normal"></highlight></codeline>
<codeline lineno="8695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>process<sp/>this<sp/>row<sp/>using<sp/>eq(),<sp/>O(N^2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>n;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="8697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list[j]<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="8698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**<ref refid="structoutput" kindref="compound">output</ref><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="8699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=j+1;<sp/>k<sp/>&lt;<sp/>n;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="8700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sd-&gt;eq(list[j],<sp/>list[k]))<sp/>{</highlight></codeline>
<codeline lineno="8701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structoutput" kindref="compound">output</ref><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="8702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_push(<ref refid="structoutput" kindref="compound">output</ref>,<sp/>list[j]);</highlight></codeline>
<codeline lineno="8703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_push(<ref refid="structoutput" kindref="compound">output</ref>,<sp/>list[k]);</highlight></codeline>
<codeline lineno="8704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list[k]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="8705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list[j]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="8708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structoutput" kindref="compound">output</ref>)</highlight></codeline>
<codeline lineno="8709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_push(sd-&gt;dupes,<sp/><ref refid="structoutput" kindref="compound">output</ref>);</highlight></codeline>
<codeline lineno="8710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_free(sd-&gt;hash_table[i]);</highlight></codeline>
<codeline lineno="8713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8715"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8716"><highlight class="normal"><sp/><sp/><sp/>free(sd-&gt;hash_table);</highlight></codeline>
<codeline lineno="8717"><highlight class="normal"><sp/><sp/><sp/>sd-&gt;hash_table<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="8718"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8719"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8720"><highlight class="normal"></highlight></codeline>
<codeline lineno="8722"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8723"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>templatized<sp/>Sort<sp/>routine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8724"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8725"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>an<sp/>attempt<sp/>to<sp/>implement<sp/>a<sp/>templated<sp/>sorting<sp/>algorithm.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8726"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>use<sp/>it,<sp/>you<sp/>have<sp/>to<sp/>explicitly<sp/>instantiate<sp/>it<sp/>as<sp/>a<sp/>_function_,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8727"><highlight class="normal"></highlight><highlight class="comment">//<sp/>then<sp/>you<sp/>call<sp/>that<sp/>function.<sp/>This<sp/>allows<sp/>the<sp/>comparison<sp/>to<sp/>be<sp/>inlined,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8728"><highlight class="normal"></highlight><highlight class="comment">//<sp/>giving<sp/>the<sp/>sort<sp/>similar<sp/>performance<sp/>to<sp/>C++<sp/>sorts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8729"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8730"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>implements<sp/>quicksort<sp/>with<sp/>three-way-median<sp/>partitioning<sp/>(generally</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8731"><highlight class="normal"></highlight><highlight class="comment">//<sp/>well-behaved),<sp/>with<sp/>a<sp/>final<sp/>insertion<sp/>sort<sp/>pass.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8732"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8733"><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>you<sp/>define<sp/>the<sp/>compare<sp/>expression,<sp/>you<sp/>should<sp/>assume<sp/>you<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8734"><highlight class="normal"></highlight><highlight class="comment">//<sp/>elements<sp/>of<sp/>your<sp/>array<sp/>pointed<sp/>to<sp/>by<sp/>&apos;a&apos;<sp/>and<sp/>&apos;b&apos;,<sp/>and<sp/>perform<sp/>the<sp/>comparison</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8735"><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>those.<sp/>OR<sp/>you<sp/>can<sp/>use<sp/>one<sp/>or<sp/>more<sp/>statements;<sp/>first<sp/>say<sp/>&apos;0;&apos;,<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8736"><highlight class="normal"></highlight><highlight class="comment">//<sp/>write<sp/>whatever<sp/>code<sp/>you<sp/>want,<sp/>and<sp/>compute<sp/>the<sp/>result<sp/>into<sp/>a<sp/>variable<sp/>&apos;c&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8737"><highlight class="normal"></highlight></codeline>
<codeline lineno="8738"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_declare_sort(FUNCNAME,<sp/>TYPE)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8739"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>FUNCNAME(TYPE<sp/>*p,<sp/>int<sp/>n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8740"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_define_sort(FUNCNAME,TYPE,COMPARE)<sp/>\</highlight></codeline>
<codeline lineno="8741"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__define_sort(<sp/><sp/><sp/><sp/><sp/><sp/><sp/>void,<sp/>FUNCNAME,TYPE,COMPARE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8742"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_define_sort_static(FUNCNAME,TYPE,COMPARE)<sp/>\</highlight></codeline>
<codeline lineno="8743"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__define_sort(static<sp/>void,<sp/>FUNCNAME,TYPE,COMPARE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8744"><highlight class="normal"></highlight></codeline>
<codeline lineno="8745"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb__define_sort(MODE,<sp/>FUNCNAME,<sp/>TYPE,<sp/>COMPARE)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8746"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8747"><highlight class="preprocessor">static<sp/>void<sp/>STB_(FUNCNAME,_ins_sort)(TYPE<sp/>*p,<sp/>int<sp/>n)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8748"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8749"><highlight class="preprocessor"><sp/><sp/><sp/>int<sp/>i,j;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8750"><highlight class="preprocessor"><sp/><sp/><sp/>for<sp/>(i=1;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8751"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>TYPE<sp/>t<sp/>=<sp/>p[i],<sp/>*a<sp/>=<sp/>&amp;t;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8752"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>i;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8753"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(j<sp/>&gt;<sp/>0)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8754"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TYPE<sp/>*b<sp/>=<sp/>&amp;p[j-1];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8755"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>c<sp/>=<sp/>COMPARE;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8756"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!c)<sp/>break;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8757"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[j]<sp/>=<sp/>p[j-1];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8758"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--j;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8759"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8760"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(i<sp/>!=<sp/>j)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8761"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[j]<sp/>=<sp/>t;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8762"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8763"><highlight class="preprocessor">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8764"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8765"><highlight class="preprocessor">static<sp/>void<sp/>STB_(FUNCNAME,_quicksort)(TYPE<sp/>*p,<sp/>int<sp/>n)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8766"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8767"><highlight class="preprocessor"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>threshold<sp/>for<sp/>transitioning<sp/>to<sp/>insertion<sp/>sort<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8768"><highlight class="preprocessor"><sp/><sp/><sp/>while<sp/>(n<sp/>&gt;<sp/>12)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8769"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>TYPE<sp/>*a,*b,t;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8770"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>c01,c12,c,m,i,j;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8771"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8772"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>compute<sp/>median<sp/>of<sp/>three<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8773"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>n<sp/>&gt;&gt;<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8774"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>&amp;p[0];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8775"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>&amp;p[m];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8776"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>COMPARE;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8777"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>c01<sp/>=<sp/>c;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8778"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>&amp;p[m];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8779"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>&amp;p[n-1];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8780"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>COMPARE;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8781"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>c12<sp/>=<sp/>c;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8782"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>0<sp/>&gt;=<sp/>mid<sp/>&gt;=<sp/>end,<sp/>or<sp/>0<sp/>&lt;<sp/>mid<sp/>&lt;<sp/>end,<sp/>then<sp/>use<sp/>mid<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8783"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(c01<sp/>!=<sp/>c12)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8784"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>otherwise,<sp/>we&apos;ll<sp/>need<sp/>to<sp/>swap<sp/>something<sp/>else<sp/>to<sp/>middle<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8785"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>z;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8786"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>&amp;p[0];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8787"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>&amp;p[n-1];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8788"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>COMPARE;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8789"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>0&gt;mid<sp/>&amp;&amp;<sp/>mid&lt;n:<sp/><sp/>0&gt;n<sp/>=&gt;<sp/>n;<sp/>0&lt;n<sp/>=&gt;<sp/>0<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8790"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>0&lt;mid<sp/>&amp;&amp;<sp/>mid&gt;n:<sp/><sp/>0&gt;n<sp/>=&gt;<sp/>0;<sp/>0&lt;n<sp/>=&gt;<sp/>n<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8791"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>(c<sp/>==<sp/>c12)<sp/>?<sp/>0<sp/>:<sp/>n-1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8792"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>p[z];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8793"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[z]<sp/>=<sp/>p[m];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8794"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[m]<sp/>=<sp/>t;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8795"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8796"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>now<sp/>p[m]<sp/>is<sp/>the<sp/>median-of-three<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8797"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>swap<sp/>it<sp/>to<sp/>the<sp/>beginning<sp/>so<sp/>it<sp/>won&apos;t<sp/>move<sp/>around<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8798"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>p[0];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8799"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>p[0]<sp/>=<sp/>p[m];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8800"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>p[m]<sp/>=<sp/>t;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8801"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8802"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>partition<sp/>loop<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8803"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>i=1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8804"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>j=n-1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8805"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>for(;;)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8806"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>handling<sp/>of<sp/>equality<sp/>is<sp/>crucial<sp/>here<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8807"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>sentinels<sp/>&amp;<sp/>efficiency<sp/>with<sp/>duplicates<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8808"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>&amp;p[0];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8809"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(;;++i)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8810"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a=&amp;p[i];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8811"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>COMPARE;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8812"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!c)<sp/>break;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8813"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8814"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>&amp;p[0];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8815"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(;;--j)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8816"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b=&amp;p[j];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8817"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>COMPARE;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8818"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!c)<sp/>break;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8819"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8820"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>make<sp/>sure<sp/>we<sp/>haven&apos;t<sp/>crossed<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8821"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(i<sp/>&gt;=<sp/>j)<sp/>break;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8822"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>p[i];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8823"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[i]<sp/>=<sp/>p[j];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8824"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[j]<sp/>=<sp/>t;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8825"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8826"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8827"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--j;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8828"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8829"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>recurse<sp/>on<sp/>smaller<sp/>side,<sp/>iterate<sp/>on<sp/>larger<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8830"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(j<sp/>&lt;<sp/>(n-i))<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8831"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STB_(FUNCNAME,_quicksort)(p,j);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8832"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>p+i;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8833"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>n-i;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8834"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8835"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STB_(FUNCNAME,_quicksort)(p+i,<sp/>n-i);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8836"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>j;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8837"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8838"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8839"><highlight class="preprocessor">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8840"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8841"><highlight class="preprocessor">MODE<sp/>FUNCNAME(TYPE<sp/>*p,<sp/>int<sp/>n)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8842"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8843"><highlight class="preprocessor"><sp/><sp/><sp/>STB_(FUNCNAME,<sp/>_quicksort)(p,<sp/>n);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8844"><highlight class="preprocessor"><sp/><sp/><sp/>STB_(FUNCNAME,<sp/>_ins_sort)(p,<sp/>n);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8845"><highlight class="preprocessor">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8846"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8847"><highlight class="normal"></highlight></codeline>
<codeline lineno="8849"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8850"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>stb_bitset<sp/><sp/><sp/>an<sp/>array<sp/>of<sp/>booleans<sp/>indexed<sp/>by<sp/>integers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8851"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8852"><highlight class="normal"></highlight></codeline>
<codeline lineno="8853"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>stb_uint32<sp/>stb_bitset;</highlight></codeline>
<codeline lineno="8854"><highlight class="normal"></highlight></codeline>
<codeline lineno="8855"><highlight class="normal">STB_EXTERN<sp/><sp/>stb_bitset<sp/>*stb_bitset_new(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="8856"><highlight class="normal"></highlight></codeline>
<codeline lineno="8857"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_bitset_clearall(arr,len)<sp/><sp/><sp/><sp/><sp/>(memset(arr,<sp/><sp/><sp/>0,<sp/>4<sp/>*<sp/>(len)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8858"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_bitset_setall(arr,len)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(memset(arr,<sp/>255,<sp/>4<sp/>*<sp/>(len)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8859"><highlight class="normal"></highlight></codeline>
<codeline lineno="8860"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_bitset_setbit(arr,n)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((arr)[(n)<sp/>&gt;&gt;<sp/>5]<sp/>|=<sp/><sp/>(1<sp/>&lt;&lt;<sp/>(n<sp/>&amp;<sp/>31)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8861"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_bitset_clearbit(arr,n)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((arr)[(n)<sp/>&gt;&gt;<sp/>5]<sp/>&amp;=<sp/>~(1<sp/>&lt;&lt;<sp/>(n<sp/>&amp;<sp/>31)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8862"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_bitset_testbit(arr,n)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((arr)[(n)<sp/>&gt;&gt;<sp/>5]<sp/>&amp;<sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>(n<sp/>&amp;<sp/>31)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8863"><highlight class="normal"></highlight></codeline>
<codeline lineno="8864"><highlight class="normal">STB_EXTERN<sp/><sp/>stb_bitset<sp/>*stb_bitset_union(stb_bitset<sp/>*p0,<sp/>stb_bitset<sp/>*p1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="8865"><highlight class="normal"></highlight></codeline>
<codeline lineno="8866"><highlight class="normal">STB_EXTERN<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*stb_bitset_getlist(stb_bitset<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end);</highlight></codeline>
<codeline lineno="8867"><highlight class="normal"></highlight></codeline>
<codeline lineno="8868"><highlight class="normal">STB_EXTERN<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>stb_bitset_eq(stb_bitset<sp/>*p0,<sp/>stb_bitset<sp/>*p1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="8869"><highlight class="normal">STB_EXTERN<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>stb_bitset_disjoint(stb_bitset<sp/>*p0,<sp/>stb_bitset<sp/>*p1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="8870"><highlight class="normal">STB_EXTERN<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>stb_bitset_disjoint_0(stb_bitset<sp/>*p0,<sp/>stb_bitset<sp/>*p1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="8871"><highlight class="normal">STB_EXTERN<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>stb_bitset_subset(stb_bitset<sp/>*bigger,<sp/>stb_bitset<sp/>*smaller,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="8872"><highlight class="normal">STB_EXTERN<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>stb_bitset_unioneq_changed(stb_bitset<sp/>*p0,<sp/>stb_bitset<sp/>*p1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="8873"><highlight class="normal"></highlight></codeline>
<codeline lineno="8874"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8875"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_bitset_eq(stb_bitset<sp/>*p0,<sp/>stb_bitset<sp/>*p1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="8876"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8877"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="8878"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>len;<sp/>++i)</highlight></codeline>
<codeline lineno="8879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p0[i]<sp/>!=<sp/>p1[i])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="8880"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="8881"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8882"><highlight class="normal"></highlight></codeline>
<codeline lineno="8883"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_bitset_disjoint(stb_bitset<sp/>*p0,<sp/>stb_bitset<sp/>*p1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="8884"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8885"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="8886"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>len;<sp/>++i)</highlight></codeline>
<codeline lineno="8887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p0[i]<sp/>&amp;<sp/>p1[i])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="8888"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="8889"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8890"><highlight class="normal"></highlight></codeline>
<codeline lineno="8891"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_bitset_disjoint_0(stb_bitset<sp/>*p0,<sp/>stb_bitset<sp/>*p1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="8892"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8893"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="8894"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>len;<sp/>++i)</highlight></codeline>
<codeline lineno="8895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((p0[i]<sp/>|<sp/>p1[i])<sp/>!=<sp/>0xffffffff)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="8896"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="8897"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8898"><highlight class="normal"></highlight></codeline>
<codeline lineno="8899"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_bitset_subset(stb_bitset<sp/>*bigger,<sp/>stb_bitset<sp/>*smaller,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="8900"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8901"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="8902"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>len;<sp/>++i)</highlight></codeline>
<codeline lineno="8903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((bigger[i]<sp/>&amp;<sp/>smaller[i])<sp/>!=<sp/>smaller[i])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="8904"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="8905"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8906"><highlight class="normal"></highlight></codeline>
<codeline lineno="8907"><highlight class="normal">stb_bitset<sp/>*stb_bitset_union(stb_bitset<sp/>*p0,<sp/>stb_bitset<sp/>*p1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="8908"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8909"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="8910"><highlight class="normal"><sp/><sp/><sp/>stb_bitset<sp/>*d<sp/>=<sp/>(stb_bitset<sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*d)<sp/>*<sp/>len);</highlight></codeline>
<codeline lineno="8911"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>len;<sp/>++i)<sp/>d[i]<sp/>=<sp/>p0[i]<sp/>|<sp/>p1[i];</highlight></codeline>
<codeline lineno="8912"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d;</highlight></codeline>
<codeline lineno="8913"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8914"><highlight class="normal"></highlight></codeline>
<codeline lineno="8915"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_bitset_unioneq_changed(stb_bitset<sp/>*p0,<sp/>stb_bitset<sp/>*p1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="8916"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8917"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>changed=0;</highlight></codeline>
<codeline lineno="8918"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="8919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_bitset<sp/>d<sp/>=<sp/>p0[i]<sp/>|<sp/>p1[i];</highlight></codeline>
<codeline lineno="8920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>!=<sp/>p0[i])<sp/>{</highlight></codeline>
<codeline lineno="8921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p0[i]<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="8922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>changed<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="8923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8924"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8925"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>changed;</highlight></codeline>
<codeline lineno="8926"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8927"><highlight class="normal"></highlight></codeline>
<codeline lineno="8928"><highlight class="normal">stb_bitset<sp/>*stb_bitset_new(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="8929"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8930"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="8931"><highlight class="normal"><sp/><sp/><sp/>stb_bitset<sp/>*d<sp/>=<sp/>(stb_bitset<sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*d)<sp/>*<sp/>len);</highlight></codeline>
<codeline lineno="8932"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classvalue" kindref="compound">value</ref>)<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>=<sp/>0xffffffff;</highlight></codeline>
<codeline lineno="8933"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>len;<sp/>++i)<sp/>d[i]<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="8934"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d;</highlight></codeline>
<codeline lineno="8935"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8936"><highlight class="normal"></highlight></codeline>
<codeline lineno="8937"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*stb_bitset_getlist(stb_bitset<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end)</highlight></codeline>
<codeline lineno="8938"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8939"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*list<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="8940"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="8941"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=start;<sp/>i<sp/>&lt;<sp/>end;<sp/>++i)</highlight></codeline>
<codeline lineno="8942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb_bitset_testbit(out,<sp/>i))</highlight></codeline>
<codeline lineno="8943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_push(list,<sp/>i);</highlight></codeline>
<codeline lineno="8944"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>list;</highlight></codeline>
<codeline lineno="8945"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8946"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8947"><highlight class="normal"></highlight></codeline>
<codeline lineno="8949"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8950"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>stb_wordwrap<sp/><sp/><sp/><sp/>quality<sp/>word-wrapping<sp/>for<sp/>fixed-width<sp/>fonts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8951"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8952"><highlight class="normal"></highlight></codeline>
<codeline lineno="8953"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_wordwrap(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*pairs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pair_max,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str);</highlight></codeline>
<codeline lineno="8954"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*stb_wordwrapalloc(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str);</highlight></codeline>
<codeline lineno="8955"><highlight class="normal"></highlight></codeline>
<codeline lineno="8956"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8957"><highlight class="normal"></highlight></codeline>
<codeline lineno="8958"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_wordwrap(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*pairs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pair_max,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)</highlight></codeline>
<codeline lineno="8959"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8960"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=0,i=0,<sp/>start=0,nonwhite=0;</highlight></codeline>
<codeline lineno="8961"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pairs<sp/>==<sp/>NULL)<sp/>pair_max<sp/>=<sp/>0x7ffffff0;</highlight></codeline>
<codeline lineno="8962"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>pair_max<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="8963"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8964"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)<sp/>{</highlight></codeline>
<codeline lineno="8965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s=i;<sp/></highlight><highlight class="comment">//<sp/>first<sp/>whitespace<sp/>char;<sp/>last<sp/>nonwhite+1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>word<sp/>start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>accept<sp/>whitespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(isspace(str[i]))<sp/>{</highlight></codeline>
<codeline lineno="8969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>||<sp/>str[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="8970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str[i]<sp/>+<sp/>str[i+1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">)<sp/>++i;</highlight></codeline>
<codeline lineno="8971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/>pair_max)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="8972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pairs)<sp/>pairs[n]<sp/>=<sp/>start,<sp/>pairs[n+1]<sp/>=<sp/>s-start;</highlight></codeline>
<codeline lineno="8973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="8974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonwhite=0;</highlight></codeline>
<codeline lineno="8975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>i+1;</highlight></codeline>
<codeline lineno="8976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="8977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="8979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>start+count)<sp/>{</highlight></codeline>
<codeline lineno="8981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we&apos;ve<sp/>gone<sp/>off<sp/>the<sp/>end<sp/>using<sp/>whitespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nonwhite)<sp/>{</highlight></codeline>
<codeline lineno="8983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/>pair_max)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="8984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pairs)<sp/>pairs[n]<sp/>=<sp/>start,<sp/>pairs[n+1]<sp/>=<sp/>s-start;</highlight></codeline>
<codeline lineno="8985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="8986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>s<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="8987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonwhite=0;</highlight></codeline>
<codeline lineno="8988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>all<sp/>the<sp/>whitespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>start+count)<sp/>{</highlight></codeline>
<codeline lineno="8991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/>pair_max)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="8992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pairs)<sp/>pairs[n]<sp/>=<sp/>start,<sp/>pairs[n+1]<sp/>=<sp/>count;</highlight></codeline>
<codeline lineno="8993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="8994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>+=<sp/>count;</highlight></codeline>
<codeline lineno="8995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="8997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8999"><highlight class="normal"></highlight></codeline>
<codeline lineno="9000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str[i]<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>scan<sp/>out<sp/>a<sp/>word<sp/>and<sp/>see<sp/>if<sp/>it<sp/>fits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="9003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(str[i]<sp/>&amp;&amp;<sp/>!isspace(str[i]))<sp/>{</highlight></codeline>
<codeline lineno="9004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="9005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wrapped?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>start<sp/>+<sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="9008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>huge?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i-s<sp/>&lt;=<sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="9010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/>pair_max)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="9011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pairs)<sp/>pairs[n]<sp/>=<sp/>start,<sp/>pairs[n+1]<sp/>=<sp/>s-start;</highlight></codeline>
<codeline lineno="9012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="9013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>w;</highlight></codeline>
<codeline lineno="9014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>word<sp/>is<sp/>longer<sp/>than<sp/>one<sp/>line.<sp/>If<sp/>we<sp/>wrap<sp/>it<sp/>onto<sp/>N<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>there<sp/>are<sp/>leftover<sp/>chars.<sp/>do<sp/>those<sp/>chars<sp/>fit<sp/>on<sp/>the<sp/>cur<sp/>line?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>But<sp/>if<sp/>we<sp/>have<sp/>leading<sp/>whitespace,<sp/>we<sp/>force<sp/>it<sp/>to<sp/>start<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((w-start)<sp/>+<sp/>((i-w)<sp/>%<sp/>count)<sp/>&lt;=<sp/>count<sp/>||<sp/>!nonwhite)<sp/>{</highlight></codeline>
<codeline lineno="9019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>a<sp/>full<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/>pair_max)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="9021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pairs)<sp/>pairs[n]<sp/>=<sp/>start,<sp/>pairs[n+1]<sp/>=<sp/>count;</highlight></codeline>
<codeline lineno="9022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="9023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>+=<sp/>count;</highlight></codeline>
<codeline lineno="9024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="9025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>a<sp/>partial<sp/>line,<sp/>trimming<sp/>trailing<sp/>whitespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>!=<sp/>start)<sp/>{</highlight></codeline>
<codeline lineno="9028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/>pair_max)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="9029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pairs)<sp/>pairs[n]<sp/>=<sp/>start,<sp/>pairs[n+1]<sp/>=<sp/>s-start;</highlight></codeline>
<codeline lineno="9030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="9031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>w;</highlight></codeline>
<codeline lineno="9032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>output<sp/>full<sp/>lines<sp/>as<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start<sp/>+<sp/>count<sp/>&lt;=<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="9036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/>pair_max)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="9037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pairs)<sp/>pairs[n]<sp/>=<sp/>start,<sp/>pairs[n+1]<sp/>=<sp/>count;</highlight></codeline>
<codeline lineno="9038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="9039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>+=<sp/>count;</highlight></codeline>
<codeline lineno="9040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nonwhite=1;</highlight></codeline>
<codeline lineno="9044"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9045"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start<sp/>&lt;<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="9046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/>pair_max)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="9047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pairs)<sp/>pairs[n]<sp/>=<sp/>start,<sp/>pairs[n+1]<sp/>=<sp/>i-start;</highlight></codeline>
<codeline lineno="9048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="9049"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9050"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n&gt;&gt;1;</highlight></codeline>
<codeline lineno="9051"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9052"><highlight class="normal"></highlight></codeline>
<codeline lineno="9053"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*stb_wordwrapalloc(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)</highlight></codeline>
<codeline lineno="9054"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9055"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>stb_wordwrap(NULL,0,count,str);</highlight></codeline>
<codeline lineno="9056"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*z<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="9057"><highlight class="normal"><sp/><sp/><sp/>stb_arr_setlen(z,<sp/>n*2);</highlight></codeline>
<codeline lineno="9058"><highlight class="normal"><sp/><sp/><sp/>stb_wordwrap(z,<sp/>n,<sp/>count,<sp/>str);</highlight></codeline>
<codeline lineno="9059"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z;</highlight></codeline>
<codeline lineno="9060"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9061"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9062"><highlight class="normal"></highlight></codeline>
<codeline lineno="9063"><highlight class="normal"></highlight></codeline>
<codeline lineno="9065"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9066"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_match:<sp/><sp/><sp/><sp/>wildcards<sp/>and<sp/>regexping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9067"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9068"><highlight class="normal"></highlight></codeline>
<codeline lineno="9069"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_wildmatch<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*expr,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*candidate);</highlight></codeline>
<codeline lineno="9070"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_wildmatchi(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*expr,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*candidate);</highlight></codeline>
<codeline lineno="9071"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_wildfind<sp/><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*expr,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*candidate);</highlight></codeline>
<codeline lineno="9072"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_wildfindi<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*expr,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*candidate);</highlight></codeline>
<codeline lineno="9073"><highlight class="normal"></highlight></codeline>
<codeline lineno="9074"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_regex(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*regex,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*candidate);</highlight></codeline>
<codeline lineno="9075"><highlight class="normal"></highlight></codeline>
<codeline lineno="9076"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stb_matcher<sp/>stb_matcher;</highlight></codeline>
<codeline lineno="9077"><highlight class="normal"></highlight></codeline>
<codeline lineno="9078"><highlight class="normal">STB_EXTERN<sp/>stb_matcher<sp/>*stb_regex_matcher(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*regex);</highlight></codeline>
<codeline lineno="9079"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_matcher_match(stb_matcher<sp/>*m,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str);</highlight></codeline>
<codeline lineno="9080"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_matcher_find(stb_matcher<sp/>*m,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str);</highlight></codeline>
<codeline lineno="9081"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_matcher_free(stb_matcher<sp/>*f);</highlight></codeline>
<codeline lineno="9082"><highlight class="normal"></highlight></codeline>
<codeline lineno="9083"><highlight class="normal">STB_EXTERN<sp/>stb_matcher<sp/>*stb_lex_matcher(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9084"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_lex_item(stb_matcher<sp/>*m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>);</highlight></codeline>
<codeline lineno="9085"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_lex_item_wild(stb_matcher<sp/>*matcher,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*regex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>);</highlight></codeline>
<codeline lineno="9086"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_lex(stb_matcher<sp/>*m,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*len);</highlight></codeline>
<codeline lineno="9087"><highlight class="normal"></highlight></codeline>
<codeline lineno="9088"><highlight class="normal"></highlight></codeline>
<codeline lineno="9089"><highlight class="normal"></highlight></codeline>
<codeline lineno="9090"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9091"><highlight class="normal"></highlight></codeline>
<codeline lineno="9092"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__match_qstring(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*candidate,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*qstring,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>qlen,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>insensitive)</highlight></codeline>
<codeline lineno="9093"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9094"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="9095"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(insensitive)<sp/>{</highlight></codeline>
<codeline lineno="9096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>qlen;<sp/>++i)</highlight></codeline>
<codeline lineno="9097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qstring[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="9098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!candidate[i])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="9099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tolower(qstring[i])<sp/>!=<sp/>tolower(candidate[i]))</highlight></codeline>
<codeline lineno="9101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="9102"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>qlen;<sp/>++i)</highlight></codeline>
<codeline lineno="9104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qstring[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="9105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!candidate[i])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="9106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qstring[i]<sp/>!=<sp/>candidate[i])</highlight></codeline>
<codeline lineno="9108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="9109"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9110"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="9111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9112"><highlight class="normal"></highlight></codeline>
<codeline lineno="9113"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__find_qstring(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*candidate,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*qstring,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>qlen,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>insensitive)</highlight></codeline>
<codeline lineno="9114"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9115"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="9116"><highlight class="normal"></highlight></codeline>
<codeline lineno="9117"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset=0;</highlight></codeline>
<codeline lineno="9118"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*qstring<sp/>==<sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="9119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++qstring;</highlight></codeline>
<codeline lineno="9120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--qlen;</highlight></codeline>
<codeline lineno="9121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++candidate;</highlight></codeline>
<codeline lineno="9122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(qlen<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="9123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*candidate<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="9124"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9125"><highlight class="normal"></highlight></codeline>
<codeline lineno="9126"><highlight class="normal"><sp/><sp/><sp/>c<sp/>=<sp/>*qstring++;</highlight></codeline>
<codeline lineno="9127"><highlight class="normal"><sp/><sp/><sp/>--qlen;</highlight></codeline>
<codeline lineno="9128"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(insensitive)<sp/>c<sp/>=<sp/>tolower(c);</highlight></codeline>
<codeline lineno="9129"><highlight class="normal"></highlight></codeline>
<codeline lineno="9130"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(candidate[offset])<sp/>{</highlight></codeline>
<codeline lineno="9131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>(insensitive<sp/>?<sp/>tolower(candidate[offset])<sp/>:<sp/>candidate[offset]))</highlight></codeline>
<codeline lineno="9132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__match_qstring(candidate+offset+1,<sp/>qstring,<sp/>qlen,<sp/>insensitive))</highlight></codeline>
<codeline lineno="9133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>offset;</highlight></codeline>
<codeline lineno="9134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++offset;</highlight></codeline>
<codeline lineno="9135"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9136"><highlight class="normal"></highlight></codeline>
<codeline lineno="9137"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="9138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9139"><highlight class="normal"></highlight></codeline>
<codeline lineno="9140"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__wildmatch_raw2(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*expr,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*candidate,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>search,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>insensitive)</highlight></codeline>
<codeline lineno="9141"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9142"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>where=0;</highlight></codeline>
<codeline lineno="9143"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="9144"><highlight class="normal"></highlight></codeline>
<codeline lineno="9145"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!search)<sp/>{</highlight></codeline>
<codeline lineno="9146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>to<sp/>first<sp/>&apos;*&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*expr<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="9148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*expr<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="9150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!*expr)</highlight></codeline>
<codeline lineno="9151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*candidate<sp/>==<sp/>0<sp/>?<sp/>0<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="9152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*expr<sp/>==<sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="9153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!*candidate)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="9154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(insensitive)<sp/>{</highlight></codeline>
<codeline lineno="9156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tolower(*candidate)<sp/>!=<sp/>tolower(*expr))</highlight></codeline>
<codeline lineno="9157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="9158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*candidate<sp/>!=<sp/>*expr)</highlight></codeline>
<codeline lineno="9160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="9161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++candidate,<sp/>++expr,<sp/>++where;</highlight></codeline>
<codeline lineno="9163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9164"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0-length<sp/>search<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!*expr)</highlight></codeline>
<codeline lineno="9167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="9168"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9169"><highlight class="normal"></highlight></codeline>
<codeline lineno="9170"><highlight class="normal"><sp/><sp/><sp/>assert(search<sp/>||<sp/>*expr<sp/>==<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9171"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!search)</highlight></codeline>
<codeline lineno="9172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++expr;</highlight></codeline>
<codeline lineno="9173"><highlight class="normal"></highlight></codeline>
<codeline lineno="9174"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>implicit<sp/>&apos;*&apos;<sp/>at<sp/>this<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9175"><highlight class="normal"></highlight></codeline>
<codeline lineno="9176"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*expr)<sp/>{</highlight></codeline>
<codeline lineno="9177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>o=0;</highlight></codeline>
<codeline lineno="9178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>combine<sp/>redundant<sp/>*<sp/>characters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(expr[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">)<sp/>++expr;</highlight></codeline>
<codeline lineno="9180"><highlight class="normal"></highlight></codeline>
<codeline lineno="9181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ok,<sp/>at<sp/>this<sp/>point,<sp/>expr[-1]<sp/>==<sp/>&apos;*&apos;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>expr[0]<sp/>!=<sp/>&apos;*&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9183"><highlight class="normal"></highlight></codeline>
<codeline lineno="9184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!expr[0])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>start<sp/>&gt;=<sp/>0<sp/>?<sp/>start<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="9185"><highlight class="normal"></highlight></codeline>
<codeline lineno="9186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>find<sp/>next<sp/>&apos;*&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>o<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(expr[o]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="9189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(expr[o]<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="9190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++o;</highlight></codeline>
<codeline lineno="9192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>no<sp/>&apos;*&apos;,<sp/>scan<sp/>to<sp/>end,<sp/>then<sp/>match<sp/>at<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(expr[o]<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>!search)<sp/>{</highlight></codeline>
<codeline lineno="9195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z;</highlight></codeline>
<codeline lineno="9196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(z=0;<sp/>z<sp/>&lt;<sp/>o;<sp/>++z)</highlight></codeline>
<codeline lineno="9197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(candidate[z]<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="9198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="9199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(candidate[z])</highlight></codeline>
<codeline lineno="9200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++z;</highlight></codeline>
<codeline lineno="9201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ok,<sp/>now<sp/>check<sp/>if<sp/>they<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__match_qstring(candidate+z-o,<sp/>expr,<sp/>o,<sp/>insensitive))</highlight></codeline>
<codeline lineno="9203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>start<sp/>&gt;=<sp/>0<sp/>?<sp/>start<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="9204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="9205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>yes<sp/>&apos;*&apos;,<sp/>then<sp/>do<sp/>stb__find_qmatch<sp/>on<sp/>the<sp/>intervening<sp/>chars</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>stb__find_qstring(candidate,<sp/>expr,<sp/>o,<sp/>insensitive);</highlight></codeline>
<codeline lineno="9208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="9209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="9210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="9211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>where<sp/>+<sp/>n;</highlight></codeline>
<codeline lineno="9212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/>+=<sp/>o;</highlight></codeline>
<codeline lineno="9213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>candidate<sp/>+=<sp/>n+o;</highlight></codeline>
<codeline lineno="9214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9215"><highlight class="normal"></highlight></codeline>
<codeline lineno="9216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*expr<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="9217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(search);</highlight></codeline>
<codeline lineno="9218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>start;</highlight></codeline>
<codeline lineno="9219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9220"><highlight class="normal"></highlight></codeline>
<codeline lineno="9221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(*expr<sp/>==<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++expr;</highlight></codeline>
<codeline lineno="9223"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9224"><highlight class="normal"></highlight></codeline>
<codeline lineno="9225"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>start<sp/>&gt;=<sp/>0<sp/>?<sp/>start<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="9226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9227"><highlight class="normal"></highlight></codeline>
<codeline lineno="9228"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__wildmatch_raw(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*expr,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*candidate,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>search,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>insensitive)</highlight></codeline>
<codeline lineno="9229"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9230"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[256];</highlight></codeline>
<codeline lineno="9231"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>multiple<sp/>search<sp/>strings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9232"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s<sp/>=<sp/>strchr(expr,<sp/></highlight><highlight class="charliteral">&apos;;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9233"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*last<sp/>=<sp/>expr;</highlight></codeline>
<codeline lineno="9234"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s)<sp/>{</highlight></codeline>
<codeline lineno="9235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z;</highlight></codeline>
<codeline lineno="9236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>allow<sp/>for<sp/>non-writeable<sp/>strings...<sp/>assume<sp/>they&apos;re<sp/>small</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>-<sp/>last<sp/>&lt;<sp/>256)<sp/>{</highlight></codeline>
<codeline lineno="9238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_strncpy(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>last,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>(s-last+1));</highlight></codeline>
<codeline lineno="9239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[s-last]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>stb__wildmatch_raw2(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>candidate,<sp/>search,<sp/>insensitive);</highlight></codeline>
<codeline lineno="9241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*s<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>stb__wildmatch_raw2(last,<sp/>candidate,<sp/>search,<sp/>insensitive);</highlight></codeline>
<codeline lineno="9244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*s<sp/>=<sp/></highlight><highlight class="charliteral">&apos;;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&gt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z;</highlight></codeline>
<codeline lineno="9247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>last<sp/>=<sp/>s+1;</highlight></codeline>
<codeline lineno="9248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>strchr(last,<sp/></highlight><highlight class="charliteral">&apos;;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9249"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9250"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb__wildmatch_raw2(last,<sp/>candidate,<sp/>search,<sp/>insensitive);</highlight></codeline>
<codeline lineno="9251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9252"><highlight class="normal"></highlight></codeline>
<codeline lineno="9253"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_wildmatch(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*expr,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*candidate)</highlight></codeline>
<codeline lineno="9254"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9255"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb__wildmatch_raw(expr,<sp/>candidate,<sp/>0,0)<sp/>&gt;=<sp/>0;</highlight></codeline>
<codeline lineno="9256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9257"><highlight class="normal"></highlight></codeline>
<codeline lineno="9258"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_wildmatchi(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*expr,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*candidate)</highlight></codeline>
<codeline lineno="9259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9260"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb__wildmatch_raw(expr,<sp/>candidate,<sp/>0,1)<sp/>&gt;=<sp/>0;</highlight></codeline>
<codeline lineno="9261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9262"><highlight class="normal"></highlight></codeline>
<codeline lineno="9263"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_wildfind(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*expr,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*candidate)</highlight></codeline>
<codeline lineno="9264"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9265"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb__wildmatch_raw(expr,<sp/>candidate,<sp/>1,0);</highlight></codeline>
<codeline lineno="9266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9267"><highlight class="normal"></highlight></codeline>
<codeline lineno="9268"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_wildfindi(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*expr,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*candidate)</highlight></codeline>
<codeline lineno="9269"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9270"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb__wildmatch_raw(expr,<sp/>candidate,<sp/>1,1);</highlight></codeline>
<codeline lineno="9271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9272"><highlight class="normal"></highlight></codeline>
<codeline lineno="9273"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9274"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9275"><highlight class="normal"><sp/><sp/><sp/>stb_int16<sp/>transition[256];</highlight></codeline>
<codeline lineno="9276"><highlight class="normal">}<sp/>stb_dfa;</highlight></codeline>
<codeline lineno="9277"><highlight class="normal"></highlight></codeline>
<codeline lineno="9278"><highlight class="normal"></highlight><highlight class="comment">//<sp/>an<sp/>NFA<sp/>node<sp/>represents<sp/>a<sp/>state<sp/>you&apos;re<sp/>in;<sp/>it<sp/>then<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9279"><highlight class="normal"></highlight><highlight class="comment">//<sp/>an<sp/>arbitrary<sp/>number<sp/>of<sp/>edges<sp/>dangling<sp/>off<sp/>of<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9280"><highlight class="normal"></highlight><highlight class="comment">//<sp/>note<sp/>this<sp/>isn&apos;t<sp/>utf8-y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9281"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9282"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9283"><highlight class="normal"><sp/><sp/><sp/>stb_int16<sp/><sp/>match;<sp/></highlight><highlight class="comment">//<sp/>character/set<sp/>to<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9284"><highlight class="normal"><sp/><sp/><sp/>stb_uint16<sp/>node;<sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>node<sp/>to<sp/>go<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9285"><highlight class="normal">}<sp/>stb_nfa_edge;</highlight></codeline>
<codeline lineno="9286"><highlight class="normal"></highlight></codeline>
<codeline lineno="9287"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9288"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9289"><highlight class="normal"><sp/><sp/><sp/>stb_int16<sp/>goal;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>does<sp/>reaching<sp/>this<sp/>win<sp/>the<sp/>prize?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9290"><highlight class="normal"><sp/><sp/><sp/>stb_uint8<sp/>active;<sp/></highlight><highlight class="comment">//<sp/>is<sp/>this<sp/>in<sp/>the<sp/>active<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9291"><highlight class="normal"><sp/><sp/><sp/>stb_nfa_edge<sp/>*out;</highlight></codeline>
<codeline lineno="9292"><highlight class="normal"><sp/><sp/><sp/>stb_uint16<sp/>*eps;<sp/><sp/></highlight><highlight class="comment">//<sp/>list<sp/>of<sp/>epsilon<sp/>closures</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9293"><highlight class="normal">}<sp/>stb_nfa_node;</highlight></codeline>
<codeline lineno="9294"><highlight class="normal"></highlight></codeline>
<codeline lineno="9295"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__DFA_UNDEF<sp/><sp/>-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9296"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__DFA_GOAL<sp/><sp/><sp/>-2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9297"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__DFA_END<sp/><sp/><sp/><sp/>-3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9298"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__DFA_MGOAL<sp/><sp/>-4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9299"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__DFA_VALID<sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9300"><highlight class="normal"></highlight></codeline>
<codeline lineno="9301"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__NFA_STOP_GOAL<sp/>-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9302"><highlight class="normal"></highlight></codeline>
<codeline lineno="9303"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compiled<sp/>regexp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9304"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stb_matcher</highlight></codeline>
<codeline lineno="9305"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9306"><highlight class="normal"><sp/><sp/><sp/>stb_uint16<sp/>start_node;</highlight></codeline>
<codeline lineno="9307"><highlight class="normal"><sp/><sp/><sp/>stb_int16<sp/>dfa_start;</highlight></codeline>
<codeline lineno="9308"><highlight class="normal"><sp/><sp/><sp/>stb_uint32<sp/>*charset;</highlight></codeline>
<codeline lineno="9309"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_charset;</highlight></codeline>
<codeline lineno="9310"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>match_start;</highlight></codeline>
<codeline lineno="9311"><highlight class="normal"><sp/><sp/><sp/>stb_nfa_node<sp/>*nodes;</highlight></codeline>
<codeline lineno="9312"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>does_lex;</highlight></codeline>
<codeline lineno="9313"><highlight class="normal"></highlight></codeline>
<codeline lineno="9314"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dfa<sp/>matcher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9315"><highlight class="normal"><sp/><sp/><sp/>stb_dfa<sp/><sp/><sp/><sp/>*<sp/>dfa;</highlight></codeline>
<codeline lineno="9316"><highlight class="normal"><sp/><sp/><sp/>stb_uint32<sp/>*<sp/>dfa_mapping;</highlight></codeline>
<codeline lineno="9317"><highlight class="normal"><sp/><sp/><sp/>stb_int16<sp/><sp/>*<sp/>dfa_result;</highlight></codeline>
<codeline lineno="9318"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_words_per_dfa;</highlight></codeline>
<codeline lineno="9319"><highlight class="normal">};</highlight></codeline>
<codeline lineno="9320"><highlight class="normal"></highlight></codeline>
<codeline lineno="9321"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__add_node(stb_matcher<sp/>*matcher)</highlight></codeline>
<codeline lineno="9322"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9323"><highlight class="normal"><sp/><sp/><sp/>stb_nfa_node<sp/>z;</highlight></codeline>
<codeline lineno="9324"><highlight class="normal"><sp/><sp/><sp/>z.active<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9325"><highlight class="normal"><sp/><sp/><sp/>z.eps<sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9326"><highlight class="normal"><sp/><sp/><sp/>z.goal<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9327"><highlight class="normal"><sp/><sp/><sp/>z.out<sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9328"><highlight class="normal"><sp/><sp/><sp/>stb_arr_push(matcher-&gt;nodes,<sp/>z);</highlight></codeline>
<codeline lineno="9329"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_arr_len(matcher-&gt;nodes)-1;</highlight></codeline>
<codeline lineno="9330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9331"><highlight class="normal"></highlight></codeline>
<codeline lineno="9332"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__add_epsilon(stb_matcher<sp/>*matcher,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>from,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>to)</highlight></codeline>
<codeline lineno="9333"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9334"><highlight class="normal"><sp/><sp/><sp/>assert(from<sp/>!=<sp/>to);</highlight></codeline>
<codeline lineno="9335"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matcher-&gt;nodes[from].eps<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="9336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_malloc((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>&amp;matcher-&gt;nodes[from].eps,<sp/>matcher);</highlight></codeline>
<codeline lineno="9337"><highlight class="normal"><sp/><sp/><sp/>stb_arr_push(matcher-&gt;nodes[from].eps,<sp/>to);</highlight></codeline>
<codeline lineno="9338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9339"><highlight class="normal"></highlight></codeline>
<codeline lineno="9340"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__add_edge(stb_matcher<sp/>*matcher,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>from,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>to,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type)</highlight></codeline>
<codeline lineno="9341"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9342"><highlight class="normal"><sp/><sp/><sp/><sp/>stb_nfa_edge<sp/>z<sp/>=<sp/>{<sp/>(stb_int16)type,<sp/>(stb_uint16)to<sp/>};</highlight></codeline>
<codeline lineno="9343"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matcher-&gt;nodes[from].out<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="9344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_malloc((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>&amp;matcher-&gt;nodes[from].out,<sp/>matcher);</highlight></codeline>
<codeline lineno="9345"><highlight class="normal"><sp/><sp/><sp/>stb_arr_push(matcher-&gt;nodes[from].out,<sp/>z);</highlight></codeline>
<codeline lineno="9346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9347"><highlight class="normal"></highlight></codeline>
<codeline lineno="9348"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb__reg_parse_alt(stb_matcher<sp/>*m,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*r,<sp/>stb_uint16<sp/>*<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>);</highlight></codeline>
<codeline lineno="9349"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb__reg_parse(stb_matcher<sp/>*matcher,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*regex,<sp/>stb_uint16<sp/>*end)</highlight></codeline>
<codeline lineno="9350"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9351"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="9352"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last_start<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="9353"><highlight class="normal"><sp/><sp/><sp/>stb_uint16<sp/>last_end<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="9354"><highlight class="normal"></highlight></codeline>
<codeline lineno="9355"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*regex)<sp/>{</highlight></codeline>
<codeline lineno="9356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(*regex)<sp/>{</highlight></codeline>
<codeline lineno="9357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_start<sp/>=<sp/>last_end;</highlight></codeline>
<codeline lineno="9359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regex<sp/>=<sp/>stb__reg_parse_alt(matcher,<sp/>last_end,<sp/>regex+1,<sp/>&amp;last_end);</highlight></codeline>
<codeline lineno="9360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(regex<sp/>==<sp/>NULL<sp/>||<sp/>*regex<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="9361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="9362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++regex;</highlight></codeline>
<codeline lineno="9363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9364"><highlight class="normal"></highlight></codeline>
<codeline lineno="9365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;|&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*end<sp/>=<sp/>last_end;</highlight></codeline>
<codeline lineno="9368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>regex;</highlight></codeline>
<codeline lineno="9369"><highlight class="normal"></highlight></codeline>
<codeline lineno="9370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_start<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="9372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__add_epsilon(matcher,<sp/>last_start,<sp/>last_end);</highlight></codeline>
<codeline lineno="9373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++regex;</highlight></codeline>
<codeline lineno="9374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9375"><highlight class="normal"></highlight></codeline>
<codeline lineno="9376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_start<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="9378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__add_epsilon(matcher,<sp/>last_start,<sp/>last_end);</highlight></codeline>
<codeline lineno="9379"><highlight class="normal"></highlight></codeline>
<codeline lineno="9380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fall<sp/>through</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9381"><highlight class="normal"></highlight></codeline>
<codeline lineno="9382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_start<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="9384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__add_epsilon(matcher,<sp/>last_end,<sp/>last_start);</highlight></codeline>
<codeline lineno="9385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>prevent<sp/>links<sp/>back<sp/>to<sp/>last_end<sp/>from<sp/>chaining<sp/>to<sp/>last_start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>stb__add_node(matcher);</highlight></codeline>
<codeline lineno="9387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__add_epsilon(matcher,<sp/>last_end,<sp/>n);</highlight></codeline>
<codeline lineno="9388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_end<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="9389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++regex;</highlight></codeline>
<codeline lineno="9390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9391"><highlight class="normal"></highlight></codeline>
<codeline lineno="9392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">:<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>supported!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>given<sp/>{n,m},<sp/>clone<sp/>last_start<sp/>to<sp/>last_end<sp/>m<sp/>times,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>include<sp/>epsilons<sp/>from<sp/>start<sp/>to<sp/>first<sp/>m-n<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="9396"><highlight class="normal"></highlight></codeline>
<codeline lineno="9397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++regex;</highlight></codeline>
<codeline lineno="9399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!*regex)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="9400"><highlight class="normal"></highlight></codeline>
<codeline lineno="9401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fallthrough</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>match<sp/>exactly<sp/>this<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>stb__add_node(matcher);</highlight></codeline>
<codeline lineno="9404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__add_edge(matcher,<sp/>last_end,<sp/>n,<sp/>*regex);</highlight></codeline>
<codeline lineno="9405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_start<sp/>=<sp/>last_end;</highlight></codeline>
<codeline lineno="9406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_end<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="9407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++regex;</highlight></codeline>
<codeline lineno="9408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9409"><highlight class="normal"></highlight></codeline>
<codeline lineno="9410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;$&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>stb__add_node(matcher);</highlight></codeline>
<codeline lineno="9412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__add_edge(matcher,<sp/>last_end,<sp/>n,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_start<sp/>=<sp/>last_end;</highlight></codeline>
<codeline lineno="9414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_end<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="9415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++regex;</highlight></codeline>
<codeline lineno="9416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9417"><highlight class="normal"></highlight></codeline>
<codeline lineno="9418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>stb__add_node(matcher);</highlight></codeline>
<codeline lineno="9420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__add_edge(matcher,<sp/>last_end,<sp/>n,<sp/>-1);</highlight></codeline>
<codeline lineno="9421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_start<sp/>=<sp/>last_end;</highlight></codeline>
<codeline lineno="9422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_end<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="9423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++regex;</highlight></codeline>
<codeline lineno="9424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9425"><highlight class="normal"></highlight></codeline>
<codeline lineno="9426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="9427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_uint8<sp/>flags[256];</highlight></codeline>
<codeline lineno="9428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>invert<sp/>=<sp/>0,z;</highlight></codeline>
<codeline lineno="9429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++regex;</highlight></codeline>
<codeline lineno="9430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matcher-&gt;num_charset<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="9431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matcher-&gt;charset<sp/>=<sp/>(stb_uint<sp/>*)<sp/>stb_malloc(matcher,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*matcher-&gt;charset)<sp/>*<sp/>256);</highlight></codeline>
<codeline lineno="9432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(matcher-&gt;charset,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*matcher-&gt;charset)<sp/>*<sp/>256);</highlight></codeline>
<codeline lineno="9433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9434"><highlight class="normal"></highlight></codeline>
<codeline lineno="9435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(flags,0,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(flags));</highlight></codeline>
<codeline lineno="9436"><highlight class="normal"></highlight></codeline>
<codeline lineno="9437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>leading<sp/>^<sp/>is<sp/>special</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*regex<sp/>==<sp/></highlight><highlight class="charliteral">&apos;^&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="9439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++regex,<sp/>invert<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="9440"><highlight class="normal"></highlight></codeline>
<codeline lineno="9441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>leading<sp/>]<sp/>is<sp/>special</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*regex<sp/>==<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="9443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags[(int)<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="9444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++regex;</highlight></codeline>
<codeline lineno="9445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*regex<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="9447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_uint<sp/>a;</highlight></codeline>
<codeline lineno="9448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!*regex)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="9449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>*regex++;</highlight></codeline>
<codeline lineno="9450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(regex[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>regex[1]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="9451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_uint<sp/>i,b<sp/>=<sp/>regex[1];</highlight></codeline>
<codeline lineno="9452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regex<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="9453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="9454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>&gt;<sp/>b)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="9455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=a;<sp/>i<sp/>&lt;=<sp/>b;<sp/>++i)</highlight></codeline>
<codeline lineno="9456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags[i]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="9457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags[a]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="9459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++regex;</highlight></codeline>
<codeline lineno="9461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(invert)<sp/>{</highlight></codeline>
<codeline lineno="9462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="9463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>256;<sp/>++i)</highlight></codeline>
<codeline lineno="9464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags[i]<sp/>=<sp/>1-flags[i];</highlight></codeline>
<codeline lineno="9465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9466"><highlight class="normal"></highlight></codeline>
<codeline lineno="9467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>check<sp/>if<sp/>any<sp/>existing<sp/>charset<sp/>matches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(z=0;<sp/>z<sp/>&lt;<sp/>matcher-&gt;num_charset;<sp/>++z)<sp/>{</highlight></codeline>
<codeline lineno="9469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>k[2]<sp/>=<sp/>{<sp/>0,<sp/>1<sp/>&lt;&lt;<sp/>z};</highlight></codeline>
<codeline lineno="9470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>256;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="9471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>k[flags[i]];</highlight></codeline>
<codeline lineno="9472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((matcher-&gt;charset[i]<sp/>&amp;<sp/>k[1])<sp/>!=<sp/>f)</highlight></codeline>
<codeline lineno="9473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>256)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9477"><highlight class="normal"></highlight></codeline>
<codeline lineno="9478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>==<sp/>matcher-&gt;num_charset)<sp/>{</highlight></codeline>
<codeline lineno="9479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="9480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++matcher-&gt;num_charset;</highlight></codeline>
<codeline lineno="9481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matcher-&gt;num_charset<sp/>&gt;<sp/>32)<sp/>{</highlight></codeline>
<codeline lineno="9482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(0);<sp/></highlight><highlight class="comment">/*<sp/>NOTREACHED<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>too<sp/>many<sp/>charsets,<sp/>oops</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>256;<sp/>++i)</highlight></codeline>
<codeline lineno="9486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags[i])</highlight></codeline>
<codeline lineno="9487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matcher-&gt;charset[i]<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/>z);</highlight></codeline>
<codeline lineno="9488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9489"><highlight class="normal"></highlight></codeline>
<codeline lineno="9490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>stb__add_node(matcher);</highlight></codeline>
<codeline lineno="9491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__add_edge(matcher,<sp/>last_end,<sp/>n,<sp/>-2<sp/>-<sp/>z);</highlight></codeline>
<codeline lineno="9492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_start<sp/>=<sp/>last_end;</highlight></codeline>
<codeline lineno="9493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_end<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="9494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9497"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9498"><highlight class="normal"><sp/><sp/><sp/>*end<sp/>=<sp/>last_end;</highlight></codeline>
<codeline lineno="9499"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>regex;</highlight></codeline>
<codeline lineno="9500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9501"><highlight class="normal"></highlight></codeline>
<codeline lineno="9502"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb__reg_parse_alt(stb_matcher<sp/>*matcher,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*regex,<sp/>stb_uint16<sp/>*end)</highlight></codeline>
<codeline lineno="9503"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9504"><highlight class="normal"><sp/><sp/><sp/>stb_uint16<sp/>last_end<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="9505"><highlight class="normal"><sp/><sp/><sp/>stb_uint16<sp/>main_end;</highlight></codeline>
<codeline lineno="9506"><highlight class="normal"></highlight></codeline>
<codeline lineno="9507"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>head,<sp/>tail;</highlight></codeline>
<codeline lineno="9508"><highlight class="normal"></highlight></codeline>
<codeline lineno="9509"><highlight class="normal"><sp/><sp/><sp/>head<sp/>=<sp/>stb__add_node(matcher);</highlight></codeline>
<codeline lineno="9510"><highlight class="normal"><sp/><sp/><sp/>stb__add_epsilon(matcher,<sp/>start,<sp/>head);</highlight></codeline>
<codeline lineno="9511"><highlight class="normal"></highlight></codeline>
<codeline lineno="9512"><highlight class="normal"><sp/><sp/><sp/>regex<sp/>=<sp/>stb__reg_parse(matcher,<sp/>head,<sp/>regex,<sp/>&amp;last_end);</highlight></codeline>
<codeline lineno="9513"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(regex<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="9514"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*regex<sp/>==<sp/>0<sp/>||<sp/>*regex<sp/>==<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="9515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*end<sp/>=<sp/>last_end;</highlight></codeline>
<codeline lineno="9516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>regex;</highlight></codeline>
<codeline lineno="9517"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9518"><highlight class="normal"></highlight></codeline>
<codeline lineno="9519"><highlight class="normal"><sp/><sp/><sp/>main_end<sp/>=<sp/>last_end;</highlight></codeline>
<codeline lineno="9520"><highlight class="normal"><sp/><sp/><sp/>tail<sp/>=<sp/>stb__add_node(matcher);</highlight></codeline>
<codeline lineno="9521"><highlight class="normal"></highlight></codeline>
<codeline lineno="9522"><highlight class="normal"><sp/><sp/><sp/>stb__add_epsilon(matcher,<sp/>last_end,<sp/>tail);</highlight></codeline>
<codeline lineno="9523"><highlight class="normal"></highlight></codeline>
<codeline lineno="9524"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>alternatives<sp/>from<sp/>the<sp/>same<sp/>starting<sp/>node;<sp/>use<sp/>epsilon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9525"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transitions<sp/>to<sp/>combine<sp/>their<sp/>endings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9526"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(*regex<sp/>&amp;&amp;<sp/>*regex<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="9527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(*regex<sp/>==<sp/></highlight><highlight class="charliteral">&apos;|&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>head<sp/>=<sp/>stb__add_node(matcher);</highlight></codeline>
<codeline lineno="9529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__add_epsilon(matcher,<sp/>start,<sp/>head);</highlight></codeline>
<codeline lineno="9530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>regex<sp/>=<sp/>stb__reg_parse(matcher,<sp/>head,<sp/>regex+1,<sp/>&amp;last_end);</highlight></codeline>
<codeline lineno="9531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(regex<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="9532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="9533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__add_epsilon(matcher,<sp/>last_end,<sp/>tail);</highlight></codeline>
<codeline lineno="9534"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9535"><highlight class="normal"></highlight></codeline>
<codeline lineno="9536"><highlight class="normal"><sp/><sp/><sp/>*end<sp/>=<sp/>tail;</highlight></codeline>
<codeline lineno="9537"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>regex;</highlight></codeline>
<codeline lineno="9538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9539"><highlight class="normal"></highlight></codeline>
<codeline lineno="9540"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb__wild_parse(stb_matcher<sp/>*matcher,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/>stb_uint16<sp/>*end)</highlight></codeline>
<codeline lineno="9541"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9542"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="9543"><highlight class="normal"><sp/><sp/><sp/>stb_uint16<sp/>last_end;</highlight></codeline>
<codeline lineno="9544"><highlight class="normal"></highlight></codeline>
<codeline lineno="9545"><highlight class="normal"><sp/><sp/><sp/>last_end<sp/>=<sp/>stb__add_node(matcher);</highlight></codeline>
<codeline lineno="9546"><highlight class="normal"><sp/><sp/><sp/>stb__add_epsilon(matcher,<sp/>start,<sp/>last_end);</highlight></codeline>
<codeline lineno="9547"><highlight class="normal"></highlight></codeline>
<codeline lineno="9548"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*str)<sp/>{</highlight></codeline>
<codeline lineno="9549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(*str)<sp/>{</highlight></codeline>
<codeline lineno="9550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fallthrough</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>match<sp/>exactly<sp/>this<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>stb__add_node(matcher);</highlight></codeline>
<codeline lineno="9553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(toupper(*str)<sp/>==<sp/>tolower(*str))<sp/>{</highlight></codeline>
<codeline lineno="9554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__add_edge(matcher,<sp/>last_end,<sp/>n,<sp/>*str);</highlight></codeline>
<codeline lineno="9555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__add_edge(matcher,<sp/>last_end,<sp/>n,<sp/>tolower(*str));</highlight></codeline>
<codeline lineno="9557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__add_edge(matcher,<sp/>last_end,<sp/>n,<sp/>toupper(*str));</highlight></codeline>
<codeline lineno="9558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_end<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="9560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++str;</highlight></codeline>
<codeline lineno="9561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9562"><highlight class="normal"></highlight></codeline>
<codeline lineno="9563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>stb__add_node(matcher);</highlight></codeline>
<codeline lineno="9565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__add_edge(matcher,<sp/>last_end,<sp/>n,<sp/>-1);</highlight></codeline>
<codeline lineno="9566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_end<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="9567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++str;</highlight></codeline>
<codeline lineno="9568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9569"><highlight class="normal"></highlight></codeline>
<codeline lineno="9570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>stb__add_node(matcher);</highlight></codeline>
<codeline lineno="9572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__add_edge(matcher,<sp/>last_end,<sp/>n,<sp/>-1);</highlight></codeline>
<codeline lineno="9573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__add_epsilon(matcher,<sp/>last_end,<sp/>n);</highlight></codeline>
<codeline lineno="9574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__add_epsilon(matcher,<sp/>n,<sp/>last_end);</highlight></codeline>
<codeline lineno="9575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_end<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="9576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++str;</highlight></codeline>
<codeline lineno="9577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9579"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9580"><highlight class="normal"></highlight></codeline>
<codeline lineno="9581"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>require<sp/>end<sp/>of<sp/>string<sp/>to<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9582"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>stb__add_node(matcher);</highlight></codeline>
<codeline lineno="9583"><highlight class="normal"><sp/><sp/><sp/>stb__add_edge(matcher,<sp/>last_end,<sp/>n,<sp/>0);</highlight></codeline>
<codeline lineno="9584"><highlight class="normal"><sp/><sp/><sp/>last_end<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="9585"><highlight class="normal"></highlight></codeline>
<codeline lineno="9586"><highlight class="normal"><sp/><sp/><sp/>*end<sp/>=<sp/>last_end;</highlight></codeline>
<codeline lineno="9587"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="9588"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9589"><highlight class="normal"></highlight></codeline>
<codeline lineno="9590"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__opt(stb_matcher<sp/>*m,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="9591"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9592"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)<sp/>{</highlight></codeline>
<codeline lineno="9593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_nfa_node<sp/>*p<sp/>=<sp/>&amp;m-&gt;nodes[n];</highlight></codeline>
<codeline lineno="9594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;goal)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="9595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb_arr_len(p-&gt;out))<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="9596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb_arr_len(p-&gt;eps)<sp/>!=<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="9597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>p-&gt;eps[0];</highlight></codeline>
<codeline lineno="9598"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9599"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9600"><highlight class="normal"></highlight></codeline>
<codeline lineno="9601"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__optimize(stb_matcher<sp/>*m)</highlight></codeline>
<codeline lineno="9602"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9603"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>target<sp/>of<sp/>any<sp/>edge<sp/>is<sp/>a<sp/>node<sp/>with<sp/>exactly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9604"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>one<sp/>out-epsilon,<sp/>shorten<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9605"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j;</highlight></codeline>
<codeline lineno="9606"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stb_arr_len(m-&gt;nodes);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="9607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_nfa_node<sp/>*p<sp/>=<sp/>&amp;m-&gt;nodes[i];</highlight></codeline>
<codeline lineno="9608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>stb_arr_len(p-&gt;out);<sp/>++j)</highlight></codeline>
<codeline lineno="9609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;out[j].node<sp/>=<sp/>stb__opt(m,p-&gt;out[j].node);</highlight></codeline>
<codeline lineno="9610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>stb_arr_len(p-&gt;eps);<sp/>++j)</highlight></codeline>
<codeline lineno="9611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;eps[j]<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>stb__opt(m,p-&gt;eps[j]<sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="9612"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9613"><highlight class="normal"><sp/><sp/><sp/>m-&gt;start_node<sp/>=<sp/>stb__opt(m,m-&gt;start_node);</highlight></codeline>
<codeline lineno="9614"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9615"><highlight class="normal"></highlight></codeline>
<codeline lineno="9616"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_matcher_free(stb_matcher<sp/>*f)</highlight></codeline>
<codeline lineno="9617"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9618"><highlight class="normal"><sp/><sp/><sp/>stb_free(f);</highlight></codeline>
<codeline lineno="9619"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9620"><highlight class="normal"></highlight></codeline>
<codeline lineno="9621"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb_matcher<sp/>*stb__alloc_matcher(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="9622"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9623"><highlight class="normal"><sp/><sp/><sp/>stb_matcher<sp/>*matcher<sp/>=<sp/>(stb_matcher<sp/>*)<sp/>stb_malloc(0,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*matcher));</highlight></codeline>
<codeline lineno="9624"><highlight class="normal"></highlight></codeline>
<codeline lineno="9625"><highlight class="normal"><sp/><sp/><sp/>matcher-&gt;start_node<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9626"><highlight class="normal"><sp/><sp/><sp/>stb_arr_malloc((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>&amp;matcher-&gt;nodes,<sp/>matcher);</highlight></codeline>
<codeline lineno="9627"><highlight class="normal"><sp/><sp/><sp/>matcher-&gt;num_charset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9628"><highlight class="normal"><sp/><sp/><sp/>matcher-&gt;match_start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9629"><highlight class="normal"><sp/><sp/><sp/>matcher-&gt;does_lex<sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9630"><highlight class="normal"></highlight></codeline>
<codeline lineno="9631"><highlight class="normal"><sp/><sp/><sp/>matcher-&gt;dfa_start<sp/><sp/><sp/>=<sp/>STB__DFA_UNDEF;</highlight></codeline>
<codeline lineno="9632"><highlight class="normal"><sp/><sp/><sp/>stb_arr_malloc((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>&amp;matcher-&gt;dfa,<sp/>matcher);</highlight></codeline>
<codeline lineno="9633"><highlight class="normal"><sp/><sp/><sp/>stb_arr_malloc((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>&amp;matcher-&gt;dfa_mapping,<sp/>matcher);</highlight></codeline>
<codeline lineno="9634"><highlight class="normal"><sp/><sp/><sp/>stb_arr_malloc((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>&amp;matcher-&gt;dfa_result,<sp/>matcher);</highlight></codeline>
<codeline lineno="9635"><highlight class="normal"></highlight></codeline>
<codeline lineno="9636"><highlight class="normal"><sp/><sp/><sp/>stb__add_node(matcher);</highlight></codeline>
<codeline lineno="9637"><highlight class="normal"></highlight></codeline>
<codeline lineno="9638"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matcher;</highlight></codeline>
<codeline lineno="9639"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9640"><highlight class="normal"></highlight></codeline>
<codeline lineno="9641"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__lex_reset(stb_matcher<sp/>*matcher)</highlight></codeline>
<codeline lineno="9642"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9643"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>flush<sp/>cached<sp/>dfa<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9644"><highlight class="normal"><sp/><sp/><sp/>stb_arr_setlen(matcher-&gt;dfa,<sp/>0);</highlight></codeline>
<codeline lineno="9645"><highlight class="normal"><sp/><sp/><sp/>stb_arr_setlen(matcher-&gt;dfa_mapping,<sp/>0);</highlight></codeline>
<codeline lineno="9646"><highlight class="normal"><sp/><sp/><sp/>stb_arr_setlen(matcher-&gt;dfa_result,<sp/>0);</highlight></codeline>
<codeline lineno="9647"><highlight class="normal"><sp/><sp/><sp/>matcher-&gt;dfa_start<sp/>=<sp/>STB__DFA_UNDEF;</highlight></codeline>
<codeline lineno="9648"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9649"><highlight class="normal"></highlight></codeline>
<codeline lineno="9650"><highlight class="normal">stb_matcher<sp/>*stb_regex_matcher(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*regex)</highlight></codeline>
<codeline lineno="9651"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9652"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*z;</highlight></codeline>
<codeline lineno="9653"><highlight class="normal"><sp/><sp/><sp/>stb_uint16<sp/>end;</highlight></codeline>
<codeline lineno="9654"><highlight class="normal"><sp/><sp/><sp/>stb_matcher<sp/>*matcher<sp/>=<sp/>stb__alloc_matcher();</highlight></codeline>
<codeline lineno="9655"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*regex<sp/>==<sp/></highlight><highlight class="charliteral">&apos;^&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="9656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matcher-&gt;match_start<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="9657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++regex;</highlight></codeline>
<codeline lineno="9658"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9659"><highlight class="normal"></highlight></codeline>
<codeline lineno="9660"><highlight class="normal"><sp/><sp/><sp/>z<sp/>=<sp/>stb__reg_parse_alt(matcher,<sp/>matcher-&gt;start_node,<sp/>regex,<sp/>&amp;end);</highlight></codeline>
<codeline lineno="9661"><highlight class="normal"></highlight></codeline>
<codeline lineno="9662"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!z<sp/>||<sp/>*z)<sp/>{</highlight></codeline>
<codeline lineno="9663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_free(matcher);</highlight></codeline>
<codeline lineno="9664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="9665"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9666"><highlight class="normal"></highlight></codeline>
<codeline lineno="9667"><highlight class="normal"><sp/><sp/><sp/>((matcher-&gt;nodes)[(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>end]).goal<sp/>=<sp/>STB__NFA_STOP_GOAL;</highlight></codeline>
<codeline lineno="9668"><highlight class="normal"></highlight></codeline>
<codeline lineno="9669"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matcher;</highlight></codeline>
<codeline lineno="9670"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9671"><highlight class="normal"></highlight></codeline>
<codeline lineno="9672"><highlight class="normal">stb_matcher<sp/>*stb_lex_matcher(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="9673"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9674"><highlight class="normal"><sp/><sp/><sp/>stb_matcher<sp/>*matcher<sp/>=<sp/>stb__alloc_matcher();</highlight></codeline>
<codeline lineno="9675"><highlight class="normal"></highlight></codeline>
<codeline lineno="9676"><highlight class="normal"><sp/><sp/><sp/>matcher-&gt;match_start<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="9677"><highlight class="normal"><sp/><sp/><sp/>matcher-&gt;does_lex<sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="9678"><highlight class="normal"></highlight></codeline>
<codeline lineno="9679"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matcher;</highlight></codeline>
<codeline lineno="9680"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9681"><highlight class="normal"></highlight></codeline>
<codeline lineno="9682"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_lex_item(stb_matcher<sp/>*matcher,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*regex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>)</highlight></codeline>
<codeline lineno="9683"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9684"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*z;</highlight></codeline>
<codeline lineno="9685"><highlight class="normal"><sp/><sp/><sp/>stb_uint16<sp/>end;</highlight></codeline>
<codeline lineno="9686"><highlight class="normal"></highlight></codeline>
<codeline lineno="9687"><highlight class="normal"><sp/><sp/><sp/>z<sp/>=<sp/>stb__reg_parse_alt(matcher,<sp/>matcher-&gt;start_node,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>regex,<sp/>&amp;end);</highlight></codeline>
<codeline lineno="9688"><highlight class="normal"></highlight></codeline>
<codeline lineno="9689"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="9690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="9691"><highlight class="normal"></highlight></codeline>
<codeline lineno="9692"><highlight class="normal"><sp/><sp/><sp/>stb__lex_reset(matcher);</highlight></codeline>
<codeline lineno="9693"><highlight class="normal"></highlight></codeline>
<codeline lineno="9694"><highlight class="normal"><sp/><sp/><sp/>matcher-&gt;nodes[(int)<sp/>end].goal<sp/>=<sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="9695"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="9696"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9697"><highlight class="normal"></highlight></codeline>
<codeline lineno="9698"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_lex_item_wild(stb_matcher<sp/>*matcher,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*regex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>)</highlight></codeline>
<codeline lineno="9699"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9700"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*z;</highlight></codeline>
<codeline lineno="9701"><highlight class="normal"><sp/><sp/><sp/>stb_uint16<sp/>end;</highlight></codeline>
<codeline lineno="9702"><highlight class="normal"></highlight></codeline>
<codeline lineno="9703"><highlight class="normal"><sp/><sp/><sp/>z<sp/>=<sp/>stb__wild_parse(matcher,<sp/>matcher-&gt;start_node,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>regex,<sp/>&amp;end);</highlight></codeline>
<codeline lineno="9704"><highlight class="normal"></highlight></codeline>
<codeline lineno="9705"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="9706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="9707"><highlight class="normal"></highlight></codeline>
<codeline lineno="9708"><highlight class="normal"><sp/><sp/><sp/>stb__lex_reset(matcher);</highlight></codeline>
<codeline lineno="9709"><highlight class="normal"></highlight></codeline>
<codeline lineno="9710"><highlight class="normal"><sp/><sp/><sp/>matcher-&gt;nodes[(int)<sp/>end].goal<sp/>=<sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="9711"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="9712"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9713"><highlight class="normal"></highlight></codeline>
<codeline lineno="9714"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__clear(stb_matcher<sp/>*m,<sp/>stb_uint16<sp/>*list)</highlight></codeline>
<codeline lineno="9715"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9716"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="9717"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stb_arr_len(list);<sp/>++i)</highlight></codeline>
<codeline lineno="9718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;nodes[(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>list[i]].active<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9719"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9720"><highlight class="normal"></highlight></codeline>
<codeline lineno="9721"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__clear_goalcheck(stb_matcher<sp/>*m,<sp/>stb_uint16<sp/>*list)</highlight></codeline>
<codeline lineno="9722"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9723"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>t=0;</highlight></codeline>
<codeline lineno="9724"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stb_arr_len(list);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="9725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>+=<sp/>m-&gt;nodes[(int)<sp/>list[i]].goal;</highlight></codeline>
<codeline lineno="9726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;nodes[(int)<sp/>list[i]].active<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9727"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9728"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="9729"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9730"><highlight class="normal"></highlight></codeline>
<codeline lineno="9731"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb_uint16<sp/>*<sp/>stb__add_if_inactive(stb_matcher<sp/>*m,<sp/>stb_uint16<sp/>*list,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="9732"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9733"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m-&gt;nodes[n].active)<sp/>{</highlight></codeline>
<codeline lineno="9734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_push(list,<sp/>n);</highlight></codeline>
<codeline lineno="9735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;nodes[n].active<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="9736"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9737"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>list;</highlight></codeline>
<codeline lineno="9738"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9739"><highlight class="normal"></highlight></codeline>
<codeline lineno="9740"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb_uint16<sp/>*<sp/>stb__eps_closure(stb_matcher<sp/>*m,<sp/>stb_uint16<sp/>*list)</highlight></codeline>
<codeline lineno="9741"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9742"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,n<sp/>=<sp/>stb_arr_len(list);</highlight></codeline>
<codeline lineno="9743"><highlight class="normal"></highlight></codeline>
<codeline lineno="9744"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="9745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_uint16<sp/>*<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref><sp/>=<sp/>m-&gt;nodes[(int)<sp/>list[i]].eps;</highlight></codeline>
<codeline lineno="9746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>)<sp/>{</highlight></codeline>
<codeline lineno="9747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,k<sp/>=<sp/>stb_arr_len(<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>);</highlight></codeline>
<codeline lineno="9748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>k;<sp/>++j)</highlight></codeline>
<codeline lineno="9749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list<sp/>=<sp/>stb__add_if_inactive(m,<sp/>list,<sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>[j]);</highlight></codeline>
<codeline lineno="9750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>stb_arr_len(list);</highlight></codeline>
<codeline lineno="9751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9752"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9753"><highlight class="normal"></highlight></codeline>
<codeline lineno="9754"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>list;</highlight></codeline>
<codeline lineno="9755"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9756"><highlight class="normal"></highlight></codeline>
<codeline lineno="9757"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_matcher_match(stb_matcher<sp/>*m,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)</highlight></codeline>
<codeline lineno="9758"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9759"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9760"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,y,z;</highlight></codeline>
<codeline lineno="9761"><highlight class="normal"><sp/><sp/><sp/>stb_uint16<sp/>*previous<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="9762"><highlight class="normal"><sp/><sp/><sp/>stb_uint16<sp/>*current<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="9763"><highlight class="normal"><sp/><sp/><sp/>stb_uint16<sp/>*temp;</highlight></codeline>
<codeline lineno="9764"><highlight class="normal"></highlight></codeline>
<codeline lineno="9765"><highlight class="normal"><sp/><sp/><sp/>stb_arr_setsize(previous,<sp/>4);</highlight></codeline>
<codeline lineno="9766"><highlight class="normal"><sp/><sp/><sp/>stb_arr_setsize(current,<sp/>4);</highlight></codeline>
<codeline lineno="9767"><highlight class="normal"></highlight></codeline>
<codeline lineno="9768"><highlight class="normal"><sp/><sp/><sp/>previous<sp/>=<sp/>stb__add_if_inactive(m,<sp/>previous,<sp/>m-&gt;start_node);</highlight></codeline>
<codeline lineno="9769"><highlight class="normal"><sp/><sp/><sp/>previous<sp/>=<sp/>stb__eps_closure(m,previous);</highlight></codeline>
<codeline lineno="9770"><highlight class="normal"><sp/><sp/><sp/>stb__clear(m,<sp/>previous);</highlight></codeline>
<codeline lineno="9771"><highlight class="normal"></highlight></codeline>
<codeline lineno="9772"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*str<sp/>&amp;&amp;<sp/>stb_arr_len(previous))<sp/>{</highlight></codeline>
<codeline lineno="9773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>stb_arr_len(previous);</highlight></codeline>
<codeline lineno="9774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>y;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="9775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_nfa_node<sp/>*n<sp/>=<sp/>&amp;m-&gt;nodes[(int)<sp/>previous[i]];</highlight></codeline>
<codeline lineno="9776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>stb_arr_len(n-&gt;out);</highlight></codeline>
<codeline lineno="9777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>z;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="9778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n-&gt;out[j].match<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="9779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n-&gt;out[j].match<sp/>==<sp/>*str)</highlight></codeline>
<codeline lineno="9780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>stb__add_if_inactive(m,<sp/>current,<sp/>n-&gt;out[j].node);</highlight></codeline>
<codeline lineno="9781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n-&gt;out[j].match<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="9782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*str<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="9783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>stb__add_if_inactive(m,<sp/>current,<sp/>n-&gt;out[j].node);</highlight></codeline>
<codeline lineno="9784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n-&gt;out[j].match<sp/>&lt;<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="9785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>-n-&gt;out[j].match<sp/>-<sp/>2;</highlight></codeline>
<codeline lineno="9786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;charset[(stb_uint8)<sp/>*str]<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>z))</highlight></codeline>
<codeline lineno="9787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>stb__add_if_inactive(m,<sp/>current,<sp/>n-&gt;out[j].node);</highlight></codeline>
<codeline lineno="9788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_setlen(previous,<sp/>0);</highlight></codeline>
<codeline lineno="9792"><highlight class="normal"></highlight></codeline>
<codeline lineno="9793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>previous;</highlight></codeline>
<codeline lineno="9794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>previous<sp/>=<sp/>current;</highlight></codeline>
<codeline lineno="9795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="9796"><highlight class="normal"></highlight></codeline>
<codeline lineno="9797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>previous<sp/>=<sp/>stb__eps_closure(m,previous);</highlight></codeline>
<codeline lineno="9798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__clear(m,<sp/>previous);</highlight></codeline>
<codeline lineno="9799"><highlight class="normal"></highlight></codeline>
<codeline lineno="9800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++str;</highlight></codeline>
<codeline lineno="9801"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9802"><highlight class="normal"></highlight></codeline>
<codeline lineno="9803"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transition<sp/>to<sp/>pick<sp/>up<sp/>a<sp/>&apos;$&apos;<sp/>at<sp/>the<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9804"><highlight class="normal"><sp/><sp/><sp/>y<sp/>=<sp/>stb_arr_len(previous);</highlight></codeline>
<codeline lineno="9805"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>y;<sp/>++i)</highlight></codeline>
<codeline lineno="9806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;nodes[(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>previous[i]].active<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="9807"><highlight class="normal"></highlight></codeline>
<codeline lineno="9808"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>y;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="9809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_nfa_node<sp/>*n<sp/>=<sp/>&amp;m-&gt;nodes[(int)<sp/>previous[i]];</highlight></codeline>
<codeline lineno="9810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>stb_arr_len(n-&gt;out);</highlight></codeline>
<codeline lineno="9811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>z;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="9812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n-&gt;out[j].match<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="9813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>stb__add_if_inactive(m,<sp/>current,<sp/>n-&gt;out[j].node);</highlight></codeline>
<codeline lineno="9814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9815"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9816"><highlight class="normal"></highlight></codeline>
<codeline lineno="9817"><highlight class="normal"><sp/><sp/><sp/>previous<sp/>=<sp/>stb__eps_closure(m,previous);</highlight></codeline>
<codeline lineno="9818"><highlight class="normal"><sp/><sp/><sp/>stb__clear(m,<sp/>previous);</highlight></codeline>
<codeline lineno="9819"><highlight class="normal"></highlight></codeline>
<codeline lineno="9820"><highlight class="normal"><sp/><sp/><sp/>y<sp/>=<sp/>stb_arr_len(previous);</highlight></codeline>
<codeline lineno="9821"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>y;<sp/>++i)</highlight></codeline>
<codeline lineno="9822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;nodes[(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>previous[i]].goal)</highlight></codeline>
<codeline lineno="9823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="9824"><highlight class="normal"></highlight></codeline>
<codeline lineno="9825"><highlight class="normal"><sp/><sp/><sp/>stb_arr_free(previous);</highlight></codeline>
<codeline lineno="9826"><highlight class="normal"><sp/><sp/><sp/>stb_arr_free(current);</highlight></codeline>
<codeline lineno="9827"><highlight class="normal"></highlight></codeline>
<codeline lineno="9828"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>&amp;&amp;<sp/>*str<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="9829"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9830"><highlight class="normal"></highlight></codeline>
<codeline lineno="9831"><highlight class="normal">stb_int16<sp/>stb__get_dfa_node(stb_matcher<sp/>*m,<sp/>stb_uint16<sp/>*list)</highlight></codeline>
<codeline lineno="9832"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9833"><highlight class="normal"><sp/><sp/><sp/>stb_uint16<sp/>node;</highlight></codeline>
<codeline lineno="9834"><highlight class="normal"><sp/><sp/><sp/>stb_uint32<sp/>data[8],<sp/>*state,<sp/>*newstate;</highlight></codeline>
<codeline lineno="9835"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,n;</highlight></codeline>
<codeline lineno="9836"><highlight class="normal"></highlight></codeline>
<codeline lineno="9837"><highlight class="normal"><sp/><sp/><sp/>state<sp/>=<sp/>(stb_uint32<sp/>*)<sp/>stb_temp(data,<sp/>m-&gt;num_words_per_dfa<sp/>*<sp/>4);</highlight></codeline>
<codeline lineno="9838"><highlight class="normal"><sp/><sp/><sp/>memset(state,<sp/>0,<sp/>m-&gt;num_words_per_dfa*4);</highlight></codeline>
<codeline lineno="9839"><highlight class="normal"></highlight></codeline>
<codeline lineno="9840"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>stb_arr_len(list);</highlight></codeline>
<codeline lineno="9841"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="9842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>list[i];</highlight></codeline>
<codeline lineno="9843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state[x<sp/>&gt;&gt;<sp/>5]<sp/>|=<sp/>1<sp/>&lt;&lt;<sp/>(x<sp/>&amp;<sp/>31);</highlight></codeline>
<codeline lineno="9844"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9845"><highlight class="normal"></highlight></codeline>
<codeline lineno="9846"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO<sp/>use<sp/>a<sp/>hash<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9847"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>stb_arr_len(m-&gt;dfa_mapping);</highlight></codeline>
<codeline lineno="9848"><highlight class="normal"><sp/><sp/><sp/>i=j=0;</highlight></codeline>
<codeline lineno="9849"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;<sp/>j<sp/>&lt;<sp/>n;<sp/>++i,<sp/>j<sp/>+=<sp/>m-&gt;num_words_per_dfa)<sp/>{</highlight></codeline>
<codeline lineno="9850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO<sp/>special<sp/>case<sp/>for<sp/>&lt;=<sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!memcmp(state,<sp/>m-&gt;dfa_mapping<sp/>+<sp/>j,<sp/>m-&gt;num_words_per_dfa*4))<sp/>{</highlight></codeline>
<codeline lineno="9852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="9853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="9854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9855"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9856"><highlight class="normal"></highlight></codeline>
<codeline lineno="9857"><highlight class="normal"><sp/><sp/><sp/>assert(stb_arr_len(m-&gt;dfa)<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="9858"><highlight class="normal"><sp/><sp/><sp/>node<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="9859"><highlight class="normal"></highlight></codeline>
<codeline lineno="9860"><highlight class="normal"><sp/><sp/><sp/>newstate<sp/>=<sp/>stb_arr_addn(m-&gt;dfa_mapping,<sp/>m-&gt;num_words_per_dfa);</highlight></codeline>
<codeline lineno="9861"><highlight class="normal"><sp/><sp/><sp/>memcpy(newstate,<sp/>state,<sp/>m-&gt;num_words_per_dfa*4);</highlight></codeline>
<codeline lineno="9862"><highlight class="normal"></highlight></codeline>
<codeline lineno="9863"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>all<sp/>transitions<sp/>to<sp/>&apos;unknown&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9864"><highlight class="normal"><sp/><sp/><sp/>stb_arr_add(m-&gt;dfa);</highlight></codeline>
<codeline lineno="9865"><highlight class="normal"><sp/><sp/><sp/>memset(m-&gt;dfa[i].transition,<sp/>-1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(m-&gt;dfa[i].transition));</highlight></codeline>
<codeline lineno="9866"><highlight class="normal"></highlight></codeline>
<codeline lineno="9867"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;does_lex)<sp/>{</highlight></codeline>
<codeline lineno="9868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="9869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>stb_arr_len(list);</highlight></codeline>
<codeline lineno="9870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="9871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;nodes[(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>list[i]].goal<sp/>&gt;<sp/><ref refid="structresult" kindref="compound">result</ref>)</highlight></codeline>
<codeline lineno="9872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>m-&gt;nodes[(int)<sp/>list[i]].goal;</highlight></codeline>
<codeline lineno="9873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9874"><highlight class="normal"></highlight></codeline>
<codeline lineno="9875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_push(m-&gt;dfa_result,<sp/><ref refid="structresult" kindref="compound">result</ref>);</highlight></codeline>
<codeline lineno="9876"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9877"><highlight class="normal"></highlight></codeline>
<codeline lineno="9878"><highlight class="normal">done:</highlight></codeline>
<codeline lineno="9879"><highlight class="normal"><sp/><sp/><sp/>stb_tempfree(data,<sp/>state);</highlight></codeline>
<codeline lineno="9880"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="9881"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9882"><highlight class="normal"></highlight></codeline>
<codeline lineno="9883"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__matcher_dfa(stb_matcher<sp/>*m,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str_c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*len)</highlight></codeline>
<codeline lineno="9884"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9885"><highlight class="normal"><sp/><sp/><sp/>stb_uint8<sp/>*str<sp/>=<sp/>(stb_uint8<sp/>*)<sp/>str_c;</highlight></codeline>
<codeline lineno="9886"><highlight class="normal"><sp/><sp/><sp/>stb_int16<sp/>node,prevnode;</highlight></codeline>
<codeline lineno="9887"><highlight class="normal"><sp/><sp/><sp/>stb_dfa<sp/>*trans;</highlight></codeline>
<codeline lineno="9888"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>match_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9889"><highlight class="normal"><sp/><sp/><sp/>stb_int16<sp/>match_result=0;</highlight></codeline>
<codeline lineno="9890"><highlight class="normal"></highlight></codeline>
<codeline lineno="9891"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;dfa_start<sp/>==<sp/>STB__DFA_UNDEF)<sp/>{</highlight></codeline>
<codeline lineno="9892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_uint16<sp/>*list;</highlight></codeline>
<codeline lineno="9893"><highlight class="normal"></highlight></codeline>
<codeline lineno="9894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;num_words_per_dfa<sp/>=<sp/>(stb_arr_len(m-&gt;nodes)+31)<sp/>&gt;&gt;<sp/>5;</highlight></codeline>
<codeline lineno="9895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__optimize(m);</highlight></codeline>
<codeline lineno="9896"><highlight class="normal"></highlight></codeline>
<codeline lineno="9897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>list<sp/>=<sp/>stb__add_if_inactive(m,<sp/>NULL,<sp/>m-&gt;start_node);</highlight></codeline>
<codeline lineno="9898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>list<sp/>=<sp/>stb__eps_closure(m,list);</highlight></codeline>
<codeline lineno="9899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;does_lex)<sp/>{</highlight></codeline>
<codeline lineno="9900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;dfa_start<sp/>=<sp/>stb__get_dfa_node(m,list);</highlight></codeline>
<codeline lineno="9901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__clear(m,<sp/>list);</highlight></codeline>
<codeline lineno="9902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DON&apos;T<sp/>allow<sp/>start<sp/>state<sp/>to<sp/>be<sp/>a<sp/>goal<sp/>state!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>allows<sp/>people<sp/>to<sp/>specify<sp/>regexes<sp/>that<sp/>can<sp/>match<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>characters<sp/>without<sp/>them<sp/>actually<sp/>matching<sp/>(also<sp/>we<sp/>don&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>_before_<sp/>advancing<sp/>anyway</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;dfa_start<sp/>&lt;=<sp/>STB__DFA_MGOAL)</highlight></codeline>
<codeline lineno="9907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;dfa_start<sp/>=<sp/>-(m-&gt;dfa_start<sp/>-<sp/>STB__DFA_MGOAL);</highlight></codeline>
<codeline lineno="9908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__clear_goalcheck(m,<sp/>list))</highlight></codeline>
<codeline lineno="9910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;dfa_start<sp/>=<sp/>STB__DFA_GOAL;</highlight></codeline>
<codeline lineno="9911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;dfa_start<sp/>=<sp/>stb__get_dfa_node(m,list);</highlight></codeline>
<codeline lineno="9913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_free(list);</highlight></codeline>
<codeline lineno="9915"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9916"><highlight class="normal"></highlight></codeline>
<codeline lineno="9917"><highlight class="normal"><sp/><sp/><sp/>prevnode<sp/>=<sp/>STB__DFA_UNDEF;</highlight></codeline>
<codeline lineno="9918"><highlight class="normal"><sp/><sp/><sp/>node<sp/>=<sp/>m-&gt;dfa_start;</highlight></codeline>
<codeline lineno="9919"><highlight class="normal"><sp/><sp/><sp/>trans<sp/>=<sp/>m-&gt;dfa;</highlight></codeline>
<codeline lineno="9920"><highlight class="normal"></highlight></codeline>
<codeline lineno="9921"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;dfa_start<sp/>==<sp/>STB__DFA_GOAL)</highlight></codeline>
<codeline lineno="9922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="9923"><highlight class="normal"></highlight></codeline>
<codeline lineno="9924"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)<sp/>{</highlight></codeline>
<codeline lineno="9925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(node<sp/>&gt;=<sp/>STB__DFA_VALID);</highlight></codeline>
<codeline lineno="9926"><highlight class="normal"></highlight></codeline>
<codeline lineno="9927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fast<sp/>inner<sp/>DFA<sp/>loop;<sp/>especially<sp/>if<sp/>STB__DFA_VALID<sp/>is<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9928"><highlight class="normal"></highlight></codeline>
<codeline lineno="9929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevnode<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="9931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>trans[node].transition[*str++];</highlight></codeline>
<codeline lineno="9932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node<sp/>&gt;=<sp/>STB__DFA_VALID);</highlight></codeline>
<codeline lineno="9933"><highlight class="normal"></highlight></codeline>
<codeline lineno="9934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(node<sp/>&gt;=<sp/>STB__DFA_MGOAL<sp/>-<sp/>stb_arr_len(m-&gt;dfa));</highlight></codeline>
<codeline lineno="9935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(node<sp/>&lt;<sp/>stb_arr_len(m-&gt;dfa));</highlight></codeline>
<codeline lineno="9936"><highlight class="normal"></highlight></codeline>
<codeline lineno="9937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>special<sp/>case<sp/>for<sp/>lex:<sp/>need<sp/>_longest_<sp/>match,<sp/>so<sp/>notice<sp/>goal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>state<sp/>without<sp/>stopping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>&lt;=<sp/>STB__DFA_MGOAL)<sp/>{</highlight></codeline>
<codeline lineno="9940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match_length<sp/>=<sp/>(int)<sp/>(str<sp/>-<sp/>(stb_uint8<sp/>*)<sp/>str_c);</highlight></codeline>
<codeline lineno="9941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>-(node<sp/>-<sp/>STB__DFA_MGOAL);</highlight></codeline>
<codeline lineno="9942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match_result<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="9943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9945"><highlight class="normal"></highlight></codeline>
<codeline lineno="9946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>slow<sp/>NFA-&gt;DFA<sp/>conversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9947"><highlight class="normal"></highlight></codeline>
<codeline lineno="9948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>we<sp/>hit<sp/>the<sp/>goal<sp/>or<sp/>the<sp/>end<sp/>of<sp/>the<sp/>string,<sp/>but<sp/>those</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>only<sp/>happen<sp/>once<sp/>per<sp/>search...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9950"><highlight class="normal"></highlight></codeline>
<codeline lineno="9951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/>STB__DFA_UNDEF)<sp/>{</highlight></codeline>
<codeline lineno="9952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>a<sp/>list<sp/><sp/>--<sp/>@TODO<sp/>special<sp/>case<sp/>&lt;=<sp/>32<sp/>states</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>heck,<sp/>use<sp/>a<sp/>more<sp/>compact<sp/>data<sp/>structure<sp/>for<sp/>&lt;=<sp/>16<sp/>and<sp/>&lt;=<sp/>8<sp/>?!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9954"><highlight class="normal"></highlight></codeline>
<codeline lineno="9955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO<sp/>keep<sp/>states/newstates<sp/>around<sp/>instead<sp/>of<sp/>reallocating<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_uint16<sp/>*states<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="9957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_uint16<sp/>*newstates<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="9958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,y,z;</highlight></codeline>
<codeline lineno="9959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_uint32<sp/>*flags<sp/>=<sp/>&amp;m-&gt;dfa_mapping[prevnode<sp/>*<sp/>m-&gt;num_words_per_dfa];</highlight></codeline>
<codeline lineno="9960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(prevnode<sp/>!=<sp/>STB__DFA_UNDEF);</highlight></codeline>
<codeline lineno="9961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_setsize(states,<sp/>4);</highlight></codeline>
<codeline lineno="9962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_setsize(newstates,4);</highlight></codeline>
<codeline lineno="9963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>m-&gt;num_words_per_dfa;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="9964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>32;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="9965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*flags<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>i))</highlight></codeline>
<codeline lineno="9966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_push(states,<sp/>j*32+i);</highlight></codeline>
<codeline lineno="9967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++flags;</highlight></codeline>
<codeline lineno="9969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>states<sp/>is<sp/>now<sp/>the<sp/>states<sp/>we<sp/>were<sp/>in<sp/>in<sp/>the<sp/>previous<sp/>node;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>now<sp/>we<sp/>can<sp/>compute<sp/>what<sp/>node<sp/>it<sp/>transitions<sp/>to<sp/>on<sp/>str[-1]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9972"><highlight class="normal"></highlight></codeline>
<codeline lineno="9973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>stb_arr_len(states);</highlight></codeline>
<codeline lineno="9974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>y;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="9975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_nfa_node<sp/>*n<sp/>=<sp/>&amp;m-&gt;nodes[(int)<sp/>states[i]];</highlight></codeline>
<codeline lineno="9976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>stb_arr_len(n-&gt;out);</highlight></codeline>
<codeline lineno="9977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>z;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="9978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n-&gt;out[j].match<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="9979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n-&gt;out[j].match<sp/>==<sp/>str[-1]<sp/>||<sp/>(str[-1]<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>n-&gt;out[j].match<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="9980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newstates<sp/>=<sp/>stb__add_if_inactive(m,<sp/>newstates,<sp/>n-&gt;out[j].node);</highlight></codeline>
<codeline lineno="9981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n-&gt;out[j].match<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="9982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str[-1]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>str[-1])</highlight></codeline>
<codeline lineno="9983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newstates<sp/>=<sp/>stb__add_if_inactive(m,<sp/>newstates,<sp/>n-&gt;out[j].node);</highlight></codeline>
<codeline lineno="9984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n-&gt;out[j].match<sp/>&lt;<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="9985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>-n-&gt;out[j].match<sp/>-<sp/>2;</highlight></codeline>
<codeline lineno="9986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;charset[str[-1]]<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>z))</highlight></codeline>
<codeline lineno="9987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newstates<sp/>=<sp/>stb__add_if_inactive(m,<sp/>newstates,<sp/>n-&gt;out[j].node);</highlight></codeline>
<codeline lineno="9988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AND<sp/>add<sp/>in<sp/>the<sp/>start<sp/>state!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m-&gt;match_start<sp/>||<sp/>(str[-1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>!m-&gt;does_lex))</highlight></codeline>
<codeline lineno="9993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newstates<sp/>=<sp/>stb__add_if_inactive(m,<sp/>newstates,<sp/>m-&gt;start_node);</highlight></codeline>
<codeline lineno="9994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AND<sp/>epsilon<sp/>close<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newstates<sp/>=<sp/>stb__eps_closure(m,<sp/>newstates);</highlight></codeline>
<codeline lineno="9996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>it&apos;s<sp/>a<sp/>goal<sp/>state,<sp/>then<sp/>that&apos;s<sp/>all<sp/>there<sp/>is<sp/>to<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__clear_goalcheck(m,<sp/>newstates))<sp/>{</highlight></codeline>
<codeline lineno="9998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;does_lex)<sp/>{</highlight></codeline>
<codeline lineno="9999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match_length<sp/>=<sp/>(int)<sp/>(str<sp/>-<sp/>(stb_uint8<sp/>*)<sp/>str_c);</highlight></codeline>
<codeline lineno="10000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>stb__get_dfa_node(m,newstates);</highlight></codeline>
<codeline lineno="10001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match_result<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="10002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>-node<sp/>+<sp/>STB__DFA_MGOAL;</highlight></codeline>
<codeline lineno="10003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trans<sp/>=<sp/>m-&gt;dfa;<sp/></highlight><highlight class="comment">//<sp/>could<sp/>have<sp/>gotten<sp/>realloc()ed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>STB__DFA_GOAL;</highlight></codeline>
<codeline lineno="10006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str[-1]<sp/>==<sp/>0<sp/>||<sp/>stb_arr_len(newstates)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="10007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>STB__DFA_END;</highlight></codeline>
<codeline lineno="10008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="10009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>stb__get_dfa_node(m,newstates);</highlight></codeline>
<codeline lineno="10010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trans<sp/>=<sp/>m-&gt;dfa;<sp/></highlight><highlight class="comment">//<sp/>could<sp/>have<sp/>gotten<sp/>realloc()ed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trans[prevnode].transition[str[-1]]<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="10013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>&lt;=<sp/>STB__DFA_MGOAL)</highlight></codeline>
<codeline lineno="10014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>-(node<sp/>-<sp/>STB__DFA_MGOAL);</highlight></codeline>
<codeline lineno="10015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_free(newstates);</highlight></codeline>
<codeline lineno="10016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_free(states);</highlight></codeline>
<codeline lineno="10017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10018"><highlight class="normal"></highlight></codeline>
<codeline lineno="10019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/>STB__DFA_GOAL)<sp/>{</highlight></codeline>
<codeline lineno="10020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="10021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/>STB__DFA_END)<sp/>{</highlight></codeline>
<codeline lineno="10023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;does_lex)<sp/>{</highlight></codeline>
<codeline lineno="10024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(match_result)<sp/>{</highlight></codeline>
<codeline lineno="10025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len)<sp/>*len<sp/>=<sp/>match_length;</highlight></codeline>
<codeline lineno="10026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m-&gt;dfa_result[(int)<sp/>match_result];</highlight></codeline>
<codeline lineno="10027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="10030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10031"><highlight class="normal"></highlight></codeline>
<codeline lineno="10032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(node<sp/>!=<sp/>STB__DFA_UNDEF);</highlight></codeline>
<codeline lineno="10033"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10034"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10035"><highlight class="normal"></highlight></codeline>
<codeline lineno="10036"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_matcher_find(stb_matcher<sp/>*m,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)</highlight></codeline>
<codeline lineno="10037"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10038"><highlight class="normal"><sp/><sp/><sp/>assert(m-&gt;does_lex<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="10039"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb__matcher_dfa(m,<sp/>str,<sp/>NULL);</highlight></codeline>
<codeline lineno="10040"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10041"><highlight class="normal"></highlight></codeline>
<codeline lineno="10042"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_lex(stb_matcher<sp/>*m,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*len)</highlight></codeline>
<codeline lineno="10043"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10044"><highlight class="normal"><sp/><sp/><sp/>assert(m-&gt;does_lex);</highlight></codeline>
<codeline lineno="10045"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb__matcher_dfa(m,<sp/>str,<sp/>len);</highlight></codeline>
<codeline lineno="10046"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10047"><highlight class="normal"></highlight></codeline>
<codeline lineno="10048"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_PERFECT_HASH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10049"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_regex(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*regex,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)</highlight></codeline>
<codeline lineno="10050"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10051"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb_perfect<sp/>p;</highlight></codeline>
<codeline lineno="10052"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb_matcher<sp/>**<sp/>matchers;</highlight></codeline>
<codeline lineno="10053"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**<sp/>regexps;</highlight></codeline>
<codeline lineno="10054"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**<sp/>regexp_cache;</highlight></codeline>
<codeline lineno="10055"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*mapping;</highlight></codeline>
<codeline lineno="10056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>stb_perfect_hash(&amp;p,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>regex);</highlight></codeline>
<codeline lineno="10057"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="10058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(regex,<sp/>regexp_cache[(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>mapping[z]]))<sp/>{</highlight></codeline>
<codeline lineno="10059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>mapping[z];</highlight></codeline>
<codeline lineno="10060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_matcher_free(matchers[i]);</highlight></codeline>
<codeline lineno="10061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(regexp_cache[i]);</highlight></codeline>
<codeline lineno="10062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regexps[i]<sp/>=<sp/>regex;</highlight></codeline>
<codeline lineno="10063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regexp_cache[i]<sp/>=<sp/>stb_p_strdup(regex);</highlight></codeline>
<codeline lineno="10064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matchers[i]<sp/>=<sp/>stb_regex_matcher(regex);</highlight></codeline>
<codeline lineno="10065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10066"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="10067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,n;</highlight></codeline>
<codeline lineno="10068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(regex<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="10069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stb_arr_len(matchers);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="10070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_matcher_free(matchers[i]);</highlight></codeline>
<codeline lineno="10071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(regexp_cache[i]);</highlight></codeline>
<codeline lineno="10072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_free(matchers);</highlight></codeline>
<codeline lineno="10074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_free(regexps);</highlight></codeline>
<codeline lineno="10075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_free(regexp_cache);</highlight></codeline>
<codeline lineno="10076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_perfect_destroy(&amp;p);</highlight></codeline>
<codeline lineno="10077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(mapping);<sp/>mapping<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="10078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="10079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_push(regexps,<sp/>regex);</highlight></codeline>
<codeline lineno="10081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_push(regexp_cache,<sp/>stb_p_strdup(regex));</highlight></codeline>
<codeline lineno="10082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_push(matchers,<sp/>stb_regex_matcher(regex));</highlight></codeline>
<codeline lineno="10083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_perfect_destroy(&amp;p);</highlight></codeline>
<codeline lineno="10084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>stb_perfect_create(&amp;p,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)<sp/>regexps,<sp/>stb_arr_len(regexps));</highlight></codeline>
<codeline lineno="10085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mapping<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*)<sp/>realloc(mapping,<sp/>n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*mapping));</highlight></codeline>
<codeline lineno="10086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stb_arr_len(regexps);<sp/>++i)</highlight></codeline>
<codeline lineno="10087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapping[stb_perfect_hash(&amp;p,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(size_t)<sp/>regexps[i])]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="10088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>stb_perfect_hash(&amp;p,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>regex);</highlight></codeline>
<codeline lineno="10089"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10090"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_matcher_find(matchers[(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>mapping[z]],<sp/>str);</highlight></codeline>
<codeline lineno="10091"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10092"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10093"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10094"><highlight class="normal"></highlight></codeline>
<codeline lineno="10095"><highlight class="normal"></highlight></codeline>
<codeline lineno="10096"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="10098"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10099"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C<sp/>source-code<sp/>introspection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10100"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10101"><highlight class="normal"></highlight></codeline>
<codeline lineno="10102"><highlight class="normal"></highlight><highlight class="comment">//<sp/>runtime<sp/>structure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10103"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10105"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name;</highlight></codeline>
<codeline lineno="10106"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>base<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10107"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*comment;<sp/><sp/></highlight><highlight class="comment">//<sp/>content<sp/>of<sp/>comment<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10108"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>size;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>size<sp/>of<sp/>base<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10109"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>offset;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>field<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10110"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>arrcount[8];<sp/></highlight><highlight class="comment">//<sp/>array<sp/>sizes;<sp/>-1<sp/>=<sp/>pointer<sp/>indirection;<sp/>0<sp/>=<sp/>end<sp/>of<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10111"><highlight class="normal">}<sp/>stb_info_field;</highlight></codeline>
<codeline lineno="10112"><highlight class="normal"></highlight></codeline>
<codeline lineno="10113"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10114"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10115"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*structname;</highlight></codeline>
<codeline lineno="10116"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="10117"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_fields;</highlight></codeline>
<codeline lineno="10118"><highlight class="normal"><sp/><sp/><sp/>stb_info_field<sp/>*fields;</highlight></codeline>
<codeline lineno="10119"><highlight class="normal">}<sp/>stb_info_struct;</highlight></codeline>
<codeline lineno="10120"><highlight class="normal"></highlight></codeline>
<codeline lineno="10121"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>stb_info_struct<sp/>stb_introspect_output[];</highlight></codeline>
<codeline lineno="10122"><highlight class="normal"></highlight></codeline>
<codeline lineno="10123"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10124"><highlight class="normal"></highlight></codeline>
<codeline lineno="10125"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_introspect_precompiled(stb_info_struct<sp/>*compiled);</highlight></codeline>
<codeline lineno="10126"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__introspect(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file);</highlight></codeline>
<codeline lineno="10127"><highlight class="normal"></highlight></codeline>
<codeline lineno="10128"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_introspect_ship()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__introspect(NULL,<sp/>NULL,<sp/>stb__introspect_output)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10129"><highlight class="normal"></highlight></codeline>
<codeline lineno="10130"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_SHIP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10131"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_introspect()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_introspect_ship()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10132"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_introspect_path(p)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_introspect_ship()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10133"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10134"><highlight class="normal"></highlight><highlight class="comment">//<sp/>bootstrapping:<sp/>define<sp/>stb_introspect()<sp/>(or<sp/>&apos;path&apos;)<sp/>the<sp/>first<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10135"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_introspect()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__introspect(NULL,<sp/>__FILE__,<sp/>NULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10136"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_introspect_auto()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__introspect(NULL,<sp/>__FILE__,<sp/>stb__introspect_output)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10137"><highlight class="normal"></highlight></codeline>
<codeline lineno="10138"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_introspect_path(p)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__introspect(p,<sp/>__FILE__,<sp/>NULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10139"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_introspect_path(p)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__introspect(p,<sp/>__FILE__,<sp/>NULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10140"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10141"><highlight class="normal"></highlight></codeline>
<codeline lineno="10142"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10143"><highlight class="normal"></highlight></codeline>
<codeline lineno="10144"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_INTROSPECT_CPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10145"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10146"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>STB_INTROSPECT_CPP<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10147"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10148"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>STB_INTROSPECT_CPP<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10149"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10150"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10151"><highlight class="normal"></highlight></codeline>
<codeline lineno="10152"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_introspect_precompiled(stb_info_struct<sp/>*compiled)</highlight></codeline>
<codeline lineno="10153"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10154"><highlight class="normal"></highlight></codeline>
<codeline lineno="10155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10156"><highlight class="normal"></highlight></codeline>
<codeline lineno="10157"><highlight class="normal"></highlight></codeline>
<codeline lineno="10158"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__introspect_filename(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path)</highlight></codeline>
<codeline lineno="10159"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10160"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#if<sp/>STB_INTROSPECT_CPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10161"><highlight class="normal"><sp/><sp/><sp/>stb_p_sprintf(<ref refid="classbuffer" kindref="compound">buffer</ref><sp/>stb_p_size(9999),<sp/></highlight><highlight class="stringliteral">&quot;%s/stb_introspect.cpp&quot;</highlight><highlight class="normal">,<sp/>path);</highlight></codeline>
<codeline lineno="10162"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10163"><highlight class="normal"><sp/><sp/><sp/>stb_p_sprintf(<ref refid="classbuffer" kindref="compound">buffer</ref><sp/>stb_p_size(9999),<sp/></highlight><highlight class="stringliteral">&quot;%s/stb_introspect.c&quot;</highlight><highlight class="normal">,<sp/>path);</highlight></codeline>
<codeline lineno="10164"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10166"><highlight class="normal"></highlight></codeline>
<codeline lineno="10167"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__introspect_compute(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file)</highlight></codeline>
<codeline lineno="10168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10169"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="10170"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<sp/>include_list<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="10171"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<sp/>introspect_list<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="10172"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*f;</highlight></codeline>
<codeline lineno="10173"><highlight class="normal"><sp/><sp/><sp/>f<sp/>=<sp/>stb_p_fopen(file,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10174"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10175"><highlight class="normal"></highlight></codeline>
<codeline lineno="10176"><highlight class="normal"><sp/><sp/><sp/>fputs(</highlight><highlight class="stringliteral">&quot;//<sp/>if<sp/>you<sp/>get<sp/>compiler<sp/>errors,<sp/>change<sp/>the<sp/>following<sp/>0<sp/>to<sp/>a<sp/>1:\n&quot;</highlight><highlight class="normal">,<sp/>f);</highlight></codeline>
<codeline lineno="10177"><highlight class="normal"><sp/><sp/><sp/>fputs(</highlight><highlight class="stringliteral">&quot;#define<sp/>STB_INTROSPECT_INVALID<sp/>0\n\n&quot;</highlight><highlight class="normal">,<sp/>f);</highlight></codeline>
<codeline lineno="10178"><highlight class="normal"><sp/><sp/><sp/>fputs(</highlight><highlight class="stringliteral">&quot;//<sp/>this<sp/>will<sp/>force<sp/>the<sp/>code<sp/>to<sp/>compile,<sp/>and<sp/>force<sp/>the<sp/>introspector\n&quot;</highlight><highlight class="normal">,<sp/>f);</highlight></codeline>
<codeline lineno="10179"><highlight class="normal"><sp/><sp/><sp/>fputs(</highlight><highlight class="stringliteral">&quot;//<sp/>to<sp/>run<sp/>and<sp/>then<sp/>exit,<sp/>allowing<sp/>you<sp/>to<sp/>recompile\n\n\n&quot;</highlight><highlight class="normal">,<sp/>f);</highlight></codeline>
<codeline lineno="10180"><highlight class="normal"><sp/><sp/><sp/>fputs(</highlight><highlight class="stringliteral">&quot;#include<sp/>\&quot;stb.h\&quot;\n\n&quot;</highlight><highlight class="normal">,f<sp/>);</highlight></codeline>
<codeline lineno="10181"><highlight class="normal"><sp/><sp/><sp/>fputs(</highlight><highlight class="stringliteral">&quot;#if<sp/>STB_INTROSPECT_INVALID\n&quot;</highlight><highlight class="normal">,<sp/>f);</highlight></codeline>
<codeline lineno="10182"><highlight class="normal"><sp/><sp/><sp/>fputs(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>stb_info_struct<sp/>stb__introspect_output[]<sp/>=<sp/>{<sp/>(void<sp/>*)<sp/>1<sp/>}\n&quot;</highlight><highlight class="normal">,<sp/>f);</highlight></codeline>
<codeline lineno="10183"><highlight class="normal"><sp/><sp/><sp/>fputs(</highlight><highlight class="stringliteral">&quot;#else\n\n&quot;</highlight><highlight class="normal">,<sp/>f);</highlight></codeline>
<codeline lineno="10184"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stb_arr_len(include_list);<sp/>++i)</highlight></codeline>
<codeline lineno="10185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>#include<sp/>\&quot;%s\&quot;\n&quot;</highlight><highlight class="normal">,<sp/>include_list[i]);</highlight></codeline>
<codeline lineno="10186"><highlight class="normal"></highlight></codeline>
<codeline lineno="10187"><highlight class="normal"><sp/><sp/><sp/>fputs(</highlight><highlight class="stringliteral">&quot;<sp/>stb_info_struct<sp/>stb__introspect_output[]<sp/>=\n{\n&quot;</highlight><highlight class="normal">,<sp/>f);</highlight></codeline>
<codeline lineno="10188"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stb_arr_len(introspect_list);<sp/>++i)</highlight></codeline>
<codeline lineno="10189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>stb_introspect_%s,\n&quot;</highlight><highlight class="normal">,<sp/>introspect_list[i]);</highlight></codeline>
<codeline lineno="10190"><highlight class="normal"><sp/><sp/><sp/>fputs(</highlight><highlight class="stringliteral">&quot;<sp/>};\n&quot;</highlight><highlight class="normal">,<sp/>f);</highlight></codeline>
<codeline lineno="10191"><highlight class="normal"><sp/><sp/><sp/>fputs(</highlight><highlight class="stringliteral">&quot;#endif\n&quot;</highlight><highlight class="normal">,<sp/>f);</highlight></codeline>
<codeline lineno="10192"><highlight class="normal"><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="10193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10194"><highlight class="normal"></highlight></codeline>
<codeline lineno="10195"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb_info_struct<sp/>*stb__introspect_info;</highlight></codeline>
<codeline lineno="10196"><highlight class="normal"></highlight></codeline>
<codeline lineno="10197"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_SHIP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10198"><highlight class="normal"></highlight></codeline>
<codeline lineno="10199"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10200"><highlight class="normal"></highlight></codeline>
<codeline lineno="10201"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__introspect(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/>stb_info_struct<sp/>*compiled)</highlight></codeline>
<codeline lineno="10202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10203"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>first=1;</highlight></codeline>
<codeline lineno="10204"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!first)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10205"><highlight class="normal"><sp/><sp/><sp/>first=0;</highlight></codeline>
<codeline lineno="10206"><highlight class="normal"></highlight></codeline>
<codeline lineno="10207"><highlight class="normal"><sp/><sp/><sp/>stb__introspect_info<sp/>=<sp/>compiled;</highlight></codeline>
<codeline lineno="10208"><highlight class="normal"></highlight></codeline>
<codeline lineno="10209"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>STB_SHIP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10210"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(path<sp/>||<sp/>file)<sp/>{</highlight></codeline>
<codeline lineno="10211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bail_flag<sp/>=<sp/>compiled<sp/>&amp;&amp;<sp/>compiled[0].structname<sp/>==<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>1;</highlight></codeline>
<codeline lineno="10212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>needs_building<sp/>=<sp/>bail_flag;</highlight></codeline>
<codeline lineno="10213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stb__stat<sp/>st;</highlight></codeline>
<codeline lineno="10214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[1024],<sp/>buffer2[1024];</highlight></codeline>
<codeline lineno="10215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!path)<sp/>{</highlight></codeline>
<codeline lineno="10216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_splitpath(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>file,<sp/>STB_PATH);</highlight></codeline>
<codeline lineno="10217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>;</highlight></codeline>
<codeline lineno="10218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bail<sp/>if<sp/>the<sp/>source<sp/>path<sp/>doesn&apos;t<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb_fexists(path))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10221"><highlight class="normal"></highlight></codeline>
<codeline lineno="10222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__introspect_filename(buffer2,<sp/>path);</highlight></codeline>
<codeline lineno="10223"><highlight class="normal"></highlight></codeline>
<codeline lineno="10224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>source/include<sp/>files<sp/>timestamps,<sp/>compare<sp/>to<sp/>output-file<sp/>timestamp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>mismatched,<sp/>regenerate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10226"><highlight class="normal"></highlight></codeline>
<codeline lineno="10227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__stat(buffer2,<sp/>&amp;st))</highlight></codeline>
<codeline lineno="10228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>needs_building<sp/>=<sp/>STB_TRUE;</highlight></codeline>
<codeline lineno="10229"><highlight class="normal"></highlight></codeline>
<codeline lineno="10230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>any<sp/>file<sp/>that<sp/>contains<sp/>an<sp/>introspection<sp/>command<sp/>and<sp/>is<sp/>newer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>needs_building<sp/>is<sp/>already<sp/>true,<sp/>we<sp/>don&apos;t<sp/>need<sp/>to<sp/>do<sp/>this<sp/>test,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>we<sp/>still<sp/>need<sp/>these<sp/>arrays,<sp/>so<sp/>go<sp/>ahead<sp/>and<sp/>get<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<ref refid="group__core__func__vector__relational_1gab5af106b2d5675d51af84815d937384d" kindref="member">all</ref>[3];</highlight></codeline>
<codeline lineno="10235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__core__func__vector__relational_1gab5af106b2d5675d51af84815d937384d" kindref="member">all</ref>[0]<sp/>=<sp/>stb_readdir_files_mask(path,<sp/></highlight><highlight class="stringliteral">&quot;*.h&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__core__func__vector__relational_1gab5af106b2d5675d51af84815d937384d" kindref="member">all</ref>[1]<sp/>=<sp/>stb_readdir_files_mask(path,<sp/></highlight><highlight class="stringliteral">&quot;*.c&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__core__func__vector__relational_1gab5af106b2d5675d51af84815d937384d" kindref="member">all</ref>[2]<sp/>=<sp/>stb_readdir_files_mask(path,<sp/></highlight><highlight class="stringliteral">&quot;*.cpp&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j;</highlight></codeline>
<codeline lineno="10239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needs_building)<sp/>{</highlight></codeline>
<codeline lineno="10240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>3;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="10241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stb_arr_len(<ref refid="group__core__func__vector__relational_1gab5af106b2d5675d51af84815d937384d" kindref="member">all</ref>[j]);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="10242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stb__stat<sp/>st2;</highlight></codeline>
<codeline lineno="10243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb__stat(<ref refid="group__core__func__vector__relational_1gab5af106b2d5675d51af84815d937384d" kindref="member">all</ref>[j][i],<sp/>&amp;st2))<sp/>{</highlight></codeline>
<codeline lineno="10244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(st.st_mtime<sp/>&lt;<sp/>st2.st_mtime)<sp/>{</highlight></codeline>
<codeline lineno="10245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*z<sp/>=<sp/>stb_filec(<ref refid="group__core__func__vector__relational_1gab5af106b2d5675d51af84815d937384d" kindref="member">all</ref>[j][i],<sp/>NULL);</highlight></codeline>
<codeline lineno="10246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>found=STB_FALSE;</highlight></codeline>
<codeline lineno="10247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(y)<sp/>{</highlight></codeline>
<codeline lineno="10248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>strstr(y,<sp/></highlight><highlight class="stringliteral">&quot;//si&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&amp;&amp;<sp/>isspace(y[4]))<sp/>{</highlight></codeline>
<codeline lineno="10250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/>STB_TRUE;</highlight></codeline>
<codeline lineno="10251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>needs_building<sp/>=<sp/>STB_TRUE;</highlight></codeline>
<codeline lineno="10255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="10256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>done:;</highlight></codeline>
<codeline lineno="10261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*z<sp/>=<sp/>stb_filec(<ref refid="group__core__func__vector__relational_1gab5af106b2d5675d51af84815d937384d" kindref="member">all</ref>[i],<sp/>NULL),<sp/>*y<sp/>=<sp/>z;</highlight></codeline>
<codeline lineno="10263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>found=STB_FALSE;</highlight></codeline>
<codeline lineno="10264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(y)<sp/>{</highlight></codeline>
<codeline lineno="10265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>strstr(y,<sp/></highlight><highlight class="stringliteral">&quot;//si&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&amp;&amp;<sp/>isspace(y[4]))<sp/>{</highlight></codeline>
<codeline lineno="10267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/>STB_TRUE;</highlight></codeline>
<codeline lineno="10268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found)</highlight></codeline>
<codeline lineno="10272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_push(introspect_h,<sp/>stb_p_strdup(<ref refid="group__core__func__vector__relational_1gab5af106b2d5675d51af84815d937384d" kindref="member">all</ref>[i]));</highlight></codeline>
<codeline lineno="10273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(z);</highlight></codeline>
<codeline lineno="10274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_readdir_free(<ref refid="group__core__func__vector__relational_1gab5af106b2d5675d51af84815d937384d" kindref="member">all</ref>);</highlight></codeline>
<codeline lineno="10277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!needs_building)<sp/>{</highlight></codeline>
<codeline lineno="10278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stb_arr_len(introspect_h);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="10279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stb__stat<sp/>st2;</highlight></codeline>
<codeline lineno="10280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb__stat(introspect_h[i],<sp/>&amp;st2))</highlight></codeline>
<codeline lineno="10281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(st.st_mtime<sp/>&lt;<sp/>st2.st_mtime)</highlight></codeline>
<codeline lineno="10282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>needs_building<sp/>=<sp/>STB_TRUE;</highlight></codeline>
<codeline lineno="10283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10285"><highlight class="normal"></highlight></codeline>
<codeline lineno="10286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(needs_building)<sp/>{</highlight></codeline>
<codeline lineno="10287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__introspect_compute(path,<sp/>buffer2);</highlight></codeline>
<codeline lineno="10288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10290"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10291"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10293"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10294"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10295"><highlight class="normal"></highlight></codeline>
<codeline lineno="10296"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_INTROSPECT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10297"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compile-time<sp/>code-generator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10298"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTROSPECT(x)<sp/><sp/><sp/>int<sp/>main(int<sp/>argc,<sp/>char<sp/>**argv)<sp/>{<sp/>stb__introspect(__FILE__);<sp/>return<sp/>0;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10299"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FILE(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10300"><highlight class="normal"></highlight></codeline>
<codeline lineno="10301"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__introspect(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename)</highlight></codeline>
<codeline lineno="10302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10303"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file<sp/>=<sp/>stb_file(filename,<sp/>NULL);</highlight></codeline>
<codeline lineno="10304"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s<sp/>=<sp/>file,<sp/>*t,<sp/>**p;</highlight></codeline>
<codeline lineno="10305"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;stb_introspect.c&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10306"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out_path;</highlight></codeline>
<codeline lineno="10307"><highlight class="normal"><sp/><sp/><sp/>STB_ARR(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>filelist<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="10308"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,n;</highlight></codeline>
<codeline lineno="10309"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!file)<sp/>stb_fatal(</highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>open<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>filename);</highlight></codeline>
<codeline lineno="10310"><highlight class="normal"></highlight></codeline>
<codeline lineno="10311"><highlight class="normal"><sp/><sp/><sp/>out_path<sp/>=<sp/>stb_splitpathdup(filename,<sp/>STB_PATH);</highlight></codeline>
<codeline lineno="10312"><highlight class="normal"></highlight></codeline>
<codeline lineno="10313"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>search<sp/>for<sp/>the<sp/>macros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10314"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*s)<sp/>{</highlight></codeline>
<codeline lineno="10315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[256];</highlight></codeline>
<codeline lineno="10316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*s<sp/>&amp;&amp;<sp/>!isupper(*s))<sp/>++s;</highlight></codeline>
<codeline lineno="10317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>stb_strtok_invert(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>s,<sp/></highlight><highlight class="stringliteral">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>stb_skipwhite(s);</highlight></codeline>
<codeline lineno="10319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s<sp/>==<sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="10320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++s;</highlight></codeline>
<codeline lineno="10321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>strchr(s,<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>NULL)<sp/>stb_fatal(</highlight><highlight class="stringliteral">&quot;Error<sp/>parsing<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>filename);</highlight></codeline>
<codeline lineno="10323"><highlight class="normal"></highlight></codeline>
<codeline lineno="10324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10325"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10327"><highlight class="normal"></highlight></codeline>
<codeline lineno="10328"><highlight class="normal"></highlight></codeline>
<codeline lineno="10329"><highlight class="normal"></highlight></codeline>
<codeline lineno="10330"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10331"><highlight class="normal"></highlight></codeline>
<codeline lineno="10332"><highlight class="normal"></highlight></codeline>
<codeline lineno="10334"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10335"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STB-C<sp/>sliding-window<sp/>dictionary<sp/>compression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10336"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10337"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>This<sp/>uses<sp/>a<sp/>DEFLATE-style<sp/>sliding<sp/>window,<sp/>but<sp/>no<sp/>bitwise<sp/>entropy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10338"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Everything<sp/>is<sp/>on<sp/>byte<sp/>boundaries,<sp/>so<sp/>you<sp/>could<sp/>then<sp/>apply<sp/>a<sp/>byte-wise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10339"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>entropy<sp/>code,<sp/>though<sp/>that&apos;s<sp/>nowhere<sp/>near<sp/>as<sp/>effective.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10340"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10341"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>An<sp/>STB-C<sp/>stream<sp/>begins<sp/>with<sp/>a<sp/>16-byte<sp/>header:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10342"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>4<sp/>bytes:<sp/>0x57<sp/>0xBC<sp/>0x00<sp/>0x00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10343"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>8<sp/>bytes:<sp/>big-endian<sp/>size<sp/>of<sp/>decompressed<sp/>data,<sp/>64-bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10344"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>4<sp/>bytes:<sp/>big-endian<sp/>size<sp/>of<sp/>window<sp/>(how<sp/>far<sp/>back<sp/>decompressor<sp/>may<sp/>need)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10345"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10346"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>The<sp/>following<sp/>symbols<sp/>appear<sp/>in<sp/>the<sp/>stream<sp/>(these<sp/>were<sp/>determined<sp/>ad<sp/>hoc,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10347"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>not<sp/>by<sp/>analysis):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10348"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10349"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>[dict]<sp/><sp/><sp/><sp/><sp/><sp/>00000100<sp/>yyyyyyyy<sp/>yyyyyyyy<sp/>yyyyyyyy<sp/>xxxxxxxx<sp/>xxxxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10350"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>[END]<sp/><sp/><sp/><sp/><sp/><sp/><sp/>00000101<sp/>11111010<sp/>cccccccc<sp/>cccccccc<sp/>cccccccc<sp/>cccccccc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10351"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>[dict]<sp/><sp/><sp/><sp/><sp/><sp/>00000110<sp/>yyyyyyyy<sp/>yyyyyyyy<sp/>yyyyyyyy<sp/>xxxxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10352"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>[literals]<sp/><sp/>00000111<sp/>zzzzzzzz<sp/>zzzzzzzz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10353"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>[literals]<sp/><sp/>00001zzz<sp/>zzzzzzzz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10354"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>[dict]<sp/><sp/><sp/><sp/><sp/><sp/>00010yyy<sp/>yyyyyyyy<sp/>yyyyyyyy<sp/>xxxxxxxx<sp/>xxxxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10355"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>[dict]<sp/><sp/><sp/><sp/><sp/><sp/>00011yyy<sp/>yyyyyyyy<sp/>yyyyyyyy<sp/>xxxxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10356"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>[literals]<sp/><sp/>001zzzzz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10357"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>[dict]<sp/><sp/><sp/><sp/><sp/><sp/>01yyyyyy<sp/>yyyyyyyy<sp/>xxxxxxxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10358"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>[dict]<sp/><sp/><sp/><sp/><sp/><sp/>1xxxxxxx<sp/>yyyyyyyy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10359"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10360"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>xxxxxxxx:<sp/>match<sp/>length<sp/>-<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10361"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>yyyyyyyy:<sp/>backwards<sp/>distance<sp/>-<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10362"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>zzzzzzzz:<sp/>num<sp/>literals<sp/>-<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10363"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>cccccccc:<sp/>adler32<sp/>checksum<sp/>of<sp/>decompressed<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10364"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>(all<sp/>big-endian)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10365"><highlight class="normal"></highlight></codeline>
<codeline lineno="10366"><highlight class="normal"></highlight></codeline>
<codeline lineno="10367"><highlight class="normal">STB_EXTERN<sp/>stb_uint<sp/>stb_decompress_length(stb_uchar<sp/>*input);</highlight></codeline>
<codeline lineno="10368"><highlight class="normal">STB_EXTERN<sp/>stb_uint<sp/>stb_decompress(stb_uchar<sp/>*out,stb_uchar<sp/>*in,stb_uint<sp/>len);</highlight></codeline>
<codeline lineno="10369"><highlight class="normal">STB_EXTERN<sp/>stb_uint<sp/>stb_compress<sp/><sp/>(stb_uchar<sp/>*out,stb_uchar<sp/>*in,stb_uint<sp/>len);</highlight></codeline>
<codeline lineno="10370"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_compress_window(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z);</highlight></codeline>
<codeline lineno="10371"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_compress_hashsize(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z);</highlight></codeline>
<codeline lineno="10372"><highlight class="normal"></highlight></codeline>
<codeline lineno="10373"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_compress_tofile(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*in,<sp/><sp/>stb_uint<sp/><sp/>len);</highlight></codeline>
<codeline lineno="10374"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_compress_intofile(FILE<sp/>*f,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input,<sp/><sp/><sp/><sp/>stb_uint<sp/><sp/>len);</highlight></codeline>
<codeline lineno="10375"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb_decompress_fromfile(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/><sp/><sp/><sp/><sp/><sp/>stb_uint<sp/>*len);</highlight></codeline>
<codeline lineno="10376"><highlight class="normal"></highlight></codeline>
<codeline lineno="10377"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_compress_stream_start(FILE<sp/>*f);</highlight></codeline>
<codeline lineno="10378"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_compress_stream_end(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>close);</highlight></codeline>
<codeline lineno="10379"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_write(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data_len);</highlight></codeline>
<codeline lineno="10380"><highlight class="normal"></highlight></codeline>
<codeline lineno="10381"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10382"><highlight class="normal"></highlight></codeline>
<codeline lineno="10383"><highlight class="normal">stb_uint<sp/>stb_decompress_length(stb_uchar<sp/>*input)</highlight></codeline>
<codeline lineno="10384"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10385"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(input[8]<sp/>&lt;&lt;<sp/>24)<sp/>+<sp/>(input[9]<sp/>&lt;&lt;<sp/>16)<sp/>+<sp/>(input[10]<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>input[11];</highlight></codeline>
<codeline lineno="10386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10387"><highlight class="normal"></highlight></codeline>
<codeline lineno="10389"><highlight class="normal"></highlight></codeline>
<codeline lineno="10390"><highlight class="normal"></highlight><highlight class="comment">//<sp/>simple<sp/>implementation<sp/>that<sp/>just<sp/>writes<sp/>whole<sp/>thing<sp/>into<sp/>big<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10391"><highlight class="normal"></highlight></codeline>
<codeline lineno="10392"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb__barrier;</highlight></codeline>
<codeline lineno="10393"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb__barrier2;</highlight></codeline>
<codeline lineno="10394"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb__barrier3;</highlight></codeline>
<codeline lineno="10395"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb__barrier4;</highlight></codeline>
<codeline lineno="10396"><highlight class="normal"></highlight></codeline>
<codeline lineno="10397"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb_uchar<sp/>*stb__dout;</highlight></codeline>
<codeline lineno="10398"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__match(stb_uchar<sp/>*data,<sp/>stb_uint<sp/>length)</highlight></codeline>
<codeline lineno="10399"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10400"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>INVERSE<sp/>of<sp/>memmove...<sp/>write<sp/>each<sp/>byte<sp/>before<sp/>copying<sp/>the<sp/>next...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10401"><highlight class="normal"><sp/><sp/><sp/>assert<sp/>(stb__dout<sp/>+<sp/>length<sp/>&lt;=<sp/>stb__barrier);</highlight></codeline>
<codeline lineno="10402"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__dout<sp/>+<sp/>length<sp/>&gt;<sp/>stb__barrier)<sp/>{<sp/>stb__dout<sp/>+=<sp/>length;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="10403"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data<sp/>&lt;<sp/>stb__barrier4)<sp/>{<sp/>stb__dout<sp/>=<sp/>stb__barrier+1;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="10404"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(length--)<sp/>*stb__dout++<sp/>=<sp/>*data++;</highlight></codeline>
<codeline lineno="10405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10406"><highlight class="normal"></highlight></codeline>
<codeline lineno="10407"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__lit(stb_uchar<sp/>*data,<sp/>stb_uint<sp/>length)</highlight></codeline>
<codeline lineno="10408"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10409"><highlight class="normal"><sp/><sp/><sp/>assert<sp/>(stb__dout<sp/>+<sp/>length<sp/>&lt;=<sp/>stb__barrier);</highlight></codeline>
<codeline lineno="10410"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__dout<sp/>+<sp/>length<sp/>&gt;<sp/>stb__barrier)<sp/>{<sp/>stb__dout<sp/>+=<sp/>length;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="10411"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data<sp/>&lt;<sp/>stb__barrier2)<sp/>{<sp/>stb__dout<sp/>=<sp/>stb__barrier+1;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="10412"><highlight class="normal"><sp/><sp/><sp/>memcpy(stb__dout,<sp/>data,<sp/>length);</highlight></codeline>
<codeline lineno="10413"><highlight class="normal"><sp/><sp/><sp/>stb__dout<sp/>+=<sp/>length;</highlight></codeline>
<codeline lineno="10414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10415"><highlight class="normal"></highlight></codeline>
<codeline lineno="10416"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb__in2(x)<sp/><sp/><sp/>((i[x]<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>i[(x)+1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10417"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb__in3(x)<sp/><sp/><sp/>((i[x]<sp/>&lt;&lt;<sp/>16)<sp/>+<sp/>stb__in2((x)+1))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10418"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb__in4(x)<sp/><sp/><sp/>((i[x]<sp/>&lt;&lt;<sp/>24)<sp/>+<sp/>stb__in3((x)+1))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10419"><highlight class="normal"></highlight></codeline>
<codeline lineno="10420"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb_uchar<sp/>*stb_decompress_token(stb_uchar<sp/>*i)</highlight></codeline>
<codeline lineno="10421"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10422"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*i<sp/>&gt;=<sp/>0x20)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>use<sp/>fewer<sp/>if&apos;s<sp/>for<sp/>cases<sp/>that<sp/>expand<sp/>small</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*i<sp/>&gt;=<sp/>0x80)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__match(stb__dout-i[1]-1,<sp/>i[0]<sp/>-<sp/>0x80<sp/>+<sp/>1),<sp/>i<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="10424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*i<sp/>&gt;=<sp/>0x40)<sp/><sp/>stb__match(stb__dout-(stb__in2(0)<sp/>-<sp/>0x4000<sp/>+<sp/>1),<sp/>i[2]+1),<sp/>i<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="10425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>*i<sp/>&gt;=<sp/>0x20<sp/>*/</highlight><highlight class="normal"><sp/>stb__lit(i+1,<sp/>i[0]<sp/>-<sp/>0x20<sp/>+<sp/>1),<sp/>i<sp/>+=<sp/>1<sp/>+<sp/>(i[0]<sp/>-<sp/>0x20<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="10426"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>more<sp/>ifs<sp/>for<sp/>cases<sp/>that<sp/>expand<sp/>large,<sp/>since<sp/>overhead<sp/>is<sp/>amortized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*i<sp/>&gt;=<sp/>0x18)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__match(stb__dout-(stb__in3(0)<sp/>-<sp/>0x180000<sp/>+<sp/>1),<sp/>i[3]+1),<sp/>i<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="10428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*i<sp/>&gt;=<sp/>0x10)<sp/><sp/>stb__match(stb__dout-(stb__in3(0)<sp/>-<sp/>0x100000<sp/>+<sp/>1),<sp/>stb__in2(3)+1),<sp/>i<sp/>+=<sp/>5;</highlight></codeline>
<codeline lineno="10429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*i<sp/>&gt;=<sp/>0x08)<sp/><sp/>stb__lit(i+2,<sp/>stb__in2(0)<sp/>-<sp/>0x0800<sp/>+<sp/>1),<sp/>i<sp/>+=<sp/>2<sp/>+<sp/>(stb__in2(0)<sp/>-<sp/>0x0800<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="10430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*i<sp/>==<sp/>0x07)<sp/><sp/>stb__lit(i+3,<sp/>stb__in2(1)<sp/>+<sp/>1),<sp/>i<sp/>+=<sp/>3<sp/>+<sp/>(stb__in2(1)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="10431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*i<sp/>==<sp/>0x06)<sp/><sp/>stb__match(stb__dout-(stb__in3(1)+1),<sp/>i[4]+1),<sp/>i<sp/>+=<sp/>5;</highlight></codeline>
<codeline lineno="10432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*i<sp/>==<sp/>0x04)<sp/><sp/>stb__match(stb__dout-(stb__in3(1)+1),<sp/>stb__in2(4)+1),<sp/>i<sp/>+=<sp/>6;</highlight></codeline>
<codeline lineno="10433"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10434"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="10435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10436"><highlight class="normal"></highlight></codeline>
<codeline lineno="10437"><highlight class="normal">stb_uint<sp/>stb_decompress(stb_uchar<sp/>*<ref refid="structoutput" kindref="compound">output</ref>,<sp/>stb_uchar<sp/>*i,<sp/>stb_uint<sp/>length)</highlight></codeline>
<codeline lineno="10438"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10439"><highlight class="normal"><sp/><sp/><sp/>stb_uint<sp/>olen;</highlight></codeline>
<codeline lineno="10440"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__in4(0)<sp/>!=<sp/>0x57bC0000)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="10441"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__in4(4)<sp/>!=<sp/>0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">//<sp/>error!<sp/>stream<sp/>is<sp/>&gt;<sp/>4GB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10442"><highlight class="normal"><sp/><sp/><sp/>olen<sp/>=<sp/>stb_decompress_length(i);</highlight></codeline>
<codeline lineno="10443"><highlight class="normal"><sp/><sp/><sp/>stb__barrier2<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="10444"><highlight class="normal"><sp/><sp/><sp/>stb__barrier3<sp/>=<sp/>i+length;</highlight></codeline>
<codeline lineno="10445"><highlight class="normal"><sp/><sp/><sp/>stb__barrier<sp/>=<sp/><ref refid="structoutput" kindref="compound">output</ref><sp/>+<sp/>olen;</highlight></codeline>
<codeline lineno="10446"><highlight class="normal"><sp/><sp/><sp/>stb__barrier4<sp/>=<sp/><ref refid="structoutput" kindref="compound">output</ref>;</highlight></codeline>
<codeline lineno="10447"><highlight class="normal"><sp/><sp/><sp/>i<sp/>+=<sp/>16;</highlight></codeline>
<codeline lineno="10448"><highlight class="normal"></highlight></codeline>
<codeline lineno="10449"><highlight class="normal"><sp/><sp/><sp/>stb__dout<sp/>=<sp/><ref refid="structoutput" kindref="compound">output</ref>;</highlight></codeline>
<codeline lineno="10450"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="10451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_uchar<sp/>*old_i<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="10452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>stb_decompress_token(i);</highlight></codeline>
<codeline lineno="10453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>old_i)<sp/>{</highlight></codeline>
<codeline lineno="10454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*i<sp/>==<sp/>0x05<sp/>&amp;&amp;<sp/>i[1]<sp/>==<sp/>0xfa)<sp/>{</highlight></codeline>
<codeline lineno="10455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(stb__dout<sp/>==<sp/><ref refid="structoutput" kindref="compound">output</ref><sp/>+<sp/>olen);</highlight></codeline>
<codeline lineno="10456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__dout<sp/>!=<sp/><ref refid="structoutput" kindref="compound">output</ref><sp/>+<sp/>olen)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="10457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb_adler32(1,<sp/><ref refid="structoutput" kindref="compound">output</ref>,<sp/>olen)<sp/>!=<sp/>(stb_uint)<sp/>stb__in4(2))</highlight></codeline>
<codeline lineno="10458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="10459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>olen;</highlight></codeline>
<codeline lineno="10460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="10461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(0);<sp/></highlight><highlight class="comment">/*<sp/>NOTREACHED<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="10463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(stb__dout<sp/>&lt;=<sp/><ref refid="structoutput" kindref="compound">output</ref><sp/>+<sp/>olen);</highlight></codeline>
<codeline lineno="10466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__dout<sp/>&gt;<sp/><ref refid="structoutput" kindref="compound">output</ref><sp/>+<sp/>olen)</highlight></codeline>
<codeline lineno="10467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="10468"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10470"><highlight class="normal"></highlight></codeline>
<codeline lineno="10471"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb_decompress_fromfile(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*len)</highlight></codeline>
<codeline lineno="10472"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10473"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="10474"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*q;</highlight></codeline>
<codeline lineno="10475"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="10476"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*f<sp/>=<sp/>stb_p_fopen(filename,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="10477"><highlight class="normal"><sp/><sp/><sp/>fseek(f,<sp/>0,<sp/>SEEK_END);</highlight></codeline>
<codeline lineno="10478"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>ftell(f);</highlight></codeline>
<codeline lineno="10479"><highlight class="normal"><sp/><sp/><sp/>fseek(f,<sp/>0,<sp/>SEEK_SET);</highlight></codeline>
<codeline lineno="10480"><highlight class="normal"><sp/><sp/><sp/>p<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>)<sp/>malloc(n);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="10481"><highlight class="normal"><sp/><sp/><sp/>fread(p,<sp/>1,<sp/>n,<sp/>f);</highlight></codeline>
<codeline lineno="10482"><highlight class="normal"><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="10483"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="10484"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p[0]<sp/>!=<sp/>0x57<sp/>||<sp/>p[1]<sp/>!=<sp/>0xBc<sp/>||<sp/>p[2]<sp/>||<sp/>p[3])<sp/>{<sp/>free(p);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/>}</highlight></codeline>
<codeline lineno="10485"><highlight class="normal"><sp/><sp/><sp/>q<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(stb_decompress_length(p)+1);</highlight></codeline>
<codeline lineno="10486"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!q)<sp/>{<sp/>free(p);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/>}</highlight></codeline>
<codeline lineno="10487"><highlight class="normal"><sp/><sp/><sp/>*len<sp/>=<sp/>stb_decompress((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>q,<sp/>p,<sp/>n);</highlight></codeline>
<codeline lineno="10488"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*len)<sp/>q[*len]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="10489"><highlight class="normal"><sp/><sp/><sp/>free(p);</highlight></codeline>
<codeline lineno="10490"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>q;</highlight></codeline>
<codeline lineno="10491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10492"><highlight class="normal"></highlight></codeline>
<codeline lineno="10493"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10494"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>streaming<sp/>decompressor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10495"><highlight class="normal"></highlight></codeline>
<codeline lineno="10496"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10497"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10498"><highlight class="normal"><sp/><sp/><sp/>stb__uchar<sp/>*in_buffer;</highlight></codeline>
<codeline lineno="10499"><highlight class="normal"><sp/><sp/><sp/>stb__uchar<sp/>*match;</highlight></codeline>
<codeline lineno="10500"><highlight class="normal"></highlight></codeline>
<codeline lineno="10501"><highlight class="normal"><sp/><sp/><sp/>stb__uint<sp/>pending_literals;</highlight></codeline>
<codeline lineno="10502"><highlight class="normal"><sp/><sp/><sp/>stb__uint<sp/>pending_match;</highlight></codeline>
<codeline lineno="10503"><highlight class="normal">}<sp/>xx;</highlight></codeline>
<codeline lineno="10504"><highlight class="normal"></highlight></codeline>
<codeline lineno="10505"><highlight class="normal"></highlight></codeline>
<codeline lineno="10506"><highlight class="normal"></highlight></codeline>
<codeline lineno="10507"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__match(stb_uchar<sp/>*data,<sp/>stb_uint<sp/>length)</highlight></codeline>
<codeline lineno="10508"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10509"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>INVERSE<sp/>of<sp/>memmove...<sp/>write<sp/>each<sp/>byte<sp/>before<sp/>copying<sp/>the<sp/>next...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10510"><highlight class="normal"><sp/><sp/><sp/>assert<sp/>(stb__dout<sp/>+<sp/>length<sp/>&lt;=<sp/>stb__barrier);</highlight></codeline>
<codeline lineno="10511"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__dout<sp/>+<sp/>length<sp/>&gt;<sp/>stb__barrier)<sp/>{<sp/>stb__dout<sp/>+=<sp/>length;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="10512"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data<sp/>&lt;<sp/>stb__barrier2)<sp/>{<sp/>stb__dout<sp/>=<sp/>stb__barrier+1;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="10513"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(length--)<sp/>*stb__dout++<sp/>=<sp/>*data++;</highlight></codeline>
<codeline lineno="10514"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10515"><highlight class="normal"></highlight></codeline>
<codeline lineno="10516"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__lit(stb_uchar<sp/>*data,<sp/>stb_uint<sp/>length)</highlight></codeline>
<codeline lineno="10517"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10518"><highlight class="normal"><sp/><sp/><sp/>assert<sp/>(stb__dout<sp/>+<sp/>length<sp/>&lt;=<sp/>stb__barrier);</highlight></codeline>
<codeline lineno="10519"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__dout<sp/>+<sp/>length<sp/>&gt;<sp/>stb__barrier)<sp/>{<sp/>stb__dout<sp/>+=<sp/>length;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="10520"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data<sp/>&lt;<sp/>stb__barrier2)<sp/>{<sp/>stb__dout<sp/>=<sp/>stb__barrier+1;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="10521"><highlight class="normal"><sp/><sp/><sp/>memcpy(stb__dout,<sp/>data,<sp/>length);</highlight></codeline>
<codeline lineno="10522"><highlight class="normal"><sp/><sp/><sp/>stb__dout<sp/>+=<sp/>length;</highlight></codeline>
<codeline lineno="10523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10524"><highlight class="normal"></highlight></codeline>
<codeline lineno="10525"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sx_match(stb_uchar<sp/>*data,<sp/>stb_uint<sp/>length)</highlight></codeline>
<codeline lineno="10526"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10527"><highlight class="normal"><sp/><sp/><sp/>xx.match<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="10528"><highlight class="normal"><sp/><sp/><sp/>xx.pending_match<sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="10529"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10530"><highlight class="normal"></highlight></codeline>
<codeline lineno="10531"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sx_lit(stb_uchar<sp/>*data,<sp/>stb_uint<sp/>length)</highlight></codeline>
<codeline lineno="10532"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10533"><highlight class="normal"><sp/><sp/><sp/>xx.pending_lit<sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="10534"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10535"><highlight class="normal"></highlight></codeline>
<codeline lineno="10536"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_decompress_token_state(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="10537"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10538"><highlight class="normal"><sp/><sp/><sp/>stb__uchar<sp/>*i<sp/>=<sp/>xx.in_buffer;</highlight></codeline>
<codeline lineno="10539"><highlight class="normal"></highlight></codeline>
<codeline lineno="10540"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*i<sp/>&gt;=<sp/>0x20)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>use<sp/>fewer<sp/>if&apos;s<sp/>for<sp/>cases<sp/>that<sp/>expand<sp/>small</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*i<sp/>&gt;=<sp/>0x80)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>sx_match(stb__dout-i[1]-1,<sp/>i[0]<sp/>-<sp/>0x80<sp/>+<sp/>1),<sp/>i<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="10542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*i<sp/>&gt;=<sp/>0x40)<sp/><sp/>sx_match(stb__dout-(stb__in2(0)<sp/>-<sp/>0x4000<sp/>+<sp/>1),<sp/>i[2]+1),<sp/>i<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="10543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>*i<sp/>&gt;=<sp/>0x20<sp/>*/</highlight><highlight class="normal"><sp/>sx_lit(i+1,<sp/>i[0]<sp/>-<sp/>0x20<sp/>+<sp/>1),<sp/>i<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="10544"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>more<sp/>ifs<sp/>for<sp/>cases<sp/>that<sp/>expand<sp/>large,<sp/>since<sp/>overhead<sp/>is<sp/>amortized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*i<sp/>&gt;=<sp/>0x18)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>sx_match(stb__dout-(stb__in3(0)<sp/>-<sp/>0x180000<sp/>+<sp/>1),<sp/>i[3]+1),<sp/>i<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="10546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*i<sp/>&gt;=<sp/>0x10)<sp/><sp/>sx_match(stb__dout-(stb__in3(0)<sp/>-<sp/>0x100000<sp/>+<sp/>1),<sp/>stb__in2(3)+1),<sp/>i<sp/>+=<sp/>5;</highlight></codeline>
<codeline lineno="10547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*i<sp/>&gt;=<sp/>0x08)<sp/><sp/>sx_lit(i+2,<sp/>stb__in2(0)<sp/>-<sp/>0x0800<sp/>+<sp/>1),<sp/>i<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="10548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*i<sp/>==<sp/>0x07)<sp/><sp/>sx_lit(i+3,<sp/>stb__in2(1)<sp/>+<sp/>1),<sp/>i<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="10549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*i<sp/>==<sp/>0x06)<sp/><sp/>sx_match(stb__dout-(stb__in3(1)+1),<sp/>i[4]+1),<sp/>i<sp/>+=<sp/>5;</highlight></codeline>
<codeline lineno="10550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*i<sp/>==<sp/>0x04)<sp/><sp/>sx_match(stb__dout-(stb__in3(1)+1),<sp/>stb__in2(4)+1),<sp/>i<sp/>+=<sp/>6;</highlight></codeline>
<codeline lineno="10551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="10552"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10553"><highlight class="normal"><sp/><sp/><sp/>xx.in_buffer<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="10554"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="10555"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10556"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10557"><highlight class="normal"></highlight></codeline>
<codeline lineno="10558"><highlight class="normal"></highlight></codeline>
<codeline lineno="10559"><highlight class="normal"></highlight></codeline>
<codeline lineno="10561"><highlight class="normal"></highlight></codeline>
<codeline lineno="10562"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_matchlen(stb_uchar<sp/>*m1,<sp/>stb_uchar<sp/>*m2,<sp/>stb_uint<sp/>maxlen)</highlight></codeline>
<codeline lineno="10563"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10564"><highlight class="normal"><sp/><sp/><sp/>stb_uint<sp/>i;</highlight></codeline>
<codeline lineno="10565"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>maxlen;<sp/>++i)</highlight></codeline>
<codeline lineno="10566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m1[i]<sp/>!=<sp/>m2[i])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="10567"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="10568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10569"><highlight class="normal"></highlight></codeline>
<codeline lineno="10570"><highlight class="normal"></highlight><highlight class="comment">//<sp/>simple<sp/>implementation<sp/>that<sp/>just<sp/>takes<sp/>the<sp/>source<sp/>data<sp/>in<sp/>a<sp/>big<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10571"><highlight class="normal"></highlight></codeline>
<codeline lineno="10572"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb_uchar<sp/>*stb__out;</highlight></codeline>
<codeline lineno="10573"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FILE<sp/><sp/><sp/><sp/><sp/><sp/>*stb__outfile;</highlight></codeline>
<codeline lineno="10574"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb_uint<sp/><sp/><sp/>stb__outbytes;</highlight></codeline>
<codeline lineno="10575"><highlight class="normal"></highlight></codeline>
<codeline lineno="10576"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__write(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>v)</highlight></codeline>
<codeline lineno="10577"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10578"><highlight class="normal"><sp/><sp/><sp/>fputc(v,<sp/>stb__outfile);</highlight></codeline>
<codeline lineno="10579"><highlight class="normal"><sp/><sp/><sp/>++stb__outbytes;</highlight></codeline>
<codeline lineno="10580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10581"><highlight class="normal"></highlight></codeline>
<codeline lineno="10582"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_out(v)<sp/><sp/><sp/><sp/>(stb__out<sp/>?<sp/>(void)(*stb__out++<sp/>=<sp/>(stb_uchar)<sp/>(v))<sp/>:<sp/>stb__write((stb_uchar)<sp/>(v)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10583"><highlight class="normal"></highlight></codeline>
<codeline lineno="10584"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_out2(stb_uint<sp/>v)</highlight></codeline>
<codeline lineno="10585"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10586"><highlight class="normal"><sp/><sp/><sp/>stb_out(v<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="10587"><highlight class="normal"><sp/><sp/><sp/>stb_out(v);</highlight></codeline>
<codeline lineno="10588"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10589"><highlight class="normal"></highlight></codeline>
<codeline lineno="10590"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_out3(stb_uint<sp/>v)<sp/>{<sp/>stb_out(v<sp/>&gt;&gt;<sp/>16);<sp/>stb_out(v<sp/>&gt;&gt;<sp/>8);<sp/>stb_out(v);<sp/>}</highlight></codeline>
<codeline lineno="10591"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_out4(stb_uint<sp/>v)<sp/>{<sp/>stb_out(v<sp/>&gt;&gt;<sp/>24);<sp/>stb_out(v<sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="10592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_out(v<sp/>&gt;&gt;<sp/>8<sp/>);<sp/>stb_out(v);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10593"><highlight class="normal"></highlight></codeline>
<codeline lineno="10594"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>outliterals(stb_uchar<sp/>*in,<sp/>ptrdiff_t<sp/>numlit)</highlight></codeline>
<codeline lineno="10595"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10596"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(numlit<sp/>&gt;<sp/>65536)<sp/>{</highlight></codeline>
<codeline lineno="10597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outliterals(in,65536);</highlight></codeline>
<codeline lineno="10598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/><sp/><sp/><sp/><sp/>+=<sp/>65536;</highlight></codeline>
<codeline lineno="10599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numlit<sp/>-=<sp/>65536;</highlight></codeline>
<codeline lineno="10600"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10601"><highlight class="normal"></highlight></codeline>
<codeline lineno="10602"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(numlit<sp/>==<sp/><sp/><sp/><sp/><sp/>0)<sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="10603"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numlit<sp/>&lt;=<sp/><sp/><sp/><sp/>32)<sp/><sp/><sp/><sp/>stb_out<sp/>(0x000020<sp/>+<sp/>(stb_uint)<sp/>numlit-1);</highlight></codeline>
<codeline lineno="10604"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numlit<sp/>&lt;=<sp/><sp/>2048)<sp/><sp/><sp/><sp/>stb_out2(0x000800<sp/>+<sp/>(stb_uint)<sp/>numlit-1);</highlight></codeline>
<codeline lineno="10605"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/><sp/>numlit<sp/>&lt;=<sp/>65536)<sp/>*/</highlight><highlight class="normal"><sp/>stb_out3(0x070000<sp/>+<sp/>(stb_uint)<sp/>numlit-1);</highlight></codeline>
<codeline lineno="10606"><highlight class="normal"></highlight></codeline>
<codeline lineno="10607"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__out)<sp/>{</highlight></codeline>
<codeline lineno="10608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(stb__out,in,numlit);</highlight></codeline>
<codeline lineno="10609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__out<sp/>+=<sp/>numlit;</highlight></codeline>
<codeline lineno="10610"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(in,<sp/>1,<sp/>numlit,<sp/>stb__outfile);</highlight></codeline>
<codeline lineno="10612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10613"><highlight class="normal"></highlight></codeline>
<codeline lineno="10614"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__window<sp/>=<sp/>0x40000;<sp/></highlight><highlight class="comment">//<sp/>256K</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10615"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_compress_window(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z)</highlight></codeline>
<codeline lineno="10616"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10617"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&gt;=<sp/>0x1000000)<sp/>z<sp/>=<sp/>0x1000000;<sp/></highlight><highlight class="comment">//<sp/>limit<sp/>of<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10618"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&lt;<sp/><sp/><sp/><sp/><sp/><sp/>0x100)<sp/>z<sp/>=<sp/>0x100;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>insanely<sp/>small</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10619"><highlight class="normal"><sp/><sp/><sp/>stb__window<sp/>=<sp/>z;</highlight></codeline>
<codeline lineno="10620"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10621"><highlight class="normal"></highlight></codeline>
<codeline lineno="10622"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_not_crap(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>best,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dist)</highlight></codeline>
<codeline lineno="10623"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10624"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/><sp/>((best<sp/>&gt;<sp/>2<sp/><sp/>&amp;&amp;<sp/><sp/>dist<sp/>&lt;=<sp/>0x00100)</highlight></codeline>
<codeline lineno="10625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(best<sp/>&gt;<sp/>5<sp/><sp/>&amp;&amp;<sp/><sp/>dist<sp/>&lt;=<sp/>0x04000)</highlight></codeline>
<codeline lineno="10626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(best<sp/>&gt;<sp/>7<sp/><sp/>&amp;&amp;<sp/><sp/>dist<sp/>&lt;=<sp/>0x80000));</highlight></codeline>
<codeline lineno="10627"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10628"><highlight class="normal"></highlight></codeline>
<codeline lineno="10629"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><sp/>stb_uint<sp/>stb__hashsize<sp/>=<sp/>32768;</highlight></codeline>
<codeline lineno="10630"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_compress_hashsize(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y)</highlight></codeline>
<codeline lineno="10631"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10632"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>1024;</highlight></codeline>
<codeline lineno="10633"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(z<sp/>&lt;<sp/>y)<sp/>z<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="10634"><highlight class="normal"><sp/><sp/><sp/>stb__hashsize<sp/>=<sp/>z<sp/>&gt;&gt;<sp/>2;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pass<sp/>in<sp/>bytes,<sp/>store<sp/>#pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10635"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10636"><highlight class="normal"></highlight></codeline>
<codeline lineno="10637"><highlight class="normal"></highlight><highlight class="comment">//<sp/>note<sp/>that<sp/>you<sp/>can<sp/>play<sp/>with<sp/>the<sp/>hashing<sp/>functions<sp/>all<sp/>you</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10638"><highlight class="normal"></highlight><highlight class="comment">//<sp/>want<sp/>without<sp/>needing<sp/>to<sp/>change<sp/>the<sp/>decompressor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10639"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb__hc(q,h,c)<sp/><sp/><sp/><sp/><sp/><sp/>(((h)<sp/>&lt;&lt;<sp/>7)<sp/>+<sp/>((h)<sp/>&gt;&gt;<sp/>25)<sp/>+<sp/>q[c])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10640"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb__hc2(q,h,c,d)<sp/><sp/><sp/>(((h)<sp/>&lt;&lt;<sp/>14)<sp/>+<sp/>((h)<sp/>&gt;&gt;<sp/>18)<sp/>+<sp/>(q[c]<sp/>&lt;&lt;<sp/>7)<sp/>+<sp/>q[d])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10641"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb__hc3(q,c,d,e)<sp/><sp/><sp/>((q[c]<sp/>&lt;&lt;<sp/>14)<sp/>+<sp/>(q[d]<sp/>&lt;&lt;<sp/>7)<sp/>+<sp/>q[e])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10642"><highlight class="normal"></highlight></codeline>
<codeline lineno="10643"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb_uint32<sp/>stb__running_adler;</highlight></codeline>
<codeline lineno="10644"><highlight class="normal"></highlight></codeline>
<codeline lineno="10645"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_compress_chunk(stb_uchar<sp/>*history,</highlight></codeline>
<codeline lineno="10646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_uchar<sp/>*start,</highlight></codeline>
<codeline lineno="10647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_uchar<sp/>*end,</highlight></codeline>
<codeline lineno="10648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length,</highlight></codeline>
<codeline lineno="10649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*pending_literals,</highlight></codeline>
<codeline lineno="10650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_uchar<sp/>**chash,</highlight></codeline>
<codeline lineno="10651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_uint<sp/><ref refid="structmask" kindref="compound">mask</ref>)</highlight></codeline>
<codeline lineno="10652"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10653"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>window<sp/>=<sp/>stb__window;</highlight></codeline>
<codeline lineno="10654"><highlight class="normal"><sp/><sp/><sp/>stb_uint<sp/>match_max;</highlight></codeline>
<codeline lineno="10655"><highlight class="normal"><sp/><sp/><sp/>stb_uchar<sp/>*lit_start<sp/>=<sp/>start<sp/>-<sp/>*pending_literals;</highlight></codeline>
<codeline lineno="10656"><highlight class="normal"><sp/><sp/><sp/>stb_uchar<sp/>*q<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="10657"><highlight class="normal"></highlight></codeline>
<codeline lineno="10658"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>STB__SCRAMBLE(h)<sp/><sp/><sp/>(((h)<sp/>+<sp/>((h)<sp/>&gt;&gt;<sp/>16))<sp/>&amp;<sp/>mask)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10659"><highlight class="normal"></highlight></codeline>
<codeline lineno="10660"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stop<sp/>short<sp/>of<sp/>the<sp/>end<sp/>so<sp/>we<sp/>don&apos;t<sp/>scan<sp/>off<sp/>the<sp/>end<sp/>doing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10661"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>hashing;<sp/>this<sp/>means<sp/>we<sp/>won&apos;t<sp/>compress<sp/>the<sp/>last<sp/>few<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10662"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unless<sp/>they<sp/>were<sp/>part<sp/>of<sp/>something<sp/>longer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10663"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(q<sp/>&lt;<sp/>start+length<sp/>&amp;&amp;<sp/>q+12<sp/>&lt;<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="10664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m;</highlight></codeline>
<codeline lineno="10665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_uint<sp/>h1,h2,h3,h4,<sp/>h;</highlight></codeline>
<codeline lineno="10666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_uchar<sp/>*t;</highlight></codeline>
<codeline lineno="10667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>best<sp/>=<sp/>2,<sp/>dist=0;</highlight></codeline>
<codeline lineno="10668"><highlight class="normal"></highlight></codeline>
<codeline lineno="10669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q+65536<sp/>&gt;<sp/>end)</highlight></codeline>
<codeline lineno="10670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match_max<sp/>=<sp/>(stb_uint)<sp/>(end-q);</highlight></codeline>
<codeline lineno="10671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match_max<sp/>=<sp/>65536u;</highlight></codeline>
<codeline lineno="10673"><highlight class="normal"></highlight></codeline>
<codeline lineno="10674"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>stb__nc(b,d)<sp/><sp/>((d)<sp/>&lt;=<sp/>window<sp/>&amp;&amp;<sp/>((b)<sp/>&gt;<sp/>9<sp/>||<sp/>stb_not_crap(b,d)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10675"><highlight class="normal"></highlight></codeline>
<codeline lineno="10676"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>STB__TRY(t,p)<sp/><sp/></highlight><highlight class="comment">/*<sp/>avoid<sp/>retrying<sp/>a<sp/>match<sp/>we<sp/>already<sp/>tried<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="10677"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(p<sp/>?<sp/>dist<sp/>!=<sp/>(int)<sp/>(q-t)<sp/>:<sp/>1)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="10678"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((m<sp/>=<sp/>(int)<sp/>stb_matchlen(t,<sp/>q,<sp/>match_max))<sp/>&gt;<sp/>best)\</highlight></codeline>
<codeline lineno="10679"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(stb__nc(m,(int)<sp/>(q-(t))))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="10680"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best<sp/>=<sp/>m,<sp/>dist<sp/>=<sp/>(int)<sp/>(q<sp/>-<sp/>(t))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10681"><highlight class="normal"></highlight></codeline>
<codeline lineno="10682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rather<sp/>than<sp/>search<sp/>for<sp/>all<sp/>matches,<sp/>only<sp/>try<sp/>4<sp/>candidate<sp/>locations,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>chosen<sp/>based<sp/>on<sp/>4<sp/>different<sp/>hash<sp/>functions<sp/>of<sp/>different<sp/>lengths.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>strategy<sp/>is<sp/>inspired<sp/>by<sp/>LZO;<sp/>hashing<sp/>is<sp/>unrolled<sp/>here<sp/>using<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;hc&apos;<sp/>macro</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>stb__hc3(q,0,<sp/>1,<sp/>2);<sp/>h1<sp/>=<sp/>STB__SCRAMBLE(h);</highlight></codeline>
<codeline lineno="10687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>chash[h1];<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t)<sp/>STB__TRY(t,0);</highlight></codeline>
<codeline lineno="10688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>stb__hc2(q,h,<sp/>3,<sp/>4);<sp/>h2<sp/>=<sp/>STB__SCRAMBLE(h);</highlight></codeline>
<codeline lineno="10689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>stb__hc2(q,h,<sp/>5,<sp/>6);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>chash[h2];<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t)<sp/>STB__TRY(t,1);</highlight></codeline>
<codeline lineno="10690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>stb__hc2(q,h,<sp/>7,<sp/>8);<sp/>h3<sp/>=<sp/>STB__SCRAMBLE(h);</highlight></codeline>
<codeline lineno="10691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>stb__hc2(q,h,<sp/>9,10);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>chash[h3];<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t)<sp/>STB__TRY(t,1);</highlight></codeline>
<codeline lineno="10692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>stb__hc2(q,h,11,12);<sp/>h4<sp/>=<sp/>STB__SCRAMBLE(h);</highlight></codeline>
<codeline lineno="10693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>chash[h4];<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t)<sp/>STB__TRY(t,1);</highlight></codeline>
<codeline lineno="10694"><highlight class="normal"></highlight></codeline>
<codeline lineno="10695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>we<sp/>use<sp/>a<sp/>shared<sp/>hash<sp/>table,<sp/>can<sp/>only<sp/>update<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>_after_<sp/>we&apos;ve<sp/>probed<sp/>all<sp/>of<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>chash[h1]<sp/>=<sp/>chash[h2]<sp/>=<sp/>chash[h3]<sp/>=<sp/>chash[h4]<sp/>=<sp/>q;</highlight></codeline>
<codeline lineno="10698"><highlight class="normal"></highlight></codeline>
<codeline lineno="10699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(best<sp/>&gt;<sp/>2)</highlight></codeline>
<codeline lineno="10700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(dist<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="10701"><highlight class="normal"></highlight></codeline>
<codeline lineno="10702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>if<sp/>our<sp/>best<sp/>match<sp/>qualifies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(best<sp/>&lt;<sp/>3)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>fast<sp/>path<sp/>literals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++q;</highlight></codeline>
<codeline lineno="10705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(best<sp/>&gt;<sp/>2<sp/><sp/>&amp;&amp;<sp/><sp/>best<sp/>&lt;=<sp/>0x80<sp/><sp/><sp/><sp/>&amp;&amp;<sp/><sp/>dist<sp/>&lt;=<sp/>0x100)<sp/>{</highlight></codeline>
<codeline lineno="10706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outliterals(lit_start,<sp/>q-lit_start);<sp/>lit_start<sp/>=<sp/>(q<sp/>+=<sp/>best);</highlight></codeline>
<codeline lineno="10707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_out(0x80<sp/>+<sp/>best-1);</highlight></codeline>
<codeline lineno="10708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_out(dist-1);</highlight></codeline>
<codeline lineno="10709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(best<sp/>&gt;<sp/>5<sp/><sp/>&amp;&amp;<sp/><sp/>best<sp/>&lt;=<sp/>0x100<sp/><sp/><sp/>&amp;&amp;<sp/><sp/>dist<sp/>&lt;=<sp/>0x4000)<sp/>{</highlight></codeline>
<codeline lineno="10710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outliterals(lit_start,<sp/>q-lit_start);<sp/>lit_start<sp/>=<sp/>(q<sp/>+=<sp/>best);</highlight></codeline>
<codeline lineno="10711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_out2(0x4000<sp/>+<sp/>dist-1);</highlight></codeline>
<codeline lineno="10712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_out(best-1);</highlight></codeline>
<codeline lineno="10713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(best<sp/>&gt;<sp/>7<sp/><sp/>&amp;&amp;<sp/><sp/>best<sp/>&lt;=<sp/>0x100<sp/><sp/><sp/>&amp;&amp;<sp/><sp/>dist<sp/>&lt;=<sp/>0x80000)<sp/>{</highlight></codeline>
<codeline lineno="10714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outliterals(lit_start,<sp/>q-lit_start);<sp/>lit_start<sp/>=<sp/>(q<sp/>+=<sp/>best);</highlight></codeline>
<codeline lineno="10715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_out3(0x180000<sp/>+<sp/>dist-1);</highlight></codeline>
<codeline lineno="10716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_out(best-1);</highlight></codeline>
<codeline lineno="10717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(best<sp/>&gt;<sp/>8<sp/><sp/>&amp;&amp;<sp/><sp/>best<sp/>&lt;=<sp/>0x10000<sp/>&amp;&amp;<sp/><sp/>dist<sp/>&lt;=<sp/>0x80000)<sp/>{</highlight></codeline>
<codeline lineno="10718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outliterals(lit_start,<sp/>q-lit_start);<sp/>lit_start<sp/>=<sp/>(q<sp/>+=<sp/>best);</highlight></codeline>
<codeline lineno="10719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_out3(0x100000<sp/>+<sp/>dist-1);</highlight></codeline>
<codeline lineno="10720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_out2(best-1);</highlight></codeline>
<codeline lineno="10721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(best<sp/>&gt;<sp/>9<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/><sp/>dist<sp/>&lt;=<sp/>0x1000000)<sp/>{</highlight></codeline>
<codeline lineno="10722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(best<sp/>&gt;<sp/>65536)<sp/>best<sp/>=<sp/>65536;</highlight></codeline>
<codeline lineno="10723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outliterals(lit_start,<sp/>q-lit_start);<sp/>lit_start<sp/>=<sp/>(q<sp/>+=<sp/>best);</highlight></codeline>
<codeline lineno="10724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(best<sp/>&lt;=<sp/>0x100)<sp/>{</highlight></codeline>
<codeline lineno="10725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_out(0x06);</highlight></codeline>
<codeline lineno="10726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_out3(dist-1);</highlight></codeline>
<codeline lineno="10727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_out(best-1);</highlight></codeline>
<codeline lineno="10728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="10729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_out(0x04);</highlight></codeline>
<codeline lineno="10730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_out3(dist-1);</highlight></codeline>
<codeline lineno="10731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_out2(best-1);</highlight></codeline>
<codeline lineno="10732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>fallback<sp/>literals<sp/>if<sp/>no<sp/>match<sp/>was<sp/>a<sp/>balanced<sp/>tradeoff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++q;</highlight></codeline>
<codeline lineno="10735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10736"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10737"><highlight class="normal"></highlight></codeline>
<codeline lineno="10738"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>didn&apos;t<sp/>get<sp/>all<sp/>the<sp/>way,<sp/>add<sp/>the<sp/>rest<sp/>to<sp/>literals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10739"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q-start<sp/>&lt;<sp/>length)</highlight></codeline>
<codeline lineno="10740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>start+length;</highlight></codeline>
<codeline lineno="10741"><highlight class="normal"></highlight></codeline>
<codeline lineno="10742"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>literals<sp/>are<sp/>everything<sp/>from<sp/>lit_start<sp/>to<sp/>q</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10743"><highlight class="normal"><sp/><sp/><sp/>*pending_literals<sp/>=<sp/>(int)<sp/>(q<sp/>-<sp/>lit_start);</highlight></codeline>
<codeline lineno="10744"><highlight class="normal"></highlight></codeline>
<codeline lineno="10745"><highlight class="normal"><sp/><sp/><sp/>stb__running_adler<sp/>=<sp/>stb_adler32(stb__running_adler,<sp/>start,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>(q<sp/>-<sp/>start));</highlight></codeline>
<codeline lineno="10746"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>(q<sp/>-<sp/>start);</highlight></codeline>
<codeline lineno="10747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10748"><highlight class="normal"></highlight></codeline>
<codeline lineno="10749"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_compress_inner(stb_uchar<sp/>*input,<sp/>stb_uint<sp/>length)</highlight></codeline>
<codeline lineno="10750"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10751"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>literals<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="10752"><highlight class="normal"><sp/><sp/><sp/>stb_uint<sp/>len,i;</highlight></codeline>
<codeline lineno="10753"><highlight class="normal"></highlight></codeline>
<codeline lineno="10754"><highlight class="normal"><sp/><sp/><sp/>stb_uchar<sp/>**chash;</highlight></codeline>
<codeline lineno="10755"><highlight class="normal"><sp/><sp/><sp/>chash<sp/>=<sp/>(stb_uchar**)<sp/>malloc(stb__hashsize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stb_uchar*));</highlight></codeline>
<codeline lineno="10756"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(chash<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">//<sp/>failure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10757"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stb__hashsize;<sp/>++i)</highlight></codeline>
<codeline lineno="10758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>chash[i]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="10759"><highlight class="normal"></highlight></codeline>
<codeline lineno="10760"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stream<sp/>signature</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10761"><highlight class="normal"><sp/><sp/><sp/>stb_out(0x57);<sp/>stb_out(0xbc);</highlight></codeline>
<codeline lineno="10762"><highlight class="normal"><sp/><sp/><sp/>stb_out2(0);</highlight></codeline>
<codeline lineno="10763"><highlight class="normal"></highlight></codeline>
<codeline lineno="10764"><highlight class="normal"><sp/><sp/><sp/>stb_out4(0);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>64-bit<sp/>length<sp/>requires<sp/>32-bit<sp/>leading<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10765"><highlight class="normal"><sp/><sp/><sp/>stb_out4(length);</highlight></codeline>
<codeline lineno="10766"><highlight class="normal"><sp/><sp/><sp/>stb_out4(stb__window);</highlight></codeline>
<codeline lineno="10767"><highlight class="normal"></highlight></codeline>
<codeline lineno="10768"><highlight class="normal"><sp/><sp/><sp/>stb__running_adler<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="10769"><highlight class="normal"></highlight></codeline>
<codeline lineno="10770"><highlight class="normal"><sp/><sp/><sp/>len<sp/>=<sp/>stb_compress_chunk(input,<sp/>input,<sp/>input+length,<sp/>length,<sp/>&amp;literals,<sp/>chash,<sp/>stb__hashsize-1);</highlight></codeline>
<codeline lineno="10771"><highlight class="normal"><sp/><sp/><sp/>assert(len<sp/>==<sp/>length);</highlight></codeline>
<codeline lineno="10772"><highlight class="normal"></highlight></codeline>
<codeline lineno="10773"><highlight class="normal"><sp/><sp/><sp/>outliterals(input+length<sp/>-<sp/>literals,<sp/>literals);</highlight></codeline>
<codeline lineno="10774"><highlight class="normal"></highlight></codeline>
<codeline lineno="10775"><highlight class="normal"><sp/><sp/><sp/>free(chash);</highlight></codeline>
<codeline lineno="10776"><highlight class="normal"></highlight></codeline>
<codeline lineno="10777"><highlight class="normal"><sp/><sp/><sp/>stb_out2(0x05fa);<sp/></highlight><highlight class="comment">//<sp/>end<sp/>opcode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10778"><highlight class="normal"></highlight></codeline>
<codeline lineno="10779"><highlight class="normal"><sp/><sp/><sp/>stb_out4(stb__running_adler);</highlight></codeline>
<codeline lineno="10780"><highlight class="normal"></highlight></codeline>
<codeline lineno="10781"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/></highlight><highlight class="comment">//<sp/>success</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10782"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10783"><highlight class="normal"></highlight></codeline>
<codeline lineno="10784"><highlight class="normal">stb_uint<sp/>stb_compress(stb_uchar<sp/>*out,<sp/>stb_uchar<sp/>*input,<sp/>stb_uint<sp/>length)</highlight></codeline>
<codeline lineno="10785"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10786"><highlight class="normal"><sp/><sp/><sp/>stb__out<sp/>=<sp/>out;</highlight></codeline>
<codeline lineno="10787"><highlight class="normal"><sp/><sp/><sp/>stb__outfile<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="10788"><highlight class="normal"></highlight></codeline>
<codeline lineno="10789"><highlight class="normal"><sp/><sp/><sp/>stb_compress_inner(input,<sp/>length);</highlight></codeline>
<codeline lineno="10790"><highlight class="normal"></highlight></codeline>
<codeline lineno="10791"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(stb_uint)<sp/>(stb__out<sp/>-<sp/>out);</highlight></codeline>
<codeline lineno="10792"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10793"><highlight class="normal"></highlight></codeline>
<codeline lineno="10794"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_compress_tofile(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)</highlight></codeline>
<codeline lineno="10795"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10796"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//int<sp/>maxlen<sp/>=<sp/>length<sp/>+<sp/>512<sp/>+<sp/>(length<sp/>&gt;&gt;<sp/>2);<sp/>//<sp/>total<sp/>guess</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10797"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//char<sp/>*buffer<sp/>=<sp/>(char<sp/>*)<sp/>malloc(maxlen);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10798"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//int<sp/>blen<sp/>=<sp/>stb_compress((stb_uchar*)buffer,<sp/>(stb_uchar*)input,<sp/>length);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10799"><highlight class="normal"></highlight></codeline>
<codeline lineno="10800"><highlight class="normal"><sp/><sp/><sp/>stb__out<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="10801"><highlight class="normal"><sp/><sp/><sp/>stb__outfile<sp/>=<sp/>stb_p_fopen(filename,<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10802"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb__outfile)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="10803"><highlight class="normal"></highlight></codeline>
<codeline lineno="10804"><highlight class="normal"><sp/><sp/><sp/>stb__outbytes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="10805"><highlight class="normal"></highlight></codeline>
<codeline lineno="10806"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb_compress_inner((stb_uchar*)input,<sp/>length))</highlight></codeline>
<codeline lineno="10807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="10808"><highlight class="normal"></highlight></codeline>
<codeline lineno="10809"><highlight class="normal"><sp/><sp/><sp/>fclose(stb__outfile);</highlight></codeline>
<codeline lineno="10810"><highlight class="normal"></highlight></codeline>
<codeline lineno="10811"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb__outbytes;</highlight></codeline>
<codeline lineno="10812"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10813"><highlight class="normal"></highlight></codeline>
<codeline lineno="10814"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_compress_intofile(FILE<sp/>*f,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)</highlight></codeline>
<codeline lineno="10815"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10816"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//int<sp/>maxlen<sp/>=<sp/>length<sp/>+<sp/>512<sp/>+<sp/>(length<sp/>&gt;&gt;<sp/>2);<sp/>//<sp/>total<sp/>guess</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10817"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//char<sp/>*buffer<sp/>=<sp/>(char*)malloc(maxlen);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10818"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//int<sp/>blen<sp/>=<sp/>stb_compress((stb_uchar*)buffer,<sp/>(stb_uchar*)input,<sp/>length);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10819"><highlight class="normal"></highlight></codeline>
<codeline lineno="10820"><highlight class="normal"><sp/><sp/><sp/>stb__out<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="10821"><highlight class="normal"><sp/><sp/><sp/>stb__outfile<sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="10822"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb__outfile)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="10823"><highlight class="normal"></highlight></codeline>
<codeline lineno="10824"><highlight class="normal"><sp/><sp/><sp/>stb__outbytes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="10825"><highlight class="normal"></highlight></codeline>
<codeline lineno="10826"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb_compress_inner((stb_uchar*)input,<sp/>length))</highlight></codeline>
<codeline lineno="10827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="10828"><highlight class="normal"></highlight></codeline>
<codeline lineno="10829"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb__outbytes;</highlight></codeline>
<codeline lineno="10830"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10831"><highlight class="normal"></highlight></codeline>
<codeline lineno="10833"><highlight class="normal"></highlight></codeline>
<codeline lineno="10834"><highlight class="normal"></highlight></codeline>
<codeline lineno="10835"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>stb_out_backpatch_id(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="10836"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10837"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__out)</highlight></codeline>
<codeline lineno="10838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>stb__out;</highlight></codeline>
<codeline lineno="10839"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ftell(stb__outfile);</highlight></codeline>
<codeline lineno="10841"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10842"><highlight class="normal"></highlight></codeline>
<codeline lineno="10843"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_out_backpatch(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>stb_uint<sp/><ref refid="classvalue" kindref="compound">value</ref>)</highlight></codeline>
<codeline lineno="10844"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10845"><highlight class="normal"><sp/><sp/><sp/>stb_uchar<sp/>data[4]<sp/>=<sp/>{<sp/>(stb_uchar)(<ref refid="classvalue" kindref="compound">value</ref><sp/>&gt;&gt;<sp/>24),<sp/>(stb_uchar)(<ref refid="classvalue" kindref="compound">value</ref><sp/>&gt;&gt;<sp/>16),<sp/>(stb_uchar)(<ref refid="classvalue" kindref="compound">value</ref><sp/>&gt;&gt;<sp/>8),<sp/>(stb_uchar)(<ref refid="classvalue" kindref="compound">value</ref>)<sp/>};</highlight></codeline>
<codeline lineno="10846"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__out)<sp/>{</highlight></codeline>
<codeline lineno="10847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>data,<sp/>4);</highlight></codeline>
<codeline lineno="10848"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="10849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_uint<sp/>where<sp/>=<sp/>ftell(stb__outfile);</highlight></codeline>
<codeline lineno="10850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fseek(stb__outfile,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>SEEK_SET);</highlight></codeline>
<codeline lineno="10851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(data,<sp/>4,<sp/>1,<sp/>stb__outfile);</highlight></codeline>
<codeline lineno="10852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fseek(stb__outfile,<sp/>where,<sp/>SEEK_SET);</highlight></codeline>
<codeline lineno="10853"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10854"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10855"><highlight class="normal"></highlight></codeline>
<codeline lineno="10856"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ok,<sp/>the<sp/>wraparound<sp/>buffer<sp/>was<sp/>a<sp/>total<sp/>failure.<sp/>let&apos;s<sp/>instead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10857"><highlight class="normal"></highlight><highlight class="comment">//<sp/>use<sp/>a<sp/>copying-in-place<sp/>buffer,<sp/>which<sp/>lets<sp/>us<sp/>share<sp/>the<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10858"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>way<sp/>less<sp/>efficient<sp/>but<sp/>it&apos;ll<sp/>do<sp/>for<sp/>now.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10859"><highlight class="normal"></highlight></codeline>
<codeline lineno="10860"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10861"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10862"><highlight class="normal"><sp/><sp/><sp/>stb_uchar<sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>;</highlight></codeline>
<codeline lineno="10863"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>physical<sp/>size<sp/>of<sp/>buffer<sp/>in<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10864"><highlight class="normal"></highlight></codeline>
<codeline lineno="10865"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>valid;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>amount<sp/>of<sp/>valid<sp/>data<sp/>in<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10866"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bytes<sp/>of<sp/>data<sp/>already<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10867"><highlight class="normal"></highlight></codeline>
<codeline lineno="10868"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>window;</highlight></codeline>
<codeline lineno="10869"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fsize;</highlight></codeline>
<codeline lineno="10870"><highlight class="normal"></highlight></codeline>
<codeline lineno="10871"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pending_literals;<sp/></highlight><highlight class="comment">//<sp/>bytes<sp/>not-quite<sp/>output<sp/>but<sp/>counted<sp/>in<sp/>start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10872"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length_id;</highlight></codeline>
<codeline lineno="10873"><highlight class="normal"></highlight></codeline>
<codeline lineno="10874"><highlight class="normal"><sp/><sp/><sp/>stb_uint<sp/>total_bytes;</highlight></codeline>
<codeline lineno="10875"><highlight class="normal"></highlight></codeline>
<codeline lineno="10876"><highlight class="normal"><sp/><sp/><sp/>stb_uchar<sp/>**chash;</highlight></codeline>
<codeline lineno="10877"><highlight class="normal"><sp/><sp/><sp/>stb_uint<sp/><sp/><sp/><sp/>hashmask;</highlight></codeline>
<codeline lineno="10878"><highlight class="normal">}<sp/>xtb;</highlight></codeline>
<codeline lineno="10879"><highlight class="normal"></highlight></codeline>
<codeline lineno="10880"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_compress_streaming_start(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="10881"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10882"><highlight class="normal"><sp/><sp/><sp/>stb_uint<sp/>i;</highlight></codeline>
<codeline lineno="10883"><highlight class="normal"><sp/><sp/><sp/>xtb.size<sp/>=<sp/>stb__window<sp/>*<sp/>3;</highlight></codeline>
<codeline lineno="10884"><highlight class="normal"><sp/><sp/><sp/>xtb.buffer<sp/>=<sp/>(stb_uchar*)malloc(xtb.size);</highlight></codeline>
<codeline lineno="10885"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!xtb.buffer)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="10886"><highlight class="normal"></highlight></codeline>
<codeline lineno="10887"><highlight class="normal"><sp/><sp/><sp/>xtb.chash<sp/>=<sp/>(stb_uchar**)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*xtb.chash)<sp/>*<sp/>stb__hashsize);</highlight></codeline>
<codeline lineno="10888"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!xtb.chash)<sp/>{</highlight></codeline>
<codeline lineno="10889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(xtb.buffer);</highlight></codeline>
<codeline lineno="10890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="10891"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10892"><highlight class="normal"></highlight></codeline>
<codeline lineno="10893"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stb__hashsize;<sp/>++i)</highlight></codeline>
<codeline lineno="10894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xtb.chash[i]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="10895"><highlight class="normal"></highlight></codeline>
<codeline lineno="10896"><highlight class="normal"><sp/><sp/><sp/>xtb.hashmask<sp/>=<sp/>stb__hashsize-1;</highlight></codeline>
<codeline lineno="10897"><highlight class="normal"></highlight></codeline>
<codeline lineno="10898"><highlight class="normal"><sp/><sp/><sp/>xtb.valid<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="10899"><highlight class="normal"><sp/><sp/><sp/>xtb.start<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="10900"><highlight class="normal"><sp/><sp/><sp/>xtb.window<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>stb__window;</highlight></codeline>
<codeline lineno="10901"><highlight class="normal"><sp/><sp/><sp/>xtb.fsize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>stb__window;</highlight></codeline>
<codeline lineno="10902"><highlight class="normal"><sp/><sp/><sp/>xtb.pending_literals<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="10903"><highlight class="normal"><sp/><sp/><sp/>xtb.total_bytes<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="10904"><highlight class="normal"></highlight></codeline>
<codeline lineno="10905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stream<sp/>signature</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10906"><highlight class="normal"><sp/><sp/><sp/>stb_out(0x57);<sp/>stb_out(0xbc);<sp/>stb_out2(0);</highlight></codeline>
<codeline lineno="10907"><highlight class="normal"></highlight></codeline>
<codeline lineno="10908"><highlight class="normal"><sp/><sp/><sp/>stb_out4(0);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>64-bit<sp/>length<sp/>requires<sp/>32-bit<sp/>leading<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10909"><highlight class="normal"></highlight></codeline>
<codeline lineno="10910"><highlight class="normal"><sp/><sp/><sp/>xtb.length_id<sp/>=<sp/>(int)<sp/>stb_out_backpatch_id();</highlight></codeline>
<codeline lineno="10911"><highlight class="normal"><sp/><sp/><sp/>stb_out4(0);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>don&apos;t<sp/>know<sp/>the<sp/>output<sp/>length<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10912"><highlight class="normal"></highlight></codeline>
<codeline lineno="10913"><highlight class="normal"><sp/><sp/><sp/>stb_out4(stb__window);</highlight></codeline>
<codeline lineno="10914"><highlight class="normal"></highlight></codeline>
<codeline lineno="10915"><highlight class="normal"><sp/><sp/><sp/>stb__running_adler<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="10916"><highlight class="normal"></highlight></codeline>
<codeline lineno="10917"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="10918"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10919"><highlight class="normal"></highlight></codeline>
<codeline lineno="10920"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_compress_streaming_end(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="10921"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10922"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>flush<sp/>out<sp/>any<sp/>remaining<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10923"><highlight class="normal"><sp/><sp/><sp/>stb_compress_chunk(xtb.buffer,<sp/>xtb.buffer+xtb.start,<sp/>xtb.buffer+xtb.valid,</highlight></codeline>
<codeline lineno="10924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xtb.valid-xtb.start,<sp/>&amp;xtb.pending_literals,<sp/>xtb.chash,<sp/>xtb.hashmask);</highlight></codeline>
<codeline lineno="10925"><highlight class="normal"></highlight></codeline>
<codeline lineno="10926"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>out<sp/>pending<sp/>literals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10927"><highlight class="normal"><sp/><sp/><sp/>outliterals(xtb.buffer<sp/>+<sp/>xtb.valid<sp/>-<sp/>xtb.pending_literals,<sp/>xtb.pending_literals);</highlight></codeline>
<codeline lineno="10928"><highlight class="normal"></highlight></codeline>
<codeline lineno="10929"><highlight class="normal"><sp/><sp/><sp/>stb_out2(0x05fa);<sp/></highlight><highlight class="comment">//<sp/>end<sp/>opcode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10930"><highlight class="normal"><sp/><sp/><sp/>stb_out4(stb__running_adler);</highlight></codeline>
<codeline lineno="10931"><highlight class="normal"></highlight></codeline>
<codeline lineno="10932"><highlight class="normal"><sp/><sp/><sp/>stb_out_backpatch(xtb.length_id,<sp/>xtb.total_bytes);</highlight></codeline>
<codeline lineno="10933"><highlight class="normal"></highlight></codeline>
<codeline lineno="10934"><highlight class="normal"><sp/><sp/><sp/>free(xtb.buffer);</highlight></codeline>
<codeline lineno="10935"><highlight class="normal"><sp/><sp/><sp/>free(xtb.chash);</highlight></codeline>
<codeline lineno="10936"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="10937"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10938"><highlight class="normal"></highlight></codeline>
<codeline lineno="10939"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_write(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data_len)</highlight></codeline>
<codeline lineno="10940"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10941"><highlight class="normal"><sp/><sp/><sp/>stb_uint<sp/>i;</highlight></codeline>
<codeline lineno="10942"><highlight class="normal"></highlight></codeline>
<codeline lineno="10943"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO:<sp/>fast<sp/>path<sp/>for<sp/>filling<sp/>the<sp/>buffer<sp/>and<sp/>doing<sp/>nothing<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10944"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(xtb.valid<sp/>+<sp/>data_len<sp/>&lt;<sp/>xtb.size)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10945"><highlight class="normal"></highlight></codeline>
<codeline lineno="10946"><highlight class="normal"><sp/><sp/><sp/>xtb.total_bytes<sp/>+=<sp/>data_len;</highlight></codeline>
<codeline lineno="10947"><highlight class="normal"></highlight></codeline>
<codeline lineno="10948"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(data_len)<sp/>{</highlight></codeline>
<codeline lineno="10949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xtb.valid<sp/>&lt;<sp/>xtb.size)<sp/>{</highlight></codeline>
<codeline lineno="10951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>amt<sp/>=<sp/>xtb.size<sp/>-<sp/>xtb.valid;</highlight></codeline>
<codeline lineno="10952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data_len<sp/>&lt;<sp/>amt)<sp/>amt<sp/>=<sp/>data_len;</highlight></codeline>
<codeline lineno="10953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(xtb.buffer<sp/>+<sp/>xtb.valid,<sp/>data,<sp/>amt);</highlight></codeline>
<codeline lineno="10954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_len<sp/>-=<sp/>amt;</highlight></codeline>
<codeline lineno="10955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/><sp/><sp/><sp/><sp/>+=<sp/>amt;</highlight></codeline>
<codeline lineno="10956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xtb.valid<sp/>+=<sp/>amt;</highlight></codeline>
<codeline lineno="10957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xtb.valid<sp/>&lt;<sp/>xtb.size)</highlight></codeline>
<codeline lineno="10959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10960"><highlight class="normal"></highlight></codeline>
<codeline lineno="10961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>at<sp/>this<sp/>point,<sp/>the<sp/>buffer<sp/>is<sp/>full</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10962"><highlight class="normal"></highlight></codeline>
<codeline lineno="10963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>can<sp/>process<sp/>some<sp/>data,<sp/>go<sp/>for<sp/>it;<sp/>make<sp/>sure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>leave<sp/>an<sp/>&apos;fsize&apos;s<sp/>worth<sp/>of<sp/>data,<sp/>though</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xtb.start<sp/>+<sp/>xtb.fsize<sp/>&lt;<sp/>xtb.valid)<sp/>{</highlight></codeline>
<codeline lineno="10966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>amount<sp/>=<sp/>(xtb.valid<sp/>-<sp/>xtb.fsize)<sp/>-<sp/>xtb.start;</highlight></codeline>
<codeline lineno="10967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="10968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(amount<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="10969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>stb_compress_chunk(xtb.buffer,<sp/>xtb.buffer<sp/>+<sp/>xtb.start,<sp/>xtb.buffer<sp/>+<sp/>xtb.valid,</highlight></codeline>
<codeline lineno="10970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amount,<sp/>&amp;xtb.pending_literals,<sp/>xtb.chash,<sp/>xtb.hashmask);</highlight></codeline>
<codeline lineno="10971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xtb.start<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="10972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10973"><highlight class="normal"></highlight></codeline>
<codeline lineno="10974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(xtb.start<sp/>+<sp/>xtb.fsize<sp/>&gt;=<sp/>xtb.valid);</highlight></codeline>
<codeline lineno="10975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>at<sp/>this<sp/>point,<sp/>our<sp/>future<sp/>size<sp/>is<sp/>too<sp/>small,<sp/>so<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>flush<sp/>some<sp/>history.<sp/>we,<sp/>in<sp/>fact,<sp/>flush<sp/>exactly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>one<sp/>window&apos;s<sp/>worth<sp/>of<sp/>history</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10978"><highlight class="normal"></highlight></codeline>
<codeline lineno="10979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flush<sp/>=<sp/>xtb.window;</highlight></codeline>
<codeline lineno="10981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(xtb.start<sp/>&gt;=<sp/>flush);</highlight></codeline>
<codeline lineno="10982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(xtb.valid<sp/>&gt;=<sp/>flush);</highlight></codeline>
<codeline lineno="10983"><highlight class="normal"></highlight></codeline>
<codeline lineno="10984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>&apos;pending<sp/>literals&apos;<sp/>extends<sp/>back<sp/>into<sp/>the<sp/>shift<sp/>region,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>them<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xtb.start<sp/>-<sp/>xtb.pending_literals<sp/>&lt;<sp/>flush)<sp/>{</highlight></codeline>
<codeline lineno="10987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outliterals(xtb.buffer<sp/>+<sp/>xtb.start<sp/>-<sp/>xtb.pending_literals,<sp/>xtb.pending_literals);</highlight></codeline>
<codeline lineno="10988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xtb.pending_literals<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="10989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10990"><highlight class="normal"></highlight></codeline>
<codeline lineno="10991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>shift<sp/>the<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(xtb.buffer,<sp/>xtb.buffer<sp/>+<sp/>flush,<sp/>xtb.valid<sp/>-<sp/>flush);</highlight></codeline>
<codeline lineno="10993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xtb.start<sp/>-=<sp/>flush;</highlight></codeline>
<codeline lineno="10994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xtb.valid<sp/>-=<sp/>flush;</highlight></codeline>
<codeline lineno="10995"><highlight class="normal"></highlight></codeline>
<codeline lineno="10996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;=<sp/>xtb.hashmask;<sp/>++i)</highlight></codeline>
<codeline lineno="10997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xtb.chash[i]<sp/>&lt;<sp/>xtb.buffer<sp/>+<sp/>flush)</highlight></codeline>
<codeline lineno="10998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xtb.chash[i]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="10999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xtb.chash[i]<sp/>-=<sp/>flush;</highlight></codeline>
<codeline lineno="11001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>now<sp/>that<sp/>we&apos;ve<sp/>made<sp/>room<sp/>for<sp/>more<sp/>data,<sp/>go<sp/>back<sp/>to<sp/>the<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11003"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11004"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11005"><highlight class="normal"></highlight></codeline>
<codeline lineno="11006"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_compress_stream_start(FILE<sp/>*f)</highlight></codeline>
<codeline lineno="11007"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11008"><highlight class="normal"><sp/><sp/><sp/>stb__out<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="11009"><highlight class="normal"><sp/><sp/><sp/>stb__outfile<sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="11010"><highlight class="normal"></highlight></codeline>
<codeline lineno="11011"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="11012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="11013"><highlight class="normal"></highlight></codeline>
<codeline lineno="11014"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb_compress_streaming_start())</highlight></codeline>
<codeline lineno="11015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="11016"><highlight class="normal"></highlight></codeline>
<codeline lineno="11017"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="11018"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11019"><highlight class="normal"></highlight></codeline>
<codeline lineno="11020"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_compress_stream_end(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>close)</highlight></codeline>
<codeline lineno="11021"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11022"><highlight class="normal"><sp/><sp/><sp/>stb_compress_streaming_end();</highlight></codeline>
<codeline lineno="11023"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(close<sp/>&amp;&amp;<sp/>stb__outfile)<sp/>{</highlight></codeline>
<codeline lineno="11024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fclose(stb__outfile);</highlight></codeline>
<codeline lineno="11025"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11026"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11027"><highlight class="normal"></highlight></codeline>
<codeline lineno="11028"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11029"><highlight class="normal"></highlight></codeline>
<codeline lineno="11031"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11032"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>File<sp/>abstraction...<sp/>tired<sp/>of<sp/>not<sp/>having<sp/>this...<sp/>we<sp/>can<sp/>write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11033"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>compressors<sp/>to<sp/>be<sp/>layers<sp/>over<sp/>these<sp/>that<sp/>auto-close<sp/>their<sp/>children.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11034"><highlight class="normal"></highlight></codeline>
<codeline lineno="11035"><highlight class="normal"></highlight></codeline>
<codeline lineno="11036" refid="structstbfile" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstbfile" kindref="compound">stbfile</ref></highlight></codeline>
<codeline lineno="11037"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11038"><highlight class="normal"><sp/><sp/><sp/>int<sp/>(*getbyte)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*);<sp/><sp/></highlight><highlight class="comment">//<sp/>-1<sp/>on<sp/>EOF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11039"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int<sp/>(*getdata)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*block,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="11040"><highlight class="normal"></highlight></codeline>
<codeline lineno="11041"><highlight class="normal"><sp/><sp/><sp/>int<sp/>(*putbyte)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gtx__raw__data_1gacd7fe1f2ad60a57f7d7ad4f1e6836efd" kindref="member">byte</ref>);</highlight></codeline>
<codeline lineno="11042"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int<sp/>(*putdata)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*block,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="11043"><highlight class="normal"></highlight></codeline>
<codeline lineno="11044"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int<sp/>(*size)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*);</highlight></codeline>
<codeline lineno="11045"><highlight class="normal"></highlight></codeline>
<codeline lineno="11046"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int<sp/>(*tell)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*);</highlight></codeline>
<codeline lineno="11047"><highlight class="normal"><sp/><sp/><sp/>void<sp/>(*backpatch)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tell,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*block,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="11048"><highlight class="normal"></highlight></codeline>
<codeline lineno="11049"><highlight class="normal"><sp/><sp/><sp/>void<sp/>(*close)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*);</highlight></codeline>
<codeline lineno="11050"><highlight class="normal"></highlight></codeline>
<codeline lineno="11051"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*f;<sp/><sp/></highlight><highlight class="comment">//<sp/>file<sp/>to<sp/>fread/fwrite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11052"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>;<sp/></highlight><highlight class="comment">//<sp/>input/output<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11053"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*indata,<sp/>*inend;<sp/></highlight><highlight class="comment">//<sp/>input<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11054"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="11055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>various;</highlight></codeline>
<codeline lineno="11056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr;</highlight></codeline>
<codeline lineno="11057"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="11058"><highlight class="normal">}<sp/><ref refid="structstbfile" kindref="compound">stbfile</ref>;</highlight></codeline>
<codeline lineno="11059"><highlight class="normal"></highlight></codeline>
<codeline lineno="11060"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_getc(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*f);<sp/></highlight><highlight class="comment">//<sp/>read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11061"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_putc(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch);<sp/></highlight><highlight class="comment">//<sp/>write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11062"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_getdata(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);<sp/></highlight><highlight class="comment">//<sp/>read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11063"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_putdata(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);<sp/></highlight><highlight class="comment">//<sp/>write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11064"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_tell(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*f);<sp/></highlight><highlight class="comment">//<sp/>read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11065"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_size(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*f);<sp/></highlight><highlight class="comment">//<sp/>read/write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11066"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_backpatch(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tell,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);<sp/></highlight><highlight class="comment">//<sp/>write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11067"><highlight class="normal"></highlight></codeline>
<codeline lineno="11068"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11069"><highlight class="normal"></highlight></codeline>
<codeline lineno="11070"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_getc(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*f)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f-&gt;getbyte(f);<sp/>}</highlight></codeline>
<codeline lineno="11071"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_putc(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch)<sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f-&gt;putbyte(f,<sp/>ch);<sp/>}</highlight></codeline>
<codeline lineno="11072"><highlight class="normal"></highlight></codeline>
<codeline lineno="11073"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_getdata(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="11074"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11075"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f-&gt;getdata(f,<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>len);</highlight></codeline>
<codeline lineno="11076"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11077"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_putdata(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="11078"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11079"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f-&gt;putdata(f,<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>len);</highlight></codeline>
<codeline lineno="11080"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11081"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_close(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*f)</highlight></codeline>
<codeline lineno="11082"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11083"><highlight class="normal"><sp/><sp/><sp/>f-&gt;close(f);</highlight></codeline>
<codeline lineno="11084"><highlight class="normal"><sp/><sp/><sp/>free(f);</highlight></codeline>
<codeline lineno="11085"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11086"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_tell(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*f)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f-&gt;tell(f);<sp/>}</highlight></codeline>
<codeline lineno="11087"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_size(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*f)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f-&gt;size(f);<sp/>}</highlight></codeline>
<codeline lineno="11088"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_backpatch(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tell,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="11089"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11090"><highlight class="normal"><sp/><sp/><sp/>f-&gt;backpatch(f,tell,<ref refid="classbuffer" kindref="compound">buffer</ref>,len);</highlight></codeline>
<codeline lineno="11091"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11092"><highlight class="normal"></highlight></codeline>
<codeline lineno="11093"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FILE<sp/>*<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11094"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__fgetbyte(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*f)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fgetc(f-&gt;f);<sp/>}</highlight></codeline>
<codeline lineno="11095"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__fputbyte(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fputc(ch,<sp/>f-&gt;f)==0;<sp/>}</highlight></codeline>
<codeline lineno="11096"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__fgetdata(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>fread(<ref refid="classbuffer" kindref="compound">buffer</ref>,1,len,f-&gt;f);<sp/>}</highlight></codeline>
<codeline lineno="11097"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__fputdata(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>fwrite(<ref refid="classbuffer" kindref="compound">buffer</ref>,1,len,f-&gt;f);<sp/>}</highlight></codeline>
<codeline lineno="11098"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__fsize(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*f)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>stb_filelen(f-&gt;f);<sp/>}</highlight></codeline>
<codeline lineno="11099"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__ftell(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*f)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>ftell(f-&gt;f);<sp/>}</highlight></codeline>
<codeline lineno="11100"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__fbackpatch(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>where,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="11101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11102"><highlight class="normal"><sp/><sp/><sp/>fseek(f-&gt;f,<sp/>where,<sp/>SEEK_SET);</highlight></codeline>
<codeline lineno="11103"><highlight class="normal"><sp/><sp/><sp/>fwrite(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>1,<sp/>len,<sp/>f-&gt;f);</highlight></codeline>
<codeline lineno="11104"><highlight class="normal"><sp/><sp/><sp/>fseek(f-&gt;f,<sp/>0,<sp/>SEEK_END);</highlight></codeline>
<codeline lineno="11105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11106"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__fclose(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*f)<sp/>{<sp/>fclose(f-&gt;f);<sp/>}</highlight></codeline>
<codeline lineno="11107"><highlight class="normal"></highlight></codeline>
<codeline lineno="11108"><highlight class="normal"><ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*stb_openf(FILE<sp/>*f)</highlight></codeline>
<codeline lineno="11109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11110"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>m<sp/>=<sp/>{<sp/>stb__fgetbyte,<sp/>stb__fgetdata,</highlight></codeline>
<codeline lineno="11111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__fputbyte,<sp/>stb__fputdata,</highlight></codeline>
<codeline lineno="11112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__fsize,<sp/>stb__ftell,<sp/>stb__fbackpatch,<sp/>stb__fclose,</highlight></codeline>
<codeline lineno="11113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,0,0,<sp/>};</highlight></codeline>
<codeline lineno="11114"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*z<sp/>=<sp/>(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*z));</highlight></codeline>
<codeline lineno="11115"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z)<sp/>{</highlight></codeline>
<codeline lineno="11116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*z<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="11117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;f<sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="11118"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11119"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z;</highlight></codeline>
<codeline lineno="11120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11121"><highlight class="normal"></highlight></codeline>
<codeline lineno="11122"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__nogetbyte(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*f)<sp/>{<sp/>assert(0);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;<sp/>}</highlight></codeline>
<codeline lineno="11123"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__nogetdata(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)<sp/>{<sp/>assert(0);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="11124"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__noputbyte(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch)<sp/>{<sp/>assert(0);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="11125"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__noputdata(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)<sp/>{<sp/>assert(0);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="11126"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__nobackpatch(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>where,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)<sp/>{<sp/>assert(0);<sp/>}</highlight></codeline>
<codeline lineno="11127"><highlight class="normal"></highlight></codeline>
<codeline lineno="11128"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__bgetbyte(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*s)</highlight></codeline>
<codeline lineno="11129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11130"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;indata<sp/>&lt;<sp/>s-&gt;inend)</highlight></codeline>
<codeline lineno="11131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*s-&gt;indata++;</highlight></codeline>
<codeline lineno="11132"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="11134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11135"><highlight class="normal"></highlight></codeline>
<codeline lineno="11136"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__bgetdata(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="11137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11138"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;indata<sp/>+<sp/>len<sp/>&gt;<sp/>s-&gt;inend)</highlight></codeline>
<codeline lineno="11139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int)<sp/>(s-&gt;inend<sp/>-<sp/>s-&gt;indata);</highlight></codeline>
<codeline lineno="11140"><highlight class="normal"><sp/><sp/><sp/>memcpy(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>s-&gt;indata,<sp/>len);</highlight></codeline>
<codeline lineno="11141"><highlight class="normal"><sp/><sp/><sp/>s-&gt;indata<sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="11142"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="11143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11144"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__bsize(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*s)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>(s-&gt;inend<sp/><sp/>-<sp/>s-&gt;buffer);<sp/>}</highlight></codeline>
<codeline lineno="11145"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__btell(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*s)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>(s-&gt;indata<sp/>-<sp/>s-&gt;buffer);<sp/>}</highlight></codeline>
<codeline lineno="11146"><highlight class="normal"></highlight></codeline>
<codeline lineno="11147"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__bclose(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*s)</highlight></codeline>
<codeline lineno="11148"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11149"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;various)</highlight></codeline>
<codeline lineno="11150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(s-&gt;buffer);</highlight></codeline>
<codeline lineno="11151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11152"><highlight class="normal"></highlight></codeline>
<codeline lineno="11153"><highlight class="normal"><ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*stb_open_inbuffer(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="11154"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11155"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>m<sp/>=<sp/>{<sp/>stb__bgetbyte,<sp/>stb__bgetdata,</highlight></codeline>
<codeline lineno="11156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__noputbyte,<sp/>stb__noputdata,</highlight></codeline>
<codeline lineno="11157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__bsize,<sp/>stb__btell,<sp/>stb__nobackpatch,<sp/>stb__bclose<sp/>};</highlight></codeline>
<codeline lineno="11158"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*z<sp/>=<sp/>(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*z));</highlight></codeline>
<codeline lineno="11159"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z)<sp/>{</highlight></codeline>
<codeline lineno="11160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*z<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="11161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;buffer<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>;</highlight></codeline>
<codeline lineno="11162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;indata<sp/>=<sp/>z-&gt;buffer;</highlight></codeline>
<codeline lineno="11163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;inend<sp/>=<sp/>z-&gt;indata<sp/>+<sp/>len;</highlight></codeline>
<codeline lineno="11164"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11165"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z;</highlight></codeline>
<codeline lineno="11166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11167"><highlight class="normal"></highlight></codeline>
<codeline lineno="11168"><highlight class="normal"><ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*stb_open_inbuffer_free(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="11169"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11170"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*z<sp/>=<sp/>stb_open_inbuffer(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>len);</highlight></codeline>
<codeline lineno="11171"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z)</highlight></codeline>
<codeline lineno="11172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;various<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>free</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11173"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z;</highlight></codeline>
<codeline lineno="11174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11175"><highlight class="normal"></highlight></codeline>
<codeline lineno="11176"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_VERSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>we&apos;ve<sp/>been<sp/>cut-and-pasted<sp/>elsewhere,<sp/>you<sp/>get<sp/>a<sp/>limited</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>version<sp/>of<sp/>stb_open,<sp/>without<sp/>the<sp/>&apos;k&apos;<sp/>flag<sp/>and<sp/>utf8<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11179"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__fclose2(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*f)</highlight></codeline>
<codeline lineno="11180"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11181"><highlight class="normal"><sp/><sp/><sp/>fclose(f-&gt;f);</highlight></codeline>
<codeline lineno="11182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11183"><highlight class="normal"></highlight></codeline>
<codeline lineno="11184"><highlight class="normal"><ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*stb_open(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mode)</highlight></codeline>
<codeline lineno="11185"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11186"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*f<sp/>=<sp/>stb_p_fopen(filename,<sp/>mode);</highlight></codeline>
<codeline lineno="11187"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*s;</highlight></codeline>
<codeline lineno="11188"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="11189"><highlight class="normal"><sp/><sp/><sp/>s<sp/>=<sp/>stb_openf(f);</highlight></codeline>
<codeline lineno="11190"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)</highlight></codeline>
<codeline lineno="11191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;close<sp/>=<sp/>stb__fclose2;</highlight></codeline>
<codeline lineno="11192"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="11193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11194"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11195"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>full<sp/>version<sp/>depends<sp/>on<sp/>some<sp/>code<sp/>in<sp/>stb.h;<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11196"><highlight class="normal"></highlight><highlight class="comment">//<sp/>also<sp/>includes<sp/>the<sp/>memory<sp/>buffer<sp/>output<sp/>format<sp/>implemented<sp/>with<sp/>stb_arr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11197"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__fclose2(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*f)</highlight></codeline>
<codeline lineno="11198"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11199"><highlight class="normal"><sp/><sp/><sp/>stb_fclose(f-&gt;f,<sp/>f-&gt;various);</highlight></codeline>
<codeline lineno="11200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11201"><highlight class="normal"></highlight></codeline>
<codeline lineno="11202"><highlight class="normal"><ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*stb_open(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mode)</highlight></codeline>
<codeline lineno="11203"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11204"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*f<sp/>=<sp/>stb_fopen(filename,<sp/>mode[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;k&apos;</highlight><highlight class="normal"><sp/>?<sp/>mode+1<sp/>:<sp/>mode);</highlight></codeline>
<codeline lineno="11205"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*s;</highlight></codeline>
<codeline lineno="11206"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="11207"><highlight class="normal"><sp/><sp/><sp/>s<sp/>=<sp/>stb_openf(f);</highlight></codeline>
<codeline lineno="11208"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)<sp/>{</highlight></codeline>
<codeline lineno="11209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;close<sp/>=<sp/>stb__fclose2;</highlight></codeline>
<codeline lineno="11210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;various<sp/>=<sp/>mode[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;k&apos;</highlight><highlight class="normal"><sp/>?<sp/>stb_keep_if_different<sp/>:<sp/>stb_keep_yes;</highlight></codeline>
<codeline lineno="11211"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11212"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="11213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11214"><highlight class="normal"></highlight></codeline>
<codeline lineno="11215"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__aputbyte(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch)</highlight></codeline>
<codeline lineno="11216"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11217"><highlight class="normal"><sp/><sp/><sp/>stb_arr_push(f-&gt;buffer,<sp/>ch);</highlight></codeline>
<codeline lineno="11218"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="11219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11220"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__aputdata(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="11221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11222"><highlight class="normal"><sp/><sp/><sp/>memcpy(stb_arr_addn(f-&gt;buffer,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>len),<sp/>data,<sp/>len);</highlight></codeline>
<codeline lineno="11223"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="11224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11225"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__asize(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*f)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_arr_len(f-&gt;buffer);<sp/>}</highlight></codeline>
<codeline lineno="11226"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__abackpatch(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*f,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>where,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="11227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11228"><highlight class="normal"><sp/><sp/><sp/>memcpy(f-&gt;buffer+where,<sp/>data,<sp/>len);</highlight></codeline>
<codeline lineno="11229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11230"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__aclose(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*f)</highlight></codeline>
<codeline lineno="11231"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11232"><highlight class="normal"><sp/><sp/><sp/>*(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)<sp/>f-&gt;ptr<sp/>=<sp/>f-&gt;buffer;</highlight></codeline>
<codeline lineno="11233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11234"><highlight class="normal"></highlight></codeline>
<codeline lineno="11235"><highlight class="normal"><ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*stb_open_outbuffer(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**update_on_close)</highlight></codeline>
<codeline lineno="11236"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11237"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>m<sp/>=<sp/>{<sp/>stb__nogetbyte,<sp/>stb__nogetdata,</highlight></codeline>
<codeline lineno="11238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__aputbyte,<sp/>stb__aputdata,</highlight></codeline>
<codeline lineno="11239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__asize,<sp/>stb__asize,<sp/>stb__abackpatch,<sp/>stb__aclose<sp/>};</highlight></codeline>
<codeline lineno="11240"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*z<sp/>=<sp/>(<ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*z));</highlight></codeline>
<codeline lineno="11241"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z)<sp/>{</highlight></codeline>
<codeline lineno="11242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z-&gt;ptr<sp/>=<sp/>update_on_close;</highlight></codeline>
<codeline lineno="11243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*z<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="11244"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11245"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z;</highlight></codeline>
<codeline lineno="11246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11247"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11248"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11249"><highlight class="normal"></highlight></codeline>
<codeline lineno="11250"><highlight class="normal"></highlight></codeline>
<codeline lineno="11252"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11253"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Arithmetic<sp/>coder...<sp/>based<sp/>on<sp/>cbloom&apos;s<sp/>notes<sp/>on<sp/>the<sp/>subject,<sp/>should<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11254"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>less<sp/>code<sp/>than<sp/>a<sp/>huffman<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11255"><highlight class="normal"></highlight></codeline>
<codeline lineno="11256" refid="structstb__arith" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11257"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11258"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>range_low;</highlight></codeline>
<codeline lineno="11259"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>range_high;</highlight></codeline>
<codeline lineno="11260"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code,<sp/>range;<sp/></highlight><highlight class="comment">//<sp/>decode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11261"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buffered_u8;</highlight></codeline>
<codeline lineno="11262"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pending_ffs;</highlight></codeline>
<codeline lineno="11263"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*<ref refid="structoutput" kindref="compound">output</ref>;</highlight></codeline>
<codeline lineno="11264"><highlight class="normal">}<sp/><ref refid="structstb__arith" kindref="compound">stb_arith</ref>;</highlight></codeline>
<codeline lineno="11265"><highlight class="normal"></highlight></codeline>
<codeline lineno="11266"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_arith_init_encode(<ref refid="structstb__arith" kindref="compound">stb_arith</ref><sp/>*a,<sp/><ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*out);</highlight></codeline>
<codeline lineno="11267"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_arith_init_decode(<ref refid="structstb__arith" kindref="compound">stb_arith</ref><sp/>*a,<sp/><ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*in);</highlight></codeline>
<codeline lineno="11268"><highlight class="normal">STB_EXTERN<sp/><ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*stb_arith_encode_close(<ref refid="structstb__arith" kindref="compound">stb_arith</ref><sp/>*a);</highlight></codeline>
<codeline lineno="11269"><highlight class="normal">STB_EXTERN<sp/><ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*stb_arith_decode_close(<ref refid="structstb__arith" kindref="compound">stb_arith</ref><sp/>*a);</highlight></codeline>
<codeline lineno="11270"><highlight class="normal"></highlight></codeline>
<codeline lineno="11271"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_arith_encode(<ref refid="structstb__arith" kindref="compound">stb_arith</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalfreq,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>freq,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cumfreq);</highlight></codeline>
<codeline lineno="11272"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_arith_encode_log2(<ref refid="structstb__arith" kindref="compound">stb_arith</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalfreq2,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>freq,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cumfreq);</highlight></codeline>
<codeline lineno="11273"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_arith_decode_value(<ref refid="structstb__arith" kindref="compound">stb_arith</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalfreq);</highlight></codeline>
<codeline lineno="11274"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_arith_decode_advance(<ref refid="structstb__arith" kindref="compound">stb_arith</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalfreq,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>freq,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cumfreq);</highlight></codeline>
<codeline lineno="11275"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_arith_decode_value_log2(<ref refid="structstb__arith" kindref="compound">stb_arith</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalfreq2);</highlight></codeline>
<codeline lineno="11276"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_arith_decode_advance_log2(<ref refid="structstb__arith" kindref="compound">stb_arith</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalfreq2,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>freq,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cumfreq);</highlight></codeline>
<codeline lineno="11277"><highlight class="normal"></highlight></codeline>
<codeline lineno="11278"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_arith_encode_byte(<ref refid="structstb__arith" kindref="compound">stb_arith</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11279"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>stb_arith_decode_byte(<ref refid="structstb__arith" kindref="compound">stb_arith</ref><sp/>*a);</highlight></codeline>
<codeline lineno="11280"><highlight class="normal"></highlight></codeline>
<codeline lineno="11281"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>a<sp/>memory-inefficient<sp/>way<sp/>of<sp/>doing<sp/>things,<sp/>but<sp/>it&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11282"><highlight class="normal"></highlight><highlight class="comment">//<sp/>fast(?)<sp/>and<sp/>simple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11283" refid="structstb__arith__symstate__item" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11284"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11285"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>cumfreq;</highlight></codeline>
<codeline lineno="11286"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>samples;</highlight></codeline>
<codeline lineno="11287"><highlight class="normal">}<sp/><ref refid="structstb__arith__symstate__item" kindref="compound">stb_arith_symstate_item</ref>;</highlight></codeline>
<codeline lineno="11288"><highlight class="normal"></highlight></codeline>
<codeline lineno="11289" refid="structstb__arith__symstate" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11290"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11291"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_sym;</highlight></codeline>
<codeline lineno="11292"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gtx__optimum__pow_1ga19aaff3213bf23bdec3ef124ace237e9" kindref="member">pow2</ref>;</highlight></codeline>
<codeline lineno="11293"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>countdown;</highlight></codeline>
<codeline lineno="11294"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstb__arith__symstate__item" kindref="compound">stb_arith_symstate_item</ref><sp/>data[1];</highlight></codeline>
<codeline lineno="11295"><highlight class="normal">}<sp/><ref refid="structstb__arith__symstate" kindref="compound">stb_arith_symstate</ref>;</highlight></codeline>
<codeline lineno="11296"><highlight class="normal"></highlight></codeline>
<codeline lineno="11297"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11298"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_arith_init_encode(<ref refid="structstb__arith" kindref="compound">stb_arith</ref><sp/>*a,<sp/><ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*out)</highlight></codeline>
<codeline lineno="11299"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11300"><highlight class="normal"><sp/><sp/><sp/>a-&gt;range_low<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="11301"><highlight class="normal"><sp/><sp/><sp/>a-&gt;range_high<sp/>=<sp/>0xffffffff;</highlight></codeline>
<codeline lineno="11302"><highlight class="normal"><sp/><sp/><sp/>a-&gt;pending_ffs<sp/>=<sp/>-1;<sp/></highlight><highlight class="comment">//<sp/>means<sp/>no<sp/>buffered<sp/>character<sp/>currently,<sp/>to<sp/>speed<sp/>up<sp/>normal<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11303"><highlight class="normal"><sp/><sp/><sp/>a-&gt;output<sp/>=<sp/>out;</highlight></codeline>
<codeline lineno="11304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11305"><highlight class="normal"></highlight></codeline>
<codeline lineno="11306"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__arith_carry(<ref refid="structstb__arith" kindref="compound">stb_arith</ref><sp/>*a)</highlight></codeline>
<codeline lineno="11307"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11308"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="11309"><highlight class="normal"><sp/><sp/><sp/>assert(a-&gt;pending_ffs<sp/>!=<sp/>-1);<sp/></highlight><highlight class="comment">//<sp/>can&apos;t<sp/>carry<sp/>with<sp/>no<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11310"><highlight class="normal"><sp/><sp/><sp/>stb_putc(a-&gt;output,<sp/>a-&gt;buffered_u8);</highlight></codeline>
<codeline lineno="11311"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>a-&gt;pending_ffs;<sp/>++i)</highlight></codeline>
<codeline lineno="11312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_putc(a-&gt;output,<sp/>0);</highlight></codeline>
<codeline lineno="11313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11314"><highlight class="normal"></highlight></codeline>
<codeline lineno="11315"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__arith_putbyte(<ref refid="structstb__arith" kindref="compound">stb_arith</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="11316"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11317"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;pending_ffs)<sp/>{</highlight></codeline>
<codeline lineno="11318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;pending_ffs<sp/>==<sp/>-1)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>means<sp/>no<sp/>buffered<sp/>data;<sp/>encoded<sp/>for<sp/>fast<sp/>path<sp/>efficiency</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">byte</highlight><highlight class="normal"><sp/>==<sp/>0xff)</highlight></codeline>
<codeline lineno="11320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_putc(a-&gt;output,<sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>just<sp/>write<sp/>it<sp/>immediately</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="11322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;buffered_u8<sp/>=<sp/><ref refid="group__gtx__raw__data_1gacd7fe1f2ad60a57f7d7ad4f1e6836efd" kindref="member">byte</ref>;</highlight></codeline>
<codeline lineno="11323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;pending_ffs<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="11324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">byte</highlight><highlight class="normal"><sp/>==<sp/>0xff)<sp/>{</highlight></codeline>
<codeline lineno="11326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++a-&gt;pending_ffs;</highlight></codeline>
<codeline lineno="11327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="11328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="11329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_putc(a-&gt;output,<sp/>a-&gt;buffered_u8);</highlight></codeline>
<codeline lineno="11330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>a-&gt;pending_ffs;<sp/>++i)</highlight></codeline>
<codeline lineno="11331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_putc(a-&gt;output,<sp/>0xff);</highlight></codeline>
<codeline lineno="11332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11333"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">byte</highlight><highlight class="normal"><sp/>==<sp/>0xff)<sp/>{</highlight></codeline>
<codeline lineno="11334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++a-&gt;pending_ffs;</highlight></codeline>
<codeline lineno="11335"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="11336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fast<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_putc(a-&gt;output,<sp/>a-&gt;buffered_u8);</highlight></codeline>
<codeline lineno="11338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;buffered_u8<sp/>=<sp/><ref refid="group__gtx__raw__data_1gacd7fe1f2ad60a57f7d7ad4f1e6836efd" kindref="member">byte</ref>;</highlight></codeline>
<codeline lineno="11339"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11341"><highlight class="normal"></highlight></codeline>
<codeline lineno="11342"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__arith_flush(<ref refid="structstb__arith" kindref="compound">stb_arith</ref><sp/>*a)</highlight></codeline>
<codeline lineno="11343"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11344"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;pending_ffs<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="11345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="11346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_putc(a-&gt;output,<sp/>a-&gt;buffered_u8);</highlight></codeline>
<codeline lineno="11347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>a-&gt;pending_ffs;<sp/>++i)</highlight></codeline>
<codeline lineno="11348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_putc(a-&gt;output,<sp/>0xff);</highlight></codeline>
<codeline lineno="11349"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11351"><highlight class="normal"></highlight></codeline>
<codeline lineno="11352"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__renorm_encoder(<ref refid="structstb__arith" kindref="compound">stb_arith</ref><sp/>*a)</highlight></codeline>
<codeline lineno="11353"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11354"><highlight class="normal"><sp/><sp/><sp/>stb__arith_putbyte(a,<sp/>a-&gt;range_low<sp/>&gt;&gt;<sp/>24);</highlight></codeline>
<codeline lineno="11355"><highlight class="normal"><sp/><sp/><sp/>a-&gt;range_low<sp/>&lt;&lt;=<sp/>8;</highlight></codeline>
<codeline lineno="11356"><highlight class="normal"><sp/><sp/><sp/>a-&gt;range_high<sp/>=<sp/>(a-&gt;range_high<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>0xff;</highlight></codeline>
<codeline lineno="11357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11358"><highlight class="normal"></highlight></codeline>
<codeline lineno="11359"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__renorm_decoder(<ref refid="structstb__arith" kindref="compound">stb_arith</ref><sp/>*a)</highlight></codeline>
<codeline lineno="11360"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11361"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>stb_getc(a-&gt;output);</highlight></codeline>
<codeline lineno="11362"><highlight class="normal"><sp/><sp/><sp/>a-&gt;code<sp/>=<sp/>(a-&gt;code<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>(c<sp/>&gt;=<sp/>0<sp/>?<sp/>c<sp/>:<sp/>0);<sp/></highlight><highlight class="comment">//<sp/>if<sp/>EOF,<sp/>insert<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11364"><highlight class="normal"></highlight></codeline>
<codeline lineno="11365"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_arith_encode(<ref refid="structstb__arith" kindref="compound">stb_arith</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalfreq,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>freq,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cumfreq)</highlight></codeline>
<codeline lineno="11366"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11367"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>range<sp/>=<sp/>a-&gt;range_high<sp/>-<sp/>a-&gt;range_low;</highlight></codeline>
<codeline lineno="11368"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>old<sp/>=<sp/>a-&gt;range_low;</highlight></codeline>
<codeline lineno="11369"><highlight class="normal"><sp/><sp/><sp/>range<sp/>/=<sp/>totalfreq;</highlight></codeline>
<codeline lineno="11370"><highlight class="normal"><sp/><sp/><sp/>a-&gt;range_low<sp/>+=<sp/>range<sp/>*<sp/>cumfreq;</highlight></codeline>
<codeline lineno="11371"><highlight class="normal"><sp/><sp/><sp/>a-&gt;range_high<sp/>=<sp/>a-&gt;range_low<sp/>+<sp/>range*freq;</highlight></codeline>
<codeline lineno="11372"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;range_low<sp/>&lt;<sp/>old)</highlight></codeline>
<codeline lineno="11373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__arith_carry(a);</highlight></codeline>
<codeline lineno="11374"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(a-&gt;range_high<sp/>-<sp/>a-&gt;range_low<sp/>&lt;<sp/>0x1000000)</highlight></codeline>
<codeline lineno="11375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__renorm_encoder(a);</highlight></codeline>
<codeline lineno="11376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11377"><highlight class="normal"></highlight></codeline>
<codeline lineno="11378"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_arith_encode_log2(<ref refid="structstb__arith" kindref="compound">stb_arith</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalfreq2,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>freq,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cumfreq)</highlight></codeline>
<codeline lineno="11379"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11380"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>range<sp/>=<sp/>a-&gt;range_high<sp/>-<sp/>a-&gt;range_low;</highlight></codeline>
<codeline lineno="11381"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>old<sp/>=<sp/>a-&gt;range_low;</highlight></codeline>
<codeline lineno="11382"><highlight class="normal"><sp/><sp/><sp/>range<sp/>&gt;&gt;=<sp/>totalfreq2;</highlight></codeline>
<codeline lineno="11383"><highlight class="normal"><sp/><sp/><sp/>a-&gt;range_low<sp/>+=<sp/>range<sp/>*<sp/>cumfreq;</highlight></codeline>
<codeline lineno="11384"><highlight class="normal"><sp/><sp/><sp/>a-&gt;range_high<sp/>=<sp/>a-&gt;range_low<sp/>+<sp/>range*freq;</highlight></codeline>
<codeline lineno="11385"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;range_low<sp/>&lt;<sp/>old)</highlight></codeline>
<codeline lineno="11386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__arith_carry(a);</highlight></codeline>
<codeline lineno="11387"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(a-&gt;range_high<sp/>-<sp/>a-&gt;range_low<sp/>&lt;<sp/>0x1000000)</highlight></codeline>
<codeline lineno="11388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__renorm_encoder(a);</highlight></codeline>
<codeline lineno="11389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11390"><highlight class="normal"></highlight></codeline>
<codeline lineno="11391"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_arith_decode_value(<ref refid="structstb__arith" kindref="compound">stb_arith</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalfreq)</highlight></codeline>
<codeline lineno="11392"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11393"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>freqsize<sp/>=<sp/>a-&gt;range<sp/>/<sp/>totalfreq;</highlight></codeline>
<codeline lineno="11394"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>a-&gt;code<sp/>/<sp/>freqsize;</highlight></codeline>
<codeline lineno="11395"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z<sp/>&gt;=<sp/>totalfreq<sp/>?<sp/>totalfreq-1<sp/>:<sp/>z;</highlight></codeline>
<codeline lineno="11396"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11397"><highlight class="normal"></highlight></codeline>
<codeline lineno="11398"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_arith_decode_advance(<ref refid="structstb__arith" kindref="compound">stb_arith</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalfreq,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>freq,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cumfreq)</highlight></codeline>
<codeline lineno="11399"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11400"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>freqsize<sp/>=<sp/>a-&gt;range<sp/>/<sp/>totalfreq;<sp/></highlight><highlight class="comment">//<sp/>@OPTIMIZE,<sp/>share<sp/>with<sp/>above<sp/>divide<sp/>somehow?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11401"><highlight class="normal"><sp/><sp/><sp/>a-&gt;code<sp/>-=<sp/>freqsize<sp/>*<sp/>cumfreq;</highlight></codeline>
<codeline lineno="11402"><highlight class="normal"><sp/><sp/><sp/>a-&gt;range<sp/>=<sp/>freqsize<sp/>*<sp/>freq;</highlight></codeline>
<codeline lineno="11403"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(a-&gt;range<sp/>&lt;<sp/>0x1000000)</highlight></codeline>
<codeline lineno="11404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__renorm_decoder(a);</highlight></codeline>
<codeline lineno="11405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11406"><highlight class="normal"></highlight></codeline>
<codeline lineno="11407"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_arith_decode_value_log2(<ref refid="structstb__arith" kindref="compound">stb_arith</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalfreq2)</highlight></codeline>
<codeline lineno="11408"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11409"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>freqsize<sp/>=<sp/>a-&gt;range<sp/>&gt;&gt;<sp/>totalfreq2;</highlight></codeline>
<codeline lineno="11410"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>a-&gt;code<sp/>/<sp/>freqsize;</highlight></codeline>
<codeline lineno="11411"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z<sp/>&gt;=<sp/>(1U&lt;&lt;totalfreq2)<sp/>?<sp/>(1U&lt;&lt;totalfreq2)-1<sp/>:<sp/>z;</highlight></codeline>
<codeline lineno="11412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11413"><highlight class="normal"></highlight></codeline>
<codeline lineno="11414"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_arith_decode_advance_log2(<ref refid="structstb__arith" kindref="compound">stb_arith</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalfreq2,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>freq,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cumfreq)</highlight></codeline>
<codeline lineno="11415"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11416"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>freqsize<sp/>=<sp/>a-&gt;range<sp/>&gt;&gt;<sp/>totalfreq2;</highlight></codeline>
<codeline lineno="11417"><highlight class="normal"><sp/><sp/><sp/>a-&gt;code<sp/>-=<sp/>freqsize<sp/>*<sp/>cumfreq;</highlight></codeline>
<codeline lineno="11418"><highlight class="normal"><sp/><sp/><sp/>a-&gt;range<sp/>=<sp/>freqsize<sp/>*<sp/>freq;</highlight></codeline>
<codeline lineno="11419"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(a-&gt;range<sp/>&lt;<sp/>0x1000000)</highlight></codeline>
<codeline lineno="11420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__renorm_decoder(a);</highlight></codeline>
<codeline lineno="11421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11422"><highlight class="normal"></highlight></codeline>
<codeline lineno="11423"><highlight class="normal"><ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*stb_arith_encode_close(<ref refid="structstb__arith" kindref="compound">stb_arith</ref><sp/>*a)</highlight></codeline>
<codeline lineno="11424"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11425"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>put<sp/>exactly<sp/>as<sp/>many<sp/>bytes<sp/>as<sp/>we&apos;ll<sp/>read,<sp/>so<sp/>we<sp/>can<sp/>turn<sp/>on/off<sp/>arithmetic<sp/>coding<sp/>in<sp/>a<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11426"><highlight class="normal"><sp/><sp/><sp/>stb__arith_putbyte(a,<sp/>a-&gt;range_low<sp/>&gt;&gt;<sp/>24);</highlight></codeline>
<codeline lineno="11427"><highlight class="normal"><sp/><sp/><sp/>stb__arith_putbyte(a,<sp/>a-&gt;range_low<sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="11428"><highlight class="normal"><sp/><sp/><sp/>stb__arith_putbyte(a,<sp/>a-&gt;range_low<sp/>&gt;&gt;<sp/><sp/>8);</highlight></codeline>
<codeline lineno="11429"><highlight class="normal"><sp/><sp/><sp/>stb__arith_putbyte(a,<sp/>a-&gt;range_low<sp/>&gt;&gt;<sp/><sp/>0);</highlight></codeline>
<codeline lineno="11430"><highlight class="normal"><sp/><sp/><sp/>stb__arith_flush(a);</highlight></codeline>
<codeline lineno="11431"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a-&gt;output;</highlight></codeline>
<codeline lineno="11432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11433"><highlight class="normal"></highlight></codeline>
<codeline lineno="11434"><highlight class="normal"><ref refid="structstbfile" kindref="compound">stbfile</ref><sp/>*stb_arith_decode_close(<ref refid="structstb__arith" kindref="compound">stb_arith</ref><sp/>*a)</highlight></codeline>
<codeline lineno="11435"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11436"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a-&gt;output;</highlight></codeline>
<codeline lineno="11437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11438"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11439"><highlight class="normal"></highlight></codeline>
<codeline lineno="11441"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11442"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Threads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11443"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11444"><highlight class="normal"></highlight></codeline>
<codeline lineno="11445"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11446"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_THREADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11447"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;threads<sp/>not<sp/>implemented<sp/>except<sp/>for<sp/>Windows&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11448"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11449"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11450"><highlight class="normal"></highlight></codeline>
<codeline lineno="11451"><highlight class="normal"></highlight><highlight class="comment">//<sp/>call<sp/>this<sp/>function<sp/>to<sp/>free<sp/>any<sp/>global<sp/>variables<sp/>for<sp/>memory<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11452"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_thread_cleanup(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11453"><highlight class="normal"></highlight></codeline>
<codeline lineno="11454"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>(*stb_thread_func)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="11455"><highlight class="normal"></highlight></codeline>
<codeline lineno="11456"><highlight class="normal"></highlight><highlight class="comment">//<sp/>do<sp/>not<sp/>rely<sp/>on<sp/>these<sp/>types,<sp/>this<sp/>is<sp/>an<sp/>implementation<sp/>detail.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11457"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compare<sp/>against<sp/>STB_THREAD_NULL<sp/>and<sp/>ST_SEMAPHORE_NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11458"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb_thread;</highlight></codeline>
<codeline lineno="11459"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb_semaphore;</highlight></codeline>
<codeline lineno="11460"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb_mutex;</highlight></codeline>
<codeline lineno="11461"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stb__sync<sp/>*stb_sync;</highlight></codeline>
<codeline lineno="11462"><highlight class="normal"></highlight></codeline>
<codeline lineno="11463"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_SEMAPHORE_NULL<sp/><sp/><sp/><sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11464"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_THREAD_NULL<sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11465"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_MUTEX_NULL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11466"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_SYNC_NULL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11467"><highlight class="normal"></highlight></codeline>
<codeline lineno="11468"><highlight class="normal"></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>number<sp/>of<sp/>processors<sp/>(limited<sp/>to<sp/>those<sp/>in<sp/>the<sp/>affinity<sp/>mask<sp/>for<sp/>this<sp/>process).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11469"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_processor_count(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11470"><highlight class="normal"></highlight><highlight class="comment">//<sp/>force<sp/>to<sp/>run<sp/>on<sp/>a<sp/>single<sp/>core<sp/>--<sp/>needed<sp/>for<sp/>RDTSC<sp/>to<sp/>work,<sp/>e.g.<sp/>for<sp/>iprof</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11471"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_force_uniprocessor(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11472"><highlight class="normal"></highlight></codeline>
<codeline lineno="11473"><highlight class="normal"></highlight><highlight class="comment">//<sp/>stb_work<sp/>functions:<sp/>queue<sp/>up<sp/>work<sp/>to<sp/>be<sp/>done<sp/>by<sp/>some<sp/>worker<sp/>threads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11474"><highlight class="normal"></highlight></codeline>
<codeline lineno="11475"><highlight class="normal"></highlight><highlight class="comment">//<sp/>set<sp/>number<sp/>of<sp/>threads<sp/>to<sp/>serve<sp/>the<sp/>queue;<sp/>you<sp/>can<sp/>change<sp/>this<sp/>on<sp/>the<sp/>fly,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11476"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>if<sp/>you<sp/>decrease<sp/>it,<sp/>it<sp/>won&apos;t<sp/>decrease<sp/>until<sp/>things<sp/>currently<sp/>on<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11477"><highlight class="normal"></highlight><highlight class="comment">//<sp/>queue<sp/>are<sp/>finished</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11478"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_work_numthreads(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="11479"><highlight class="normal"></highlight><highlight class="comment">//<sp/>set<sp/>maximum<sp/>number<sp/>of<sp/>units<sp/>in<sp/>the<sp/>queue;<sp/>you<sp/>can<sp/>only<sp/>set<sp/>this<sp/>BEFORE<sp/>running<sp/>any<sp/>work<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11480"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_work_maxunits(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="11481"><highlight class="normal"></highlight><highlight class="comment">//<sp/>enqueue<sp/>some<sp/>work<sp/>to<sp/>be<sp/>done<sp/>(can<sp/>do<sp/>this<sp/>from<sp/>any<sp/>thread,<sp/>or<sp/>even<sp/>from<sp/>a<sp/>piece<sp/>of<sp/>work);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11482"><highlight class="normal"></highlight><highlight class="comment">//<sp/>return<sp/>value<sp/>of<sp/>f<sp/>is<sp/>stored<sp/>in<sp/>*return_code<sp/>if<sp/>non-NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11483"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_work(stb_thread_func<sp/>f,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*d,<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**return_code);</highlight></codeline>
<codeline lineno="11484"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>above,<sp/>but<sp/>stb_sync_reach<sp/>is<sp/>called<sp/>on<sp/>&apos;rel&apos;<sp/>after<sp/>work<sp/>is<sp/>complete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11485"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_work_reach(stb_thread_func<sp/>f,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*d,<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**return_code,<sp/>stb_sync<sp/>rel);</highlight></codeline>
<codeline lineno="11486"><highlight class="normal"></highlight></codeline>
<codeline lineno="11487"><highlight class="normal"></highlight></codeline>
<codeline lineno="11488"><highlight class="normal"></highlight><highlight class="comment">//<sp/>necessary<sp/>to<sp/>call<sp/>this<sp/>when<sp/>using<sp/>volatile<sp/>to<sp/>order<sp/>writes/reads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11489"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_barrier(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11490"><highlight class="normal"></highlight></codeline>
<codeline lineno="11491"><highlight class="normal"></highlight><highlight class="comment">//<sp/>support<sp/>for<sp/>independent<sp/>queues<sp/>with<sp/>their<sp/>own<sp/>threads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11492"><highlight class="normal"></highlight></codeline>
<codeline lineno="11493"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stb__workqueue<sp/>stb_workqueue;</highlight></codeline>
<codeline lineno="11494"><highlight class="normal"></highlight></codeline>
<codeline lineno="11495"><highlight class="normal">STB_EXTERN<sp/>stb_workqueue*stb_workq_new(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numthreads,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_units);</highlight></codeline>
<codeline lineno="11496"><highlight class="normal">STB_EXTERN<sp/>stb_workqueue*stb_workq_new_flags(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numthreads,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_units,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>no_add_mutex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>no_remove_mutex);</highlight></codeline>
<codeline lineno="11497"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_workq_delete(stb_workqueue<sp/>*q);</highlight></codeline>
<codeline lineno="11498"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_workq_numthreads(stb_workqueue<sp/>*q,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="11499"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_workq(stb_workqueue<sp/>*q,<sp/>stb_thread_func<sp/>f,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*d,<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**return_code);</highlight></codeline>
<codeline lineno="11500"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_workq_reach(stb_workqueue<sp/>*q,<sp/>stb_thread_func<sp/>f,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*d,<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**return_code,<sp/>stb_sync<sp/>rel);</highlight></codeline>
<codeline lineno="11501"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_workq_length(stb_workqueue<sp/>*q);</highlight></codeline>
<codeline lineno="11502"><highlight class="normal"></highlight></codeline>
<codeline lineno="11503"><highlight class="normal">STB_EXTERN<sp/>stb_thread<sp/><sp/><sp/><sp/>stb_create_thread<sp/>(stb_thread_func<sp/>f,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*d);</highlight></codeline>
<codeline lineno="11504"><highlight class="normal">STB_EXTERN<sp/>stb_thread<sp/><sp/><sp/><sp/>stb_create_thread2(stb_thread_func<sp/>f,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*d,<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**return_code,<sp/>stb_semaphore<sp/>rel);</highlight></codeline>
<codeline lineno="11505"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_destroy_thread(stb_thread<sp/>t);</highlight></codeline>
<codeline lineno="11506"><highlight class="normal"></highlight></codeline>
<codeline lineno="11507"><highlight class="normal">STB_EXTERN<sp/>stb_semaphore<sp/>stb_sem_new(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_val);</highlight></codeline>
<codeline lineno="11508"><highlight class="normal">STB_EXTERN<sp/>stb_semaphore<sp/>stb_sem_new_extra(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_val,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start_val);</highlight></codeline>
<codeline lineno="11509"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_sem_delete<sp/>(stb_semaphore<sp/>s);</highlight></codeline>
<codeline lineno="11510"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_sem_waitfor(stb_semaphore<sp/>s);</highlight></codeline>
<codeline lineno="11511"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_sem_release(stb_semaphore<sp/>s);</highlight></codeline>
<codeline lineno="11512"><highlight class="normal"></highlight></codeline>
<codeline lineno="11513"><highlight class="normal">STB_EXTERN<sp/>stb_mutex<sp/><sp/><sp/><sp/><sp/>stb_mutex_new(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11514"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_mutex_delete(stb_mutex<sp/>m);</highlight></codeline>
<codeline lineno="11515"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_mutex_begin(stb_mutex<sp/>m);</highlight></codeline>
<codeline lineno="11516"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_mutex_end(stb_mutex<sp/>m);</highlight></codeline>
<codeline lineno="11517"><highlight class="normal"></highlight></codeline>
<codeline lineno="11518"><highlight class="normal">STB_EXTERN<sp/>stb_sync<sp/><sp/><sp/><sp/><sp/><sp/>stb_sync_new(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11519"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_sync_delete(stb_sync<sp/>s);</highlight></codeline>
<codeline lineno="11520"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_sync_set_target(stb_sync<sp/>s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count);</highlight></codeline>
<codeline lineno="11521"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_sync_reach_and_wait(stb_sync<sp/>s);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wait<sp/>for<sp/>&apos;target&apos;<sp/>reachers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11522"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_sync_reach(stb_sync<sp/>s);</highlight></codeline>
<codeline lineno="11523"><highlight class="normal"></highlight></codeline>
<codeline lineno="11524"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stb__threadqueue<sp/>stb_threadqueue;</highlight></codeline>
<codeline lineno="11525"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_THREADQ_DYNAMIC<sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11526"><highlight class="normal">STB_EXTERN<sp/>stb_threadqueue<sp/>*stb_threadq_new(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>item_size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_items,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>many_add,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>many_remove);</highlight></codeline>
<codeline lineno="11527"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_threadq_delete(stb_threadqueue<sp/>*tq);</highlight></codeline>
<codeline lineno="11528"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_threadq_get(stb_threadqueue<sp/>*tq,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structoutput" kindref="compound">output</ref>);</highlight></codeline>
<codeline lineno="11529"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_threadq_get_block(stb_threadqueue<sp/>*tq,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structoutput" kindref="compound">output</ref>);</highlight></codeline>
<codeline lineno="11530"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_threadq_add(stb_threadqueue<sp/>*tq,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*input);</highlight></codeline>
<codeline lineno="11531"><highlight class="normal"></highlight><highlight class="comment">//<sp/>can<sp/>return<sp/>FALSE<sp/>if<sp/>STB_THREADQ_DYNAMIC<sp/>and<sp/>attempt<sp/>to<sp/>grow<sp/>fails</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11532"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_threadq_add_block(stb_threadqueue<sp/>*tq,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*input);</highlight></codeline>
<codeline lineno="11533"><highlight class="normal"></highlight></codeline>
<codeline lineno="11534"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_THREADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11535"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11536"><highlight class="normal"></highlight></codeline>
<codeline lineno="11537"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11538"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11539"><highlight class="normal"><sp/><sp/><sp/>stb_thread_func<sp/>f;</highlight></codeline>
<codeline lineno="11540"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*d;</highlight></codeline>
<codeline lineno="11541"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**return_val;</highlight></codeline>
<codeline lineno="11542"><highlight class="normal"><sp/><sp/><sp/>stb_semaphore<sp/>sem;</highlight></codeline>
<codeline lineno="11543"><highlight class="normal">}<sp/>stb__thread;</highlight></codeline>
<codeline lineno="11544"><highlight class="normal"></highlight></codeline>
<codeline lineno="11545"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>initialized<sp/>along<sp/>all<sp/>possible<sp/>paths<sp/>to<sp/>create<sp/>threads,<sp/>therefore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11546"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>always<sp/>initialized<sp/>before<sp/>any<sp/>other<sp/>threads<sp/>are<sp/>create,<sp/>therefore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11547"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>free<sp/>of<sp/>races<sp/>AS<sp/>LONG<sp/>AS<sp/>you<sp/>only<sp/>create<sp/>threads<sp/>through<sp/>stb_*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11548"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb_mutex<sp/>stb__threadmutex,<sp/>stb__workmutex;</highlight></codeline>
<codeline lineno="11549"><highlight class="normal"></highlight></codeline>
<codeline lineno="11550"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__threadmutex_init(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="11551"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11552"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__threadmutex<sp/>==<sp/>STB_SEMAPHORE_NULL)<sp/>{</highlight></codeline>
<codeline lineno="11553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__threadmutex<sp/>=<sp/>stb_mutex_new();</highlight></codeline>
<codeline lineno="11554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__workmutex<sp/>=<sp/>stb_mutex_new();</highlight></codeline>
<codeline lineno="11555"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11557"><highlight class="normal"></highlight></codeline>
<codeline lineno="11558"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_THREAD_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11559"><highlight class="normal"></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>stb__t1=1,<sp/>stb__t2;</highlight></codeline>
<codeline lineno="11560"><highlight class="normal"></highlight></codeline>
<codeline lineno="11561"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__wait(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="11562"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11563"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="11564"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="11565"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)</highlight></codeline>
<codeline lineno="11566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>+=<sp/>1<sp/>/<sp/>(stb__t1+i);</highlight></codeline>
<codeline lineno="11567"><highlight class="normal"><sp/><sp/><sp/>stb__t2<sp/>=<sp/>z;</highlight></codeline>
<codeline lineno="11568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11569"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11570"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb__wait(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11571"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11572"><highlight class="normal"></highlight></codeline>
<codeline lineno="11573"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11574"><highlight class="normal"></highlight></codeline>
<codeline lineno="11575"><highlight class="normal"></highlight><highlight class="comment">//<sp/>avoid<sp/>including<sp/>windows.h<sp/>--<sp/>note<sp/>that<sp/>our<sp/>definitions<sp/>aren&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11576"><highlight class="normal"></highlight><highlight class="comment">//<sp/>exactly<sp/>the<sp/>same<sp/>(we<sp/>don&apos;t<sp/>define<sp/>the<sp/>security<sp/>descriptor<sp/>struct)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11577"><highlight class="normal"></highlight><highlight class="comment">//<sp/>so<sp/>if<sp/>you<sp/>want<sp/>to<sp/>include<sp/>windows.h,<sp/>make<sp/>sure<sp/>you<sp/>do<sp/>it<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11578"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;process.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11579"><highlight class="normal"></highlight></codeline>
<codeline lineno="11580"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_WINDOWS_<sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>windows.h<sp/>guard</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11581"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__IMPORT<sp/><sp/><sp/>STB_EXTERN<sp/>__declspec(dllimport)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11582"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__DW<sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11583"><highlight class="normal"></highlight></codeline>
<codeline lineno="11584"><highlight class="normal">STB__IMPORT<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>__stdcall<sp/>TerminateThread(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/>STB__DW);</highlight></codeline>
<codeline lineno="11585"><highlight class="normal">STB__IMPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><sp/>__stdcall<sp/>CreateSemaphoreA(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="group__gtc__reciprocal_1gae4bcbebee670c5ea155f0777b3acbd84" kindref="member">sec</ref>,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="11586"><highlight class="normal">STB__IMPORT<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>__stdcall<sp/>CloseHandle(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="11587"><highlight class="normal">STB__IMPORT<sp/>STB__DW<sp/>__stdcall<sp/>WaitForSingleObject(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/>STB__DW);</highlight></codeline>
<codeline lineno="11588"><highlight class="normal">STB__IMPORT<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>__stdcall<sp/>ReleaseSemaphore(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="11589"><highlight class="normal">STB__IMPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>__stdcall<sp/>Sleep(STB__DW);</highlight></codeline>
<codeline lineno="11590"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11591"><highlight class="normal"></highlight></codeline>
<codeline lineno="11592"><highlight class="normal"></highlight><highlight class="comment">//<sp/>necessary<sp/>to<sp/>call<sp/>this<sp/>when<sp/>using<sp/>volatile<sp/>to<sp/>order<sp/>writes/reads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11593"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_barrier(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="11594"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11595"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>MemoryBarrier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11596"><highlight class="normal"><sp/><sp/><sp/>MemoryBarrier();</highlight></codeline>
<codeline lineno="11597"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11598"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>temp;</highlight></codeline>
<codeline lineno="11599"><highlight class="normal"><sp/><sp/><sp/>__asm<sp/>xchg<sp/>temp,eax;</highlight></codeline>
<codeline lineno="11600"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11601"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11602"><highlight class="normal"></highlight></codeline>
<codeline lineno="11603"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__thread_run(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*t)</highlight></codeline>
<codeline lineno="11604"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11605"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*res;</highlight></codeline>
<codeline lineno="11606"><highlight class="normal"><sp/><sp/><sp/>stb__thread<sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>=<sp/>*<sp/>(stb__thread<sp/>*)<sp/>t;</highlight></codeline>
<codeline lineno="11607"><highlight class="normal"><sp/><sp/><sp/>free(t);</highlight></codeline>
<codeline lineno="11608"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="structinfo" kindref="compound">info</ref>.f(<ref refid="structinfo" kindref="compound">info</ref>.d);</highlight></codeline>
<codeline lineno="11609"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structinfo" kindref="compound">info</ref>.return_val)</highlight></codeline>
<codeline lineno="11610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="structinfo" kindref="compound">info</ref>.return_val<sp/>=<sp/>res;</highlight></codeline>
<codeline lineno="11611"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structinfo" kindref="compound">info</ref>.sem<sp/>!=<sp/>STB_SEMAPHORE_NULL)</highlight></codeline>
<codeline lineno="11612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_sem_release(<ref refid="structinfo" kindref="compound">info</ref>.sem);</highlight></codeline>
<codeline lineno="11613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11614"><highlight class="normal"></highlight></codeline>
<codeline lineno="11615"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb_thread<sp/>stb_create_thread_raw(stb_thread_func<sp/>f,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*d,<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**return_code,<sp/>stb_semaphore<sp/>rel)</highlight></codeline>
<codeline lineno="11616"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11617"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11618"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(STB_FASTMALLOC)<sp/>&amp;&amp;<sp/>!defined(STB_FASTMALLOC_ITS_OKAY_I_ONLY_MALLOC_IN_ONE_THREAD)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11619"><highlight class="normal"><sp/><sp/><sp/>stb_fatal(</highlight><highlight class="stringliteral">&quot;Error!<sp/>Cannot<sp/>use<sp/>STB_FASTMALLOC<sp/>with<sp/>threads.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11620"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_THREAD_NULL;</highlight></codeline>
<codeline lineno="11621"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11622"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="11623"><highlight class="normal"><sp/><sp/><sp/>stb__thread<sp/>*data<sp/>=<sp/>(stb__thread<sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*data));</highlight></codeline>
<codeline lineno="11624"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!data)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="11625"><highlight class="normal"><sp/><sp/><sp/>stb__threadmutex_init();</highlight></codeline>
<codeline lineno="11626"><highlight class="normal"><sp/><sp/><sp/>data-&gt;f<sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="11627"><highlight class="normal"><sp/><sp/><sp/>data-&gt;d<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="11628"><highlight class="normal"><sp/><sp/><sp/>data-&gt;return_val<sp/>=<sp/>return_code;</highlight></codeline>
<codeline lineno="11629"><highlight class="normal"><sp/><sp/><sp/>data-&gt;sem<sp/>=<sp/>rel;</highlight></codeline>
<codeline lineno="11630"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>_beginthread(stb__thread_run,<sp/>0,<sp/>data);</highlight></codeline>
<codeline lineno="11631"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/>-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="11632"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>id;</highlight></codeline>
<codeline lineno="11633"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11634"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11635"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_NO_STB_STRINGS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11636"><highlight class="normal"><sp/><sp/><sp/>stb_fatal(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>compilation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11637"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11638"><highlight class="normal"><sp/><sp/><sp/>stb_fatal(</highlight><highlight class="stringliteral">&quot;Must<sp/>compile<sp/>mult-threaded<sp/>to<sp/>use<sp/>stb_thread/stb_work.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11639"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11640"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="11641"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11642"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11643"><highlight class="normal"></highlight></codeline>
<codeline lineno="11644"><highlight class="normal"></highlight><highlight class="comment">//<sp/>trivial<sp/>win32<sp/>wrappers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11645"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_destroy_thread(stb_thread<sp/>t)<sp/><sp/><sp/>{<sp/>TerminateThread(t,0);<sp/>}</highlight></codeline>
<codeline lineno="11646"><highlight class="normal">stb_semaphore<sp/>stb_sem_new(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxv)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CreateSemaphoreA(NULL,0,maxv,NULL);<sp/>}</highlight></codeline>
<codeline lineno="11647"><highlight class="normal">stb_semaphore<sp/>stb_sem_new_extra(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxv,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CreateSemaphoreA(NULL,start,maxv,NULL);<sp/>}</highlight></codeline>
<codeline lineno="11648"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_sem_delete(stb_semaphore<sp/>s)<sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>!=<sp/>NULL)<sp/>CloseHandle(s);<sp/>}</highlight></codeline>
<codeline lineno="11649"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_sem_waitfor(stb_semaphore<sp/>s)<sp/><sp/><sp/>{<sp/>WaitForSingleObject(s,<sp/>0xffffffff);<sp/>}<sp/></highlight><highlight class="comment">//<sp/>INFINITE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11650"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_sem_release(stb_semaphore<sp/>s)<sp/><sp/><sp/>{<sp/>ReleaseSemaphore(s,1,NULL);<sp/>}</highlight></codeline>
<codeline lineno="11651"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>stb__thread_sleep(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ms)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>Sleep(ms);<sp/>}</highlight></codeline>
<codeline lineno="11652"><highlight class="normal"></highlight></codeline>
<codeline lineno="11653"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_WINDOWS_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11654"><highlight class="normal">STB__IMPORT<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__stdcall<sp/>GetProcessAffinityMask(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/>STB__DW<sp/>*,<sp/>STB__DW<sp/>*);</highlight></codeline>
<codeline lineno="11655"><highlight class="normal">STB__IMPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>__stdcall<sp/>GetCurrentProcess(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11656"><highlight class="normal">STB__IMPORT<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__stdcall<sp/>SetProcessAffinityMask(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/>STB__DW);</highlight></codeline>
<codeline lineno="11657"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11658"><highlight class="normal"></highlight></codeline>
<codeline lineno="11659"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_processor_count(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="11660"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11661"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>proc,sys;</highlight></codeline>
<codeline lineno="11662"><highlight class="normal"><sp/><sp/><sp/>GetProcessAffinityMask(GetCurrentProcess(),<sp/>&amp;proc,<sp/>&amp;sys);</highlight></codeline>
<codeline lineno="11663"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_bitcount(proc);</highlight></codeline>
<codeline lineno="11664"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11665"><highlight class="normal"></highlight></codeline>
<codeline lineno="11666"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_force_uniprocessor(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="11667"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11668"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>proc,sys;</highlight></codeline>
<codeline lineno="11669"><highlight class="normal"><sp/><sp/><sp/>GetProcessAffinityMask(GetCurrentProcess(),<sp/>&amp;proc,<sp/>&amp;sys);</highlight></codeline>
<codeline lineno="11670"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb_bitcount(proc)<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="11671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z;</highlight></codeline>
<codeline lineno="11672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(z=0;<sp/>z<sp/>&lt;<sp/>32;<sp/>++z)</highlight></codeline>
<codeline lineno="11673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(proc<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>z))</highlight></codeline>
<codeline lineno="11674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&lt;<sp/>32)<sp/>{</highlight></codeline>
<codeline lineno="11676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proc<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>z;</highlight></codeline>
<codeline lineno="11677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetProcessAffinityMask(GetCurrentProcess(),<sp/>proc);</highlight></codeline>
<codeline lineno="11678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11679"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11680"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11681"><highlight class="normal"></highlight></codeline>
<codeline lineno="11682"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WINDOWS_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11683"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_MUTEX_NATIVE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11684"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb_mutex_new(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="11685"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11686"><highlight class="normal"><sp/><sp/><sp/>CRITICAL_SECTION<sp/>*p<sp/>=<sp/>(CRITICAL_SECTION<sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*p));</highlight></codeline>
<codeline lineno="11687"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p)</highlight></codeline>
<codeline lineno="11688"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_WIN32_WINNT<sp/>&gt;=<sp/>0x0500</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>InitializeCriticalSectionAndSpinCount(p,<sp/>500);</highlight></codeline>
<codeline lineno="11690"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>InitializeCriticalSection(p);</highlight></codeline>
<codeline lineno="11692"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11693"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="11694"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11695"><highlight class="normal"></highlight></codeline>
<codeline lineno="11696"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_mutex_delete(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="11697"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11698"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p)<sp/>{</highlight></codeline>
<codeline lineno="11699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DeleteCriticalSection((CRITICAL_SECTION<sp/>*)<sp/>p);</highlight></codeline>
<codeline lineno="11700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(p);</highlight></codeline>
<codeline lineno="11701"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11702"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11703"><highlight class="normal"></highlight></codeline>
<codeline lineno="11704"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_mutex_begin(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="11705"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11706"><highlight class="normal"><sp/><sp/><sp/>stb__wait(500);</highlight></codeline>
<codeline lineno="11707"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p)</highlight></codeline>
<codeline lineno="11708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EnterCriticalSection((CRITICAL_SECTION<sp/>*)<sp/>p);</highlight></codeline>
<codeline lineno="11709"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11710"><highlight class="normal"></highlight></codeline>
<codeline lineno="11711"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_mutex_end(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="11712"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11713"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p)</highlight></codeline>
<codeline lineno="11714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LeaveCriticalSection((CRITICAL_SECTION<sp/>*)<sp/>p);</highlight></codeline>
<codeline lineno="11715"><highlight class="normal"><sp/><sp/><sp/>stb__wait(500);</highlight></codeline>
<codeline lineno="11716"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11717"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>_WINDOWS_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11718"><highlight class="normal"></highlight></codeline>
<codeline lineno="11719"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11720"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>future<sp/>reference,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11721"><highlight class="normal"></highlight><highlight class="comment">//<sp/>InterlockedCompareExchange<sp/>for<sp/>x86:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11722"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cas64_mp(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>dest,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>xcmp,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>xxchg)<sp/>{</highlight></codeline>
<codeline lineno="11723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__asm</highlight></codeline>
<codeline lineno="11724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="11725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mov<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>esi,<sp/>[xxchg]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>exchange</highlight></codeline>
<codeline lineno="11726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mov<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ebx,<sp/>[esi<sp/>+<sp/>0]</highlight></codeline>
<codeline lineno="11727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mov<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ecx,<sp/>[esi<sp/>+<sp/>4]</highlight></codeline>
<codeline lineno="11728"><highlight class="normal"></highlight></codeline>
<codeline lineno="11729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mov<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>esi,<sp/>[xcmp]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>comparand</highlight></codeline>
<codeline lineno="11730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mov<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eax,<sp/>[esi<sp/>+<sp/>0]</highlight></codeline>
<codeline lineno="11731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mov<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edx,<sp/>[esi<sp/>+<sp/>4]</highlight></codeline>
<codeline lineno="11732"><highlight class="normal"></highlight></codeline>
<codeline lineno="11733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mov<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edi,<sp/>[dest]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>destination</highlight></codeline>
<codeline lineno="11734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lock<sp/>cmpxchg8b<sp/><sp/>[edi]</highlight></codeline>
<codeline lineno="11735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jz<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yyyy;</highlight></codeline>
<codeline lineno="11736"><highlight class="normal"></highlight></codeline>
<codeline lineno="11737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mov<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[esi<sp/>+<sp/>0],<sp/>eax;</highlight></codeline>
<codeline lineno="11738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mov<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[esi<sp/>+<sp/>4],<sp/>edx;</highlight></codeline>
<codeline lineno="11739"><highlight class="normal"></highlight></codeline>
<codeline lineno="11740"><highlight class="normal">yyyy:</highlight></codeline>
<codeline lineno="11741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xor<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eax,<sp/>eax;</highlight></codeline>
<codeline lineno="11742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setz<sp/><sp/><sp/><sp/>al;</highlight></codeline>
<codeline lineno="11743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="11744"><highlight class="normal"></highlight></codeline>
<codeline lineno="11745"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>__int64<sp/>_InterlockedCompareExchange64(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>__int64<sp/>*dest</highlight></codeline>
<codeline lineno="11746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>__int64<sp/>exchange</highlight></codeline>
<codeline lineno="11747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>__int64<sp/>comperand)</highlight></codeline>
<codeline lineno="11748"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//value<sp/>returned<sp/>in<sp/>eax::edx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11750"><highlight class="normal"><sp/><sp/><sp/><sp/>__asm<sp/>{</highlight></codeline>
<codeline lineno="11751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lea<sp/>esi,comperand;</highlight></codeline>
<codeline lineno="11752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lea<sp/>edi,exchange;</highlight></codeline>
<codeline lineno="11753"><highlight class="normal"></highlight></codeline>
<codeline lineno="11754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mov<sp/>eax,[esi];</highlight></codeline>
<codeline lineno="11755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mov<sp/>edx,4[esi];</highlight></codeline>
<codeline lineno="11756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mov<sp/>ebx,[edi];</highlight></codeline>
<codeline lineno="11757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mov<sp/>ecx,4[edi];</highlight></codeline>
<codeline lineno="11758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mov<sp/>esi,dest;</highlight></codeline>
<codeline lineno="11759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lock<sp/>CMPXCHG8B<sp/>[esi];</highlight></codeline>
<codeline lineno="11760"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11761"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11762"><highlight class="normal"></highlight></codeline>
<codeline lineno="11763"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11764"><highlight class="normal"></highlight></codeline>
<codeline lineno="11765"><highlight class="normal">stb_thread<sp/>stb_create_thread2(stb_thread_func<sp/>f,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*d,<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**return_code,<sp/>stb_semaphore<sp/>rel)</highlight></codeline>
<codeline lineno="11766"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11767"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_create_thread_raw(f,d,return_code,rel);</highlight></codeline>
<codeline lineno="11768"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11769"><highlight class="normal"></highlight></codeline>
<codeline lineno="11770"><highlight class="normal">stb_thread<sp/>stb_create_thread(stb_thread_func<sp/>f,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*d)</highlight></codeline>
<codeline lineno="11771"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11772"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_create_thread2(f,d,NULL,STB_SEMAPHORE_NULL);</highlight></codeline>
<codeline lineno="11773"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11774"><highlight class="normal"></highlight></codeline>
<codeline lineno="11775"><highlight class="normal"></highlight><highlight class="comment">//<sp/>mutex<sp/>implemented<sp/>by<sp/>wrapping<sp/>semaphore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11776"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_MUTEX_NATIVE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11777"><highlight class="normal">stb_mutex<sp/>stb_mutex_new(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_sem_new_extra(1,1);<sp/>}</highlight></codeline>
<codeline lineno="11778"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_mutex_delete(stb_mutex<sp/>m)<sp/><sp/>{<sp/>stb_sem_delete<sp/>(m);<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11779"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_mutex_begin(stb_mutex<sp/>m)<sp/><sp/><sp/>{<sp/>stb__wait(500);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m)<sp/>stb_sem_waitfor(m);<sp/>}</highlight></codeline>
<codeline lineno="11780"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_mutex_end(stb_mutex<sp/>m)<sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m)<sp/>stb_sem_release(m);<sp/>stb__wait(500);<sp/>}</highlight></codeline>
<codeline lineno="11781"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11782"><highlight class="normal"></highlight></codeline>
<codeline lineno="11783"><highlight class="normal"></highlight><highlight class="comment">//<sp/>thread<sp/>merge<sp/>operation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11784"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stb__sync</highlight></codeline>
<codeline lineno="11785"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11786"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>target;<sp/><sp/></highlight><highlight class="comment">//<sp/>target<sp/>number<sp/>of<sp/>threads<sp/>to<sp/>hit<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11787"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sofar;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>total<sp/>threads<sp/>that<sp/>hit<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11788"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>waiting;<sp/></highlight><highlight class="comment">//<sp/>total<sp/>threads<sp/>waiting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11789"><highlight class="normal"></highlight></codeline>
<codeline lineno="11790"><highlight class="normal"><sp/><sp/><sp/>stb_mutex<sp/>start;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mutex<sp/>to<sp/>prevent<sp/>starting<sp/>again<sp/>before<sp/>finishing<sp/>previous</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11791"><highlight class="normal"><sp/><sp/><sp/>stb_mutex<sp/>mutex;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mutex<sp/>while<sp/>tweaking<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11792"><highlight class="normal"><sp/><sp/><sp/>stb_semaphore<sp/>release;<sp/></highlight><highlight class="comment">//<sp/>semaphore<sp/>wake<sp/>up<sp/>waiting<sp/>threads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>to<sp/>wake<sp/>them<sp/>up<sp/>one<sp/>at<sp/>a<sp/>time,<sp/>rather<sp/>than<sp/>using<sp/>a<sp/>single<sp/>release</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call,<sp/>because<sp/>win32<sp/>semaphores<sp/>don&apos;t<sp/>let<sp/>you<sp/>dynamically<sp/>change<sp/>the<sp/>max<sp/>count!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11795"><highlight class="normal">};</highlight></codeline>
<codeline lineno="11796"><highlight class="normal"></highlight></codeline>
<codeline lineno="11797"><highlight class="normal">stb_sync<sp/>stb_sync_new(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="11798"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11799"><highlight class="normal"><sp/><sp/><sp/>stb_sync<sp/>s<sp/>=<sp/>(stb_sync)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*s));</highlight></codeline>
<codeline lineno="11800"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="11801"><highlight class="normal"></highlight></codeline>
<codeline lineno="11802"><highlight class="normal"><sp/><sp/><sp/>s-&gt;target<sp/>=<sp/>s-&gt;sofar<sp/>=<sp/>s-&gt;waiting<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="11803"><highlight class="normal"><sp/><sp/><sp/>s-&gt;mutex<sp/><sp/><sp/>=<sp/>stb_mutex_new();</highlight></codeline>
<codeline lineno="11804"><highlight class="normal"><sp/><sp/><sp/>s-&gt;start<sp/><sp/><sp/>=<sp/>stb_mutex_new();</highlight></codeline>
<codeline lineno="11805"><highlight class="normal"><sp/><sp/><sp/>s-&gt;release<sp/>=<sp/>stb_sem_new(1);</highlight></codeline>
<codeline lineno="11806"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;mutex<sp/>==<sp/>STB_MUTEX_NULL<sp/>||<sp/>s-&gt;release<sp/>==<sp/>STB_SEMAPHORE_NULL<sp/>||<sp/>s-&gt;start<sp/>==<sp/>STB_MUTEX_NULL)<sp/>{</highlight></codeline>
<codeline lineno="11807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_mutex_delete(s-&gt;mutex);</highlight></codeline>
<codeline lineno="11808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_mutex_delete(s-&gt;mutex);</highlight></codeline>
<codeline lineno="11809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_sem_delete(s-&gt;release);</highlight></codeline>
<codeline lineno="11810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(s);</highlight></codeline>
<codeline lineno="11811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="11812"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11813"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="11814"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11815"><highlight class="normal"></highlight></codeline>
<codeline lineno="11816"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_sync_delete(stb_sync<sp/>s)</highlight></codeline>
<codeline lineno="11817"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11818"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;waiting)<sp/>{</highlight></codeline>
<codeline lineno="11819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>bad<sp/>to<sp/>delete<sp/>while<sp/>there<sp/>are<sp/>threads<sp/>waiting!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>shall<sp/>we<sp/>wait<sp/>for<sp/>them<sp/>to<sp/>reach,<sp/>or<sp/>just<sp/>bail?<sp/>just<sp/>bail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(0);</highlight></codeline>
<codeline lineno="11822"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11823"><highlight class="normal"><sp/><sp/><sp/>stb_mutex_delete(s-&gt;mutex);</highlight></codeline>
<codeline lineno="11824"><highlight class="normal"><sp/><sp/><sp/>stb_mutex_delete(s-&gt;release);</highlight></codeline>
<codeline lineno="11825"><highlight class="normal"><sp/><sp/><sp/>free(s);</highlight></codeline>
<codeline lineno="11826"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11827"><highlight class="normal"></highlight></codeline>
<codeline lineno="11828"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_sync_set_target(stb_sync<sp/>s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count)</highlight></codeline>
<codeline lineno="11829"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11830"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>allow<sp/>setting<sp/>a<sp/>target<sp/>until<sp/>the<sp/>last<sp/>one<sp/>is<sp/>fully<sp/>released;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11831"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>that<sp/>this<sp/>can<sp/>lead<sp/>to<sp/>inefficient<sp/>pipelining,<sp/>and<sp/>maybe<sp/>we&apos;d</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11832"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>better<sp/>off<sp/>ping-ponging<sp/>between<sp/>two<sp/>internal<sp/>syncs?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11833"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>I<sp/>tried<sp/>seeing<sp/>how<sp/>often<sp/>this<sp/>happened<sp/>using<sp/>TryEnterCriticalSection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11834"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>could<sp/>_never_<sp/>get<sp/>it<sp/>to<sp/>happen<sp/>in<sp/>imv(stb),<sp/>even<sp/>with<sp/>more<sp/>threads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11835"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>than<sp/>processors.<sp/>So<sp/>who<sp/>knows!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11836"><highlight class="normal"><sp/><sp/><sp/>stb_mutex_begin(s-&gt;start);</highlight></codeline>
<codeline lineno="11837"><highlight class="normal"></highlight></codeline>
<codeline lineno="11838"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>mutex<sp/>is<sp/>pointless,<sp/>since<sp/>it&apos;s<sp/>not<sp/>valid<sp/>for<sp/>threads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11839"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>call<sp/>reach()<sp/>before<sp/>anyone<sp/>calls<sp/>set_target()<sp/>anyway</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11840"><highlight class="normal"><sp/><sp/><sp/>stb_mutex_begin(s-&gt;mutex);</highlight></codeline>
<codeline lineno="11841"><highlight class="normal"></highlight></codeline>
<codeline lineno="11842"><highlight class="normal"><sp/><sp/><sp/>assert(s-&gt;target<sp/>==<sp/>0);<sp/></highlight><highlight class="comment">//<sp/>enforced<sp/>by<sp/>start<sp/>mutex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11843"><highlight class="normal"><sp/><sp/><sp/>s-&gt;target<sp/><sp/>=<sp/>count;</highlight></codeline>
<codeline lineno="11844"><highlight class="normal"><sp/><sp/><sp/>s-&gt;sofar<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="11845"><highlight class="normal"><sp/><sp/><sp/>s-&gt;waiting<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="11846"><highlight class="normal"><sp/><sp/><sp/>stb_mutex_end(s-&gt;mutex);</highlight></codeline>
<codeline lineno="11847"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_TRUE;</highlight></codeline>
<codeline lineno="11848"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11849"><highlight class="normal"></highlight></codeline>
<codeline lineno="11850"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__sync_release(stb_sync<sp/>s)</highlight></codeline>
<codeline lineno="11851"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11852"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;waiting)</highlight></codeline>
<codeline lineno="11853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_sem_release(s-&gt;release);</highlight></codeline>
<codeline lineno="11854"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="11855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;target<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="11856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_mutex_end(s-&gt;start);</highlight></codeline>
<codeline lineno="11857"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11858"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11859"><highlight class="normal"></highlight></codeline>
<codeline lineno="11860"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_sync_reach(stb_sync<sp/>s)</highlight></codeline>
<codeline lineno="11861"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11862"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="11863"><highlight class="normal"><sp/><sp/><sp/>stb_mutex_begin(s-&gt;mutex);</highlight></codeline>
<codeline lineno="11864"><highlight class="normal"><sp/><sp/><sp/>assert(s-&gt;sofar<sp/>&lt;<sp/>s-&gt;target);</highlight></codeline>
<codeline lineno="11865"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>++s-&gt;sofar;<sp/></highlight><highlight class="comment">//<sp/>record<sp/>this<sp/>value<sp/>to<sp/>avoid<sp/>possible<sp/>race<sp/>if<sp/>we<sp/>did<sp/>&apos;return<sp/>s-&gt;sofar&apos;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11866"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;sofar<sp/>==<sp/>s-&gt;target)</highlight></codeline>
<codeline lineno="11867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__sync_release(s);</highlight></codeline>
<codeline lineno="11868"><highlight class="normal"><sp/><sp/><sp/>stb_mutex_end(s-&gt;mutex);</highlight></codeline>
<codeline lineno="11869"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="11870"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11871"><highlight class="normal"></highlight></codeline>
<codeline lineno="11872"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_sync_reach_and_wait(stb_sync<sp/>s)</highlight></codeline>
<codeline lineno="11873"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11874"><highlight class="normal"><sp/><sp/><sp/>stb_mutex_begin(s-&gt;mutex);</highlight></codeline>
<codeline lineno="11875"><highlight class="normal"><sp/><sp/><sp/>assert(s-&gt;sofar<sp/>&lt;<sp/>s-&gt;target);</highlight></codeline>
<codeline lineno="11876"><highlight class="normal"><sp/><sp/><sp/>++s-&gt;sofar;</highlight></codeline>
<codeline lineno="11877"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;sofar<sp/>==<sp/>s-&gt;target)<sp/>{</highlight></codeline>
<codeline lineno="11878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__sync_release(s);</highlight></codeline>
<codeline lineno="11879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_mutex_end(s-&gt;mutex);</highlight></codeline>
<codeline lineno="11880"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="11881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++s-&gt;waiting;<sp/></highlight><highlight class="comment">//<sp/>we&apos;re<sp/>waiting,<sp/>so<sp/>one<sp/>more<sp/>waiter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_mutex_end(s-&gt;mutex);<sp/></highlight><highlight class="comment">//<sp/>release<sp/>the<sp/>mutex<sp/>to<sp/>other<sp/>threads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11883"><highlight class="normal"></highlight></codeline>
<codeline lineno="11884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_sem_waitfor(s-&gt;release);<sp/></highlight><highlight class="comment">//<sp/>wait<sp/>for<sp/>merge<sp/>completion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11885"><highlight class="normal"></highlight></codeline>
<codeline lineno="11886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_mutex_begin(s-&gt;mutex);<sp/></highlight><highlight class="comment">//<sp/>on<sp/>merge<sp/>completion,<sp/>grab<sp/>the<sp/>mutex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--s-&gt;waiting;<sp/></highlight><highlight class="comment">//<sp/>we&apos;re<sp/>done<sp/>waiting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__sync_release(s);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>restart<sp/>the<sp/>next<sp/>waiter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_mutex_end(s-&gt;mutex);<sp/></highlight><highlight class="comment">//<sp/>and<sp/>now<sp/>we&apos;re<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>ends<sp/>the<sp/>same<sp/>as<sp/>the<sp/>first<sp/>case,<sp/>but<sp/>it&apos;s<sp/>a<sp/>lot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clearer<sp/>to<sp/>understand<sp/>without<sp/>sharing<sp/>the<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11892"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11893"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11894"><highlight class="normal"></highlight></codeline>
<codeline lineno="11895"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stb__threadqueue</highlight></codeline>
<codeline lineno="11896"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11897"><highlight class="normal"><sp/><sp/><sp/>stb_mutex<sp/>add,<sp/>remove;</highlight></codeline>
<codeline lineno="11898"><highlight class="normal"><sp/><sp/><sp/>stb_semaphore<sp/>nonempty,<sp/>nonfull;</highlight></codeline>
<codeline lineno="11899"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>head_blockers;<sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>threads<sp/>blocking--used<sp/>to<sp/>know<sp/>whether<sp/>to<sp/>release(avail)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11900"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tail_blockers;</highlight></codeline>
<codeline lineno="11901"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>head,<sp/>tail,<sp/>array_size,<sp/>growable;</highlight></codeline>
<codeline lineno="11902"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>item_size;</highlight></codeline>
<codeline lineno="11903"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data;</highlight></codeline>
<codeline lineno="11904"><highlight class="normal">};</highlight></codeline>
<codeline lineno="11905"><highlight class="normal"></highlight></codeline>
<codeline lineno="11906"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__tq_wrap(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>stb_threadqueue<sp/>*z,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p)</highlight></codeline>
<codeline lineno="11907"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11908"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>z-&gt;array_size)</highlight></codeline>
<codeline lineno="11909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p<sp/>-<sp/>z-&gt;array_size;</highlight></codeline>
<codeline lineno="11910"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="11912"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11913"><highlight class="normal"></highlight></codeline>
<codeline lineno="11914"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__threadq_get_raw(stb_threadqueue<sp/>*tq2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structoutput" kindref="compound">output</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>block)</highlight></codeline>
<codeline lineno="11915"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11916"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>stb_threadqueue<sp/>*tq<sp/>=<sp/>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>stb_threadqueue<sp/>*)<sp/>tq2;</highlight></codeline>
<codeline lineno="11917"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tq-&gt;head<sp/>==<sp/>tq-&gt;tail<sp/>&amp;&amp;<sp/>!block)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="11918"><highlight class="normal"></highlight></codeline>
<codeline lineno="11919"><highlight class="normal"><sp/><sp/><sp/>stb_mutex_begin(tq-&gt;remove);</highlight></codeline>
<codeline lineno="11920"><highlight class="normal"></highlight></codeline>
<codeline lineno="11921"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(tq-&gt;head<sp/>==<sp/>tq-&gt;tail)<sp/>{</highlight></codeline>
<codeline lineno="11922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!block)<sp/>{</highlight></codeline>
<codeline lineno="11923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_mutex_end(tq-&gt;remove);</highlight></codeline>
<codeline lineno="11924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="11925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++tq-&gt;head_blockers;</highlight></codeline>
<codeline lineno="11927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_mutex_end(tq-&gt;remove);</highlight></codeline>
<codeline lineno="11928"><highlight class="normal"></highlight></codeline>
<codeline lineno="11929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_sem_waitfor(tq-&gt;nonempty);</highlight></codeline>
<codeline lineno="11930"><highlight class="normal"></highlight></codeline>
<codeline lineno="11931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_mutex_begin(tq-&gt;remove);</highlight></codeline>
<codeline lineno="11932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--tq-&gt;head_blockers;</highlight></codeline>
<codeline lineno="11933"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11934"><highlight class="normal"></highlight></codeline>
<codeline lineno="11935"><highlight class="normal"><sp/><sp/><sp/>memcpy(<ref refid="structoutput" kindref="compound">output</ref>,<sp/>tq-&gt;data<sp/>+<sp/>tq-&gt;head*tq-&gt;item_size,<sp/>tq-&gt;item_size);</highlight></codeline>
<codeline lineno="11936"><highlight class="normal"><sp/><sp/><sp/>stb_barrier();</highlight></codeline>
<codeline lineno="11937"><highlight class="normal"><sp/><sp/><sp/>tq-&gt;head<sp/>=<sp/>stb__tq_wrap(tq,<sp/>tq-&gt;head+1);</highlight></codeline>
<codeline lineno="11938"><highlight class="normal"></highlight></codeline>
<codeline lineno="11939"><highlight class="normal"><sp/><sp/><sp/>stb_sem_release(tq-&gt;nonfull);</highlight></codeline>
<codeline lineno="11940"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tq-&gt;head_blockers)<sp/></highlight><highlight class="comment">//<sp/>can&apos;t<sp/>check<sp/>if<sp/>actually<sp/>non-empty<sp/>due<sp/>to<sp/>race?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_sem_release(tq-&gt;nonempty);<sp/></highlight><highlight class="comment">//<sp/>if<sp/>there<sp/>are<sp/>other<sp/>blockers,<sp/>wake<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11942"><highlight class="normal"></highlight></codeline>
<codeline lineno="11943"><highlight class="normal"><sp/><sp/><sp/>stb_mutex_end(tq-&gt;remove);</highlight></codeline>
<codeline lineno="11944"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_TRUE;</highlight></codeline>
<codeline lineno="11945"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11946"><highlight class="normal"></highlight></codeline>
<codeline lineno="11947"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__threadq_grow(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>stb_threadqueue<sp/>*tq)</highlight></codeline>
<codeline lineno="11948"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11949"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="11950"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="11951"><highlight class="normal"><sp/><sp/><sp/>assert(tq-&gt;remove<sp/>!=<sp/>STB_MUTEX_NULL);<sp/></highlight><highlight class="comment">//<sp/>must<sp/>have<sp/>this<sp/>to<sp/>allow<sp/>growth!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11952"><highlight class="normal"><sp/><sp/><sp/>stb_mutex_begin(tq-&gt;remove);</highlight></codeline>
<codeline lineno="11953"><highlight class="normal"></highlight></codeline>
<codeline lineno="11954"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>tq-&gt;array_size<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="11955"><highlight class="normal"><sp/><sp/><sp/>p<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>realloc(tq-&gt;data,<sp/>n<sp/>*<sp/>tq-&gt;item_size);</highlight></codeline>
<codeline lineno="11956"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="11957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_mutex_end(tq-&gt;remove);</highlight></codeline>
<codeline lineno="11958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_mutex_end(tq-&gt;add);</highlight></codeline>
<codeline lineno="11959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_FALSE;</highlight></codeline>
<codeline lineno="11960"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11961"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tq-&gt;tail<sp/>&lt;<sp/>tq-&gt;head)<sp/>{</highlight></codeline>
<codeline lineno="11962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(p<sp/>+<sp/>tq-&gt;array_size<sp/>*<sp/>tq-&gt;item_size,<sp/>p,<sp/>tq-&gt;tail<sp/>*<sp/>tq-&gt;item_size);</highlight></codeline>
<codeline lineno="11963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tq-&gt;tail<sp/>+=<sp/>tq-&gt;array_size;</highlight></codeline>
<codeline lineno="11964"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11965"><highlight class="normal"><sp/><sp/><sp/>tq-&gt;data<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="11966"><highlight class="normal"><sp/><sp/><sp/>tq-&gt;array_size<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="11967"><highlight class="normal"></highlight></codeline>
<codeline lineno="11968"><highlight class="normal"><sp/><sp/><sp/>stb_mutex_end(tq-&gt;remove);</highlight></codeline>
<codeline lineno="11969"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_TRUE;</highlight></codeline>
<codeline lineno="11970"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11971"><highlight class="normal"></highlight></codeline>
<codeline lineno="11972"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__threadq_add_raw(stb_threadqueue<sp/>*tq2,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*input,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>block)</highlight></codeline>
<codeline lineno="11973"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11974"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tail,pos;</highlight></codeline>
<codeline lineno="11975"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>stb_threadqueue<sp/>*tq<sp/>=<sp/>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>stb_threadqueue<sp/>*)<sp/>tq2;</highlight></codeline>
<codeline lineno="11976"><highlight class="normal"><sp/><sp/><sp/>stb_mutex_begin(tq-&gt;add);</highlight></codeline>
<codeline lineno="11977"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)<sp/>{</highlight></codeline>
<codeline lineno="11978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>tq-&gt;tail;</highlight></codeline>
<codeline lineno="11979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tail<sp/>=<sp/>stb__tq_wrap(tq,<sp/>pos+1);</highlight></codeline>
<codeline lineno="11980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tail<sp/>!=<sp/>tq-&gt;head)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11981"><highlight class="normal"></highlight></codeline>
<codeline lineno="11982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>full</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tq-&gt;growable)<sp/>{</highlight></codeline>
<codeline lineno="11984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb__threadq_grow(tq))<sp/>{</highlight></codeline>
<codeline lineno="11985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_mutex_end(tq-&gt;add);</highlight></codeline>
<codeline lineno="11986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_FALSE;<sp/></highlight><highlight class="comment">//<sp/>out<sp/>of<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!block)<sp/>{</highlight></codeline>
<codeline lineno="11989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_mutex_end(tq-&gt;add);</highlight></codeline>
<codeline lineno="11990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_FALSE;</highlight></codeline>
<codeline lineno="11991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="11992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++tq-&gt;tail_blockers;</highlight></codeline>
<codeline lineno="11993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_mutex_end(tq-&gt;add);</highlight></codeline>
<codeline lineno="11994"><highlight class="normal"></highlight></codeline>
<codeline lineno="11995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_sem_waitfor(tq-&gt;nonfull);</highlight></codeline>
<codeline lineno="11996"><highlight class="normal"></highlight></codeline>
<codeline lineno="11997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_mutex_begin(tq-&gt;add);</highlight></codeline>
<codeline lineno="11998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--tq-&gt;tail_blockers;</highlight></codeline>
<codeline lineno="11999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12000"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12001"><highlight class="normal"><sp/><sp/><sp/>memcpy(tq-&gt;data<sp/>+<sp/>tq-&gt;item_size<sp/>*<sp/>pos,<sp/>input,<sp/>tq-&gt;item_size);</highlight></codeline>
<codeline lineno="12002"><highlight class="normal"><sp/><sp/><sp/>stb_barrier();</highlight></codeline>
<codeline lineno="12003"><highlight class="normal"><sp/><sp/><sp/>tq-&gt;tail<sp/>=<sp/>tail;</highlight></codeline>
<codeline lineno="12004"><highlight class="normal"><sp/><sp/><sp/>stb_sem_release(tq-&gt;nonempty);</highlight></codeline>
<codeline lineno="12005"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tq-&gt;tail_blockers)<sp/></highlight><highlight class="comment">//<sp/>can&apos;t<sp/>check<sp/>if<sp/>actually<sp/>non-full<sp/>due<sp/>to<sp/>race?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_sem_release(tq-&gt;nonfull);</highlight></codeline>
<codeline lineno="12007"><highlight class="normal"><sp/><sp/><sp/>stb_mutex_end(tq-&gt;add);</highlight></codeline>
<codeline lineno="12008"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>STB_TRUE;</highlight></codeline>
<codeline lineno="12009"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12010"><highlight class="normal"></highlight></codeline>
<codeline lineno="12011"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_threadq_length(stb_threadqueue<sp/>*tq2)</highlight></codeline>
<codeline lineno="12012"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12013"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,b,n;</highlight></codeline>
<codeline lineno="12014"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>stb_threadqueue<sp/>*tq<sp/>=<sp/>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>stb_threadqueue<sp/>*)<sp/>tq2;</highlight></codeline>
<codeline lineno="12015"><highlight class="normal"><sp/><sp/><sp/>stb_mutex_begin(tq-&gt;add);</highlight></codeline>
<codeline lineno="12016"><highlight class="normal"><sp/><sp/><sp/>a<sp/>=<sp/>tq-&gt;head;</highlight></codeline>
<codeline lineno="12017"><highlight class="normal"><sp/><sp/><sp/>b<sp/>=<sp/>tq-&gt;tail;</highlight></codeline>
<codeline lineno="12018"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>tq-&gt;array_size;</highlight></codeline>
<codeline lineno="12019"><highlight class="normal"><sp/><sp/><sp/>stb_mutex_end(tq-&gt;add);</highlight></codeline>
<codeline lineno="12020"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>&gt;<sp/>b)<sp/>b<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="12021"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b-a;</highlight></codeline>
<codeline lineno="12022"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12023"><highlight class="normal"></highlight></codeline>
<codeline lineno="12024"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_threadq_get(stb_threadqueue<sp/>*tq,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structoutput" kindref="compound">output</ref>)</highlight></codeline>
<codeline lineno="12025"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12026"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb__threadq_get_raw(tq,<sp/><ref refid="structoutput" kindref="compound">output</ref>,<sp/>STB_FALSE);</highlight></codeline>
<codeline lineno="12027"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12028"><highlight class="normal"></highlight></codeline>
<codeline lineno="12029"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_threadq_get_block(stb_threadqueue<sp/>*tq,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structoutput" kindref="compound">output</ref>)</highlight></codeline>
<codeline lineno="12030"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12031"><highlight class="normal"><sp/><sp/><sp/>stb__threadq_get_raw(tq,<sp/><ref refid="structoutput" kindref="compound">output</ref>,<sp/>STB_TRUE);</highlight></codeline>
<codeline lineno="12032"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12033"><highlight class="normal"></highlight></codeline>
<codeline lineno="12034"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_threadq_add(stb_threadqueue<sp/>*tq,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*input)</highlight></codeline>
<codeline lineno="12035"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12036"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb__threadq_add_raw(tq,<sp/>input,<sp/>STB_FALSE);</highlight></codeline>
<codeline lineno="12037"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12038"><highlight class="normal"></highlight></codeline>
<codeline lineno="12039"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_threadq_add_block(stb_threadqueue<sp/>*tq,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*input)</highlight></codeline>
<codeline lineno="12040"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12041"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb__threadq_add_raw(tq,<sp/>input,<sp/>STB_TRUE);</highlight></codeline>
<codeline lineno="12042"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12043"><highlight class="normal"></highlight></codeline>
<codeline lineno="12044"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_threadq_delete(stb_threadqueue<sp/>*tq)</highlight></codeline>
<codeline lineno="12045"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12046"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tq)<sp/>{</highlight></codeline>
<codeline lineno="12047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(tq-&gt;data);</highlight></codeline>
<codeline lineno="12048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_mutex_delete(tq-&gt;add);</highlight></codeline>
<codeline lineno="12049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_mutex_delete(tq-&gt;remove);</highlight></codeline>
<codeline lineno="12050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_sem_delete(tq-&gt;nonempty);</highlight></codeline>
<codeline lineno="12051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_sem_delete(tq-&gt;nonfull);</highlight></codeline>
<codeline lineno="12052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(tq);</highlight></codeline>
<codeline lineno="12053"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12054"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12055"><highlight class="normal"></highlight></codeline>
<codeline lineno="12056"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_THREADQUEUE_DYNAMIC<sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12057"><highlight class="normal">stb_threadqueue<sp/>*stb_threadq_new(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>item_size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_items,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>many_add,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>many_remove)</highlight></codeline>
<codeline lineno="12058"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12059"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error=0;</highlight></codeline>
<codeline lineno="12060"><highlight class="normal"><sp/><sp/><sp/>stb_threadqueue<sp/>*tq<sp/>=<sp/>(stb_threadqueue<sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*tq));</highlight></codeline>
<codeline lineno="12061"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tq<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="12062"><highlight class="normal"></highlight></codeline>
<codeline lineno="12063"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_items<sp/>==<sp/>STB_THREADQUEUE_DYNAMIC)<sp/>{</highlight></codeline>
<codeline lineno="12064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tq-&gt;growable<sp/>=<sp/>STB_TRUE;</highlight></codeline>
<codeline lineno="12065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num_items<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="12066"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tq-&gt;growable<sp/>=<sp/>STB_FALSE;</highlight></codeline>
<codeline lineno="12068"><highlight class="normal"></highlight></codeline>
<codeline lineno="12069"><highlight class="normal"><sp/><sp/><sp/>tq-&gt;item_size<sp/>=<sp/>item_size;</highlight></codeline>
<codeline lineno="12070"><highlight class="normal"><sp/><sp/><sp/>tq-&gt;array_size<sp/>=<sp/>num_items+1;</highlight></codeline>
<codeline lineno="12071"><highlight class="normal"></highlight></codeline>
<codeline lineno="12072"><highlight class="normal"><sp/><sp/><sp/>tq-&gt;add<sp/>=<sp/>tq-&gt;remove<sp/>=<sp/>STB_MUTEX_NULL;</highlight></codeline>
<codeline lineno="12073"><highlight class="normal"><sp/><sp/><sp/>tq-&gt;nonempty<sp/>=<sp/>tq-&gt;nonfull<sp/>=<sp/>STB_SEMAPHORE_NULL;</highlight></codeline>
<codeline lineno="12074"><highlight class="normal"><sp/><sp/><sp/>tq-&gt;data<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="12075"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(many_add)</highlight></codeline>
<codeline lineno="12076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>tq-&gt;add<sp/><sp/><sp/><sp/>=<sp/>stb_mutex_new();<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tq-&gt;add<sp/><sp/><sp/><sp/>==<sp/>STB_MUTEX_NULL)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;<sp/>}</highlight></codeline>
<codeline lineno="12077"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(many_remove<sp/>||<sp/>tq-&gt;growable)</highlight></codeline>
<codeline lineno="12078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>tq-&gt;remove<sp/>=<sp/>stb_mutex_new();<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tq-&gt;remove<sp/>==<sp/>STB_MUTEX_NULL)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;<sp/>}</highlight></codeline>
<codeline lineno="12079"><highlight class="normal"><sp/><sp/><sp/>tq-&gt;nonempty<sp/>=<sp/>stb_sem_new(1);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tq-&gt;nonempty<sp/>==<sp/>STB_SEMAPHORE_NULL)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="12080"><highlight class="normal"><sp/><sp/><sp/>tq-&gt;nonfull<sp/><sp/>=<sp/>stb_sem_new(1);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tq-&gt;nonfull<sp/><sp/>==<sp/>STB_SEMAPHORE_NULL)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="12081"><highlight class="normal"><sp/><sp/><sp/>tq-&gt;data<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>malloc(tq-&gt;item_size<sp/>*<sp/>tq-&gt;array_size);</highlight></codeline>
<codeline lineno="12082"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tq-&gt;data<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="12083"><highlight class="normal"></highlight></codeline>
<codeline lineno="12084"><highlight class="normal"><sp/><sp/><sp/>tq-&gt;head<sp/>=<sp/>tq-&gt;tail<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="12085"><highlight class="normal"><sp/><sp/><sp/>tq-&gt;head_blockers<sp/>=<sp/>tq-&gt;tail_blockers<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="12086"><highlight class="normal"></highlight></codeline>
<codeline lineno="12087"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tq;</highlight></codeline>
<codeline lineno="12088"><highlight class="normal"></highlight></codeline>
<codeline lineno="12089"><highlight class="normal">error:</highlight></codeline>
<codeline lineno="12090"><highlight class="normal"><sp/><sp/><sp/>stb_threadq_delete(tq);</highlight></codeline>
<codeline lineno="12091"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="12092"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12093"><highlight class="normal"></highlight></codeline>
<codeline lineno="12094"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12095"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12096"><highlight class="normal"><sp/><sp/><sp/>stb_thread_func<sp/>f;</highlight></codeline>
<codeline lineno="12097"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*d;</highlight></codeline>
<codeline lineno="12098"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**retval;</highlight></codeline>
<codeline lineno="12099"><highlight class="normal"><sp/><sp/><sp/>stb_sync<sp/>sync;</highlight></codeline>
<codeline lineno="12100"><highlight class="normal">}<sp/>stb__workinfo;</highlight></codeline>
<codeline lineno="12101"><highlight class="normal"></highlight></codeline>
<codeline lineno="12102"><highlight class="normal"></highlight><highlight class="comment">//static<sp/>volatile<sp/>stb__workinfo<sp/>*stb__work;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12103"><highlight class="normal"></highlight></codeline>
<codeline lineno="12104"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stb__workqueue</highlight></codeline>
<codeline lineno="12105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12106"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numthreads;</highlight></codeline>
<codeline lineno="12107"><highlight class="normal"><sp/><sp/><sp/>stb_threadqueue<sp/>*tq;</highlight></codeline>
<codeline lineno="12108"><highlight class="normal">};</highlight></codeline>
<codeline lineno="12109"><highlight class="normal"></highlight></codeline>
<codeline lineno="12110"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb_workqueue<sp/>*stb__work_global;</highlight></codeline>
<codeline lineno="12111"><highlight class="normal"></highlight></codeline>
<codeline lineno="12112"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb__thread_workloop(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="12113"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12114"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>stb_workqueue<sp/>*q<sp/>=<sp/>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>stb_workqueue<sp/>*)<sp/>p;</highlight></codeline>
<codeline lineno="12115"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)<sp/>{</highlight></codeline>
<codeline lineno="12116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*z;</highlight></codeline>
<codeline lineno="12117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__workinfo<sp/>w;</highlight></codeline>
<codeline lineno="12118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_threadq_get_block(q-&gt;tq,<sp/>&amp;w);</highlight></codeline>
<codeline lineno="12119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(w.f<sp/>==<sp/>NULL)<sp/></highlight><highlight class="comment">//<sp/>null<sp/>work<sp/>is<sp/>a<sp/>signal<sp/>to<sp/>end<sp/>the<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="12121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>w.f(w.d);</highlight></codeline>
<codeline lineno="12122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(w.retval)<sp/>{<sp/>stb_barrier();<sp/>*w.retval<sp/>=<sp/>z;<sp/>}</highlight></codeline>
<codeline lineno="12123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(w.sync<sp/>!=<sp/>STB_SYNC_NULL)<sp/>stb_sync_reach(w.sync);</highlight></codeline>
<codeline lineno="12124"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12126"><highlight class="normal"></highlight></codeline>
<codeline lineno="12127"><highlight class="normal">stb_workqueue<sp/>*stb_workq_new(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_threads,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_units)</highlight></codeline>
<codeline lineno="12128"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12129"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_workq_new_flags(num_threads,<sp/>max_units,<sp/>0,0);</highlight></codeline>
<codeline lineno="12130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12131"><highlight class="normal"></highlight></codeline>
<codeline lineno="12132"><highlight class="normal">stb_workqueue<sp/>*stb_workq_new_flags(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numthreads,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_units,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>no_add_mutex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>no_remove_mutex)</highlight></codeline>
<codeline lineno="12133"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12134"><highlight class="normal"><sp/><sp/><sp/>stb_workqueue<sp/>*q<sp/>=<sp/>(stb_workqueue<sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*q));</highlight></codeline>
<codeline lineno="12135"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="12136"><highlight class="normal"><sp/><sp/><sp/>q-&gt;tq<sp/>=<sp/>stb_threadq_new(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stb__workinfo),<sp/>max_units,<sp/>!no_add_mutex,<sp/>!no_remove_mutex);</highlight></codeline>
<codeline lineno="12137"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q-&gt;tq<sp/>==<sp/>NULL)<sp/>{<sp/>free(q);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/>}</highlight></codeline>
<codeline lineno="12138"><highlight class="normal"><sp/><sp/><sp/>q-&gt;numthreads<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="12139"><highlight class="normal"><sp/><sp/><sp/>stb_workq_numthreads(q,<sp/>numthreads);</highlight></codeline>
<codeline lineno="12140"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>q;</highlight></codeline>
<codeline lineno="12141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12142"><highlight class="normal"></highlight></codeline>
<codeline lineno="12143"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_workq_delete(stb_workqueue<sp/>*q)</highlight></codeline>
<codeline lineno="12144"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12145"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(stb_workq_length(q)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="12146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__thread_sleep(1);</highlight></codeline>
<codeline lineno="12147"><highlight class="normal"><sp/><sp/><sp/>stb_threadq_delete(q-&gt;tq);</highlight></codeline>
<codeline lineno="12148"><highlight class="normal"><sp/><sp/><sp/>free(q);</highlight></codeline>
<codeline lineno="12149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12150"><highlight class="normal"></highlight></codeline>
<codeline lineno="12151"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__work_maxitems<sp/>=<sp/>STB_THREADQUEUE_DYNAMIC;</highlight></codeline>
<codeline lineno="12152"><highlight class="normal"></highlight></codeline>
<codeline lineno="12153"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_work_init(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_threads)</highlight></codeline>
<codeline lineno="12154"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12155"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__work_global<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="12156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__threadmutex_init();</highlight></codeline>
<codeline lineno="12157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_mutex_begin(stb__workmutex);</highlight></codeline>
<codeline lineno="12158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_barrier();</highlight></codeline>
<codeline lineno="12159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*(stb_workqueue<sp/>*<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>*)<sp/>&amp;stb__work_global<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="12160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__work_global<sp/>=<sp/>stb_workq_new(num_threads,<sp/>stb__work_maxitems);</highlight></codeline>
<codeline lineno="12161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_mutex_end(stb__workmutex);</highlight></codeline>
<codeline lineno="12162"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12164"><highlight class="normal"></highlight></codeline>
<codeline lineno="12165"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__work_raw(stb_workqueue<sp/>*q,<sp/>stb_thread_func<sp/>f,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*d,<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**return_code,<sp/>stb_sync<sp/>rel)</highlight></codeline>
<codeline lineno="12166"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12167"><highlight class="normal"><sp/><sp/><sp/>stb__workinfo<sp/>w;</highlight></codeline>
<codeline lineno="12168"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="12169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_work_init(1);</highlight></codeline>
<codeline lineno="12170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>stb__work_global;</highlight></codeline>
<codeline lineno="12171"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12172"><highlight class="normal"><sp/><sp/><sp/>w.f<sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="12173"><highlight class="normal"><sp/><sp/><sp/>w.d<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="12174"><highlight class="normal"><sp/><sp/><sp/>w.retval<sp/>=<sp/>return_code;</highlight></codeline>
<codeline lineno="12175"><highlight class="normal"><sp/><sp/><sp/>w.sync<sp/>=<sp/>rel;</highlight></codeline>
<codeline lineno="12176"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_threadq_add(q-&gt;tq,<sp/>&amp;w);</highlight></codeline>
<codeline lineno="12177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12178"><highlight class="normal"></highlight></codeline>
<codeline lineno="12179"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_workq_length(stb_workqueue<sp/>*q)</highlight></codeline>
<codeline lineno="12180"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12181"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_threadq_length(q-&gt;tq);</highlight></codeline>
<codeline lineno="12182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12183"><highlight class="normal"></highlight></codeline>
<codeline lineno="12184"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_workq(stb_workqueue<sp/>*q,<sp/>stb_thread_func<sp/>f,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*d,<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**return_code)</highlight></codeline>
<codeline lineno="12185"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12186"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="12187"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_workq_reach(q,<sp/>f,<sp/>d,<sp/>return_code,<sp/>NULL);</highlight></codeline>
<codeline lineno="12188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12189"><highlight class="normal"></highlight></codeline>
<codeline lineno="12190"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_workq_reach(stb_workqueue<sp/>*q,<sp/>stb_thread_func<sp/>f,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*d,<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**return_code,<sp/>stb_sync<sp/>rel)</highlight></codeline>
<codeline lineno="12191"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12192"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="12193"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb__work_raw(q,<sp/>f,<sp/>d,<sp/>return_code,<sp/>rel);</highlight></codeline>
<codeline lineno="12194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12195"><highlight class="normal"></highlight></codeline>
<codeline lineno="12196"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__workq_numthreads(stb_workqueue<sp/>*q,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="12197"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12198"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(q-&gt;numthreads<sp/>&lt;<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="12199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_create_thread(stb__thread_workloop,<sp/>q);</highlight></codeline>
<codeline lineno="12200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++q-&gt;numthreads;</highlight></codeline>
<codeline lineno="12201"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12202"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(q-&gt;numthreads<sp/>&gt;<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="12203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__work_raw(q,<sp/>NULL,<sp/>NULL,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="12204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--q-&gt;numthreads;</highlight></codeline>
<codeline lineno="12205"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12207"><highlight class="normal"></highlight></codeline>
<codeline lineno="12208"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_workq_numthreads(stb_workqueue<sp/>*q,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="12209"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12210"><highlight class="normal"><sp/><sp/><sp/>stb_mutex_begin(stb__threadmutex);</highlight></codeline>
<codeline lineno="12211"><highlight class="normal"><sp/><sp/><sp/>stb__workq_numthreads(q,n);</highlight></codeline>
<codeline lineno="12212"><highlight class="normal"><sp/><sp/><sp/>stb_mutex_end(stb__threadmutex);</highlight></codeline>
<codeline lineno="12213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12214"><highlight class="normal"></highlight></codeline>
<codeline lineno="12215"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_work_maxunits(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="12216"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12217"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__work_global<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="12218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__work_maxitems<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="12219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_work_init(1);</highlight></codeline>
<codeline lineno="12220"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12221"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb__work_maxitems;</highlight></codeline>
<codeline lineno="12222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12223"><highlight class="normal"></highlight></codeline>
<codeline lineno="12224"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_work(stb_thread_func<sp/>f,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*d,<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**return_code)</highlight></codeline>
<codeline lineno="12225"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12226"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_workq(stb__work_global,<sp/>f,d,return_code);</highlight></codeline>
<codeline lineno="12227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12228"><highlight class="normal"></highlight></codeline>
<codeline lineno="12229"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_work_reach(stb_thread_func<sp/>f,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*d,<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**return_code,<sp/>stb_sync<sp/>rel)</highlight></codeline>
<codeline lineno="12230"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12231"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_workq_reach(stb__work_global,<sp/>f,d,return_code,rel);</highlight></codeline>
<codeline lineno="12232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12233"><highlight class="normal"></highlight></codeline>
<codeline lineno="12234"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_work_numthreads(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="12235"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12236"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__work_global<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="12237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_work_init(n);</highlight></codeline>
<codeline lineno="12238"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_workq_numthreads(stb__work_global,<sp/>n);</highlight></codeline>
<codeline lineno="12240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12241"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12242"><highlight class="normal"></highlight></codeline>
<codeline lineno="12243"><highlight class="normal"></highlight></codeline>
<codeline lineno="12245"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12246"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Background<sp/>disk<sp/>I/O</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12247"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12248"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12249"><highlight class="normal"></highlight></codeline>
<codeline lineno="12250"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_BGIO_READ_ALL<sp/><sp/><sp/>(-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12251"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_bgio_read<sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/>stb_uchar<sp/>**<ref refid="structresult" kindref="compound">result</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*olen);</highlight></codeline>
<codeline lineno="12252"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_bgio_readf<sp/><sp/><sp/>(FILE<sp/>*f<sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/>stb_uchar<sp/>**<ref refid="structresult" kindref="compound">result</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*olen);</highlight></codeline>
<codeline lineno="12253"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_bgio_read_to<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/>stb_uchar<sp/><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*olen);</highlight></codeline>
<codeline lineno="12254"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_bgio_readf_to(FILE<sp/>*f<sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/>stb_uchar<sp/><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*olen);</highlight></codeline>
<codeline lineno="12255"><highlight class="normal"></highlight></codeline>
<codeline lineno="12256"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12257"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12258"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>have_data;</highlight></codeline>
<codeline lineno="12259"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>is_valid;</highlight></codeline>
<codeline lineno="12260"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>is_dir;</highlight></codeline>
<codeline lineno="12261"><highlight class="normal"><sp/><sp/><sp/>time_t<sp/>filetime;</highlight></codeline>
<codeline lineno="12262"><highlight class="normal"><sp/><sp/><sp/>stb_int64<sp/>filesize;</highlight></codeline>
<codeline lineno="12263"><highlight class="normal">}<sp/>stb_bgstat;</highlight></codeline>
<codeline lineno="12264"><highlight class="normal"></highlight></codeline>
<codeline lineno="12265"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_bgio_stat<sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/>stb_bgstat<sp/>*<ref refid="structresult" kindref="compound">result</ref>);</highlight></codeline>
<codeline lineno="12266"><highlight class="normal"></highlight></codeline>
<codeline lineno="12267"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12268"><highlight class="normal"></highlight></codeline>
<codeline lineno="12269"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb_workqueue<sp/>*stb__diskio;</highlight></codeline>
<codeline lineno="12270"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb_mutex<sp/>stb__diskio_mutex;</highlight></codeline>
<codeline lineno="12271"><highlight class="normal"></highlight></codeline>
<codeline lineno="12272"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_thread_cleanup(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="12273"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12274"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__work_global)<sp/>stb_workq_delete(stb__work_global);<sp/>stb__work_global<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="12275"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__threadmutex)<sp/>stb_mutex_delete(stb__threadmutex);<sp/>stb__threadmutex<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="12276"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__workmutex)<sp/><sp/><sp/>stb_mutex_delete(stb__workmutex);<sp/><sp/><sp/>stb__workmutex<sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="12277"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__diskio)<sp/><sp/><sp/><sp/><sp/><sp/>stb_workq_delete(stb__diskio);<sp/><sp/><sp/><sp/><sp/><sp/>stb__diskio<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="12278"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__diskio_mutex)stb_mutex_delete(stb__diskio_mutex);stb__diskio_mutex=<sp/>NULL;</highlight></codeline>
<codeline lineno="12279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12280"><highlight class="normal"></highlight></codeline>
<codeline lineno="12281"><highlight class="normal"></highlight></codeline>
<codeline lineno="12282"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12284"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename;</highlight></codeline>
<codeline lineno="12285"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*f;</highlight></codeline>
<codeline lineno="12286"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset;</highlight></codeline>
<codeline lineno="12287"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="12288"><highlight class="normal"></highlight></codeline>
<codeline lineno="12289"><highlight class="normal"><sp/><sp/><sp/>stb_bgstat<sp/>*stat_out;</highlight></codeline>
<codeline lineno="12290"><highlight class="normal"><sp/><sp/><sp/>stb_uchar<sp/>*<ref refid="structoutput" kindref="compound">output</ref>;</highlight></codeline>
<codeline lineno="12291"><highlight class="normal"><sp/><sp/><sp/>stb_uchar<sp/>**<ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="12292"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*len_output;</highlight></codeline>
<codeline lineno="12293"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*flag;</highlight></codeline>
<codeline lineno="12294"><highlight class="normal">}<sp/>stb__disk_command;</highlight></codeline>
<codeline lineno="12295"><highlight class="normal"></highlight></codeline>
<codeline lineno="12296"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__MAX_DISK_COMMAND<sp/>100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12297"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb__disk_command<sp/>stb__dc_queue[STB__MAX_DISK_COMMAND];</highlight></codeline>
<codeline lineno="12298"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__dc_offset;</highlight></codeline>
<codeline lineno="12299"><highlight class="normal"></highlight></codeline>
<codeline lineno="12300"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__io_init(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="12301"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12302"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb__diskio)<sp/>{</highlight></codeline>
<codeline lineno="12303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__threadmutex_init();</highlight></codeline>
<codeline lineno="12304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_mutex_begin(stb__threadmutex);</highlight></codeline>
<codeline lineno="12305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_barrier();</highlight></codeline>
<codeline lineno="12306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*(stb_thread<sp/>*<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>*)<sp/>&amp;stb__diskio<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="12307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__diskio_mutex<sp/>=<sp/>stb_mutex_new();</highlight></codeline>
<codeline lineno="12308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>many<sp/>threads<sp/>so<sp/>OS<sp/>can<sp/>try<sp/>to<sp/>schedule<sp/>seeks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__diskio<sp/>=<sp/>stb_workq_new_flags(16,STB__MAX_DISK_COMMAND,STB_FALSE,STB_FALSE);</highlight></codeline>
<codeline lineno="12310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_mutex_end(stb__threadmutex);</highlight></codeline>
<codeline lineno="12312"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12314"><highlight class="normal"></highlight></codeline>
<codeline lineno="12315"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>stb__io_error(stb__disk_command<sp/>*dc)</highlight></codeline>
<codeline lineno="12316"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12317"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dc-&gt;len_output)<sp/>*dc-&gt;len_output<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="12318"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dc-&gt;result)<sp/>*dc-&gt;result<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="12319"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dc-&gt;flag)<sp/>*dc-&gt;flag<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="12320"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="12321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12322"><highlight class="normal"></highlight></codeline>
<codeline lineno="12323"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>stb__io_task(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="12324"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12325"><highlight class="normal"><sp/><sp/><sp/>stb__disk_command<sp/>*dc<sp/>=<sp/>(stb__disk_command<sp/>*)<sp/>p;</highlight></codeline>
<codeline lineno="12326"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="12327"><highlight class="normal"><sp/><sp/><sp/>FILE<sp/>*f;</highlight></codeline>
<codeline lineno="12328"><highlight class="normal"><sp/><sp/><sp/>stb_uchar<sp/>*buf;</highlight></codeline>
<codeline lineno="12329"><highlight class="normal"></highlight></codeline>
<codeline lineno="12330"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dc-&gt;stat_out)<sp/>{</highlight></codeline>
<codeline lineno="12331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_stati64<sp/>s;</highlight></codeline>
<codeline lineno="12332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_stati64(dc-&gt;filename,<sp/>&amp;s))<sp/>{</highlight></codeline>
<codeline lineno="12333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dc-&gt;stat_out-&gt;filesize<sp/>=<sp/>s.st_size;</highlight></codeline>
<codeline lineno="12334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dc-&gt;stat_out-&gt;filetime<sp/>=<sp/>s.st_mtime;</highlight></codeline>
<codeline lineno="12335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dc-&gt;stat_out-&gt;is_dir<sp/>=<sp/>s.st_mode<sp/>&amp;<sp/>_S_IFDIR;</highlight></codeline>
<codeline lineno="12336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dc-&gt;stat_out-&gt;is_valid<sp/>=<sp/>(s.st_mode<sp/>&amp;<sp/>_S_IFREG)<sp/>||<sp/>dc-&gt;stat_out-&gt;is_dir;</highlight></codeline>
<codeline lineno="12337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dc-&gt;stat_out-&gt;is_valid<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="12339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_barrier();</highlight></codeline>
<codeline lineno="12340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dc-&gt;stat_out-&gt;have_data<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="12341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(dc-&gt;filename);</highlight></codeline>
<codeline lineno="12342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="12343"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12344"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dc-&gt;f)<sp/>{</highlight></codeline>
<codeline lineno="12345"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>_fdopen(_dup(_fileno(dc-&gt;f)),<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12347"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>fdopen(dup(fileno(dc-&gt;f)),<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12349"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f)</highlight></codeline>
<codeline lineno="12351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb__io_error(dc);</highlight></codeline>
<codeline lineno="12352"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="12353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>fopen(dc-&gt;filename,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(dc-&gt;filename);</highlight></codeline>
<codeline lineno="12355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f)</highlight></codeline>
<codeline lineno="12356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb__io_error(dc);</highlight></codeline>
<codeline lineno="12357"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12358"><highlight class="normal"></highlight></codeline>
<codeline lineno="12359"><highlight class="normal"><sp/><sp/><sp/>len<sp/>=<sp/>dc-&gt;len;</highlight></codeline>
<codeline lineno="12360"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="12361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fseek(f,<sp/>0,<sp/>SEEK_END);</highlight></codeline>
<codeline lineno="12362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>ftell(f)<sp/>-<sp/>dc-&gt;offset;</highlight></codeline>
<codeline lineno="12363"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12364"><highlight class="normal"></highlight></codeline>
<codeline lineno="12365"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fseek(f,<sp/>dc-&gt;offset,<sp/>SEEK_SET))<sp/>{</highlight></codeline>
<codeline lineno="12366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="12367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb__io_error(dc);</highlight></codeline>
<codeline lineno="12368"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12369"><highlight class="normal"></highlight></codeline>
<codeline lineno="12370"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dc-&gt;output)</highlight></codeline>
<codeline lineno="12371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>dc-&gt;output;</highlight></codeline>
<codeline lineno="12372"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="12373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>(stb_uchar<sp/>*)<sp/>malloc(len);</highlight></codeline>
<codeline lineno="12374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buf<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="12375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="12376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb__io_error(dc);</highlight></codeline>
<codeline lineno="12377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12378"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12379"><highlight class="normal"></highlight></codeline>
<codeline lineno="12380"><highlight class="normal"><sp/><sp/><sp/>len<sp/>=<sp/>fread(buf,<sp/>1,<sp/>len,<sp/>f);</highlight></codeline>
<codeline lineno="12381"><highlight class="normal"><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="12382"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dc-&gt;len_output)<sp/>*dc-&gt;len_output<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="12383"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dc-&gt;result)<sp/>*dc-&gt;result<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="12384"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dc-&gt;flag)<sp/>*dc-&gt;flag<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="12385"><highlight class="normal"></highlight></codeline>
<codeline lineno="12386"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="12387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12388"><highlight class="normal"></highlight></codeline>
<codeline lineno="12389"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__io_add(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fname,<sp/>FILE<sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>off,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/>stb_uchar<sp/>*out,<sp/>stb_uchar<sp/>**<ref refid="structresult" kindref="compound">result</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*olen,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*flag,<sp/>stb_bgstat<sp/>*stat)</highlight></codeline>
<codeline lineno="12390"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12391"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="12392"><highlight class="normal"><sp/><sp/><sp/>stb__io_init();</highlight></codeline>
<codeline lineno="12393"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>memory<sp/>allocation<sp/>outside<sp/>of<sp/>mutex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12394"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fname)<sp/>fname<sp/>=<sp/>stb_p_strdup(fname);</highlight></codeline>
<codeline lineno="12395"><highlight class="normal"><sp/><sp/><sp/>stb_mutex_begin(stb__diskio_mutex);</highlight></codeline>
<codeline lineno="12396"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="12397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__disk_command<sp/>*dc<sp/>=<sp/>&amp;stb__dc_queue[stb__dc_offset];</highlight></codeline>
<codeline lineno="12398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dc-&gt;filename<sp/>=<sp/>fname;</highlight></codeline>
<codeline lineno="12399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dc-&gt;f<sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="12400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dc-&gt;offset<sp/>=<sp/>off;</highlight></codeline>
<codeline lineno="12401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dc-&gt;len<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="12402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dc-&gt;output<sp/>=<sp/>out;</highlight></codeline>
<codeline lineno="12403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dc-&gt;result<sp/>=<sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="12404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dc-&gt;len_output<sp/>=<sp/>olen;</highlight></codeline>
<codeline lineno="12405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dc-&gt;flag<sp/>=<sp/>flag;</highlight></codeline>
<codeline lineno="12406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dc-&gt;stat_out<sp/>=<sp/>stat;</highlight></codeline>
<codeline lineno="12407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>stb_workq(stb__diskio,<sp/>stb__io_task,<sp/>dc,<sp/>NULL);</highlight></codeline>
<codeline lineno="12408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res)</highlight></codeline>
<codeline lineno="12409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__dc_offset<sp/>=<sp/>(stb__dc_offset<sp/>+<sp/>1<sp/>==<sp/>STB__MAX_DISK_COMMAND<sp/>?<sp/>0<sp/>:<sp/>stb__dc_offset+1);</highlight></codeline>
<codeline lineno="12410"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12411"><highlight class="normal"><sp/><sp/><sp/>stb_mutex_end(stb__diskio_mutex);</highlight></codeline>
<codeline lineno="12412"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="12413"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12414"><highlight class="normal"></highlight></codeline>
<codeline lineno="12415"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_bgio_read(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/>stb_uchar<sp/>**<ref refid="structresult" kindref="compound">result</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*olen)</highlight></codeline>
<codeline lineno="12416"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12417"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb__io_add(filename,NULL,offset,len,NULL,<ref refid="structresult" kindref="compound">result</ref>,olen,NULL,NULL);</highlight></codeline>
<codeline lineno="12418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12419"><highlight class="normal"></highlight></codeline>
<codeline lineno="12420"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_bgio_readf(FILE<sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/>stb_uchar<sp/>**<ref refid="structresult" kindref="compound">result</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*olen)</highlight></codeline>
<codeline lineno="12421"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12422"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb__io_add(NULL,f,offset,len,NULL,<ref refid="structresult" kindref="compound">result</ref>,olen,NULL,NULL);</highlight></codeline>
<codeline lineno="12423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12424"><highlight class="normal"></highlight></codeline>
<codeline lineno="12425"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_bgio_read_to(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/>stb_uchar<sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*olen)</highlight></codeline>
<codeline lineno="12426"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12427"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb__io_add(filename,NULL,offset,len,<ref refid="classbuffer" kindref="compound">buffer</ref>,NULL,olen,NULL,NULL);</highlight></codeline>
<codeline lineno="12428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12429"><highlight class="normal"></highlight></codeline>
<codeline lineno="12430"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_bgio_readf_to(FILE<sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/>stb_uchar<sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*olen)</highlight></codeline>
<codeline lineno="12431"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12432"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb__io_add(NULL,f,offset,len,<ref refid="classbuffer" kindref="compound">buffer</ref>,NULL,olen,NULL,NULL);</highlight></codeline>
<codeline lineno="12433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12434"><highlight class="normal"></highlight></codeline>
<codeline lineno="12435"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_bgio_stat<sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/>stb_bgstat<sp/>*<ref refid="structresult" kindref="compound">result</ref>)</highlight></codeline>
<codeline lineno="12436"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12437"><highlight class="normal"><sp/><sp/><sp/><ref refid="structresult" kindref="compound">result</ref>-&gt;have_data<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="12438"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb__io_add(filename,NULL,0,0,0,NULL,0,NULL,<sp/><ref refid="structresult" kindref="compound">result</ref>);</highlight></codeline>
<codeline lineno="12439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12440"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12441"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12442"><highlight class="normal"></highlight></codeline>
<codeline lineno="12443"><highlight class="normal"></highlight></codeline>
<codeline lineno="12444"><highlight class="normal"></highlight></codeline>
<codeline lineno="12446"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12447"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fast<sp/>malloc<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12448"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12449"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>This<sp/>is<sp/>a<sp/>clone<sp/>of<sp/>TCMalloc,<sp/>but<sp/>without<sp/>the<sp/>thread<sp/>support.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12450"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>1.<sp/>large<sp/>objects<sp/>are<sp/>allocated<sp/>directly,<sp/>page-aligned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12451"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>2.<sp/>small<sp/>objects<sp/>are<sp/>allocated<sp/>in<sp/>homogeonous<sp/>heaps,<sp/>0<sp/>overhead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12452"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12453"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>We<sp/>keep<sp/>an<sp/>allocation<sp/>table<sp/>for<sp/>pages<sp/>a<sp/>la<sp/>TCMalloc.<sp/>This<sp/>would</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12454"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>require<sp/>4MB<sp/>for<sp/>the<sp/>entire<sp/>address<sp/>space,<sp/>but<sp/>we<sp/>only<sp/>allocate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12455"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>the<sp/>parts<sp/>that<sp/>are<sp/>in<sp/>use.<sp/>The<sp/>overhead<sp/>from<sp/>using<sp/>homogenous<sp/>heaps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12456"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>everywhere<sp/>is<sp/>3MB.<sp/>(That<sp/>is,<sp/>if<sp/>you<sp/>allocate<sp/>1<sp/>object<sp/>of<sp/>each<sp/>size,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12457"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>you&apos;ll<sp/>use<sp/>3MB.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12458"><highlight class="normal"></highlight></codeline>
<codeline lineno="12459"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(STB_DEFINE)<sp/>&amp;&amp;<sp/>((defined(_WIN32)<sp/>&amp;&amp;<sp/>!defined(_M_AMD64))<sp/>||<sp/>defined(STB_FASTMALLOC))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12460"><highlight class="normal"></highlight></codeline>
<codeline lineno="12461"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12462"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>_WINDOWS_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12463"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>STB__IMPORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12464"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>STB__IMPORT<sp/><sp/><sp/>STB_EXTERN<sp/>__declspec(dllimport)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12465"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>STB__DW<sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12466"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12467"><highlight class="normal"><sp/><sp/><sp/>STB__IMPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>__stdcall<sp/>VirtualAlloc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>protect);</highlight></codeline>
<codeline lineno="12468"><highlight class="normal"><sp/><sp/><sp/>STB__IMPORT<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>__stdcall<sp/>VirtualFree(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>freetype);</highlight></codeline>
<codeline lineno="12469"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12470"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>stb__alloc_pages_raw(x)<sp/><sp/><sp/><sp/><sp/>(stb_uint32)<sp/>VirtualAlloc(NULL,<sp/>(x),<sp/>0x3000,<sp/>0x04)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12471"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>stb__dealloc_pages_raw(p)<sp/><sp/><sp/>VirtualFree((void<sp/>*)<sp/>p,<sp/>0,<sp/>0x8000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12472"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12473"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#error<sp/>&quot;Platform<sp/>not<sp/>currently<sp/>supported&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12474"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12475"><highlight class="normal"></highlight></codeline>
<codeline lineno="12476"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stb__span</highlight></codeline>
<codeline lineno="12477"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12478"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start,<sp/>len;</highlight></codeline>
<codeline lineno="12479"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stb__span<sp/><sp/>*next,<sp/>*prev;</highlight></codeline>
<codeline lineno="12480"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*first_free;</highlight></codeline>
<codeline lineno="12481"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>list;<sp/></highlight><highlight class="comment">//<sp/>1..256<sp/>free;<sp/>257..511<sp/>sizeclass;<sp/>0=large<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12482"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocations;<sp/></highlight><highlight class="comment">//<sp/>#<sp/>outstanding<sp/>allocations<sp/>for<sp/>sizeclass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12483"><highlight class="normal">}<sp/>stb__span;<sp/><sp/></highlight><highlight class="comment">//<sp/>24</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12484"><highlight class="normal"></highlight></codeline>
<codeline lineno="12485"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb__span<sp/>**stb__span_for_page;</highlight></codeline>
<codeline lineno="12486"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__firstpage,<sp/>stb__lastpage;</highlight></codeline>
<codeline lineno="12487"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__update_page_range(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>first,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last)</highlight></codeline>
<codeline lineno="12488"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12489"><highlight class="normal"><sp/><sp/><sp/>stb__span<sp/>**sfp;</highlight></codeline>
<codeline lineno="12490"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>f,l;</highlight></codeline>
<codeline lineno="12491"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first<sp/>&gt;=<sp/>stb__firstpage<sp/>&amp;&amp;<sp/>last<sp/>&lt;=<sp/>stb__lastpage)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12492"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__span_for_page<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="12493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>first;</highlight></codeline>
<codeline lineno="12494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>f+stb_max(last-f,<sp/>16384);</highlight></codeline>
<codeline lineno="12495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>stb_min(l,<sp/>1&lt;&lt;20);</highlight></codeline>
<codeline lineno="12496"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last<sp/>&gt;<sp/>stb__lastpage)<sp/>{</highlight></codeline>
<codeline lineno="12497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>stb__firstpage;</highlight></codeline>
<codeline lineno="12498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>f<sp/>+<sp/>(stb__lastpage<sp/>-<sp/>f)<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="12499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>stb_clamp(last,<sp/>l,1&lt;&lt;20);</highlight></codeline>
<codeline lineno="12500"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="12501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>stb__lastpage;</highlight></codeline>
<codeline lineno="12502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>l<sp/>-<sp/>(l<sp/>-<sp/>stb__firstpage)<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="12503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>stb_clamp(f,<sp/>0,first);</highlight></codeline>
<codeline lineno="12504"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12505"><highlight class="normal"><sp/><sp/><sp/>sfp<sp/>=<sp/>(stb__span<sp/>**)<sp/>stb__alloc_pages_raw(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>*<sp/>(l-f));</highlight></codeline>
<codeline lineno="12506"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=f;<sp/>i<sp/>&lt;<sp/>stb__firstpage;<sp/>++i)<sp/>sfp[i<sp/>-<sp/>f]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="12507"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/>;<sp/>i<sp/>&lt;<sp/>stb__lastpage<sp/>;<sp/>++i)<sp/>sfp[i<sp/>-<sp/>f]<sp/>=<sp/>stb__span_for_page[i<sp/>-<sp/>stb__firstpage];</highlight></codeline>
<codeline lineno="12508"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/><sp/><sp/>;<sp/>i<sp/>&lt;<sp/>l<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>++i)<sp/>sfp[i<sp/>-<sp/>f]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="12509"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__span_for_page)<sp/>stb__dealloc_pages_raw(stb__span_for_page);</highlight></codeline>
<codeline lineno="12510"><highlight class="normal"><sp/><sp/><sp/>stb__firstpage<sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="12511"><highlight class="normal"><sp/><sp/><sp/>stb__lastpage<sp/><sp/>=<sp/>l;</highlight></codeline>
<codeline lineno="12512"><highlight class="normal"><sp/><sp/><sp/>stb__span_for_page<sp/>=<sp/>sfp;</highlight></codeline>
<codeline lineno="12513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12514"><highlight class="normal"></highlight></codeline>
<codeline lineno="12515"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb__span<sp/>*stb__span_free=NULL;</highlight></codeline>
<codeline lineno="12516"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb__span<sp/>*stb__span_first,<sp/>*stb__span_end;</highlight></codeline>
<codeline lineno="12517"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb__span<sp/>*stb__span_alloc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="12518"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12519"><highlight class="normal"><sp/><sp/><sp/>stb__span<sp/>*s<sp/>=<sp/>stb__span_free;</highlight></codeline>
<codeline lineno="12520"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s)</highlight></codeline>
<codeline lineno="12521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__span_free<sp/>=<sp/>s-&gt;next;</highlight></codeline>
<codeline lineno="12522"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="12523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb__span_first)<sp/>{</highlight></codeline>
<codeline lineno="12524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__span_first<sp/>=<sp/>(stb__span<sp/>*)<sp/>stb__alloc_pages_raw(65536);</highlight></codeline>
<codeline lineno="12525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__span_first<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="12526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__span_end<sp/>=<sp/>stb__span_first<sp/>+<sp/>(65536<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stb__span));</highlight></codeline>
<codeline lineno="12527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>stb__span_first++;</highlight></codeline>
<codeline lineno="12529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__span_first<sp/>==<sp/>stb__span_end)<sp/>stb__span_first<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="12530"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12531"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="12532"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12533"><highlight class="normal"></highlight></codeline>
<codeline lineno="12534"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb__span<sp/>*stb__spanlist[512];</highlight></codeline>
<codeline lineno="12535"><highlight class="normal"></highlight></codeline>
<codeline lineno="12536"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__spanlist_unlink(stb__span<sp/>*s)</highlight></codeline>
<codeline lineno="12537"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12538"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;prev)</highlight></codeline>
<codeline lineno="12539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;prev-&gt;next<sp/>=<sp/>s-&gt;next;</highlight></codeline>
<codeline lineno="12540"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="12541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>s-&gt;list;</highlight></codeline>
<codeline lineno="12542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(stb__spanlist[n]<sp/>==<sp/>s);</highlight></codeline>
<codeline lineno="12543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__spanlist[n]<sp/>=<sp/>s-&gt;next;</highlight></codeline>
<codeline lineno="12544"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12545"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;next)</highlight></codeline>
<codeline lineno="12546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;next-&gt;prev<sp/>=<sp/>s-&gt;prev;</highlight></codeline>
<codeline lineno="12547"><highlight class="normal"><sp/><sp/><sp/>s-&gt;next<sp/>=<sp/>s-&gt;prev<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="12548"><highlight class="normal"><sp/><sp/><sp/>s-&gt;list<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="12549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12550"><highlight class="normal"></highlight></codeline>
<codeline lineno="12551"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__spanlist_add(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>stb__span<sp/>*s)</highlight></codeline>
<codeline lineno="12552"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12553"><highlight class="normal"><sp/><sp/><sp/>s-&gt;list<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="12554"><highlight class="normal"><sp/><sp/><sp/>s-&gt;next<sp/>=<sp/>stb__spanlist[n];</highlight></codeline>
<codeline lineno="12555"><highlight class="normal"><sp/><sp/><sp/>s-&gt;prev<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="12556"><highlight class="normal"><sp/><sp/><sp/>stb__spanlist[n]<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="12557"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;next)<sp/>s-&gt;next-&gt;prev<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="12558"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12559"><highlight class="normal"></highlight></codeline>
<codeline lineno="12560"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb__page_shift<sp/><sp/><sp/><sp/><sp/><sp/><sp/>12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12561"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb__page_size<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>stb__page_shift)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12562"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb__page_number(x)<sp/><sp/><sp/>((x)<sp/>&gt;&gt;<sp/>stb__page_shift)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12563"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb__page_address(x)<sp/><sp/>((x)<sp/>&lt;&lt;<sp/>stb__page_shift)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12564"><highlight class="normal"></highlight></codeline>
<codeline lineno="12565"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__set_span_for_page(stb__span<sp/>*s)</highlight></codeline>
<codeline lineno="12566"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12567"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="12568"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>s-&gt;len;<sp/>++i)</highlight></codeline>
<codeline lineno="12569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__span_for_page[s-&gt;start<sp/>+<sp/>i<sp/>-<sp/>stb__firstpage]<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="12570"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12571"><highlight class="normal"></highlight></codeline>
<codeline lineno="12572"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb__span<sp/>*stb__coalesce(stb__span<sp/>*a,<sp/>stb__span<sp/>*b)</highlight></codeline>
<codeline lineno="12573"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12574"><highlight class="normal"><sp/><sp/><sp/>assert(a-&gt;start<sp/>+<sp/>a-&gt;len<sp/>==<sp/>b-&gt;start);</highlight></codeline>
<codeline lineno="12575"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;list)<sp/>stb__spanlist_unlink(a);</highlight></codeline>
<codeline lineno="12576"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b-&gt;list)<sp/>stb__spanlist_unlink(b);</highlight></codeline>
<codeline lineno="12577"><highlight class="normal"><sp/><sp/><sp/>a-&gt;len<sp/>+=<sp/>b-&gt;len;</highlight></codeline>
<codeline lineno="12578"><highlight class="normal"><sp/><sp/><sp/>b-&gt;len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="12579"><highlight class="normal"><sp/><sp/><sp/>b-&gt;next<sp/>=<sp/>stb__span_free;</highlight></codeline>
<codeline lineno="12580"><highlight class="normal"><sp/><sp/><sp/>stb__span_free<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="12581"><highlight class="normal"><sp/><sp/><sp/>stb__set_span_for_page(a);</highlight></codeline>
<codeline lineno="12582"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="12583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12584"><highlight class="normal"></highlight></codeline>
<codeline lineno="12585"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__free_span(stb__span<sp/>*s)</highlight></codeline>
<codeline lineno="12586"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12587"><highlight class="normal"><sp/><sp/><sp/>stb__span<sp/>*n<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="12588"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;start<sp/>&gt;<sp/>stb__firstpage)<sp/>{</highlight></codeline>
<codeline lineno="12589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>stb__span_for_page[s-&gt;start-1<sp/>-<sp/>stb__firstpage];</highlight></codeline>
<codeline lineno="12590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&amp;&amp;<sp/>n-&gt;allocations<sp/>==<sp/>-2<sp/>&amp;&amp;<sp/>n-&gt;start<sp/>+<sp/>n-&gt;len<sp/>==<sp/>s-&gt;start)<sp/>s<sp/>=<sp/>stb__coalesce(n,s);</highlight></codeline>
<codeline lineno="12591"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12592"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;start<sp/>+<sp/>s-&gt;len<sp/>&lt;<sp/>stb__lastpage)<sp/>{</highlight></codeline>
<codeline lineno="12593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>stb__span_for_page[s-&gt;start<sp/>+<sp/>s-&gt;len<sp/>-<sp/>stb__firstpage];</highlight></codeline>
<codeline lineno="12594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&amp;&amp;<sp/>n-&gt;allocations<sp/>==<sp/>-2<sp/>&amp;&amp;<sp/>s-&gt;start<sp/>+<sp/>s-&gt;len<sp/>==<sp/>n-&gt;start)<sp/>s<sp/>=<sp/>stb__coalesce(s,n);</highlight></codeline>
<codeline lineno="12595"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12596"><highlight class="normal"><sp/><sp/><sp/>s-&gt;allocations<sp/>=<sp/>-2;</highlight></codeline>
<codeline lineno="12597"><highlight class="normal"><sp/><sp/><sp/>stb__spanlist_add(s-&gt;len<sp/>&gt;<sp/>256<sp/>?<sp/>256<sp/>:<sp/>s-&gt;len,<sp/>s);</highlight></codeline>
<codeline lineno="12598"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12599"><highlight class="normal"></highlight></codeline>
<codeline lineno="12600"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb__span<sp/>*stb__alloc_pages(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num)</highlight></codeline>
<codeline lineno="12601"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12602"><highlight class="normal"><sp/><sp/><sp/>stb__span<sp/>*s<sp/>=<sp/>stb__span_alloc();</highlight></codeline>
<codeline lineno="12603"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="12604"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="12605"><highlight class="normal"><sp/><sp/><sp/>p<sp/>=<sp/>stb__alloc_pages_raw(num<sp/>&lt;&lt;<sp/>stb__page_shift);</highlight></codeline>
<codeline lineno="12606"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>0)<sp/>{<sp/>s-&gt;next<sp/>=<sp/>stb__span_free;<sp/>stb__span_free<sp/>=<sp/>s;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="12607"><highlight class="normal"><sp/><sp/><sp/>assert(stb__page_address(stb__page_number(p))<sp/>==<sp/>p);</highlight></codeline>
<codeline lineno="12608"><highlight class="normal"><sp/><sp/><sp/>p<sp/>=<sp/>stb__page_number(p);</highlight></codeline>
<codeline lineno="12609"><highlight class="normal"><sp/><sp/><sp/>stb__update_page_range(p,<sp/>p+num);</highlight></codeline>
<codeline lineno="12610"><highlight class="normal"><sp/><sp/><sp/>s-&gt;start<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="12611"><highlight class="normal"><sp/><sp/><sp/>s-&gt;len<sp/><sp/><sp/>=<sp/>num;</highlight></codeline>
<codeline lineno="12612"><highlight class="normal"><sp/><sp/><sp/>s-&gt;next<sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="12613"><highlight class="normal"><sp/><sp/><sp/>s-&gt;prev<sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="12614"><highlight class="normal"><sp/><sp/><sp/>stb__set_span_for_page(s);</highlight></codeline>
<codeline lineno="12615"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="12616"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12617"><highlight class="normal"></highlight></codeline>
<codeline lineno="12618"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb__span<sp/>*stb__alloc_span(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pagecount)</highlight></codeline>
<codeline lineno="12619"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12620"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="12621"><highlight class="normal"><sp/><sp/><sp/>stb__span<sp/>*p<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="12622"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=pagecount;<sp/>i<sp/>&lt;<sp/>256;<sp/>++i)</highlight></codeline>
<codeline lineno="12623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__spanlist[i])<sp/>{</highlight></codeline>
<codeline lineno="12624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>stb__spanlist[i];</highlight></codeline>
<codeline lineno="12625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12627"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p)<sp/>{</highlight></codeline>
<codeline lineno="12628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>stb__spanlist[256];</highlight></codeline>
<codeline lineno="12629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p<sp/>&amp;&amp;<sp/>p-&gt;len<sp/>&lt;<sp/>pagecount)</highlight></codeline>
<codeline lineno="12630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>p-&gt;next;</highlight></codeline>
<codeline lineno="12631"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12632"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p)<sp/>{</highlight></codeline>
<codeline lineno="12633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>stb__alloc_pages(pagecount<sp/>&lt;<sp/>16<sp/>?<sp/>16<sp/>:<sp/>pagecount);</highlight></codeline>
<codeline lineno="12634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="12635"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__spanlist_unlink(p);</highlight></codeline>
<codeline lineno="12637"><highlight class="normal"></highlight></codeline>
<codeline lineno="12638"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;len<sp/>&gt;<sp/>pagecount)<sp/>{</highlight></codeline>
<codeline lineno="12639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__span<sp/>*q<sp/>=<sp/>stb__span_alloc();</highlight></codeline>
<codeline lineno="12640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q)<sp/>{</highlight></codeline>
<codeline lineno="12641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q-&gt;start<sp/>=<sp/>p-&gt;start<sp/>+<sp/>pagecount;</highlight></codeline>
<codeline lineno="12642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q-&gt;len<sp/><sp/><sp/>=<sp/>p-&gt;len<sp/><sp/><sp/>-<sp/>pagecount;</highlight></codeline>
<codeline lineno="12643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;len<sp/><sp/><sp/>=<sp/>pagecount;</highlight></codeline>
<codeline lineno="12644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>q-&gt;len;<sp/>++i)</highlight></codeline>
<codeline lineno="12645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__span_for_page[q-&gt;start+i<sp/>-<sp/>stb__firstpage]<sp/>=<sp/>q;</highlight></codeline>
<codeline lineno="12646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__spanlist_add(q-&gt;len<sp/>&gt;<sp/>256<sp/>?<sp/>256<sp/>:<sp/>q-&gt;len,<sp/>q);</highlight></codeline>
<codeline lineno="12647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12648"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12649"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="12650"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12651"><highlight class="normal"></highlight></codeline>
<codeline lineno="12652"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__MAX_SMALL_SIZE<sp/><sp/><sp/><sp/><sp/>32768</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12653"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__MAX_SIZE_CLASSES<sp/><sp/><sp/>256</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12654"><highlight class="normal"></highlight></codeline>
<codeline lineno="12655"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>stb__class_base[32];</highlight></codeline>
<codeline lineno="12656"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>stb__class_shift[32];</highlight></codeline>
<codeline lineno="12657"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>stb__pages_for_class[STB__MAX_SIZE_CLASSES];</highlight></codeline>
<codeline lineno="12658"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__size_for_class[STB__MAX_SIZE_CLASSES];</highlight></codeline>
<codeline lineno="12659"><highlight class="normal"></highlight></codeline>
<codeline lineno="12660"><highlight class="normal">stb__span<sp/>*stb__get_nonempty_sizeclass(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c)</highlight></codeline>
<codeline lineno="12661"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12662"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>c<sp/>+<sp/>256,<sp/>i,<sp/>size,<sp/>tsize;<sp/></highlight><highlight class="comment">//<sp/>remap<sp/>to<sp/>span-list<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12663"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*z;</highlight></codeline>
<codeline lineno="12664"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*q;</highlight></codeline>
<codeline lineno="12665"><highlight class="normal"><sp/><sp/><sp/>stb__span<sp/>*p<sp/>=<sp/>stb__spanlist[s];</highlight></codeline>
<codeline lineno="12666"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p)<sp/>{</highlight></codeline>
<codeline lineno="12667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;first_free)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;<sp/></highlight><highlight class="comment">//<sp/>fast<sp/>path:<sp/>it&apos;s<sp/>in<sp/>the<sp/>first<sp/>one<sp/>in<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(p=p-&gt;next;<sp/>p;<sp/>p=p-&gt;next)</highlight></codeline>
<codeline lineno="12669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;first_free)<sp/>{</highlight></codeline>
<codeline lineno="12670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>move<sp/>to<sp/>front<sp/>for<sp/>future<sp/>queries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__spanlist_unlink(p);</highlight></codeline>
<codeline lineno="12672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__spanlist_add(s,<sp/>p);</highlight></codeline>
<codeline lineno="12673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="12674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12675"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12676"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>non-empty<sp/>ones,<sp/>so<sp/>allocate<sp/>a<sp/>new<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12677"><highlight class="normal"><sp/><sp/><sp/>p<sp/>=<sp/>stb__alloc_span(stb__pages_for_class[c]);</highlight></codeline>
<codeline lineno="12678"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="12679"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>the<sp/>free<sp/>list<sp/>up<sp/>front</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12680"><highlight class="normal"><sp/><sp/><sp/>size<sp/>=<sp/>stb__size_for_class[c];</highlight></codeline>
<codeline lineno="12681"><highlight class="normal"><sp/><sp/><sp/>tsize<sp/>=<sp/>stb__pages_for_class[c]<sp/>&lt;&lt;<sp/>stb__page_shift;</highlight></codeline>
<codeline lineno="12682"><highlight class="normal"><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="12683"><highlight class="normal"><sp/><sp/><sp/>z<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>stb__page_address(p-&gt;start);</highlight></codeline>
<codeline lineno="12684"><highlight class="normal"><sp/><sp/><sp/>q<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="12685"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>size<sp/>&lt;=<sp/>tsize)<sp/>{</highlight></codeline>
<codeline lineno="12686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>z<sp/>=<sp/>q;<sp/>q<sp/>=<sp/>z;</highlight></codeline>
<codeline lineno="12687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>+=<sp/>size;</highlight></codeline>
<codeline lineno="12688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>size;</highlight></codeline>
<codeline lineno="12689"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12690"><highlight class="normal"><sp/><sp/><sp/>p-&gt;first_free<sp/>=<sp/>q;</highlight></codeline>
<codeline lineno="12691"><highlight class="normal"><sp/><sp/><sp/>p-&gt;allocations<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="12692"><highlight class="normal"><sp/><sp/><sp/>stb__spanlist_add(s,p);</highlight></codeline>
<codeline lineno="12693"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="12694"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12695"><highlight class="normal"></highlight></codeline>
<codeline lineno="12696"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__sizeclass(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz)</highlight></codeline>
<codeline lineno="12697"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12698"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>stb_log2_floor(sz);<sp/></highlight><highlight class="comment">//<sp/>-1<sp/>below<sp/>to<sp/>group<sp/>e.g.<sp/>13,14,15,16<sp/>correctly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12699"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb__class_base[z]<sp/>+<sp/>((sz-1)<sp/>&gt;&gt;<sp/>stb__class_shift[z]);</highlight></codeline>
<codeline lineno="12700"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12701"><highlight class="normal"></highlight></codeline>
<codeline lineno="12702"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__init_sizeclass(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="12703"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12704"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>size,<sp/>overhead;</highlight></codeline>
<codeline lineno="12705"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>align_shift<sp/>=<sp/>2;<sp/><sp/></highlight><highlight class="comment">//<sp/>allow<sp/>4-byte<sp/>and<sp/>12-byte<sp/>blocks<sp/>as<sp/>well,<sp/>vs.<sp/>TCMalloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12706"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>next_class<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="12707"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last_log<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="12708"><highlight class="normal"></highlight></codeline>
<codeline lineno="12709"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>align_shift;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="12710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__class_base<sp/>[i]<sp/>=<sp/>next_class;</highlight></codeline>
<codeline lineno="12711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__class_shift[i]<sp/>=<sp/>align_shift;</highlight></codeline>
<codeline lineno="12712"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12713"><highlight class="normal"></highlight></codeline>
<codeline lineno="12714"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(size<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>align_shift;<sp/>size<sp/>&lt;=<sp/>STB__MAX_SMALL_SIZE;<sp/>size<sp/>+=<sp/>1<sp/>&lt;&lt;<sp/>align_shift)<sp/>{</highlight></codeline>
<codeline lineno="12715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>stb_log2_floor(size);</highlight></codeline>
<codeline lineno="12716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>last_log)<sp/>{</highlight></codeline>
<codeline lineno="12717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/>16)<sp/>++align_shift;<sp/></highlight><highlight class="comment">//<sp/>switch<sp/>from<sp/>4-byte<sp/>to<sp/>8-byte<sp/>alignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&gt;=<sp/>128<sp/>&amp;&amp;<sp/>align_shift<sp/>&lt;<sp/>8)<sp/>++align_shift;</highlight></codeline>
<codeline lineno="12719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__class_base[i]<sp/><sp/>=<sp/>next_class<sp/>-<sp/>((size-1)<sp/>&gt;&gt;<sp/>align_shift);</highlight></codeline>
<codeline lineno="12720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__class_shift[i]<sp/>=<sp/>align_shift;</highlight></codeline>
<codeline lineno="12721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_log<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="12722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__size_for_class[next_class++]<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="12724"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12725"><highlight class="normal"></highlight></codeline>
<codeline lineno="12726"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=1;<sp/>i<sp/>&lt;=<sp/>STB__MAX_SMALL_SIZE;<sp/>++i)</highlight></codeline>
<codeline lineno="12727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(i<sp/>&lt;=<sp/>stb__size_for_class[stb__sizeclass(i)]);</highlight></codeline>
<codeline lineno="12728"><highlight class="normal"></highlight></codeline>
<codeline lineno="12729"><highlight class="normal"><sp/><sp/><sp/>overhead<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="12730"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>next_class;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="12731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>stb__size_for_class[i];</highlight></codeline>
<codeline lineno="12732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>stb__page_size;</highlight></codeline>
<codeline lineno="12733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(size<sp/>%<sp/>s<sp/>&gt;<sp/>size<sp/>&gt;&gt;<sp/>3)</highlight></codeline>
<codeline lineno="12734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>+=<sp/>stb__page_size;</highlight></codeline>
<codeline lineno="12735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__pages_for_class[i]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)<sp/>(size<sp/>&gt;&gt;<sp/>stb__page_shift);</highlight></codeline>
<codeline lineno="12736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>overhead<sp/>+=<sp/>size;</highlight></codeline>
<codeline lineno="12737"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12738"><highlight class="normal"><sp/><sp/><sp/>assert(overhead<sp/>&lt;<sp/>(4<sp/>&lt;&lt;<sp/>20));<sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>it&apos;s<sp/>under<sp/>4MB<sp/>of<sp/>overhead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12739"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12740"><highlight class="normal"></highlight></codeline>
<codeline lineno="12741"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12742"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb__smemset(a,b,c)<sp/><sp/>memset((void<sp/>*)<sp/>a,<sp/>b,<sp/>c)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12743"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(STB_FASTMALLOC_INIT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12744"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb__smemset(a,b,c)<sp/><sp/>memset((void<sp/>*)<sp/>a,<sp/>b,<sp/>c)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12745"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12746"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb__smemset(a,b,c)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12747"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12748"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb_smalloc(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz)</highlight></codeline>
<codeline lineno="12749"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12750"><highlight class="normal"><sp/><sp/><sp/>stb__span<sp/>*s;</highlight></codeline>
<codeline lineno="12751"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sz<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="12752"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__size_for_class[1]<sp/>==<sp/>0)<sp/>stb__init_sizeclass();</highlight></codeline>
<codeline lineno="12753"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sz<sp/>&gt;<sp/>STB__MAX_SMALL_SIZE)<sp/>{</highlight></codeline>
<codeline lineno="12754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>stb__alloc_span((sz<sp/>+<sp/>stb__page_size<sp/>-<sp/>1)<sp/>&gt;&gt;<sp/>stb__page_shift);</highlight></codeline>
<codeline lineno="12755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="12756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;list<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="12757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;next<sp/>=<sp/>s-&gt;prev<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="12758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;allocations<sp/>=<sp/>-32767;</highlight></codeline>
<codeline lineno="12759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__smemset(stb__page_address(s-&gt;start),<sp/>0xcd,<sp/>(sz+3)&amp;~3);</highlight></codeline>
<codeline lineno="12760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>stb__page_address(s-&gt;start);</highlight></codeline>
<codeline lineno="12761"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="12762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="12763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>stb__sizeclass(sz);</highlight></codeline>
<codeline lineno="12764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>stb__spanlist[256+c];</highlight></codeline>
<codeline lineno="12765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s<sp/>||<sp/>!s-&gt;first_free)</highlight></codeline>
<codeline lineno="12766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>stb__get_nonempty_sizeclass(c);</highlight></codeline>
<codeline lineno="12767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="12768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>s-&gt;first_free;</highlight></codeline>
<codeline lineno="12769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;first_free<sp/>=<sp/>*<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>p;</highlight></codeline>
<codeline lineno="12770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++s-&gt;allocations;</highlight></codeline>
<codeline lineno="12771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__smemset(p,0xcd,<sp/>sz);</highlight></codeline>
<codeline lineno="12772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="12773"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12774"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12775"><highlight class="normal"></highlight></codeline>
<codeline lineno="12776"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_ssize(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="12777"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12778"><highlight class="normal"><sp/><sp/><sp/>stb__span<sp/>*s;</highlight></codeline>
<codeline lineno="12779"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="12780"><highlight class="normal"><sp/><sp/><sp/>s<sp/>=<sp/>stb__span_for_page[stb__page_number((stb_uint)<sp/>p)<sp/>-<sp/>stb__firstpage];</highlight></codeline>
<codeline lineno="12781"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;list<sp/>&gt;=<sp/>256)<sp/>{</highlight></codeline>
<codeline lineno="12782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb__size_for_class[s-&gt;list<sp/>-<sp/>256];</highlight></codeline>
<codeline lineno="12783"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="12784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(s-&gt;list<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="12785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s-&gt;len<sp/>&lt;&lt;<sp/>stb__page_shift;</highlight></codeline>
<codeline lineno="12786"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12787"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12788"><highlight class="normal"></highlight></codeline>
<codeline lineno="12789"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_sfree(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p)</highlight></codeline>
<codeline lineno="12790"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12791"><highlight class="normal"><sp/><sp/><sp/>stb__span<sp/>*s;</highlight></codeline>
<codeline lineno="12792"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12793"><highlight class="normal"><sp/><sp/><sp/>s<sp/>=<sp/>stb__span_for_page[stb__page_number((stb_uint)<sp/>p)<sp/>-<sp/>stb__firstpage];</highlight></codeline>
<codeline lineno="12794"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;list<sp/>&gt;=<sp/>256)<sp/>{</highlight></codeline>
<codeline lineno="12795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__smemset(p,<sp/>0xfe,<sp/>stb__size_for_class[s-&gt;list-256]);</highlight></codeline>
<codeline lineno="12796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)<sp/>p<sp/>=<sp/>s-&gt;first_free;</highlight></codeline>
<codeline lineno="12797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;first_free<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="12798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(--s-&gt;allocations<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="12799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__spanlist_unlink(s);</highlight></codeline>
<codeline lineno="12800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__free_span(s);</highlight></codeline>
<codeline lineno="12801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12802"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="12803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(s-&gt;list<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="12804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__smemset(p,<sp/>0xfe,<sp/>stb_ssize(p));</highlight></codeline>
<codeline lineno="12805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__free_span(s);</highlight></codeline>
<codeline lineno="12806"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12807"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12808"><highlight class="normal"></highlight></codeline>
<codeline lineno="12809"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb_srealloc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz)</highlight></codeline>
<codeline lineno="12810"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12811"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cur_size;</highlight></codeline>
<codeline lineno="12812"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb_smalloc(sz);</highlight></codeline>
<codeline lineno="12813"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sz<sp/>==<sp/>0)<sp/>{<sp/>stb_sfree(p);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/>}</highlight></codeline>
<codeline lineno="12814"><highlight class="normal"><sp/><sp/><sp/>cur_size<sp/>=<sp/>stb_ssize(p);</highlight></codeline>
<codeline lineno="12815"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sz<sp/>&gt;<sp/>cur_size<sp/>||<sp/>sz<sp/>&lt;=<sp/>(cur_size<sp/>&gt;&gt;<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="12816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*q;</highlight></codeline>
<codeline lineno="12817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sz<sp/>&gt;<sp/>cur_size<sp/>&amp;&amp;<sp/>sz<sp/>&lt;<sp/>(cur_size<sp/>&lt;&lt;<sp/>1))<sp/>sz<sp/>=<sp/>cur_size<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline lineno="12818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>stb_smalloc(sz);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="12819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(q,<sp/>p,<sp/>sz<sp/>&lt;<sp/>cur_size<sp/>?<sp/>sz<sp/>:<sp/>cur_size);</highlight></codeline>
<codeline lineno="12820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_sfree(p);</highlight></codeline>
<codeline lineno="12821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>q;</highlight></codeline>
<codeline lineno="12822"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12823"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="12824"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12825"><highlight class="normal"></highlight></codeline>
<codeline lineno="12826"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stb_scalloc(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz)</highlight></codeline>
<codeline lineno="12827"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12828"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="12829"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>0<sp/>||<sp/>sz<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="12830"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb_log2_ceil(n)<sp/>+<sp/>stb_log2_ceil(n)<sp/>&gt;=<sp/>32)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="12831"><highlight class="normal"><sp/><sp/><sp/>p<sp/>=<sp/>stb_smalloc(n*sz);</highlight></codeline>
<codeline lineno="12832"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p)<sp/>memset(p,<sp/>0,<sp/>n*sz);</highlight></codeline>
<codeline lineno="12833"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="12834"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12835"><highlight class="normal"></highlight></codeline>
<codeline lineno="12836"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb_sstrdup(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s)</highlight></codeline>
<codeline lineno="12837"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12838"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>strlen(s);</highlight></codeline>
<codeline lineno="12839"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>stb_smalloc(n+1);</highlight></codeline>
<codeline lineno="12840"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p)<sp/>stb_p_strcpy_s(p,n+1,s);</highlight></codeline>
<codeline lineno="12841"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="12842"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12843"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12844"><highlight class="normal"></highlight></codeline>
<codeline lineno="12845"><highlight class="normal"></highlight></codeline>
<codeline lineno="12846"><highlight class="normal"></highlight></codeline>
<codeline lineno="12848"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12849"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Source<sp/>code<sp/>constants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12850"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12851"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>trivial<sp/>system<sp/>to<sp/>let<sp/>you<sp/>specify<sp/>constants<sp/>in<sp/>source<sp/>code,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12852"><highlight class="normal"></highlight><highlight class="comment">//<sp/>then<sp/>while<sp/>running<sp/>you<sp/>can<sp/>change<sp/>the<sp/>constants.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12853"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12854"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>you<sp/>can&apos;t<sp/>wrap<sp/>the<sp/>#defines,<sp/>because<sp/>we<sp/>need<sp/>to<sp/>know<sp/>their</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12855"><highlight class="normal"></highlight><highlight class="comment">//<sp/>names.<sp/>So<sp/>we<sp/>provide<sp/>a<sp/>pre-wrapped<sp/>version<sp/>without<sp/>&apos;STB_&apos;<sp/>for<sp/>convenience;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12856"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>request<sp/>it,<sp/>#define<sp/>STB_CONVENIENT_H,<sp/>yielding:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12857"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>KI<sp/>--<sp/>integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12858"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>KU<sp/>--<sp/>unsigned<sp/>integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12859"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>KF<sp/>--<sp/>float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12860"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>KD<sp/>--<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12861"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>KS<sp/>--<sp/>string<sp/>constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12862"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12863"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Defaults<sp/>to<sp/>functioning<sp/>in<sp/>debug<sp/>build,<sp/>not<sp/>in<sp/>release<sp/>builds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12864"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>force<sp/>on,<sp/>define<sp/>STB_ALWAYS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12865"><highlight class="normal"></highlight></codeline>
<codeline lineno="12866"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_CONVENIENT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12867"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KI(x)<sp/>STB_I(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12868"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KU(x)<sp/>STB_UI(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12869"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KF(x)<sp/>STB_F(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12870"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KD(x)<sp/>STB_D(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12871"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KS(x)<sp/>STB_S(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12872"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12873"><highlight class="normal"></highlight></codeline>
<codeline lineno="12874"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_source_path(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str);</highlight></codeline>
<codeline lineno="12875"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12876"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb__source_path;</highlight></codeline>
<codeline lineno="12877"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_source_path(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path)</highlight></codeline>
<codeline lineno="12878"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12879"><highlight class="normal"><sp/><sp/><sp/>stb__source_path<sp/>=<sp/>path;</highlight></codeline>
<codeline lineno="12880"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12881"><highlight class="normal"></highlight></codeline>
<codeline lineno="12882"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stb__get_sourcefile_path(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file)</highlight></codeline>
<codeline lineno="12883"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12884"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>filebuf[512];</highlight></codeline>
<codeline lineno="12885"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__source_path)<sp/>{</highlight></codeline>
<codeline lineno="12886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_p_sprintf(filebuf<sp/>stb_p_size(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(filebuf)),<sp/></highlight><highlight class="stringliteral">&quot;%s/%s&quot;</highlight><highlight class="normal">,<sp/>stb__source_path,<sp/>file);</highlight></codeline>
<codeline lineno="12887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb_fexists(filebuf))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>filebuf;</highlight></codeline>
<codeline lineno="12888"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12889"><highlight class="normal"></highlight></codeline>
<codeline lineno="12890"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb_fexists(file))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>file;</highlight></codeline>
<codeline lineno="12891"><highlight class="normal"></highlight></codeline>
<codeline lineno="12892"><highlight class="normal"><sp/><sp/><sp/>stb_p_sprintf(filebuf<sp/>stb_p_size(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(filebuf)),<sp/></highlight><highlight class="stringliteral">&quot;../%s&quot;</highlight><highlight class="normal">,<sp/>file);</highlight></codeline>
<codeline lineno="12893"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb_fexists(filebuf))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>filebuf;</highlight></codeline>
<codeline lineno="12894"><highlight class="normal"></highlight></codeline>
<codeline lineno="12895"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>file;</highlight></codeline>
<codeline lineno="12896"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12897"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12898"><highlight class="normal"></highlight></codeline>
<codeline lineno="12899"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_F(x)<sp/><sp/><sp/>((float)<sp/>STB_H(x))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12900"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_UI(x)<sp/><sp/>((unsigned<sp/>int)<sp/>STB_I(x))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12901"><highlight class="normal"></highlight></codeline>
<codeline lineno="12902"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(STB_DEBUG)<sp/>&amp;&amp;<sp/>!defined(STB_ALWAYS_H)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12903"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_D(x)<sp/><sp/><sp/>((double)<sp/>(x))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12904"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_I(x)<sp/><sp/><sp/>((int)<sp/>(x))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12905"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_S(x)<sp/><sp/><sp/>((char<sp/>*)<sp/>(x))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12906"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12907"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_D(x)<sp/><sp/><sp/>stb__double_constant(__FILE__,<sp/>__LINE__-1,<sp/>(x))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12908"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_I(x)<sp/><sp/><sp/>stb__int_constant(__FILE__,<sp/>__LINE__-1,<sp/>(x))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12909"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_S(x)<sp/><sp/><sp/>stb__string_constant(__FILE__,<sp/>__LINE__-1,<sp/>(x))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12910"><highlight class="normal"></highlight></codeline>
<codeline lineno="12911"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>stb__double_constant(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
<codeline lineno="12912"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>stb__int_constant(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
<codeline lineno="12913"><highlight class="normal">STB_EXTERN<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>stb__string_constant(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str);</highlight></codeline>
<codeline lineno="12914"><highlight class="normal"></highlight></codeline>
<codeline lineno="12915"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12916"><highlight class="normal"></highlight></codeline>
<codeline lineno="12917"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12918"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12919"><highlight class="normal"><sp/><sp/><sp/>STB__CTYPE_int,</highlight></codeline>
<codeline lineno="12920"><highlight class="normal"><sp/><sp/><sp/>STB__CTYPE_uint,</highlight></codeline>
<codeline lineno="12921"><highlight class="normal"><sp/><sp/><sp/>STB__CTYPE_float,</highlight></codeline>
<codeline lineno="12922"><highlight class="normal"><sp/><sp/><sp/>STB__CTYPE_double,</highlight></codeline>
<codeline lineno="12923"><highlight class="normal"><sp/><sp/><sp/>STB__CTYPE_string,</highlight></codeline>
<codeline lineno="12924"><highlight class="normal">};</highlight></codeline>
<codeline lineno="12925"><highlight class="normal"></highlight></codeline>
<codeline lineno="12926"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12927"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12928"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line;</highlight></codeline>
<codeline lineno="12929"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type;</highlight></codeline>
<codeline lineno="12930"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="12931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ival;</highlight></codeline>
<codeline lineno="12932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dval;</highlight></codeline>
<codeline lineno="12933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sval;</highlight></codeline>
<codeline lineno="12934"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="12935"><highlight class="normal">}<sp/>stb__Entry;</highlight></codeline>
<codeline lineno="12936"><highlight class="normal"></highlight></codeline>
<codeline lineno="12937"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12938"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12939"><highlight class="normal"><sp/><sp/><sp/>stb__Entry<sp/>*entries;</highlight></codeline>
<codeline lineno="12940"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename;</highlight></codeline>
<codeline lineno="12941"><highlight class="normal"><sp/><sp/><sp/>time_t<sp/>timestamp;</highlight></codeline>
<codeline lineno="12942"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**file_data;</highlight></codeline>
<codeline lineno="12943"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>file_len;</highlight></codeline>
<codeline lineno="12944"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*line_index;</highlight></codeline>
<codeline lineno="12945"><highlight class="normal">}<sp/>stb__FileEntry;</highlight></codeline>
<codeline lineno="12946"><highlight class="normal"></highlight></codeline>
<codeline lineno="12947"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__constant_parse(stb__FileEntry<sp/>*f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight></codeline>
<codeline lineno="12948"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12949"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="12950"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="12951"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!stb_arr_valid(f-&gt;entries,<sp/>i))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12952"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>f-&gt;entries[i].line;</highlight></codeline>
<codeline lineno="12953"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/>f-&gt;file_len)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12954"><highlight class="normal"><sp/><sp/><sp/>s<sp/>=<sp/>f-&gt;file_data[n];</highlight></codeline>
<codeline lineno="12955"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(f-&gt;entries[i].type)<sp/>{</highlight></codeline>
<codeline lineno="12956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB__CTYPE_float:</highlight></codeline>
<codeline lineno="12957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*s)<sp/>{</highlight></codeline>
<codeline lineno="12958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strncmp(s,<sp/></highlight><highlight class="stringliteral">&quot;STB_D(&quot;</highlight><highlight class="normal">,<sp/>6))<sp/>{<sp/>s+=6;<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>matched_float;<sp/>}</highlight></codeline>
<codeline lineno="12959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strncmp(s,<sp/></highlight><highlight class="stringliteral">&quot;STB_F(&quot;</highlight><highlight class="normal">,<sp/>6))<sp/>{<sp/>s+=6;<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>matched_float;<sp/>}</highlight></codeline>
<codeline lineno="12960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strncmp(s,<sp/></highlight><highlight class="stringliteral">&quot;KD(&quot;</highlight><highlight class="normal">,<sp/>3))<sp/>{<sp/>s+=3;<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>matched_float;<sp/>}</highlight></codeline>
<codeline lineno="12961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strncmp(s,<sp/></highlight><highlight class="stringliteral">&quot;KF(&quot;</highlight><highlight class="normal">,<sp/>3))<sp/>{<sp/>s+=3;<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>matched_float;<sp/>}</highlight></codeline>
<codeline lineno="12962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++s;</highlight></codeline>
<codeline lineno="12963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matched_float:</highlight></codeline>
<codeline lineno="12966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;entries[i].dval<sp/>=<sp/>strtod(s,<sp/>NULL);</highlight></codeline>
<codeline lineno="12967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB__CTYPE_int:</highlight></codeline>
<codeline lineno="12969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*s)<sp/>{</highlight></codeline>
<codeline lineno="12970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strncmp(s,<sp/></highlight><highlight class="stringliteral">&quot;STB_I(&quot;</highlight><highlight class="normal">,<sp/>6))<sp/>{<sp/>s+=6;<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>matched_int;<sp/>}</highlight></codeline>
<codeline lineno="12971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strncmp(s,<sp/></highlight><highlight class="stringliteral">&quot;STB_UI(&quot;</highlight><highlight class="normal">,<sp/>7))<sp/>{<sp/>s+=7;<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>matched_int;<sp/>}</highlight></codeline>
<codeline lineno="12972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strncmp(s,<sp/></highlight><highlight class="stringliteral">&quot;KI(&quot;</highlight><highlight class="normal">,<sp/>3))<sp/>{<sp/>s+=3;<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>matched_int;<sp/>}</highlight></codeline>
<codeline lineno="12973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strncmp(s,<sp/></highlight><highlight class="stringliteral">&quot;KU(&quot;</highlight><highlight class="normal">,<sp/>3))<sp/>{<sp/>s+=3;<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>matched_int;<sp/>}</highlight></codeline>
<codeline lineno="12974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++s;</highlight></codeline>
<codeline lineno="12975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matched_int:<sp/>{</highlight></codeline>
<codeline lineno="12978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>neg=0;</highlight></codeline>
<codeline lineno="12979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>stb_skipwhite(s);</highlight></codeline>
<codeline lineno="12980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*s<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>{<sp/>neg<sp/>=<sp/>!neg;<sp/>s<sp/>=<sp/>stb_skipwhite(s+1);<sp/>}<sp/></highlight><highlight class="comment">//<sp/>handle<sp/>&apos;-<sp/>-<sp/>5&apos;,<sp/>pointlessly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>tolower(s[1])<sp/>==<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="12982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;entries[i].ival<sp/>=<sp/>strtol(s,<sp/>NULL,<sp/>16);</highlight></codeline>
<codeline lineno="12983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="12984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;entries[i].ival<sp/>=<sp/>strtol(s,<sp/>NULL,<sp/>8);</highlight></codeline>
<codeline lineno="12985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;entries[i].ival<sp/>=<sp/>strtol(s,<sp/>NULL,<sp/>10);</highlight></codeline>
<codeline lineno="12987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(neg)<sp/>f-&gt;entries[i].ival<sp/>=<sp/>-f-&gt;entries[i].ival;</highlight></codeline>
<codeline lineno="12988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STB__CTYPE_string:</highlight></codeline>
<codeline lineno="12991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12993"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12994"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12995"><highlight class="normal"></highlight></codeline>
<codeline lineno="12996"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb_sdict<sp/>*stb__constant_file_hash;</highlight></codeline>
<codeline lineno="12997"><highlight class="normal"></highlight></codeline>
<codeline lineno="12998"><highlight class="normal">stb__Entry<sp/>*stb__constant_get_entry(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type)</highlight></codeline>
<codeline lineno="12999"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13000"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="13001"><highlight class="normal"><sp/><sp/><sp/>stb__FileEntry<sp/>*f;</highlight></codeline>
<codeline lineno="13002"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__constant_file_hash<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="13003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__constant_file_hash<sp/>=<sp/>stb_sdict_new(STB_TRUE);</highlight></codeline>
<codeline lineno="13004"><highlight class="normal"><sp/><sp/><sp/>f<sp/>=<sp/>(stb__FileEntry*)<sp/>stb_sdict_get(stb__constant_file_hash,<sp/>filename);</highlight></codeline>
<codeline lineno="13005"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="13006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s<sp/>=<sp/>stb__get_sourcefile_path(filename);</highlight></codeline>
<codeline lineno="13007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/>NULL<sp/>||<sp/>!stb_fexists(s))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="13008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>(stb__FileEntry<sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*f));</highlight></codeline>
<codeline lineno="13009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;timestamp<sp/>=<sp/>stb_ftimestamp(s);</highlight></codeline>
<codeline lineno="13010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;file_data<sp/>=<sp/>stb_stringfile(s,<sp/>&amp;f-&gt;file_len);</highlight></codeline>
<codeline lineno="13011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;filename<sp/>=<sp/>stb_p_strdup(s);<sp/></highlight><highlight class="comment">//<sp/>cache<sp/>the<sp/>full<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;entries<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="13013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;line_index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="13014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_setlen(f-&gt;line_index,<sp/>f-&gt;file_len);</highlight></codeline>
<codeline lineno="13015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memset(f-&gt;line_index,<sp/>0xff,<sp/>stb_arr_storage(f-&gt;line_index));</highlight></codeline>
<codeline lineno="13016"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="13017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>time_t<sp/>t<sp/>=<sp/>stb_ftimestamp(f-&gt;filename);</highlight></codeline>
<codeline lineno="13018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;timestamp<sp/>!=<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="13019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;timestamp<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="13020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(f-&gt;file_data);</highlight></codeline>
<codeline lineno="13021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;file_data<sp/>=<sp/>stb_stringfile(f-&gt;filename,<sp/>&amp;f-&gt;file_len);</highlight></codeline>
<codeline lineno="13022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_setlen(f-&gt;line_index,<sp/>f-&gt;file_len);</highlight></codeline>
<codeline lineno="13023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stb_arr_len(f-&gt;entries);<sp/>++i)</highlight></codeline>
<codeline lineno="13024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__constant_parse(f,<sp/>i);</highlight></codeline>
<codeline lineno="13025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13026"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13027"><highlight class="normal"></highlight></codeline>
<codeline lineno="13028"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line<sp/>&gt;=<sp/>f-&gt;file_len)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="13029"><highlight class="normal"></highlight></codeline>
<codeline lineno="13030"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f-&gt;line_index[line]<sp/>&gt;=<sp/>stb_arr_len(f-&gt;entries))<sp/>{</highlight></codeline>
<codeline lineno="13031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>a<sp/>new<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>stb_arr_len(f-&gt;entries);</highlight></codeline>
<codeline lineno="13033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__Entry<sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>;</highlight></codeline>
<codeline lineno="13034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>.line<sp/>=<sp/>line;</highlight></codeline>
<codeline lineno="13035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line<sp/>&lt;<sp/>f-&gt;file_len)</highlight></codeline>
<codeline lineno="13036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;line_index[line]<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="13037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>.type<sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="13038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_arr_push(f-&gt;entries,<sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>);</highlight></codeline>
<codeline lineno="13039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb__constant_parse(f,<sp/>n);</highlight></codeline>
<codeline lineno="13040"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13041"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f-&gt;entries<sp/>+<sp/>f-&gt;line_index[line];</highlight></codeline>
<codeline lineno="13042"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13043"><highlight class="normal"></highlight></codeline>
<codeline lineno="13044"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>stb__double_constant(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)</highlight></codeline>
<codeline lineno="13045"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13046"><highlight class="normal"><sp/><sp/><sp/>stb__Entry<sp/>*<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref><sp/>=<sp/>stb__constant_get_entry(file,<sp/>line,<sp/>STB__CTYPE_float);</highlight></codeline>
<codeline lineno="13047"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="13048"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-&gt;dval;</highlight></codeline>
<codeline lineno="13049"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13050"><highlight class="normal"></highlight></codeline>
<codeline lineno="13051"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>stb__int_constant(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)</highlight></codeline>
<codeline lineno="13052"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13053"><highlight class="normal"><sp/><sp/><sp/>stb__Entry<sp/>*<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref><sp/>=<sp/>stb__constant_get_entry(file,<sp/>line,<sp/>STB__CTYPE_int);</highlight></codeline>
<codeline lineno="13054"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="13055"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-&gt;ival;</highlight></codeline>
<codeline lineno="13056"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13057"><highlight class="normal"></highlight></codeline>
<codeline lineno="13058"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>stb__string_constant(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*x)</highlight></codeline>
<codeline lineno="13059"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13060"><highlight class="normal"><sp/><sp/><sp/>stb__Entry<sp/>*<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref><sp/>=<sp/>stb__constant_get_entry(file,<sp/>line,<sp/>STB__CTYPE_string);</highlight></codeline>
<codeline lineno="13061"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="13062"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-&gt;sval;</highlight></codeline>
<codeline lineno="13063"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13064"><highlight class="normal"></highlight></codeline>
<codeline lineno="13065"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13066"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>!STB_DEBUG<sp/>&amp;&amp;<sp/>!STB_ALWAYS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13067"><highlight class="normal"></highlight></codeline>
<codeline lineno="13068"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>STB_EXTERN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13069"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>STB_INCLUDE_STB_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13070"><highlight class="normal"></highlight></codeline>
<codeline lineno="13071"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="13072"><highlight class="comment">------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="13073"><highlight class="comment">This<sp/>software<sp/>is<sp/>available<sp/>under<sp/>2<sp/>licenses<sp/>--<sp/>choose<sp/>whichever<sp/>you<sp/>prefer.</highlight></codeline>
<codeline lineno="13074"><highlight class="comment">------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="13075"><highlight class="comment">ALTERNATIVE<sp/>A<sp/>-<sp/>MIT<sp/>License</highlight></codeline>
<codeline lineno="13076"><highlight class="comment">Copyright<sp/>(c)<sp/>2017<sp/>Sean<sp/>Barrett</highlight></codeline>
<codeline lineno="13077"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy<sp/>of</highlight></codeline>
<codeline lineno="13078"><highlight class="comment">this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in</highlight></codeline>
<codeline lineno="13079"><highlight class="comment">the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to</highlight></codeline>
<codeline lineno="13080"><highlight class="comment">use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies</highlight></codeline>
<codeline lineno="13081"><highlight class="comment">of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do</highlight></codeline>
<codeline lineno="13082"><highlight class="comment">so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="13083"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="13084"><highlight class="comment">copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="13085"><highlight class="comment">THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="13086"><highlight class="comment">IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="13087"><highlight class="comment">FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="13088"><highlight class="comment">AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="13089"><highlight class="comment">LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="13090"><highlight class="comment">OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="13091"><highlight class="comment">SOFTWARE.</highlight></codeline>
<codeline lineno="13092"><highlight class="comment">------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="13093"><highlight class="comment">ALTERNATIVE<sp/>B<sp/>-<sp/>Public<sp/>Domain<sp/>(www.unlicense.org)</highlight></codeline>
<codeline lineno="13094"><highlight class="comment">This<sp/>is<sp/>free<sp/>and<sp/>unencumbered<sp/>software<sp/>released<sp/>into<sp/>the<sp/>public<sp/>domain.</highlight></codeline>
<codeline lineno="13095"><highlight class="comment">Anyone<sp/>is<sp/>free<sp/>to<sp/>copy,<sp/>modify,<sp/>publish,<sp/>use,<sp/>compile,<sp/>sell,<sp/>or<sp/>distribute<sp/>this</highlight></codeline>
<codeline lineno="13096"><highlight class="comment">software,<sp/>either<sp/>in<sp/>source<sp/>code<sp/>form<sp/>or<sp/>as<sp/>a<sp/>compiled<sp/>binary,<sp/>for<sp/>any<sp/>purpose,</highlight></codeline>
<codeline lineno="13097"><highlight class="comment">commercial<sp/>or<sp/>non-commercial,<sp/>and<sp/>by<sp/>any<sp/>means.</highlight></codeline>
<codeline lineno="13098"><highlight class="comment">In<sp/>jurisdictions<sp/>that<sp/>recognize<sp/>copyright<sp/>laws,<sp/>the<sp/>author<sp/>or<sp/>authors<sp/>of<sp/>this</highlight></codeline>
<codeline lineno="13099"><highlight class="comment">software<sp/>dedicate<sp/>any<sp/>and<sp/>all<sp/>copyright<sp/>interest<sp/>in<sp/>the<sp/>software<sp/>to<sp/>the<sp/>public</highlight></codeline>
<codeline lineno="13100"><highlight class="comment">domain.<sp/>We<sp/>make<sp/>this<sp/>dedication<sp/>for<sp/>the<sp/>benefit<sp/>of<sp/>the<sp/>public<sp/>at<sp/>large<sp/>and<sp/>to</highlight></codeline>
<codeline lineno="13101"><highlight class="comment">the<sp/>detriment<sp/>of<sp/>our<sp/>heirs<sp/>and<sp/>successors.<sp/>We<sp/>intend<sp/>this<sp/>dedication<sp/>to<sp/>be<sp/>an</highlight></codeline>
<codeline lineno="13102"><highlight class="comment">overt<sp/>act<sp/>of<sp/>relinquishment<sp/>in<sp/>perpetuity<sp/>of<sp/>all<sp/>present<sp/>and<sp/>future<sp/>rights<sp/>to</highlight></codeline>
<codeline lineno="13103"><highlight class="comment">this<sp/>software<sp/>under<sp/>copyright<sp/>law.</highlight></codeline>
<codeline lineno="13104"><highlight class="comment">THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="13105"><highlight class="comment">IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="13106"><highlight class="comment">FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="13107"><highlight class="comment">AUTHORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="13108"><highlight class="comment">ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION</highlight></codeline>
<codeline lineno="13109"><highlight class="comment">WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="13110"><highlight class="comment">------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="13111"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/deprecated/stb.h"/>
  </compounddef>
</doxygen>
