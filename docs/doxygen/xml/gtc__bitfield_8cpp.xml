<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="gtc__bitfield_8cpp" kind="file" language="C++">
    <compoundname>gtc_bitfield.cpp</compoundname>
    <includes refid="bitfield_8hpp" local="no">glm/gtc/bitfield.hpp</includes>
    <includes refid="type__precision_8hpp" local="no">glm/gtc/type_precision.hpp</includes>
    <includes refid="vector__relational_8hpp" local="no">glm/vector_relational.hpp</includes>
    <includes refid="integer_8hpp" local="no">glm/integer.hpp</includes>
    <includes local="no">ctime</includes>
    <includes local="no">cstdio</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="67">
        <label>../common.hpp</label>
        <link refid="common_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>detail/_fixes.hpp</label>
        <link refid="__fixes_8hpp"/>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>../detail/_vectorize.hpp</label>
        <link refid="__vectorize_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>compute_vector_relational.hpp</label>
        <link refid="compute__vector__relational_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>detail/func_common.inl</label>
        <link refid="func__common_8inl"/>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>detail/func_exponential.inl</label>
        <link refid="func__exponential_8inl"/>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>detail/func_geometric.inl</label>
        <link refid="func__geometric_8inl"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>detail/func_integer.inl</label>
        <link refid="func__integer_8inl"/>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>detail/func_matrix.inl</label>
        <link refid="func__matrix_8inl"/>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>detail/func_trigonometric.inl</label>
        <link refid="func__trigonometric_8inl"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>detail/func_vector_relational.inl</label>
        <link refid="func__vector__relational_8inl"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>../detail/qualifier.hpp</label>
        <link refid="qualifier_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>../detail/setup.hpp</label>
        <link refid="setup_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>detail/type_float.hpp</label>
        <link refid="type__float_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>../detail/type_int.hpp</label>
        <link refid="type__int_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>detail/type_mat.hpp</label>
        <link refid="type__mat_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>detail/type_mat2x2.hpp</label>
        <link refid="type__mat2x2_8hpp"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>type_mat2x2.inl</label>
        <link refid="type__mat2x2_8inl"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>detail/type_mat2x3.hpp</label>
        <link refid="type__mat2x3_8hpp"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>type_mat2x3.inl</label>
        <link refid="type__mat2x3_8inl"/>
      </node>
      <node id="42">
        <label>detail/type_mat2x4.hpp</label>
        <link refid="type__mat2x4_8hpp"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>type_mat2x4.inl</label>
        <link refid="type__mat2x4_8inl"/>
      </node>
      <node id="45">
        <label>detail/type_mat3x2.hpp</label>
        <link refid="type__mat3x2_8hpp"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>type_mat3x2.inl</label>
        <link refid="type__mat3x2_8inl"/>
      </node>
      <node id="26">
        <label>detail/type_mat3x3.hpp</label>
        <link refid="type__mat3x3_8hpp"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>type_mat3x3.inl</label>
        <link refid="type__mat3x3_8inl"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>detail/type_mat3x4.hpp</label>
        <link refid="type__mat3x4_8hpp"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>type_mat3x4.inl</label>
        <link refid="type__mat3x4_8inl"/>
      </node>
      <node id="51">
        <label>detail/type_mat4x2.hpp</label>
        <link refid="type__mat4x2_8hpp"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>type_mat4x2.inl</label>
        <link refid="type__mat4x2_8inl"/>
      </node>
      <node id="54">
        <label>detail/type_mat4x3.hpp</label>
        <link refid="type__mat4x3_8hpp"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>type_mat4x3.inl</label>
        <link refid="type__mat4x3_8inl"/>
      </node>
      <node id="57">
        <label>detail/type_mat4x4.hpp</label>
        <link refid="type__mat4x4_8hpp"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>type_mat4x4.inl</label>
        <link refid="type__mat4x4_8inl"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>type_vec.hpp</label>
        <link refid="type__vec_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>type_vec1.hpp</label>
        <link refid="type__vec1_8hpp_source"/>
      </node>
      <node id="79">
        <label>../detail/type_vec1.inl</label>
        <link refid="type__vec1_8inl"/>
      </node>
      <node id="11">
        <label>type_vec2.hpp</label>
        <link refid="type__vec2_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>type_vec2.inl</label>
        <link refid="type__vec2_8inl_source"/>
      </node>
      <node id="17">
        <label>type_vec3.hpp</label>
        <link refid="type__vec3_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>type_vec3.inl</label>
        <link refid="type__vec3_8inl_source"/>
      </node>
      <node id="19">
        <label>type_vec4.hpp</label>
        <link refid="type__vec4_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>type_vec4.inl</label>
        <link refid="type__vec4_8inl_source"/>
      </node>
      <node id="62">
        <label>../exponential.hpp</label>
        <link refid="exponential_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>../ext/vec1.hpp</label>
        <link refid="ext_2vec1_8hpp"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>../fwd.hpp</label>
        <link refid="fwd_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>../geometric.hpp</label>
        <link refid="geometric_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>glm/gtc/bitfield.hpp</label>
        <link refid="bitfield_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>bitfield.inl</label>
        <link refid="bitfield_8inl"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>../gtc/constants.hpp</label>
        <link refid="constants_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>constants.inl</label>
        <link refid="constants_8inl"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>epsilon.hpp</label>
        <link refid="epsilon_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>epsilon.inl</label>
        <link refid="epsilon_8inl"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>../gtc/quaternion.hpp</label>
        <link refid="gtc_2quaternion_8hpp"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>quaternion.inl</label>
        <link refid="gtc_2quaternion_8inl"/>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>glm/gtc/type_precision.hpp</label>
        <link refid="type__precision_8hpp"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>type_precision.inl</label>
        <link refid="type__precision_8inl_source"/>
      </node>
      <node id="77">
        <label>../gtc/vec1.hpp</label>
        <link refid="gtc_2vec1_8hpp"/>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>vec1.inl</label>
        <link refid="gtc_2vec1_8inl"/>
      </node>
      <node id="82">
        <label>glm/integer.hpp</label>
        <link refid="integer_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>mat2x2.hpp</label>
        <link refid="mat2x2_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>mat2x3.hpp</label>
        <link refid="mat2x3_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>mat2x4.hpp</label>
        <link refid="mat2x4_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>mat3x2.hpp</label>
        <link refid="mat3x2_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>../mat3x3.hpp</label>
        <link refid="mat3x3_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>mat3x4.hpp</label>
        <link refid="mat3x4_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>mat4x2.hpp</label>
        <link refid="mat4x2_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>mat4x3.hpp</label>
        <link refid="mat4x3_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>mat4x4.hpp</label>
        <link refid="mat4x4_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>../matrix.hpp</label>
        <link refid="matrix_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>../simd/integer.h</label>
        <link refid="integer_8h"/>
      </node>
      <node id="6">
        <label>../simd/platform.h</label>
        <link refid="platform_8h"/>
      </node>
      <node id="73">
        <label>../trigonometric.hpp</label>
        <link refid="trigonometric_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>vec2.hpp</label>
        <link refid="vec2_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>vec3.hpp</label>
        <link refid="vec3_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>vec4.hpp</label>
        <link refid="vec4_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>../vector_relational.hpp</label>
        <link refid="vector__relational_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/gtc/gtc_bitfield.cpp</label>
        <link refid="gtc__bitfield_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>cassert</label>
      </node>
      <node id="63">
        <label>cmath</label>
      </node>
      <node id="5">
        <label>cstddef</label>
      </node>
      <node id="85">
        <label>cstdio</label>
      </node>
      <node id="14">
        <label>cstring</label>
      </node>
      <node id="84">
        <label>ctime</label>
      </node>
      <node id="15">
        <label>limits</label>
      </node>
      <node id="86">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="structmask_1_1type" prot="public">mask::type</innerclass>
    <innernamespace refid="namespacemask">mask</innernamespace>
    <innernamespace refid="namespacebitfield_interleave3">bitfieldInterleave3</innernamespace>
    <innernamespace refid="namespacebitfield_interleave4">bitfieldInterleave4</innernamespace>
    <innernamespace refid="namespacebitfield_interleave">bitfieldInterleave</innernamespace>
    <innernamespace refid="namespacebitfield_interleave5">bitfieldInterleave5</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="gtc__bitfield_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/gtc/gtc_bitfield.cpp" line="888" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/gtc/gtc_bitfield.cpp" bodystart="888" bodyend="906"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;<ref refid="bitfield_8hpp" kindref="compound">glm/gtc/bitfield.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="type__precision_8hpp" kindref="compound">glm/gtc/type_precision.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="vector__relational_8hpp" kindref="compound">glm/vector_relational.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="integer_8hpp" kindref="compound">glm/integer.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctime&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="structmask" kindref="compound">mask</ref></highlight></codeline>
<codeline lineno="10"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>genType&gt;</highlight></codeline>
<codeline lineno="12" refid="structmask_1_1type" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmask_1_1type" kindref="compound">type</ref></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>genType<sp/><sp/><sp/><sp/><sp/>Value;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>genType<sp/><sp/><sp/><sp/><sp/>Return;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mask_zero(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Bits)</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>~((~0)<sp/>&lt;&lt;<sp/>Bits);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mask_mix(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Bits)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Bits<sp/>&gt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int)<sp/>*<sp/>8<sp/>?<sp/>0xffffffff<sp/>:<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>&lt;&lt;<sp/>Bits)<sp/>-<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mask_half(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Bits)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>do<sp/>the<sp/>shift<sp/>in<sp/>two<sp/>steps<sp/>because<sp/>1<sp/>&lt;&lt;<sp/>32<sp/>on<sp/>an<sp/>int<sp/>is<sp/>undefined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Half<sp/>=<sp/>Bits<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Fill<sp/>=<sp/>~0;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ShiftHaft<sp/>=<sp/>(Fill<sp/>&lt;&lt;<sp/>Half);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rest<sp/>=<sp/>Bits<sp/>-<sp/>Half;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Reversed<sp/>=<sp/>ShiftHaft<sp/>&lt;&lt;<sp/>Rest;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>~Reversed;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mask_loop(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Bits)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Mask<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Bit<sp/>=<sp/>0;<sp/>Bit<sp/>&lt;<sp/>Bits;<sp/>++Bit)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mask<sp/>|=<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>&lt;&lt;<sp/>Bit);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Mask;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>perf()</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>100000000;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::clock_t<sp/>Timestamp1<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>Mask;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mask.resize(Count);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Count;<sp/>++i)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mask[i]<sp/>=<sp/>mask_mix(i<sp/>%<sp/>32);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::clock_t<sp/>Timestamp2<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>Mask;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mask.resize(Count);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Count;<sp/>++i)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mask[i]<sp/>=<sp/>mask_loop(i<sp/>%<sp/>32);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::clock_t<sp/>Timestamp3<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>Mask;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mask.resize(Count);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Count;<sp/>++i)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mask[i]<sp/>=<sp/>glm::mask(i<sp/>%<sp/>32);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::clock_t<sp/>Timestamp4<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>Mask;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mask.resize(Count);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Count;<sp/>++i)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mask[i]<sp/>=<sp/>mask_zero(i<sp/>%<sp/>32);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::clock_t<sp/>Timestamp5<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>Mask;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mask.resize(Count);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Count;<sp/>++i)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mask[i]<sp/>=<sp/>mask_half(i<sp/>%<sp/>32);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::clock_t<sp/>Timestamp6<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::clock_t<sp/>TimeMix<sp/>=<sp/>Timestamp2<sp/>-<sp/>Timestamp1;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::clock_t<sp/>TimeLoop<sp/>=<sp/>Timestamp3<sp/>-<sp/>Timestamp2;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::clock_t<sp/>TimeDefault<sp/>=<sp/>Timestamp4<sp/>-<sp/>Timestamp3;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::clock_t<sp/>TimeZero<sp/>=<sp/>Timestamp5<sp/>-<sp/>Timestamp4;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::clock_t<sp/>TimeHalf<sp/>=<sp/>Timestamp6<sp/>-<sp/>Timestamp5;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;mask[mix]:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(TimeMix));</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;mask[loop]:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(TimeLoop));</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;mask[default]:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(TimeDefault));</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;mask[zero]:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(TimeZero));</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;mask[half]:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(TimeHalf));</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TimeDefault<sp/>&lt;<sp/>TimeLoop<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_uint()</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type&lt;glm::uint&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Data[]<sp/>=</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0,<sp/>0x00000000},</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>1,<sp/>0x00000001},</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>2,<sp/>0x00000003},</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>3,<sp/>0x00000007},</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{31,<sp/>0x7fffffff},</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{32,<sp/>0xffffffff}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>mask_zero<sp/>is<sp/>sadly<sp/>not<sp/>a<sp/>correct<sp/>code</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sizeof(Data)<sp/>/<sp/>sizeof(type&lt;int&gt;);<sp/>++i)</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>Result<sp/>=<sp/>mask_zero(Data[i].Value);</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>Data[i].Return<sp/>==<sp/>Result<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Data)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(type&lt;int&gt;);<sp/>++i)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Result<sp/>=<sp/>mask_mix(Data[i].Value);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>Data[i].Return<sp/>==<sp/>Result<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Data)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(type&lt;int&gt;);<sp/>++i)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Result<sp/>=<sp/>mask_half(Data[i].Value);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>Data[i].Return<sp/>==<sp/>Result<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Data)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(type&lt;int&gt;);<sp/>++i)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Result<sp/>=<sp/>mask_loop(Data[i].Value);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>Data[i].Return<sp/>==<sp/>Result<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Data)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(type&lt;int&gt;);<sp/>++i)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Result<sp/>=<sp/><ref refid="group__gtc__bitfield_1gad7eba518a0b71662114571ee76939f8a" kindref="member">glm::mask</ref>(Data[i].Value);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>Data[i].Return<sp/>==<sp/>Result<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Error;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_uvec4()</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type&lt;glm::ivec4&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Data[]<sp/>=</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<ref refid="group__core__types_1gaa4560ddc50320ea8f8a70d5c9c249fea" kindref="member">glm::ivec4</ref>(<sp/>0),<sp/><ref refid="group__core__types_1gaa4560ddc50320ea8f8a70d5c9c249fea" kindref="member">glm::ivec4</ref>(0x00000000)},</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<ref refid="group__core__types_1gaa4560ddc50320ea8f8a70d5c9c249fea" kindref="member">glm::ivec4</ref>(<sp/>1),<sp/><ref refid="group__core__types_1gaa4560ddc50320ea8f8a70d5c9c249fea" kindref="member">glm::ivec4</ref>(0x00000001)},</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<ref refid="group__core__types_1gaa4560ddc50320ea8f8a70d5c9c249fea" kindref="member">glm::ivec4</ref>(<sp/>2),<sp/><ref refid="group__core__types_1gaa4560ddc50320ea8f8a70d5c9c249fea" kindref="member">glm::ivec4</ref>(0x00000003)},</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<ref refid="group__core__types_1gaa4560ddc50320ea8f8a70d5c9c249fea" kindref="member">glm::ivec4</ref>(<sp/>3),<sp/><ref refid="group__core__types_1gaa4560ddc50320ea8f8a70d5c9c249fea" kindref="member">glm::ivec4</ref>(0x00000007)},</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<ref refid="group__core__types_1gaa4560ddc50320ea8f8a70d5c9c249fea" kindref="member">glm::ivec4</ref>(31),<sp/><ref refid="group__core__types_1gaa4560ddc50320ea8f8a70d5c9c249fea" kindref="member">glm::ivec4</ref>(0x7fffffff)},</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<ref refid="group__core__types_1gaa4560ddc50320ea8f8a70d5c9c249fea" kindref="member">glm::ivec4</ref>(32),<sp/><ref refid="group__core__types_1gaa4560ddc50320ea8f8a70d5c9c249fea" kindref="member">glm::ivec4</ref>(0xffffffff)}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Error(0);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0,<sp/>n<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Data)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(type&lt;glm::ivec4&gt;);<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structglm_1_1vec" kindref="compound">glm::ivec4</ref><sp/>Result<sp/>=<sp/><ref refid="group__gtc__bitfield_1gad7eba518a0b71662114571ee76939f8a" kindref="member">glm::mask</ref>(Data[i].Value);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/><ref refid="group__core__func__vector__relational_1gab5af106b2d5675d51af84815d937384d" kindref="member">glm::all</ref>(<ref refid="group__core__func__vector__relational_1gab560b9b9d01040d082e40edae40edfd1" kindref="member">glm::equal</ref>(Data[i].Return,<sp/>Result))<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Error;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test()</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Error(0);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>test_uint();</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>test_uvec4();</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Error;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight><highlight class="comment">//namespace<sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">bitfieldInterleave3</highlight></codeline>
<codeline lineno="197"><highlight class="normal">{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PARAM,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RET&gt;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>RET<sp/>refBitfieldInterleave(PARAM<sp/>x,<sp/>PARAM<sp/>y,<sp/>PARAM<sp/>z)</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RET<sp/>Result<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(RET<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(PARAM)<sp/>*<sp/>8;<sp/>++i)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>|=<sp/>((RET(x)<sp/>&amp;<sp/>(RET(1U)<sp/>&lt;&lt;<sp/>i))<sp/>&lt;&lt;<sp/>((i<sp/>&lt;&lt;<sp/>1)<sp/>+<sp/>0));</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>|=<sp/>((RET(y)<sp/>&amp;<sp/>(RET(1U)<sp/>&lt;&lt;<sp/>i))<sp/>&lt;&lt;<sp/>((i<sp/>&lt;&lt;<sp/>1)<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>|=<sp/>((RET(z)<sp/>&amp;<sp/>(RET(1U)<sp/>&lt;&lt;<sp/>i))<sp/>&lt;&lt;<sp/>((i<sp/>&lt;&lt;<sp/>1)<sp/>+<sp/>2));</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test()</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Error(0);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1gad8c2939e1fdd8e5828b31d95c52255d5" kindref="member">glm::uint16</ref><sp/>x_max<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>11;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1gad8c2939e1fdd8e5828b31d95c52255d5" kindref="member">glm::uint16</ref><sp/>y_max<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>11;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1gad8c2939e1fdd8e5828b31d95c52255d5" kindref="member">glm::uint16</ref><sp/>z_max<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>11;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__gtc__type__precision_1gad8c2939e1fdd8e5828b31d95c52255d5" kindref="member">glm::uint16</ref><sp/>z<sp/>=<sp/>0;<sp/>z<sp/>&lt;<sp/>z_max;<sp/>z<sp/>+=<sp/>27)</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__gtc__type__precision_1gad8c2939e1fdd8e5828b31d95c52255d5" kindref="member">glm::uint16</ref><sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>y_max;<sp/>y<sp/>+=<sp/>27)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__gtc__type__precision_1gad8c2939e1fdd8e5828b31d95c52255d5" kindref="member">glm::uint16</ref><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>x_max;<sp/>x<sp/>+=<sp/>27)</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref><sp/>ResultA<sp/>=<sp/>refBitfieldInterleave&lt;glm::uint16,<sp/>glm::uint64&gt;(x,<sp/>y,<sp/>z);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref><sp/>ResultB<sp/>=<sp/><ref refid="group__gtc__bitfield_1ga479134317bc95d99f2b2e235d3db287b" kindref="member">glm::bitfieldInterleave</ref>(x,<sp/>y,<sp/>z);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>ResultA<sp/>==<sp/>ResultB<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Error;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">bitfieldInterleave4</highlight></codeline>
<codeline lineno="233"><highlight class="normal">{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PARAM,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RET&gt;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>RET<sp/>loopBitfieldInterleave(PARAM<sp/>x,<sp/>PARAM<sp/>y,<sp/>PARAM<sp/>z,<sp/>PARAM<sp/>w)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RET<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v[4]<sp/>=<sp/>{x,<sp/>y,<sp/>z,<sp/>w};</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RET<sp/>Result<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(RET<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(PARAM)<sp/>*<sp/>8;<sp/>i++)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>|=<sp/>((((v[0]<sp/>&gt;&gt;<sp/>i)<sp/>&amp;<sp/>1U))<sp/>&lt;&lt;<sp/>((i<sp/>&lt;&lt;<sp/>2)<sp/>+<sp/>0));</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>|=<sp/>((((v[1]<sp/>&gt;&gt;<sp/>i)<sp/>&amp;<sp/>1U))<sp/>&lt;&lt;<sp/>((i<sp/>&lt;&lt;<sp/>2)<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>|=<sp/>((((v[2]<sp/>&gt;&gt;<sp/>i)<sp/>&amp;<sp/>1U))<sp/>&lt;&lt;<sp/>((i<sp/>&lt;&lt;<sp/>2)<sp/>+<sp/>2));</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>|=<sp/>((((v[3]<sp/>&gt;&gt;<sp/>i)<sp/>&amp;<sp/>1U))<sp/>&lt;&lt;<sp/>((i<sp/>&lt;&lt;<sp/>2)<sp/>+<sp/>3));</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test()</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Error(0);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1gad8c2939e1fdd8e5828b31d95c52255d5" kindref="member">glm::uint16</ref><sp/>x_max<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>11;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1gad8c2939e1fdd8e5828b31d95c52255d5" kindref="member">glm::uint16</ref><sp/>y_max<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>11;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1gad8c2939e1fdd8e5828b31d95c52255d5" kindref="member">glm::uint16</ref><sp/>z_max<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>11;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1gad8c2939e1fdd8e5828b31d95c52255d5" kindref="member">glm::uint16</ref><sp/>w_max<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>11;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__gtc__type__precision_1gad8c2939e1fdd8e5828b31d95c52255d5" kindref="member">glm::uint16</ref><sp/>w<sp/>=<sp/>0;<sp/>w<sp/>&lt;<sp/>w_max;<sp/>w<sp/>+=<sp/>27)</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__gtc__type__precision_1gad8c2939e1fdd8e5828b31d95c52255d5" kindref="member">glm::uint16</ref><sp/>z<sp/>=<sp/>0;<sp/>z<sp/>&lt;<sp/>z_max;<sp/>z<sp/>+=<sp/>27)</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__gtc__type__precision_1gad8c2939e1fdd8e5828b31d95c52255d5" kindref="member">glm::uint16</ref><sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>y_max;<sp/>y<sp/>+=<sp/>27)</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__gtc__type__precision_1gad8c2939e1fdd8e5828b31d95c52255d5" kindref="member">glm::uint16</ref><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>x_max;<sp/>x<sp/>+=<sp/>27)</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref><sp/>ResultA<sp/>=<sp/>loopBitfieldInterleave&lt;glm::uint16,<sp/>glm::uint64&gt;(x,<sp/>y,<sp/>z,<sp/>w);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref><sp/>ResultB<sp/>=<sp/><ref refid="group__gtc__bitfield_1ga479134317bc95d99f2b2e235d3db287b" kindref="member">glm::bitfieldInterleave</ref>(x,<sp/>y,<sp/>z,<sp/>w);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>ResultA<sp/>==<sp/>ResultB<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Error;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="group__gtc__bitfield_1ga479134317bc95d99f2b2e235d3db287b" kindref="member">bitfieldInterleave</ref></highlight></codeline>
<codeline lineno="273"><highlight class="normal">{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref><sp/>fastBitfieldInterleave(<ref refid="group__gtc__type__precision_1ga202b6a53c105fcb7e531f9b443518451" kindref="member">glm::uint32</ref><sp/>x,<sp/><ref refid="group__gtc__type__precision_1ga202b6a53c105fcb7e531f9b443518451" kindref="member">glm::uint32</ref><sp/>y)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref><sp/>REG1;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref><sp/>REG2;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG1<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG1<sp/>=<sp/>((REG1<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>REG1)<sp/>&amp;<sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref>(0x0000FFFF0000FFFF);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG1<sp/>=<sp/>((REG1<sp/>&lt;&lt;<sp/><sp/>8)<sp/>|<sp/>REG1)<sp/>&amp;<sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref>(0x00FF00FF00FF00FF);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG1<sp/>=<sp/>((REG1<sp/>&lt;&lt;<sp/><sp/>4)<sp/>|<sp/>REG1)<sp/>&amp;<sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref>(0x0F0F0F0F0F0F0F0F);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG1<sp/>=<sp/>((REG1<sp/>&lt;&lt;<sp/><sp/>2)<sp/>|<sp/>REG1)<sp/>&amp;<sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref>(0x3333333333333333);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG1<sp/>=<sp/>((REG1<sp/>&lt;&lt;<sp/><sp/>1)<sp/>|<sp/>REG1)<sp/>&amp;<sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref>(0x5555555555555555);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG2<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG2<sp/>=<sp/>((REG2<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>REG2)<sp/>&amp;<sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref>(0x0000FFFF0000FFFF);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG2<sp/>=<sp/>((REG2<sp/>&lt;&lt;<sp/><sp/>8)<sp/>|<sp/>REG2)<sp/>&amp;<sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref>(0x00FF00FF00FF00FF);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG2<sp/>=<sp/>((REG2<sp/>&lt;&lt;<sp/><sp/>4)<sp/>|<sp/>REG2)<sp/>&amp;<sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref>(0x0F0F0F0F0F0F0F0F);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG2<sp/>=<sp/>((REG2<sp/>&lt;&lt;<sp/><sp/>2)<sp/>|<sp/>REG2)<sp/>&amp;<sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref>(0x3333333333333333);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG2<sp/>=<sp/>((REG2<sp/>&lt;&lt;<sp/><sp/>1)<sp/>|<sp/>REG2)<sp/>&amp;<sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref>(0x5555555555555555);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>REG1<sp/>|<sp/>(REG2<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref><sp/>interleaveBitfieldInterleave(<ref refid="group__gtc__type__precision_1ga202b6a53c105fcb7e531f9b443518451" kindref="member">glm::uint32</ref><sp/>x,<sp/><ref refid="group__gtc__type__precision_1ga202b6a53c105fcb7e531f9b443518451" kindref="member">glm::uint32</ref><sp/>y)</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref><sp/>REG1;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref><sp/>REG2;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG1<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG2<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG1<sp/>=<sp/>((REG1<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>REG1)<sp/>&amp;<sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref>(0x0000FFFF0000FFFF);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG2<sp/>=<sp/>((REG2<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>REG2)<sp/>&amp;<sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref>(0x0000FFFF0000FFFF);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG1<sp/>=<sp/>((REG1<sp/>&lt;&lt;<sp/><sp/>8)<sp/>|<sp/>REG1)<sp/>&amp;<sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref>(0x00FF00FF00FF00FF);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG2<sp/>=<sp/>((REG2<sp/>&lt;&lt;<sp/><sp/>8)<sp/>|<sp/>REG2)<sp/>&amp;<sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref>(0x00FF00FF00FF00FF);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG1<sp/>=<sp/>((REG1<sp/>&lt;&lt;<sp/><sp/>4)<sp/>|<sp/>REG1)<sp/>&amp;<sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref>(0x0F0F0F0F0F0F0F0F);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG2<sp/>=<sp/>((REG2<sp/>&lt;&lt;<sp/><sp/>4)<sp/>|<sp/>REG2)<sp/>&amp;<sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref>(0x0F0F0F0F0F0F0F0F);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG1<sp/>=<sp/>((REG1<sp/>&lt;&lt;<sp/><sp/>2)<sp/>|<sp/>REG1)<sp/>&amp;<sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref>(0x3333333333333333);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG2<sp/>=<sp/>((REG2<sp/>&lt;&lt;<sp/><sp/>2)<sp/>|<sp/>REG2)<sp/>&amp;<sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref>(0x3333333333333333);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG1<sp/>=<sp/>((REG1<sp/>&lt;&lt;<sp/><sp/>1)<sp/>|<sp/>REG1)<sp/>&amp;<sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref>(0x5555555555555555);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG2<sp/>=<sp/>((REG2<sp/>&lt;&lt;<sp/><sp/>1)<sp/>|<sp/>REG2)<sp/>&amp;<sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref>(0x5555555555555555);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>REG1<sp/>|<sp/>(REG2<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/><sp/><sp/><sp/>inline<sp/>glm::uint64<sp/>loopBitfieldInterleave(glm::uint32<sp/>x,<sp/>glm::uint32<sp/>y)</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>glm::uint64<sp/>const<sp/>Mask[5]<sp/>=<sp/></highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x5555555555555555,</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x3333333333333333,</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0F0F0F0F0F0F0F0F,</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x00FF00FF00FF00FF,</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0000FFFF0000FFFF</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="332"><highlight class="comment"></highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::uint64<sp/>REG1<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::uint64<sp/>REG2<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(int<sp/>i<sp/>=<sp/>4;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i)</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG1<sp/>=<sp/>((REG1<sp/>&lt;&lt;<sp/>(1<sp/>&lt;&lt;<sp/>i))<sp/>|<sp/>REG1)<sp/>&amp;<sp/>Mask[i];</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG2<sp/>=<sp/>((REG2<sp/>&lt;&lt;<sp/>(1<sp/>&lt;&lt;<sp/>i))<sp/>|<sp/>REG2)<sp/>&amp;<sp/>Mask[i];</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="comment"></highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>REG1<sp/>|<sp/>(REG2<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GLM_ARCH<sp/>&amp;<sp/>GLM_ARCH_SSE2_BIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref><sp/>sseBitfieldInterleave(<ref refid="group__gtc__type__precision_1ga202b6a53c105fcb7e531f9b443518451" kindref="member">glm::uint32</ref><sp/>x,<sp/><ref refid="group__gtc__type__precision_1ga202b6a53c105fcb7e531f9b443518451" kindref="member">glm::uint32</ref><sp/>y)</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128i<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Array<sp/>=<sp/>_mm_set_epi32(0,<sp/>y,<sp/>0,<sp/>x);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128i<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mask4<sp/>=<sp/>_mm_set1_epi32(0x0000FFFF);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128i<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mask3<sp/>=<sp/>_mm_set1_epi32(0x00FF00FF);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128i<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mask2<sp/>=<sp/>_mm_set1_epi32(0x0F0F0F0F);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128i<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mask1<sp/>=<sp/>_mm_set1_epi32(0x33333333);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128i<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mask0<sp/>=<sp/>_mm_set1_epi32(0x55555555);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128i<sp/>Reg1;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128i<sp/>Reg2;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>REG1<sp/>=<sp/>x;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>REG2<sp/>=<sp/>y;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_load_si128(&amp;Array);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG1<sp/>=<sp/>((REG1<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>REG1)<sp/>&amp;<sp/>glm::uint64(0x0000FFFF0000FFFF);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG2<sp/>=<sp/>((REG2<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>REG2)<sp/>&amp;<sp/>glm::uint64(0x0000FFFF0000FFFF);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg2<sp/>=<sp/>_mm_slli_si128(Reg1,<sp/>2);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_or_si128(Reg2,<sp/>Reg1);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_and_si128(Reg1,<sp/>Mask4);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG1<sp/>=<sp/>((REG1<sp/>&lt;&lt;<sp/><sp/>8)<sp/>|<sp/>REG1)<sp/>&amp;<sp/>glm::uint64(0x00FF00FF00FF00FF);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG2<sp/>=<sp/>((REG2<sp/>&lt;&lt;<sp/><sp/>8)<sp/>|<sp/>REG2)<sp/>&amp;<sp/>glm::uint64(0x00FF00FF00FF00FF);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg2<sp/>=<sp/>_mm_slli_si128(Reg1,<sp/>1);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_or_si128(Reg2,<sp/>Reg1);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_and_si128(Reg1,<sp/>Mask3);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG1<sp/>=<sp/>((REG1<sp/>&lt;&lt;<sp/><sp/>4)<sp/>|<sp/>REG1)<sp/>&amp;<sp/>glm::uint64(0x0F0F0F0F0F0F0F0F);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG2<sp/>=<sp/>((REG2<sp/>&lt;&lt;<sp/><sp/>4)<sp/>|<sp/>REG2)<sp/>&amp;<sp/>glm::uint64(0x0F0F0F0F0F0F0F0F);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg2<sp/>=<sp/>_mm_slli_epi32(Reg1,<sp/>4);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_or_si128(Reg2,<sp/>Reg1);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_and_si128(Reg1,<sp/>Mask2);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG1<sp/>=<sp/>((REG1<sp/>&lt;&lt;<sp/><sp/>2)<sp/>|<sp/>REG1)<sp/>&amp;<sp/>glm::uint64(0x3333333333333333);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG2<sp/>=<sp/>((REG2<sp/>&lt;&lt;<sp/><sp/>2)<sp/>|<sp/>REG2)<sp/>&amp;<sp/>glm::uint64(0x3333333333333333);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg2<sp/>=<sp/>_mm_slli_epi32(Reg1,<sp/>2);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_or_si128(Reg2,<sp/>Reg1);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_and_si128(Reg1,<sp/>Mask1);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG1<sp/>=<sp/>((REG1<sp/>&lt;&lt;<sp/><sp/>1)<sp/>|<sp/>REG1)<sp/>&amp;<sp/>glm::uint64(0x5555555555555555);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG2<sp/>=<sp/>((REG2<sp/>&lt;&lt;<sp/><sp/>1)<sp/>|<sp/>REG2)<sp/>&amp;<sp/>glm::uint64(0x5555555555555555);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg2<sp/>=<sp/>_mm_slli_epi32(Reg1,<sp/>1);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_or_si128(Reg2,<sp/>Reg1);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_and_si128(Reg1,<sp/>Mask0);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//return<sp/>REG1<sp/>|<sp/>(REG2<sp/>&lt;&lt;<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg2<sp/>=<sp/>_mm_slli_epi32(Reg1,<sp/>1);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg2<sp/>=<sp/>_mm_srli_si128(Reg2,<sp/>8);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_or_si128(Reg1,<sp/>Reg2);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128i<sp/>Result;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_store_si128(&amp;Result,<sp/>Reg1);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;Result);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref><sp/>sseUnalignedBitfieldInterleave(<ref refid="group__gtc__type__precision_1ga202b6a53c105fcb7e531f9b443518451" kindref="member">glm::uint32</ref><sp/>x,<sp/><ref refid="group__gtc__type__precision_1ga202b6a53c105fcb7e531f9b443518451" kindref="member">glm::uint32</ref><sp/>y)</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128i<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Array<sp/>=<sp/>_mm_set_epi32(0,<sp/>y,<sp/>0,<sp/>x);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128i<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mask4<sp/>=<sp/>_mm_set1_epi32(0x0000FFFF);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128i<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mask3<sp/>=<sp/>_mm_set1_epi32(0x00FF00FF);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128i<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mask2<sp/>=<sp/>_mm_set1_epi32(0x0F0F0F0F);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128i<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mask1<sp/>=<sp/>_mm_set1_epi32(0x33333333);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128i<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mask0<sp/>=<sp/>_mm_set1_epi32(0x55555555);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128i<sp/>Reg1;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128i<sp/>Reg2;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>REG1<sp/>=<sp/>x;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>REG2<sp/>=<sp/>y;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_loadu_si128(&amp;Array);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG1<sp/>=<sp/>((REG1<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>REG1)<sp/>&amp;<sp/>glm::uint64(0x0000FFFF0000FFFF);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG2<sp/>=<sp/>((REG2<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>REG2)<sp/>&amp;<sp/>glm::uint64(0x0000FFFF0000FFFF);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg2<sp/>=<sp/>_mm_slli_si128(Reg1,<sp/>2);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_or_si128(Reg2,<sp/>Reg1);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_and_si128(Reg1,<sp/>Mask4);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG1<sp/>=<sp/>((REG1<sp/>&lt;&lt;<sp/><sp/>8)<sp/>|<sp/>REG1)<sp/>&amp;<sp/>glm::uint64(0x00FF00FF00FF00FF);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG2<sp/>=<sp/>((REG2<sp/>&lt;&lt;<sp/><sp/>8)<sp/>|<sp/>REG2)<sp/>&amp;<sp/>glm::uint64(0x00FF00FF00FF00FF);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg2<sp/>=<sp/>_mm_slli_si128(Reg1,<sp/>1);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_or_si128(Reg2,<sp/>Reg1);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_and_si128(Reg1,<sp/>Mask3);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG1<sp/>=<sp/>((REG1<sp/>&lt;&lt;<sp/><sp/>4)<sp/>|<sp/>REG1)<sp/>&amp;<sp/>glm::uint64(0x0F0F0F0F0F0F0F0F);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG2<sp/>=<sp/>((REG2<sp/>&lt;&lt;<sp/><sp/>4)<sp/>|<sp/>REG2)<sp/>&amp;<sp/>glm::uint64(0x0F0F0F0F0F0F0F0F);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg2<sp/>=<sp/>_mm_slli_epi32(Reg1,<sp/>4);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_or_si128(Reg2,<sp/>Reg1);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_and_si128(Reg1,<sp/>Mask2);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG1<sp/>=<sp/>((REG1<sp/>&lt;&lt;<sp/><sp/>2)<sp/>|<sp/>REG1)<sp/>&amp;<sp/>glm::uint64(0x3333333333333333);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG2<sp/>=<sp/>((REG2<sp/>&lt;&lt;<sp/><sp/>2)<sp/>|<sp/>REG2)<sp/>&amp;<sp/>glm::uint64(0x3333333333333333);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg2<sp/>=<sp/>_mm_slli_epi32(Reg1,<sp/>2);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_or_si128(Reg2,<sp/>Reg1);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_and_si128(Reg1,<sp/>Mask1);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG1<sp/>=<sp/>((REG1<sp/>&lt;&lt;<sp/><sp/>1)<sp/>|<sp/>REG1)<sp/>&amp;<sp/>glm::uint64(0x5555555555555555);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG2<sp/>=<sp/>((REG2<sp/>&lt;&lt;<sp/><sp/>1)<sp/>|<sp/>REG2)<sp/>&amp;<sp/>glm::uint64(0x5555555555555555);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg2<sp/>=<sp/>_mm_slli_epi32(Reg1,<sp/>1);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_or_si128(Reg2,<sp/>Reg1);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_and_si128(Reg1,<sp/>Mask0);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//return<sp/>REG1<sp/>|<sp/>(REG2<sp/>&lt;&lt;<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg2<sp/>=<sp/>_mm_slli_epi32(Reg1,<sp/>1);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg2<sp/>=<sp/>_mm_srli_si128(Reg2,<sp/>8);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_or_si128(Reg1,<sp/>Reg2);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128i<sp/>Result;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_store_si128(&amp;Result,<sp/>Reg1);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;Result);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="comment">//GLM_ARCH<sp/>&amp;<sp/>GLM_ARCH_SSE2_BIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test()</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(glm::uint32<sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>(1<sp/>&lt;&lt;<sp/>10);<sp/>++y)</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(glm::uint32<sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>(1<sp/>&lt;&lt;<sp/>10);<sp/>++x)</highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::uint64<sp/>A<sp/>=<sp/>glm::bitfieldInterleave(x,<sp/>y);</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::uint64<sp/>B<sp/>=<sp/>fastBitfieldInterleave(x,<sp/>y);</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//glm::uint64<sp/>C<sp/>=<sp/>loopBitfieldInterleave(x,<sp/>y);</highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::uint64<sp/>D<sp/>=<sp/>interleaveBitfieldInterleave(x,<sp/>y);</highlight></codeline>
<codeline lineno="473"><highlight class="comment"></highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(A<sp/>==<sp/>B);</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//assert(A<sp/>==<sp/>C);</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(A<sp/>==<sp/>D);</highlight></codeline>
<codeline lineno="477"><highlight class="comment"></highlight></codeline>
<codeline lineno="478"><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>GLM_ARCH<sp/>&amp;<sp/>GLM_ARCH_SSE2_BIT</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::uint64<sp/>E<sp/>=<sp/>sseBitfieldInterleave(x,<sp/>y);</highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::uint64<sp/>F<sp/>=<sp/>sseUnalignedBitfieldInterleave(x,<sp/>y);</highlight></codeline>
<codeline lineno="481"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(A<sp/>==<sp/>E);</highlight></codeline>
<codeline lineno="482"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(A<sp/>==<sp/>F);</highlight></codeline>
<codeline lineno="483"><highlight class="comment"></highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128i<sp/>G<sp/>=<sp/>glm_i128_interleave(_mm_set_epi32(0,<sp/>y,<sp/>0,<sp/>x));</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::uint64<sp/>Result[2];</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_storeu_si128((__m128i*)Result,<sp/>G);</highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(A<sp/>==<sp/>Result[0]);</highlight></codeline>
<codeline lineno="488"><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endif//GLM_ARCH<sp/>&amp;<sp/>GLM_ARCH_SSE2_BIT</highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref><sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>127;<sp/>++y)</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>127;<sp/>++x)</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref><sp/>A(<ref refid="group__gtc__bitfield_1ga479134317bc95d99f2b2e235d3db287b" kindref="member">glm::bitfieldInterleave</ref>(<ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref>(x),<sp/><ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref>(y)));</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref><sp/>B(<ref refid="group__gtc__bitfield_1ga479134317bc95d99f2b2e235d3db287b" kindref="member">glm::bitfieldInterleave</ref>(<ref refid="group__gtc__type__precision_1gad8c2939e1fdd8e5828b31d95c52255d5" kindref="member">glm::uint16</ref>(x),<sp/><ref refid="group__gtc__type__precision_1gad8c2939e1fdd8e5828b31d95c52255d5" kindref="member">glm::uint16</ref>(y)));</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref><sp/>C(<ref refid="group__gtc__bitfield_1ga479134317bc95d99f2b2e235d3db287b" kindref="member">glm::bitfieldInterleave</ref>(<ref refid="group__gtc__type__precision_1ga202b6a53c105fcb7e531f9b443518451" kindref="member">glm::uint32</ref>(x),<sp/><ref refid="group__gtc__type__precision_1ga202b6a53c105fcb7e531f9b443518451" kindref="member">glm::uint32</ref>(y)));</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>A<sp/>==<sp/>B<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>A<sp/>==<sp/>C<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1ga435d75819cce297cc5fa21bd84ef89a5" kindref="member">glm::int64</ref><sp/>D(<ref refid="group__gtc__bitfield_1ga479134317bc95d99f2b2e235d3db287b" kindref="member">glm::bitfieldInterleave</ref>(<ref refid="group__gtc__type__precision_1ga96254f9c1c4506fc8eb5cf3301ce8565" kindref="member">glm::int8</ref>(x),<sp/><ref refid="group__gtc__type__precision_1ga96254f9c1c4506fc8eb5cf3301ce8565" kindref="member">glm::int8</ref>(y)));</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1ga435d75819cce297cc5fa21bd84ef89a5" kindref="member">glm::int64</ref><sp/>E(<ref refid="group__gtc__bitfield_1ga479134317bc95d99f2b2e235d3db287b" kindref="member">glm::bitfieldInterleave</ref>(<ref refid="group__gtc__type__precision_1ga2945a61d12771f8954994fcddf02b021" kindref="member">glm::int16</ref>(x),<sp/><ref refid="group__gtc__type__precision_1ga2945a61d12771f8954994fcddf02b021" kindref="member">glm::int16</ref>(y)));</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1ga435d75819cce297cc5fa21bd84ef89a5" kindref="member">glm::int64</ref><sp/>F(<ref refid="group__gtc__bitfield_1ga479134317bc95d99f2b2e235d3db287b" kindref="member">glm::bitfieldInterleave</ref>(<ref refid="group__gtc__type__precision_1ga632d8b25f6b61659f39ea4321fab92a4" kindref="member">glm::int32</ref>(x),<sp/><ref refid="group__gtc__type__precision_1ga632d8b25f6b61659f39ea4321fab92a4" kindref="member">glm::int32</ref>(y)));</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>D<sp/>==<sp/>E<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>D<sp/>==<sp/>F<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Error;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>perf()</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1ga202b6a53c105fcb7e531f9b443518451" kindref="member">glm::uint32</ref><sp/>x_max<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>11;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1ga202b6a53c105fcb7e531f9b443518451" kindref="member">glm::uint32</ref><sp/>y_max<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>10;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ALU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;glm::uint64&gt;<sp/>Data(x_max<sp/>*<sp/>y_max);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;glm::u32vec2&gt;<sp/>Param(x_max<sp/>*<sp/>y_max);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__gtc__type__precision_1ga202b6a53c105fcb7e531f9b443518451" kindref="member">glm::uint32</ref><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Param.size();<sp/>++i)</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param[i]<sp/>=<sp/><ref refid="structglm_1_1vec" kindref="compound">glm::u32vec2</ref>(i<sp/>%<sp/>x_max,<sp/>i<sp/>/<sp/>y_max);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::clock_t<sp/>LastTime<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Data.size();<sp/>++i)</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data[i]<sp/>=<sp/><ref refid="group__gtc__bitfield_1ga479134317bc95d99f2b2e235d3db287b" kindref="member">glm::bitfieldInterleave</ref>(Param[i].x,<sp/>Param[i].y);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::clock_t<sp/>Time<sp/>=<sp/>std::clock()<sp/>-<sp/>LastTime;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::printf(</highlight><highlight class="stringliteral">&quot;glm::bitfieldInterleave<sp/>Time<sp/>%d<sp/>clocks\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(Time));</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::clock_t<sp/>LastTime<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Data.size();<sp/>++i)</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data[i]<sp/>=<sp/>fastBitfieldInterleave(Param[i].x,<sp/>Param[i].y);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::clock_t<sp/>Time<sp/>=<sp/>std::clock()<sp/>-<sp/>LastTime;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::printf(</highlight><highlight class="stringliteral">&quot;fastBitfieldInterleave<sp/>Time<sp/>%d<sp/>clocks\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(Time));</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::clock_t<sp/>LastTime<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="550"><highlight class="comment"></highlight></codeline>
<codeline lineno="551"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Data.size();<sp/>++i)</highlight></codeline>
<codeline lineno="552"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data[i]<sp/>=<sp/>loopBitfieldInterleave(Param[i].x,<sp/>Param[i].y);</highlight></codeline>
<codeline lineno="553"><highlight class="comment"></highlight></codeline>
<codeline lineno="554"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::clock_t<sp/>Time<sp/>=<sp/>std::clock()<sp/>-<sp/>LastTime;</highlight></codeline>
<codeline lineno="555"><highlight class="comment"></highlight></codeline>
<codeline lineno="556"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::printf(&quot;loopBitfieldInterleave<sp/>Time<sp/>%d<sp/>clocks\n&quot;,<sp/>static_cast&lt;unsigned<sp/>int&gt;(Time));</highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::clock_t<sp/>LastTime<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Data.size();<sp/>++i)</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data[i]<sp/>=<sp/>interleaveBitfieldInterleave(Param[i].x,<sp/>Param[i].y);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::clock_t<sp/>Time<sp/>=<sp/>std::clock()<sp/>-<sp/>LastTime;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::printf(</highlight><highlight class="stringliteral">&quot;interleaveBitfieldInterleave<sp/>Time<sp/>%d<sp/>clocks\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(Time));</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>GLM_ARCH<sp/>&amp;<sp/>GLM_ARCH_SSE2_BIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::clock_t<sp/>LastTime<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Data.size();<sp/>++i)</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data[i]<sp/>=<sp/>sseBitfieldInterleave(Param[i].x,<sp/>Param[i].y);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::clock_t<sp/>Time<sp/>=<sp/>std::clock()<sp/>-<sp/>LastTime;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::printf(</highlight><highlight class="stringliteral">&quot;sseBitfieldInterleave<sp/>Time<sp/>%d<sp/>clocks\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(Time));</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::clock_t<sp/>LastTime<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Data.size();<sp/>++i)</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data[i]<sp/>=<sp/>sseUnalignedBitfieldInterleave(Param[i].x,<sp/>Param[i].y);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::clock_t<sp/>Time<sp/>=<sp/>std::clock()<sp/>-<sp/>LastTime;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::printf(</highlight><highlight class="stringliteral">&quot;sseUnalignedBitfieldInterleave<sp/>Time<sp/>%d<sp/>clocks\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(Time));</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>endif</highlight><highlight class="comment">//GLM_ARCH<sp/>&amp;<sp/>GLM_ARCH_SSE2_BIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::clock_t<sp/>LastTime<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Data.size();<sp/>++i)</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data[i]<sp/>=<sp/><ref refid="group__gtc__bitfield_1ga479134317bc95d99f2b2e235d3db287b" kindref="member">glm::bitfieldInterleave</ref>(Param[i].x,<sp/>Param[i].y,<sp/>Param[i].x);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::clock_t<sp/>Time<sp/>=<sp/>std::clock()<sp/>-<sp/>LastTime;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::printf(</highlight><highlight class="stringliteral">&quot;glm::detail::bitfieldInterleave<sp/>Time<sp/>%d<sp/>clocks\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(Time));</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(GLM_ARCH<sp/>&amp;<sp/>GLM_ARCH_SSE2_BIT<sp/>&amp;&amp;<sp/>!(GLM_COMPILER<sp/>&amp;<sp/>GLM_COMPILER_GCC))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SIMD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;__m128i&gt;<sp/>SimdData;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SimdData.resize(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(x_max<sp/>*<sp/>y_max));</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;__m128i&gt;<sp/>SimdParam;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SimdParam.resize(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(x_max<sp/>*<sp/>y_max));</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>SimdParam.size();<sp/>++i)</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SimdParam[i]<sp/>=<sp/>_mm_set_epi32(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(i<sp/>%<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(x_max)),<sp/>0,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(i<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(y_max)),<sp/>0);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::clock_t<sp/>LastTime<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>SimdData.size();<sp/>++i)</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SimdData[i]<sp/>=<sp/>glm_i128_interleave(SimdParam[i]);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::clock_t<sp/>Time<sp/>=<sp/>std::clock()<sp/>-<sp/>LastTime;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::printf(</highlight><highlight class="stringliteral">&quot;_mm_bit_interleave_si128<sp/>Time<sp/>%d<sp/>clocks\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(Time));</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>endif</highlight><highlight class="comment">//GLM_ARCH<sp/>&amp;<sp/>GLM_ARCH_SSE2_BIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="628"><highlight class="normal">}</highlight><highlight class="comment">//namespace<sp/>bitfieldInterleave</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">bitfieldInterleave5</highlight></codeline>
<codeline lineno="631"><highlight class="normal">{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/><ref refid="group__gtc__type__precision_1gad8c2939e1fdd8e5828b31d95c52255d5" kindref="member">glm::uint16</ref><sp/>bitfieldInterleave_u8vec2(<ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref><sp/>x,<sp/><ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref><sp/>y)</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1ga202b6a53c105fcb7e531f9b443518451" kindref="member">glm::uint32</ref><sp/>Result<sp/>=<sp/>(<ref refid="group__gtc__type__precision_1ga202b6a53c105fcb7e531f9b443518451" kindref="member">glm::uint32</ref>(y)<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/><ref refid="group__gtc__type__precision_1ga202b6a53c105fcb7e531f9b443518451" kindref="member">glm::uint32</ref>(x);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>((Result<sp/>&lt;&lt;<sp/><sp/>4)<sp/>|<sp/>Result)<sp/>&amp;<sp/>0x0F0F0F0F;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>((Result<sp/>&lt;&lt;<sp/><sp/>2)<sp/>|<sp/>Result)<sp/>&amp;<sp/>0x33333333;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>((Result<sp/>&lt;&lt;<sp/><sp/>1)<sp/>|<sp/>Result)<sp/>&amp;<sp/>0x55555555;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="group__gtc__type__precision_1gad8c2939e1fdd8e5828b31d95c52255d5" kindref="member">glm::uint16</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((Result<sp/>&amp;<sp/>0x0000FFFF)<sp/>|<sp/>(Result<sp/>&gt;&gt;<sp/>15));</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/><ref refid="structglm_1_1vec" kindref="compound">glm::u8vec2</ref><sp/>bitfieldDeinterleave_u8vec2(<ref refid="group__gtc__type__precision_1gad8c2939e1fdd8e5828b31d95c52255d5" kindref="member">glm::uint16</ref><sp/>InterleavedBitfield)</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1ga202b6a53c105fcb7e531f9b443518451" kindref="member">glm::uint32</ref><sp/>Result(InterleavedBitfield);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>((Result<sp/>&lt;&lt;<sp/>15)<sp/>|<sp/>Result)<sp/>&amp;<sp/>0x55555555;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>((Result<sp/>&gt;&gt;<sp/><sp/>1)<sp/>|<sp/>Result)<sp/>&amp;<sp/>0x33333333;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>((Result<sp/>&gt;&gt;<sp/><sp/>2)<sp/>|<sp/>Result)<sp/>&amp;<sp/>0x0F0F0F0F;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>((Result<sp/>&gt;&gt;<sp/><sp/>4)<sp/>|<sp/>Result)<sp/>&amp;<sp/>0x00FF00FF;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__type__precision_1ga01e28d0272428f94d22ea6111f0112be" kindref="member">glm::u8vec2</ref>(Result<sp/>&amp;<sp/>0x0000FFFF,<sp/>Result<sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/><ref refid="group__gtc__type__precision_1ga202b6a53c105fcb7e531f9b443518451" kindref="member">glm::uint32</ref><sp/>bitfieldInterleave_u8vec4(<ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref><sp/>x,<sp/><ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref><sp/>y,<sp/><ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref><sp/>z,<sp/><ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref><sp/>w)</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref><sp/>Result<sp/>=<sp/>(<ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref>(w)<sp/>&lt;&lt;<sp/>48)<sp/>|<sp/>(<ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref>(z)<sp/>&lt;&lt;<sp/>32)<sp/>|<sp/>(<ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref>(y)<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref>(x);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>((Result<sp/>&lt;&lt;<sp/>12)<sp/>|<sp/>Result)<sp/>&amp;<sp/>0x000F000F000F000Full;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>((Result<sp/>&lt;&lt;<sp/><sp/>6)<sp/>|<sp/>Result)<sp/>&amp;<sp/>0x0303030303030303ull;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>((Result<sp/>&lt;&lt;<sp/><sp/>3)<sp/>|<sp/>Result)<sp/>&amp;<sp/>0x1111111111111111ull;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__gtc__type__precision_1ga202b6a53c105fcb7e531f9b443518451" kindref="member">glm::uint32</ref><sp/>a<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="group__gtc__type__precision_1ga202b6a53c105fcb7e531f9b443518451" kindref="member">glm::uint32</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((Result<sp/>&amp;<sp/>0x000000000000FFFF)<sp/>&gt;&gt;<sp/>(<sp/>0<sp/>-<sp/>0));</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__gtc__type__precision_1ga202b6a53c105fcb7e531f9b443518451" kindref="member">glm::uint32</ref><sp/>b<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="group__gtc__type__precision_1ga202b6a53c105fcb7e531f9b443518451" kindref="member">glm::uint32</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((Result<sp/>&amp;<sp/>0x00000000FFFF0000)<sp/>&gt;&gt;<sp/>(16<sp/>-<sp/>3));</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__gtc__type__precision_1ga202b6a53c105fcb7e531f9b443518451" kindref="member">glm::uint32</ref><sp/>c<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="group__gtc__type__precision_1ga202b6a53c105fcb7e531f9b443518451" kindref="member">glm::uint32</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((Result<sp/>&amp;<sp/>0x0000FFFF00000000)<sp/>&gt;&gt;<sp/>(32<sp/>-<sp/>6));</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__gtc__type__precision_1ga202b6a53c105fcb7e531f9b443518451" kindref="member">glm::uint32</ref><sp/>d<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="group__gtc__type__precision_1ga202b6a53c105fcb7e531f9b443518451" kindref="member">glm::uint32</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((Result<sp/>&amp;<sp/>0xFFFF000000000000)<sp/>&gt;&gt;<sp/>(48<sp/>-<sp/>12));</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>|<sp/>b<sp/>|<sp/>c<sp/>|<sp/>d;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/><ref refid="structglm_1_1vec" kindref="compound">glm::u8vec4</ref><sp/>bitfieldDeinterleave_u8vec4(<ref refid="group__gtc__type__precision_1ga202b6a53c105fcb7e531f9b443518451" kindref="member">glm::uint32</ref><sp/>InterleavedBitfield)</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref><sp/>Result(InterleavedBitfield);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>((Result<sp/>&lt;&lt;<sp/>15)<sp/>|<sp/>Result)<sp/>&amp;<sp/>0x9249249249249249ull;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>((Result<sp/>&gt;&gt;<sp/><sp/>1)<sp/>|<sp/>Result)<sp/>&amp;<sp/>0x30C30C30C30C30C3ull;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>((Result<sp/>&gt;&gt;<sp/><sp/>2)<sp/>|<sp/>Result)<sp/>&amp;<sp/>0xF00F00F00F00F00Full;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>((Result<sp/>&gt;&gt;<sp/><sp/>4)<sp/>|<sp/>Result)<sp/>&amp;<sp/>0x00FF0000FF0000FFull;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__type__precision_1ga6c8841fa492bd5b1078b171452fd6974" kindref="member">glm::u8vec4</ref>(</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Result<sp/>&gt;&gt;<sp/>0)<sp/>&amp;<sp/>0x000000000000FFFFull,</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Result<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0x00000000FFFF0000ull,</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Result<sp/>&gt;&gt;<sp/>32)<sp/>&amp;<sp/>0x0000FFFF00000000ull,</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Result<sp/>&gt;&gt;<sp/>48)<sp/>&amp;<sp/>0xFFFF000000000000ull);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/><ref refid="group__gtc__type__precision_1ga202b6a53c105fcb7e531f9b443518451" kindref="member">glm::uint32</ref><sp/>bitfieldInterleave_u16vec2(<ref refid="group__gtc__type__precision_1gad8c2939e1fdd8e5828b31d95c52255d5" kindref="member">glm::uint16</ref><sp/>x,<sp/><ref refid="group__gtc__type__precision_1gad8c2939e1fdd8e5828b31d95c52255d5" kindref="member">glm::uint16</ref><sp/>y)</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref><sp/>Result<sp/>=<sp/>(<ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref>(y)<sp/>&lt;&lt;<sp/>32)<sp/>|<sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref>(x);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>((Result<sp/>&lt;&lt;<sp/><sp/>8)<sp/>|<sp/>Result)<sp/>&amp;<sp/>static_cast&lt;glm::uint32&gt;(0x00FF00FF00FF00FFull);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>((Result<sp/>&lt;&lt;<sp/><sp/>4)<sp/>|<sp/>Result)<sp/>&amp;<sp/>static_cast&lt;glm::uint32&gt;(0x0F0F0F0F0F0F0F0Full);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>((Result<sp/>&lt;&lt;<sp/><sp/>2)<sp/>|<sp/>Result)<sp/>&amp;<sp/>static_cast&lt;glm::uint32&gt;(0x3333333333333333ull);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>((Result<sp/>&lt;&lt;<sp/><sp/>1)<sp/>|<sp/>Result)<sp/>&amp;<sp/>static_cast&lt;glm::uint32&gt;(0x5555555555555555ull);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="group__gtc__type__precision_1ga202b6a53c105fcb7e531f9b443518451" kindref="member">glm::uint32</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((Result<sp/>&amp;<sp/>0x00000000FFFFFFFFull)<sp/>|<sp/>(Result<sp/>&gt;&gt;<sp/>31));</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/><ref refid="structglm_1_1vec" kindref="compound">glm::u16vec2</ref><sp/>bitfieldDeinterleave_u16vec2(<ref refid="group__gtc__type__precision_1ga202b6a53c105fcb7e531f9b443518451" kindref="member">glm::uint32</ref><sp/>InterleavedBitfield)</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1gae3632bf9b37da66233d78930dd06378a" kindref="member">glm::uint64</ref><sp/>Result(InterleavedBitfield);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>((Result<sp/>&lt;&lt;<sp/>31)<sp/>|<sp/>Result)<sp/>&amp;<sp/>0x5555555555555555ull;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>((Result<sp/>&gt;&gt;<sp/><sp/>1)<sp/>|<sp/>Result)<sp/>&amp;<sp/>0x3333333333333333ull;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>((Result<sp/>&gt;&gt;<sp/><sp/>2)<sp/>|<sp/>Result)<sp/>&amp;<sp/>0x0F0F0F0F0F0F0F0Full;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>((Result<sp/>&gt;&gt;<sp/><sp/>4)<sp/>|<sp/>Result)<sp/>&amp;<sp/>0x00FF00FF00FF00FFull;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>((Result<sp/>&gt;&gt;<sp/><sp/>8)<sp/>|<sp/>Result)<sp/>&amp;<sp/>0x0000FFFF0000FFFFull;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__type__precision_1ga50bd2ceeb100a187e7c46f135269a0ec" kindref="member">glm::u16vec2</ref>(Result<sp/>&amp;<sp/>0x00000000FFFFFFFFull,<sp/>Result<sp/>&gt;&gt;<sp/>32);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test()</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(glm::size_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>256;<sp/>++j)</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(glm::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>256;<sp/>++i)</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1gad8c2939e1fdd8e5828b31d95c52255d5" kindref="member">glm::uint16</ref><sp/>A<sp/>=<sp/>bitfieldInterleave_u8vec2(<ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref>(i),<sp/><ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref>(j));</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1gad8c2939e1fdd8e5828b31d95c52255d5" kindref="member">glm::uint16</ref><sp/>B<sp/>=<sp/><ref refid="group__gtc__bitfield_1ga479134317bc95d99f2b2e235d3db287b" kindref="member">glm::bitfieldInterleave</ref>(<ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref>(i),<sp/><ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref>(j));</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>A<sp/>==<sp/>B<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structglm_1_1vec" kindref="compound">glm::u8vec2</ref><sp/>C<sp/>=<sp/>bitfieldDeinterleave_u8vec2(A);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>C.x<sp/>==<sp/><ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref>(i)<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>C.y<sp/>==<sp/><ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref>(j)<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(glm::size_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>256;<sp/>++j)</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(glm::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>256;<sp/>++i)</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1ga202b6a53c105fcb7e531f9b443518451" kindref="member">glm::uint32</ref><sp/>A<sp/>=<sp/>bitfieldInterleave_u8vec4(<ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref>(i),<sp/><ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref>(j),<sp/><ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref>(i),<sp/><ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref>(j));</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1ga202b6a53c105fcb7e531f9b443518451" kindref="member">glm::uint32</ref><sp/>B<sp/>=<sp/><ref refid="group__gtc__bitfield_1ga479134317bc95d99f2b2e235d3db287b" kindref="member">glm::bitfieldInterleave</ref>(<ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref>(i),<sp/><ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref>(j),<sp/><ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref>(i),<sp/><ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref>(j));</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>A<sp/>==<sp/>B<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="724"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::u8vec4<sp/>C<sp/>=<sp/>bitfieldDeinterleave_u8vec4(A);</highlight></codeline>
<codeline lineno="725"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>C.x<sp/>==<sp/>glm::uint8(i)<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="726"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>C.y<sp/>==<sp/>glm::uint8(j)<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="727"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>C.z<sp/>==<sp/>glm::uint8(i)<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="728"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>C.w<sp/>==<sp/>glm::uint8(j)<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="729"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(glm::size_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>256;<sp/>++j)</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(glm::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>256;<sp/>++i)</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1ga202b6a53c105fcb7e531f9b443518451" kindref="member">glm::uint32</ref><sp/>A<sp/>=<sp/>bitfieldInterleave_u16vec2(<ref refid="group__gtc__type__precision_1gad8c2939e1fdd8e5828b31d95c52255d5" kindref="member">glm::uint16</ref>(i),<sp/><ref refid="group__gtc__type__precision_1gad8c2939e1fdd8e5828b31d95c52255d5" kindref="member">glm::uint16</ref>(j));</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1ga202b6a53c105fcb7e531f9b443518451" kindref="member">glm::uint32</ref><sp/>B<sp/>=<sp/><ref refid="group__gtc__bitfield_1ga479134317bc95d99f2b2e235d3db287b" kindref="member">glm::bitfieldInterleave</ref>(<ref refid="group__gtc__type__precision_1gad8c2939e1fdd8e5828b31d95c52255d5" kindref="member">glm::uint16</ref>(i),<sp/><ref refid="group__gtc__type__precision_1gad8c2939e1fdd8e5828b31d95c52255d5" kindref="member">glm::uint16</ref>(j));</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>A<sp/>==<sp/>B<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Error;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>perf_old_u8vec2(std::vector&lt;glm::uint16&gt;&amp;<sp/>Result)</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::clock_t<sp/>BeginTime<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(glm::size_t<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>10000;<sp/>++k)</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(glm::size_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>256;<sp/>++j)</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(glm::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>256;<sp/>++i)</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>Result[j<sp/>*<sp/>256<sp/>+<sp/>i]<sp/>==<sp/><ref refid="group__gtc__bitfield_1ga479134317bc95d99f2b2e235d3db287b" kindref="member">glm::bitfieldInterleave</ref>(<ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref>(i),<sp/><ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref>(j))<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::clock_t<sp/>EndTime<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::printf(</highlight><highlight class="stringliteral">&quot;glm::bitfieldInterleave&lt;u8vec2&gt;<sp/>Time<sp/>%d<sp/>clocks\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(EndTime<sp/>-<sp/>BeginTime));</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Error;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>perf_new_u8vec2(std::vector&lt;glm::uint16&gt;&amp;<sp/>Result)</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::clock_t<sp/>BeginTime<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(glm::size_t<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>10000;<sp/>++k)</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(glm::size_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>256;<sp/>++j)</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(glm::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>256;<sp/>++i)</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>Result[j<sp/>*<sp/>256<sp/>+<sp/>i]<sp/>==<sp/>bitfieldInterleave_u8vec2(<ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref>(i),<sp/><ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref>(j))<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::clock_t<sp/>EndTime<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::printf(</highlight><highlight class="stringliteral">&quot;bitfieldInterleave_u8vec2<sp/>Time<sp/>%d<sp/>clocks\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(EndTime<sp/>-<sp/>BeginTime));</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Error;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>perf_old_u8vec4(std::vector&lt;glm::uint32&gt;&amp;<sp/>Result)</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::clock_t<sp/>BeginTime<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(glm::size_t<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>10000;<sp/>++k)</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(glm::size_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>256;<sp/>++j)</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(glm::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>256;<sp/>++i)</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>Result[j<sp/>*<sp/>256<sp/>+<sp/>i]<sp/>==<sp/><ref refid="group__gtc__bitfield_1ga479134317bc95d99f2b2e235d3db287b" kindref="member">glm::bitfieldInterleave</ref>(<ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref>(i),<sp/><ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref>(j),<sp/><ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref>(i),<sp/><ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref>(j))<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::clock_t<sp/>EndTime<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::printf(</highlight><highlight class="stringliteral">&quot;glm::bitfieldInterleave&lt;u8vec4&gt;<sp/>Time<sp/>%d<sp/>clocks\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(EndTime<sp/>-<sp/>BeginTime));</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Error;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>perf_new_u8vec4(std::vector&lt;glm::uint32&gt;&amp;<sp/>Result)</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::clock_t<sp/>BeginTime<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(glm::size_t<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>10000;<sp/>++k)</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(glm::size_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>256;<sp/>++j)</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(glm::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>256;<sp/>++i)</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>Result[j<sp/>*<sp/>256<sp/>+<sp/>i]<sp/>==<sp/>bitfieldInterleave_u8vec4(<ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref>(i),<sp/><ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref>(j),<sp/><ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref>(i),<sp/><ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref>(j))<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::clock_t<sp/>EndTime<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::printf(</highlight><highlight class="stringliteral">&quot;bitfieldInterleave_u8vec4<sp/>Time<sp/>%d<sp/>clocks\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(EndTime<sp/>-<sp/>BeginTime));</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Error;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>perf_old_u16vec2(std::vector&lt;glm::uint32&gt;&amp;<sp/>Result)</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::clock_t<sp/>BeginTime<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(glm::size_t<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>10000;<sp/>++k)</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(glm::size_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>256;<sp/>++j)</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(glm::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>256;<sp/>++i)</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>Result[j<sp/>*<sp/>256<sp/>+<sp/>i]<sp/>==<sp/><ref refid="group__gtc__bitfield_1ga479134317bc95d99f2b2e235d3db287b" kindref="member">glm::bitfieldInterleave</ref>(<ref refid="group__gtc__type__precision_1gad8c2939e1fdd8e5828b31d95c52255d5" kindref="member">glm::uint16</ref>(i),<sp/><ref refid="group__gtc__type__precision_1gad8c2939e1fdd8e5828b31d95c52255d5" kindref="member">glm::uint16</ref>(j))<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::clock_t<sp/>EndTime<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::printf(</highlight><highlight class="stringliteral">&quot;glm::bitfieldInterleave&lt;u16vec2&gt;<sp/>Time<sp/>%d<sp/>clocks\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(EndTime<sp/>-<sp/>BeginTime));</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Error;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>perf_new_u16vec2(std::vector&lt;glm::uint32&gt;&amp;<sp/>Result)</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::clock_t<sp/>BeginTime<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(glm::size_t<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>10000;<sp/>++k)</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(glm::size_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>256;<sp/>++j)</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(glm::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>256;<sp/>++i)</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>Result[j<sp/>*<sp/>256<sp/>+<sp/>i]<sp/>==<sp/>bitfieldInterleave_u16vec2(<ref refid="group__gtc__type__precision_1gad8c2939e1fdd8e5828b31d95c52255d5" kindref="member">glm::uint16</ref>(i),<sp/><ref refid="group__gtc__type__precision_1gad8c2939e1fdd8e5828b31d95c52255d5" kindref="member">glm::uint16</ref>(j))<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::clock_t<sp/>EndTime<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::printf(</highlight><highlight class="stringliteral">&quot;bitfieldInterleave_u16vec2<sp/>Time<sp/>%d<sp/>clocks\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(EndTime<sp/>-<sp/>BeginTime));</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Error;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>perf()</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::printf(</highlight><highlight class="stringliteral">&quot;bitfieldInterleave<sp/>perf:<sp/>init\r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;glm::uint16&gt;<sp/>Result_u8vec2(256<sp/>*<sp/>256,<sp/>0);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(glm::size_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>256;<sp/>++j)</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(glm::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>256;<sp/>++i)</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result_u8vec2[j<sp/>*<sp/>256<sp/>+<sp/>i]<sp/>=<sp/><ref refid="group__gtc__bitfield_1ga479134317bc95d99f2b2e235d3db287b" kindref="member">glm::bitfieldInterleave</ref>(<ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref>(i),<sp/><ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref>(j));</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>perf_old_u8vec2(Result_u8vec2);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>perf_new_u8vec2(Result_u8vec2);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;glm::uint32&gt;<sp/>Result_u8vec4(256<sp/>*<sp/>256,<sp/>0);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(glm::size_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>256;<sp/>++j)</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(glm::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>256;<sp/>++i)</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result_u8vec4[j<sp/>*<sp/>256<sp/>+<sp/>i]<sp/>=<sp/><ref refid="group__gtc__bitfield_1ga479134317bc95d99f2b2e235d3db287b" kindref="member">glm::bitfieldInterleave</ref>(<ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref>(i),<sp/><ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref>(j),<sp/><ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref>(i),<sp/><ref refid="group__gtc__type__precision_1ga1a7dcd8aac97cc8020817c94049deff2" kindref="member">glm::uint8</ref>(j));</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>perf_old_u8vec4(Result_u8vec4);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>perf_new_u8vec4(Result_u8vec4);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;glm::uint32&gt;<sp/>Result_u16vec2(256<sp/>*<sp/>256,<sp/>0);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(glm::size_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>256;<sp/>++j)</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(glm::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>256;<sp/>++i)</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result_u16vec2[j<sp/>*<sp/>256<sp/>+<sp/>i]<sp/>=<sp/><ref refid="group__gtc__bitfield_1ga479134317bc95d99f2b2e235d3db287b" kindref="member">glm::bitfieldInterleave</ref>(<ref refid="group__gtc__type__precision_1gad8c2939e1fdd8e5828b31d95c52255d5" kindref="member">glm::uint16</ref>(i),<sp/><ref refid="group__gtc__type__precision_1gad8c2939e1fdd8e5828b31d95c52255d5" kindref="member">glm::uint16</ref>(j));</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>perf_old_u16vec2(Result_u16vec2);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>perf_new_u16vec2(Result_u16vec2);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::printf(</highlight><highlight class="stringliteral">&quot;bitfieldInterleave<sp/>perf:<sp/>%d<sp/>Errors\n&quot;</highlight><highlight class="normal">,<sp/>Error);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Error;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal">}</highlight><highlight class="comment">//namespace<sp/>bitfieldInterleave5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="889"><highlight class="normal">{</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Tests<sp/>for<sp/>a<sp/>faster<sp/>and<sp/>to<sp/>reserve<sp/>bitfieldInterleave</highlight></codeline>
<codeline lineno="892"><highlight class="comment"><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>::bitfieldInterleave5::test();</highlight></codeline>
<codeline lineno="893"><highlight class="comment"><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>::bitfieldInterleave5::perf();</highlight></codeline>
<codeline lineno="894"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>::mask::test();</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>::bitfieldInterleave3::test();</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>::bitfieldInterleave4::test();</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>::bitfieldInterleave::test();</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>ifdef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>::mask::perf();</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>+=<sp/>::bitfieldInterleave::perf();</highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="comment">//NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Error;</highlight></codeline>
<codeline lineno="906"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/gtc/gtc_bitfield.cpp"/>
  </compounddef>
</doxygen>
