<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="binary__to__compressed__c_8cpp" kind="file" language="C++">
    <compoundname>binary_to_compressed_c.cpp</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">assert.h</includes>
    <incdepgraph>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp</label>
        <link refid="binary__to__compressed__c_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>assert.h</label>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="3">
        <label>string.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="binary__to__compressed__c_8cpp_1af08ec37a8c99d747fb60fa15bc28678b" prot="public" static="no">
        <name>_CRT_SECURE_NO_WARNINGS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" line="23" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="binary__to__compressed__c_8cpp_1ae7362593109573f7e5a8fad1b9837840" prot="public" static="no">
        <name>stb_out</name>
        <param><defname>v</defname></param>
        <initializer>do { if (stb__out) *stb__out++ = (stb_uchar) (v); else stb__write((stb_uchar) (v)); } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" line="192" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="binary__to__compressed__c_8cpp_1acd1fce3f60bc7c947d9573b40d96fcfb" prot="public" static="no">
        <name>stb__hc</name>
        <param><defname>q</defname></param>
        <param><defname>h</defname></param>
        <param><defname>c</defname></param>
        <initializer>(((h) &lt;&lt; 7) + ((h) &gt;&gt; 25) + q[c])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" line="231" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="binary__to__compressed__c_8cpp_1aa3edeaa860cd62a039589c5ff0d12d0f" prot="public" static="no">
        <name>stb__hc2</name>
        <param><defname>q</defname></param>
        <param><defname>h</defname></param>
        <param><defname>c</defname></param>
        <param><defname>d</defname></param>
        <initializer>(((h) &lt;&lt; 14) + ((h) &gt;&gt; 18) + (q[c] &lt;&lt; 7) + q[d])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" line="232" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="binary__to__compressed__c_8cpp_1a02566557d0083f38ae2f7e6ea2959120" prot="public" static="no">
        <name>stb__hc3</name>
        <param><defname>q</defname></param>
        <param><defname>c</defname></param>
        <param><defname>d</defname></param>
        <param><defname>e</defname></param>
        <initializer>((q[c] &lt;&lt; 14) + (q[d] &lt;&lt; 7) + q[e])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" line="233" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="binary__to__compressed__c_8cpp_1a6e9742e8f211104eefc65b20057084a6" prot="public" static="no">
        <name>STB__SCRAMBLE</name>
        <param><defname>h</defname></param>
        <initializer>(((h) + ((h) &gt;&gt; 16)) &amp; <ref refid="structmask" kindref="compound">mask</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" line="251" column="9"/>
      </memberdef>
      <memberdef kind="define" id="binary__to__compressed__c_8cpp_1ae6915b97c7af5c0c4214a03d594df9a5" prot="public" static="no">
        <name>stb__nc</name>
        <param><defname>b</defname></param>
        <param><defname>d</defname></param>
        <initializer>((d) &lt;= window &amp;&amp; ((b) &gt; 9 || stb_not_crap(b,d)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" line="267" column="9"/>
      </memberdef>
      <memberdef kind="define" id="binary__to__compressed__c_8cpp_1ae9ced4aef3a241149211d367c67454ab" prot="public" static="no">
        <name>STB__TRY</name>
        <param><defname>t</defname></param>
        <param><defname>p</defname></param>
        <initializer>    /* avoid retrying a match we already tried */ \
    if (p ? dist != q-t : 1)                             \
    if ((m = stb_matchlen(t, q, match_max)) &gt; best)     \
    if (stb__nc(m,q-(t)))                                \
    best = m, dist = q - (t)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" line="269" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="binary__to__compressed__c_8cpp_1a6fe01ca1e7c8e7b941f14187549609c6" prot="public" static="no">
        <type>unsigned int</type>
        <definition>typedef unsigned int stb_uint</definition>
        <argsstring></argsstring>
        <name>stb_uint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" line="30" column="22" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="binary__to__compressed__c_8cpp_1aade163fe29a05e8b6333c814c771101a" prot="public" static="no">
        <type>unsigned char</type>
        <definition>typedef unsigned char stb_uchar</definition>
        <argsstring></argsstring>
        <name>stb_uchar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" line="31" column="23" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="binary__to__compressed__c_8cpp_1af6a9d6663675c00e25dd42b28c0550d7" prot="public" static="yes" mutable="no">
        <type>stb_uchar *</type>
        <definition>stb_uchar* stb__out</definition>
        <argsstring></argsstring>
        <name>stb__out</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" line="181" column="18" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="binary__to__compressed__c_8cpp_1a5308094ab0e7b54319892e8bcb9dd6ca" prot="public" static="yes" mutable="no">
        <type>FILE *</type>
        <definition>FILE* stb__outfile</definition>
        <argsstring></argsstring>
        <name>stb__outfile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" line="182" column="18" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="binary__to__compressed__c_8cpp_1a735cec354e600bf64be4f8f68e9b7d39" prot="public" static="yes" mutable="no">
        <type>stb_uint</type>
        <definition>stb_uint stb__outbytes</definition>
        <argsstring></argsstring>
        <name>stb__outbytes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" line="183" column="19" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="binary__to__compressed__c_8cpp_1ad8ca4d3cb5bc997fb623762e361713dd" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int stb__window</definition>
        <argsstring></argsstring>
        <name>stb__window</name>
        <initializer>= 0x40000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" line="218" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="binary__to__compressed__c_8cpp_1ae2837b3d97900d3df1f86eda79d736b9" prot="public" static="yes" mutable="no">
        <type>stb_uint</type>
        <definition>stb_uint stb__hashsize</definition>
        <argsstring></argsstring>
        <name>stb__hashsize</name>
        <initializer>= 32768</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" line="227" column="18" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="binary__to__compressed__c_8cpp_1a1c8c5c62062bbe092d43dbbf3b4e6504" prot="public" static="yes" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int stb__running_adler</definition>
        <argsstring></argsstring>
        <name>stb__running_adler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" line="235" column="21" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" bodystart="235" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="binary__to__compressed__c_8cpp_1a2a6c45175c8d6c47aea6ddf81c288eae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stb_uint</type>
        <definition>stb_uint stb_compress</definition>
        <argsstring>(stb_uchar *out, stb_uchar *in, stb_uint len)</argsstring>
        <name>stb_compress</name>
        <param>
          <type>stb_uchar *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>stb_uchar *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>stb_uint</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" line="377" column="10" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" bodystart="377" bodyend="385" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" declline="32" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="binary__to__compressed__c_8cpp_1a6575ff5ef371be7c36e0749fb353c0f2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool binary_to_compressed_c</definition>
        <argsstring>(const char *filename, const char *symbol, bool use_base85_encoding, bool use_compression)</argsstring>
        <name>binary_to_compressed_c</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>symbol</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_base85_encoding</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_compression</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" line="70" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" bodystart="70" bodyend="134" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" declline="34" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="binary__to__compressed__c_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" line="36" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" bodystart="36" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="binary__to__compressed__c_8cpp_1a4906f500c094e4b18177305459bc3e43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char Encode85Byte</definition>
        <argsstring>(unsigned int x)</argsstring>
        <name>Encode85Byte</name>
        <param>
          <type>unsigned int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" line="64" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" bodystart="64" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="binary__to__compressed__c_8cpp_1a4b71ca8a36b13148ee3cf0423b6419fd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>stb_uint</type>
        <definition>static stb_uint stb_adler32</definition>
        <argsstring>(stb_uint adler32, stb_uchar *buffer, stb_uint buflen)</argsstring>
        <name>stb_adler32</name>
        <param>
          <type>stb_uint</type>
          <declname>adler32</declname>
        </param>
        <param>
          <type>stb_uchar *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>stb_uint</type>
          <declname>buflen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" line="140" column="17" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" bodystart="140" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="binary__to__compressed__c_8cpp_1a2b5b717d79695297bfa3e3b02dd18f39" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>static unsigned int stb_matchlen</definition>
        <argsstring>(stb_uchar *m1, stb_uchar *m2, stb_uint maxlen)</argsstring>
        <name>stb_matchlen</name>
        <param>
          <type>stb_uchar *</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>stb_uchar *</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>stb_uint</type>
          <declname>maxlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" line="171" column="21" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" bodystart="171" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="binary__to__compressed__c_8cpp_1a037774ff3ca8d95ba48f59933544cdab" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void stb__write</definition>
        <argsstring>(unsigned char v)</argsstring>
        <name>stb__write</name>
        <param>
          <type>unsigned char</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" line="185" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" bodystart="185" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="binary__to__compressed__c_8cpp_1a9146adb2d25724b836f4f5ff78211afe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void stb_out2</definition>
        <argsstring>(stb_uint v)</argsstring>
        <name>stb_out2</name>
        <param>
          <type>stb_uint</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" line="194" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" bodystart="194" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="binary__to__compressed__c_8cpp_1a4e090d9797991cdfa02f72b4fd7c0af1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void stb_out3</definition>
        <argsstring>(stb_uint v)</argsstring>
        <name>stb_out3</name>
        <param>
          <type>stb_uint</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" line="195" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" bodystart="195" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="binary__to__compressed__c_8cpp_1aa28c5fe6ee919c0d3a9b34cd0aee489d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void stb_out4</definition>
        <argsstring>(stb_uint v)</argsstring>
        <name>stb_out4</name>
        <param>
          <type>stb_uint</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" line="196" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" bodystart="196" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="binary__to__compressed__c_8cpp_1a41148e65d7a7b1ce4d7233b643c5ee66" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void outliterals</definition>
        <argsstring>(stb_uchar *in, int numlit)</argsstring>
        <name>outliterals</name>
        <param>
          <type>stb_uchar *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numlit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" line="198" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" bodystart="198" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="binary__to__compressed__c_8cpp_1a51f3d3364663f2c6f75105f004b773f3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int stb_not_crap</definition>
        <argsstring>(int best, int dist)</argsstring>
        <name>stb_not_crap</name>
        <param>
          <type>int</type>
          <declname>best</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" line="220" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" bodystart="220" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="binary__to__compressed__c_8cpp_1a391c03cb101958c69962db5d908b1ed2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int stb_compress_chunk</definition>
        <argsstring>(stb_uchar *history, stb_uchar *start, stb_uchar *end, int length, int *pending_literals, stb_uchar **chash, stb_uint mask)</argsstring>
        <name>stb_compress_chunk</name>
        <param>
          <type>stb_uchar *</type>
          <declname>history</declname>
        </param>
        <param>
          <type>stb_uchar *</type>
          <declname>start</declname>
        </param>
        <param>
          <type>stb_uchar *</type>
          <declname>end</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>pending_literals</declname>
        </param>
        <param>
          <type>stb_uchar **</type>
          <declname>chash</declname>
        </param>
        <param>
          <type>stb_uint</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" line="237" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" bodystart="237" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="binary__to__compressed__c_8cpp_1a04c97274efecdbbbe60aa6036621b325" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int stb_compress_inner</definition>
        <argsstring>(stb_uchar *input, stb_uint length)</argsstring>
        <name>stb_compress_inner</name>
        <param>
          <type>stb_uchar *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>stb_uint</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" line="342" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp" bodystart="342" bodyend="375"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>dear<sp/>imgui</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(binary_to_compressed_c.cpp)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>tool<sp/>to<sp/>turn<sp/>a<sp/>file<sp/>into<sp/>a<sp/>C<sp/>array,<sp/>if<sp/>you<sp/>want<sp/>to<sp/>embed<sp/>font<sp/>data<sp/>in<sp/>your<sp/>source<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>data<sp/>is<sp/>first<sp/>compressed<sp/>with<sp/>stb_compress()<sp/>to<sp/>reduce<sp/>source<sp/>code<sp/>size,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>then<sp/>encoded<sp/>in<sp/>Base85<sp/>to<sp/>fit<sp/>in<sp/>a<sp/>string<sp/>so<sp/>we<sp/>can<sp/>fit<sp/>roughly<sp/>4<sp/>bytes<sp/>of<sp/>compressed<sp/>data<sp/>into<sp/>5<sp/>bytes<sp/>of<sp/>source<sp/>code<sp/>(suggested<sp/>by<sp/>@mmalex)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(If<sp/>we<sp/>used<sp/>32-bit<sp/>constants<sp/>it<sp/>would<sp/>require<sp/>take<sp/>11<sp/>bytes<sp/>of<sp/>source<sp/>code<sp/>to<sp/>encode<sp/>4<sp/>bytes,<sp/>and<sp/>be<sp/>endianness<sp/>dependent)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>even<sp/>with<sp/>compression,<sp/>the<sp/>output<sp/>array<sp/>is<sp/>likely<sp/>to<sp/>be<sp/>bigger<sp/>than<sp/>the<sp/>binary<sp/>file..</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Load<sp/>compressed<sp/>TTF<sp/>fonts<sp/>with<sp/>ImGui::GetIO().Fonts-&gt;AddFontFromMemoryCompressedTTF()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Build<sp/>with,<sp/>e.g:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>#<sp/>cl.exe<sp/>binary_to_compressed_c.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>#<sp/>g++<sp/>binary_to_compressed_c.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>#<sp/>clang++<sp/>binary_to_compressed_c.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>can<sp/>also<sp/>find<sp/>a<sp/>precompiled<sp/>Windows<sp/>binary<sp/>in<sp/>the<sp/>binary/demo<sp/>package<sp/>available<sp/>from<sp/>https://github.com/ocornut/imgui</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Usage:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>binary_to_compressed_c.exe<sp/>[-base85]<sp/>[-nocompress]<sp/>&lt;inputfile&gt;<sp/>&lt;symbolname&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Usage<sp/>example:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>#<sp/>binary_to_compressed_c.exe<sp/>myfont.ttf<sp/>MyFont<sp/>&gt;<sp/>myfont.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>#<sp/>binary_to_compressed_c.exe<sp/>-base85<sp/>myfont.ttf<sp/>MyFont<sp/>&gt;<sp/>myfont.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_CRT_SECURE_NO_WARNINGS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>stb_compress*<sp/>from<sp/>stb.h<sp/>-<sp/>declaration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_uint;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>stb_uchar;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">stb_uint<sp/>stb_compress(stb_uchar*<sp/>out,<sp/>stb_uchar*<sp/>in,<sp/>stb_uint<sp/>len);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>binary_to_compressed_c(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>symbol,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_base85_encoding,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_compression);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argc<sp/>&lt;<sp/>3)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Syntax:<sp/>%s<sp/>[-base85]<sp/>[-nocompress]<sp/>&lt;inputfile&gt;<sp/>&lt;symbolname&gt;\n&quot;</highlight><highlight class="normal">,<sp/>argv[0]);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argn<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_base85_encoding<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_compression<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argv[argn][0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(argv[argn],<sp/></highlight><highlight class="stringliteral">&quot;-base85&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{<sp/>use_base85_encoding<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>argn++;<sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(argv[argn],<sp/></highlight><highlight class="stringliteral">&quot;-nocompress&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{<sp/>use_compression<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>argn++;<sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>argument:<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>argv[argn]);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>binary_to_compressed_c(argv[argn],<sp/>argv[argn<sp/>+<sp/>1],<sp/>use_base85_encoding,<sp/>use_compression);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ret)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>opening<sp/>or<sp/>reading<sp/>file:<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>argv[argn]);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Encode85Byte(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)</highlight></codeline>
<codeline lineno="65"><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(x<sp/>%<sp/>85)<sp/>+<sp/>35;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)<sp/>?<sp/>x<sp/>+<sp/>1<sp/>:<sp/>x;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>binary_to_compressed_c(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>symbol,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_base85_encoding,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_compression)</highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/>f<sp/>=<sp/>fopen(filename,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!f)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data_sz;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fseek(f,<sp/>0,<sp/>SEEK_END)<sp/>||<sp/>(data_sz<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)ftell(f))<sp/>==<sp/>-1<sp/>||<sp/>fseek(f,<sp/>0,<sp/>SEEK_SET))<sp/>{<sp/>fclose(f);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[data_sz<sp/>+<sp/>4];</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fread(data,<sp/>1,<sp/>data_sz,<sp/>f)<sp/>!=<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)data_sz)<sp/>{<sp/>fclose(f);<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>data;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>memset((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)data)<sp/>+<sp/>data_sz),<sp/>0,<sp/>4);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compress</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxlen<sp/>=<sp/>data_sz<sp/>+<sp/>512<sp/>+<sp/>(data_sz<sp/>&gt;&gt;<sp/>2)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>total<sp/>guess</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>compressed<sp/>=<sp/>use_compression<sp/>?<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[maxlen]<sp/>:<sp/>data;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compressed_sz<sp/>=<sp/>use_compression<sp/>?<sp/>stb_compress((stb_uchar*)compressed,<sp/>(stb_uchar*)data,<sp/>data_sz)<sp/>:<sp/>data_sz;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(use_compression)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(compressed<sp/>+<sp/>compressed_sz,<sp/>0,<sp/>maxlen<sp/>-<sp/>compressed_sz);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Output<sp/>as<sp/>Base85<sp/>encoded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/>out<sp/>=<sp/>stdout;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(out,<sp/></highlight><highlight class="stringliteral">&quot;//<sp/>File:<sp/>&apos;%s&apos;<sp/>(%d<sp/>bytes)\n&quot;</highlight><highlight class="normal">,<sp/>filename,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)data_sz);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(out,<sp/></highlight><highlight class="stringliteral">&quot;//<sp/>Exported<sp/>using<sp/>binary_to_compressed_c.cpp\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>compressed_str<sp/>=<sp/>use_compression<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;compressed_&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(use_base85_encoding)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(out,<sp/></highlight><highlight class="stringliteral">&quot;static<sp/>const<sp/>char<sp/>%s_%sdata_base85[%d+1]<sp/>=\n<sp/><sp/><sp/><sp/>\&quot;&quot;</highlight><highlight class="normal">,<sp/>symbol,<sp/>compressed_str,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)((compressed_sz<sp/>+<sp/>3)<sp/>/<sp/>4)*5);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>prev_c<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>src_i<sp/>=<sp/>0;<sp/>src_i<sp/>&lt;<sp/>compressed_sz;<sp/>src_i<sp/>+=<sp/>4)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>made<sp/>a<sp/>little<sp/>more<sp/>complicated<sp/>by<sp/>the<sp/>fact<sp/>that<sp/>??X<sp/>sequences<sp/>are<sp/>interpreted<sp/>as<sp/>trigraphs<sp/>by<sp/>old<sp/>C/C++<sp/>compilers.<sp/>So<sp/>we<sp/>need<sp/>to<sp/>escape<sp/>pairs<sp/>of<sp/>??.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>*(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)(compressed<sp/>+<sp/>src_i);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n5<sp/>=<sp/>0;<sp/>n5<sp/>&lt;<sp/>5;<sp/>n5++,<sp/>d<sp/>/=<sp/>85)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>Encode85Byte(d);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(out,<sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>prev_c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;\\%c&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;%c&quot;</highlight><highlight class="normal">,<sp/>c);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_c<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((src_i<sp/>%<sp/>112)<sp/>==<sp/>112<sp/>-<sp/>4)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(out,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;\n<sp/><sp/><sp/><sp/>\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(out,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;;\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(out,<sp/></highlight><highlight class="stringliteral">&quot;static<sp/>const<sp/>unsigned<sp/>int<sp/>%s_%ssize<sp/>=<sp/>%d;\n&quot;</highlight><highlight class="normal">,<sp/>symbol,<sp/>compressed_str,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)compressed_sz);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(out,<sp/></highlight><highlight class="stringliteral">&quot;static<sp/>const<sp/>unsigned<sp/>int<sp/>%s_%sdata[%d/4]<sp/>=\n{&quot;</highlight><highlight class="normal">,<sp/>symbol,<sp/>compressed_str,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)((compressed_sz<sp/>+<sp/>3)<sp/>/<sp/>4)*4);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>column<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>compressed_sz;<sp/>i<sp/>+=<sp/>4)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>*(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)(compressed<sp/>+<sp/>i);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((column++<sp/>%<sp/>12)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(out,<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/><sp/>0x%08x,<sp/>&quot;</highlight><highlight class="normal">,<sp/>d);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(out,<sp/></highlight><highlight class="stringliteral">&quot;0x%08x,<sp/>&quot;</highlight><highlight class="normal">,<sp/>d);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(out,<sp/></highlight><highlight class="stringliteral">&quot;\n};\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cleanup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>data;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(use_compression)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>compressed;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>stb_compress*<sp/>from<sp/>stb.h<sp/>-<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb_uint<sp/>stb_adler32(stb_uint<sp/>adler32,<sp/>stb_uchar<sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>stb_uint<sp/>buflen)</highlight></codeline>
<codeline lineno="141"><highlight class="normal">{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ADLER_MOD<sp/>=<sp/>65521;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>s1<sp/>=<sp/>adler32<sp/>&amp;<sp/>0xffff,<sp/>s2<sp/>=<sp/>adler32<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>blocklen,<sp/>i;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>blocklen<sp/>=<sp/>buflen<sp/>%<sp/>5552;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(buflen)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>+<sp/>7<sp/>&lt;<sp/>blocklen;<sp/>i<sp/>+=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/>+=<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[0],<sp/>s2<sp/>+=<sp/>s1;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/>+=<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[1],<sp/>s2<sp/>+=<sp/>s1;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/>+=<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[2],<sp/>s2<sp/>+=<sp/>s1;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/>+=<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[3],<sp/>s2<sp/>+=<sp/>s1;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/>+=<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[4],<sp/>s2<sp/>+=<sp/>s1;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/>+=<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[5],<sp/>s2<sp/>+=<sp/>s1;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/>+=<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[6],<sp/>s2<sp/>+=<sp/>s1;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/>+=<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[7],<sp/>s2<sp/>+=<sp/>s1;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref><sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>i<sp/>&lt;<sp/>blocklen;<sp/>++i)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/>+=<sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>++,<sp/>s2<sp/>+=<sp/>s1;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/>%=<sp/>ADLER_MOD,<sp/>s2<sp/>%=<sp/>ADLER_MOD;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buflen<sp/>-=<sp/>blocklen;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blocklen<sp/>=<sp/>5552;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(s2<sp/>&lt;&lt;<sp/>16)<sp/>+<sp/>s1;</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_matchlen(stb_uchar<sp/>*m1,<sp/>stb_uchar<sp/>*m2,<sp/>stb_uint<sp/>maxlen)</highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>stb_uint<sp/>i;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>maxlen;<sp/>++i)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m1[i]<sp/>!=<sp/>m2[i])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>simple<sp/>implementation<sp/>that<sp/>just<sp/>takes<sp/>the<sp/>source<sp/>data<sp/>in<sp/>a<sp/>big<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb_uchar<sp/>*stb__out;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FILE<sp/><sp/><sp/><sp/><sp/><sp/>*stb__outfile;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stb_uint<sp/><sp/><sp/>stb__outbytes;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb__write(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>v)</highlight></codeline>
<codeline lineno="186"><highlight class="normal">{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>fputc(v,<sp/>stb__outfile);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>++stb__outbytes;</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>stb_out(v)<sp/><sp/><sp/><sp/>(stb__out<sp/>?<sp/>*stb__out++<sp/>=<sp/>(stb_uchar)<sp/>(v)<sp/>:<sp/>stb__write((stb_uchar)<sp/>(v)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb_out(v)<sp/><sp/><sp/><sp/>do<sp/>{<sp/>if<sp/>(stb__out)<sp/>*stb__out++<sp/>=<sp/>(stb_uchar)<sp/>(v);<sp/>else<sp/>stb__write((stb_uchar)<sp/>(v));<sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_out2(stb_uint<sp/>v)<sp/>{<sp/>stb_out(v<sp/>&gt;&gt;<sp/>8);<sp/>stb_out(v);<sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_out3(stb_uint<sp/>v)<sp/>{<sp/>stb_out(v<sp/>&gt;&gt;<sp/>16);<sp/>stb_out(v<sp/>&gt;&gt;<sp/>8);<sp/>stb_out(v);<sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_out4(stb_uint<sp/>v)<sp/>{<sp/>stb_out(v<sp/>&gt;&gt;<sp/>24);<sp/>stb_out(v<sp/>&gt;&gt;<sp/>16);<sp/>stb_out(v<sp/>&gt;&gt;<sp/>8<sp/>);<sp/>stb_out(v);<sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>outliterals(stb_uchar<sp/>*in,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numlit)</highlight></codeline>
<codeline lineno="199"><highlight class="normal">{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(numlit<sp/>&gt;<sp/>65536)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outliterals(in,65536);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/><sp/><sp/><sp/><sp/>+=<sp/>65536;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numlit<sp/>-=<sp/>65536;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(numlit<sp/>==<sp/><sp/><sp/><sp/><sp/>0)<sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numlit<sp/>&lt;=<sp/><sp/><sp/><sp/>32)<sp/><sp/><sp/><sp/>stb_out<sp/>(0x000020<sp/>+<sp/>numlit-1);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numlit<sp/>&lt;=<sp/><sp/>2048)<sp/><sp/><sp/><sp/>stb_out2(0x000800<sp/>+<sp/>numlit-1);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/><sp/>numlit<sp/>&lt;=<sp/>65536)<sp/>*/</highlight><highlight class="normal"><sp/>stb_out3(0x070000<sp/>+<sp/>numlit-1);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb__out)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(stb__out,in,numlit);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb__out<sp/>+=<sp/>numlit;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(in,<sp/>1,<sp/>numlit,<sp/>stb__outfile);</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__window<sp/>=<sp/>0x40000;<sp/></highlight><highlight class="comment">//<sp/>256K</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_not_crap(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>best,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dist)</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/><sp/>((best<sp/>&gt;<sp/>2<sp/><sp/>&amp;&amp;<sp/><sp/>dist<sp/>&lt;=<sp/>0x00100)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(best<sp/>&gt;<sp/>5<sp/><sp/>&amp;&amp;<sp/><sp/>dist<sp/>&lt;=<sp/>0x04000)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(best<sp/>&gt;<sp/>7<sp/><sp/>&amp;&amp;<sp/><sp/>dist<sp/>&lt;=<sp/>0x80000));</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><sp/>stb_uint<sp/>stb__hashsize<sp/>=<sp/>32768;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment">//<sp/>note<sp/>that<sp/>you<sp/>can<sp/>play<sp/>with<sp/>the<sp/>hashing<sp/>functions<sp/>all<sp/>you</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">//<sp/>want<sp/>without<sp/>needing<sp/>to<sp/>change<sp/>the<sp/>decompressor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb__hc(q,h,c)<sp/><sp/><sp/><sp/><sp/><sp/>(((h)<sp/>&lt;&lt;<sp/>7)<sp/>+<sp/>((h)<sp/>&gt;&gt;<sp/>25)<sp/>+<sp/>q[c])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb__hc2(q,h,c,d)<sp/><sp/><sp/>(((h)<sp/>&lt;&lt;<sp/>14)<sp/>+<sp/>((h)<sp/>&gt;&gt;<sp/>18)<sp/>+<sp/>(q[c]<sp/>&lt;&lt;<sp/>7)<sp/>+<sp/>q[d])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb__hc3(q,c,d,e)<sp/><sp/><sp/>((q[c]<sp/>&lt;&lt;<sp/>14)<sp/>+<sp/>(q[d]<sp/>&lt;&lt;<sp/>7)<sp/>+<sp/>q[e])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__running_adler;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_compress_chunk(stb_uchar<sp/>*history,</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>stb_uchar<sp/>*start,</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>stb_uchar<sp/>*end,</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length,</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*pending_literals,</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>stb_uchar<sp/>**chash,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>stb_uint<sp/><ref refid="structmask" kindref="compound">mask</ref>)</highlight></codeline>
<codeline lineno="244"><highlight class="normal">{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)history;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>window<sp/>=<sp/>stb__window;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>stb_uint<sp/>match_max;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>stb_uchar<sp/>*lit_start<sp/>=<sp/>start<sp/>-<sp/>*pending_literals;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>stb_uchar<sp/>*q<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__SCRAMBLE(h)<sp/><sp/><sp/>(((h)<sp/>+<sp/>((h)<sp/>&gt;&gt;<sp/>16))<sp/>&amp;<sp/>mask)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stop<sp/>short<sp/>of<sp/>the<sp/>end<sp/>so<sp/>we<sp/>don&apos;t<sp/>scan<sp/>off<sp/>the<sp/>end<sp/>doing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>hashing;<sp/>this<sp/>means<sp/>we<sp/>won&apos;t<sp/>compress<sp/>the<sp/>last<sp/>few<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unless<sp/>they<sp/>were<sp/>part<sp/>of<sp/>something<sp/>longer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(q<sp/>&lt;<sp/>start+length<sp/>&amp;&amp;<sp/>q+12<sp/>&lt;<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_uint<sp/>h1,h2,h3,h4,<sp/>h;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_uchar<sp/>*t;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>best<sp/>=<sp/>2,<sp/>dist=0;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q+65536<sp/>&gt;<sp/>end)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match_max<sp/>=<sp/>end-q;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match_max<sp/>=<sp/>65536;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stb__nc(b,d)<sp/><sp/>((d)<sp/>&lt;=<sp/>window<sp/>&amp;&amp;<sp/>((b)<sp/>&gt;<sp/>9<sp/>||<sp/>stb_not_crap(b,d)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB__TRY(t,p)<sp/><sp/></highlight><highlight class="comment">/*<sp/>avoid<sp/>retrying<sp/>a<sp/>match<sp/>we<sp/>already<sp/>tried<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="270"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(p<sp/>?<sp/>dist<sp/>!=<sp/>q-t<sp/>:<sp/>1)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="271"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>((m<sp/>=<sp/>stb_matchlen(t,<sp/>q,<sp/>match_max))<sp/>&gt;<sp/>best)<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="272"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(stb__nc(m,q-(t)))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="273"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>best<sp/>=<sp/>m,<sp/>dist<sp/>=<sp/>q<sp/>-<sp/>(t)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rather<sp/>than<sp/>search<sp/>for<sp/>all<sp/>matches,<sp/>only<sp/>try<sp/>4<sp/>candidate<sp/>locations,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>chosen<sp/>based<sp/>on<sp/>4<sp/>different<sp/>hash<sp/>functions<sp/>of<sp/>different<sp/>lengths.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>strategy<sp/>is<sp/>inspired<sp/>by<sp/>LZO;<sp/>hashing<sp/>is<sp/>unrolled<sp/>here<sp/>using<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;hc&apos;<sp/>macro</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>stb__hc3(q,0,<sp/>1,<sp/>2);<sp/>h1<sp/>=<sp/>STB__SCRAMBLE(h);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>chash[h1];<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t)<sp/>STB__TRY(t,0);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>stb__hc2(q,h,<sp/>3,<sp/>4);<sp/>h2<sp/>=<sp/>STB__SCRAMBLE(h);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>stb__hc2(q,h,<sp/>5,<sp/>6);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>chash[h2];<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t)<sp/>STB__TRY(t,1);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>stb__hc2(q,h,<sp/>7,<sp/>8);<sp/>h3<sp/>=<sp/>STB__SCRAMBLE(h);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>stb__hc2(q,h,<sp/>9,10);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>chash[h3];<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t)<sp/>STB__TRY(t,1);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>stb__hc2(q,h,11,12);<sp/>h4<sp/>=<sp/>STB__SCRAMBLE(h);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>chash[h4];<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t)<sp/>STB__TRY(t,1);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>we<sp/>use<sp/>a<sp/>shared<sp/>hash<sp/>table,<sp/>can<sp/>only<sp/>update<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>_after_<sp/>we&apos;ve<sp/>probed<sp/>all<sp/>of<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chash[h1]<sp/>=<sp/>chash[h2]<sp/>=<sp/>chash[h3]<sp/>=<sp/>chash[h4]<sp/>=<sp/>q;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(best<sp/>&gt;<sp/>2)</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(dist<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>if<sp/>our<sp/>best<sp/>match<sp/>qualifies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(best<sp/>&lt;<sp/>3)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>fast<sp/>path<sp/>literals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++q;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(best<sp/>&gt;<sp/>2<sp/><sp/>&amp;&amp;<sp/><sp/>best<sp/>&lt;=<sp/>0x80<sp/><sp/><sp/><sp/>&amp;&amp;<sp/><sp/>dist<sp/>&lt;=<sp/>0x100)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outliterals(lit_start,<sp/>q-lit_start);<sp/>lit_start<sp/>=<sp/>(q<sp/>+=<sp/>best);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_out(0x80<sp/>+<sp/>best-1);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_out(dist-1);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(best<sp/>&gt;<sp/>5<sp/><sp/>&amp;&amp;<sp/><sp/>best<sp/>&lt;=<sp/>0x100<sp/><sp/><sp/>&amp;&amp;<sp/><sp/>dist<sp/>&lt;=<sp/>0x4000)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outliterals(lit_start,<sp/>q-lit_start);<sp/>lit_start<sp/>=<sp/>(q<sp/>+=<sp/>best);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_out2(0x4000<sp/>+<sp/>dist-1);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_out(best-1);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(best<sp/>&gt;<sp/>7<sp/><sp/>&amp;&amp;<sp/><sp/>best<sp/>&lt;=<sp/>0x100<sp/><sp/><sp/>&amp;&amp;<sp/><sp/>dist<sp/>&lt;=<sp/>0x80000)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outliterals(lit_start,<sp/>q-lit_start);<sp/>lit_start<sp/>=<sp/>(q<sp/>+=<sp/>best);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_out3(0x180000<sp/>+<sp/>dist-1);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_out(best-1);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(best<sp/>&gt;<sp/>8<sp/><sp/>&amp;&amp;<sp/><sp/>best<sp/>&lt;=<sp/>0x10000<sp/>&amp;&amp;<sp/><sp/>dist<sp/>&lt;=<sp/>0x80000)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outliterals(lit_start,<sp/>q-lit_start);<sp/>lit_start<sp/>=<sp/>(q<sp/>+=<sp/>best);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_out3(0x100000<sp/>+<sp/>dist-1);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_out2(best-1);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(best<sp/>&gt;<sp/>9<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/><sp/>dist<sp/>&lt;=<sp/>0x1000000)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(best<sp/>&gt;<sp/>65536)<sp/>best<sp/>=<sp/>65536;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outliterals(lit_start,<sp/>q-lit_start);<sp/>lit_start<sp/>=<sp/>(q<sp/>+=<sp/>best);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(best<sp/>&lt;=<sp/>0x100)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_out(0x06);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_out3(dist-1);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_out(best-1);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_out(0x04);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_out3(dist-1);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stb_out2(best-1);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>fallback<sp/>literals<sp/>if<sp/>no<sp/>match<sp/>was<sp/>a<sp/>balanced<sp/>tradeoff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++q;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>didn&apos;t<sp/>get<sp/>all<sp/>the<sp/>way,<sp/>add<sp/>the<sp/>rest<sp/>to<sp/>literals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q-start<sp/>&lt;<sp/>length)</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>start+length;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>literals<sp/>are<sp/>everything<sp/>from<sp/>lit_start<sp/>to<sp/>q</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>*pending_literals<sp/>=<sp/>(q<sp/>-<sp/>lit_start);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>stb__running_adler<sp/>=<sp/>stb_adler32(stb__running_adler,<sp/>start,<sp/>q<sp/>-<sp/>start);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>q<sp/>-<sp/>start;</highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_compress_inner(stb_uchar<sp/>*input,<sp/>stb_uint<sp/>length)</highlight></codeline>
<codeline lineno="343"><highlight class="normal">{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>literals<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>stb_uint<sp/>len,i;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>stb_uchar<sp/>**chash;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>chash<sp/>=<sp/>(stb_uchar**)<sp/>malloc(stb__hashsize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(stb_uchar*));</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(chash<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">//<sp/>failure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>stb__hashsize;<sp/>++i)</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chash[i]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stream<sp/>signature</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>stb_out(0x57);<sp/>stb_out(0xbc);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>stb_out2(0);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>stb_out4(0);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>64-bit<sp/>length<sp/>requires<sp/>32-bit<sp/>leading<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>stb_out4(length);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>stb_out4(stb__window);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>stb__running_adler<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>=<sp/>stb_compress_chunk(input,<sp/>input,<sp/>input+length,<sp/>length,<sp/>&amp;literals,<sp/>chash,<sp/>stb__hashsize-1);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(len<sp/>==<sp/>length);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>outliterals(input+length<sp/>-<sp/>literals,<sp/>literals);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>free(chash);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>stb_out2(0x05fa);<sp/></highlight><highlight class="comment">//<sp/>end<sp/>opcode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>stb_out4(stb__running_adler);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/></highlight><highlight class="comment">//<sp/>success</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal">stb_uint<sp/>stb_compress(stb_uchar<sp/>*out,<sp/>stb_uchar<sp/>*input,<sp/>stb_uint<sp/>length)</highlight></codeline>
<codeline lineno="378"><highlight class="normal">{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>stb__out<sp/>=<sp/>out;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>stb__outfile<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>stb_compress_inner(input,<sp/>length);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb__out<sp/>-<sp/>out;</highlight></codeline>
<codeline lineno="385"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/misc/fonts/binary_to_compressed_c.cpp"/>
  </compounddef>
</doxygen>
