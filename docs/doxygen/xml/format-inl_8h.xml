<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="format-inl_8h" kind="file" language="C++">
    <compoundname>format-inl.h</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">cctype</includes>
    <includes local="no">cerrno</includes>
    <includes local="no">climits</includes>
    <includes local="no">cmath</includes>
    <includes local="no">cstdarg</includes>
    <includes local="no">cstring</includes>
    <includes local="no">cwchar</includes>
    <includes local="no">exception</includes>
    <includes local="no">locale</includes>
    <includes refid="format_8h" local="yes">format.h</includes>
    <includedby refid="fmt_8cpp" local="no">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/src/fmt.cpp</includedby>
    <incdepgraph>
      <node id="19">
        <label>core.h</label>
        <link refid="core_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/format-inl.h</label>
        <link refid="format-inl_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>format.h</label>
        <link refid="format_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>algorithm</label>
      </node>
      <node id="3">
        <label>cctype</label>
      </node>
      <node id="4">
        <label>cerrno</label>
      </node>
      <node id="5">
        <label>climits</label>
      </node>
      <node id="6">
        <label>cmath</label>
      </node>
      <node id="7">
        <label>cstdarg</label>
      </node>
      <node id="20">
        <label>cstddef</label>
      </node>
      <node id="13">
        <label>cstdint</label>
      </node>
      <node id="21">
        <label>cstdio</label>
      </node>
      <node id="8">
        <label>cstring</label>
      </node>
      <node id="9">
        <label>cwchar</label>
      </node>
      <node id="10">
        <label>exception</label>
      </node>
      <node id="22">
        <label>iterator</label>
      </node>
      <node id="14">
        <label>limits</label>
      </node>
      <node id="11">
        <label>locale</label>
      </node>
      <node id="15">
        <label>memory</label>
      </node>
      <node id="16">
        <label>stdexcept</label>
      </node>
      <node id="23">
        <label>string</label>
      </node>
      <node id="17">
        <label>system_error</label>
      </node>
      <node id="24">
        <label>type_traits</label>
      </node>
      <node id="18">
        <label>utility</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/format-inl.h</label>
        <link refid="format-inl_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/src/fmt.cpp</label>
        <link refid="fmt_8cpp_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structdetail_1_1basic__impl__data" prot="public">detail::basic_impl_data</innerclass>
    <innerclass refid="structdetail_1_1impl__data" prot="public">detail::impl_data</innerclass>
    <innerclass refid="structdetail_1_1bits" prot="public">detail::bits</innerclass>
    <innerclass refid="structdetail_1_1fp" prot="public">detail::fp</innerclass>
    <innerclass refid="structdetail_1_1accumulator" prot="public">detail::accumulator</innerclass>
    <innerclass refid="classdetail_1_1bigint" prot="public">detail::bigint</innerclass>
    <innerclass refid="structdetail_1_1gen__digits__handler" prot="public">detail::gen_digits_handler</innerclass>
    <innerclass refid="structdetail_1_1uint128__wrapper" prot="public">detail::uint128_wrapper</innerclass>
    <innerclass refid="structdetail_1_1dragonbox_1_1divtest__table__entry" prot="public">detail::dragonbox::divtest_table_entry</innerclass>
    <innerclass refid="structdetail_1_1dragonbox_1_1cache__accessor_3_01float_01_4" prot="public">detail::dragonbox::cache_accessor&lt; float &gt;</innerclass>
    <innerclass refid="structdetail_1_1dragonbox_1_1cache__accessor_3_01double_01_4" prot="public">detail::dragonbox::cache_accessor&lt; double &gt;</innerclass>
    <innerclass refid="structformatter_3_01detail_1_1bigint_01_4" prot="public">formatter&lt; detail::bigint &gt;</innerclass>
    <innernamespace refid="namespacedetail">detail</innernamespace>
    <innernamespace refid="namespacedetail_1_1digits">detail::digits</innernamespace>
    <innernamespace refid="namespacedetail_1_1dragonbox">detail::dragonbox</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="format-inl_8h_1a9a9bb3caa94066b3adc175bb24cb1783" prot="public" static="no">
        <name>FMT_SNPRINTF</name>
        <initializer>snprintf</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/format-inl.h" line="48" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/format-inl.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="format-inl_8h_1a1c485113edf9429ab85e8589ba53af1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FMT_FUNC std::system_error</type>
        <definition>FMT_FUNC std::system_error vsystem_error</definition>
        <argsstring>(int error_code, string_view format_str, format_args args)</argsstring>
        <name>vsystem_error</name>
        <param>
          <type>int</type>
          <declname>error_code</declname>
        </param>
        <param>
          <type><ref refid="classbasic__string__view" kindref="compound">string_view</ref></type>
          <declname>format_str</declname>
        </param>
        <param>
          <type><ref refid="classbasic__format__args" kindref="compound">format_args</ref></type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/format-inl.h" line="136" column="28" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/format-inl.h" bodystart="136" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="format-inl_8h_1a84ddacfb64a5b0b0c8a274d8d883054b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FMT_FUNC void</type>
        <definition>FMT_FUNC void format_system_error</definition>
        <argsstring>(detail::buffer&lt; char &gt; &amp;out, int error_code, const char *message) FMT_NOEXCEPT</argsstring>
        <name>format_system_error</name>
        <param>
          <type>detail::buffer&lt; char &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>error_code</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Formats an error message for an error returned by an operating system or a language runtime, for example a file opening error, and writes it to <emphasis>out</emphasis>. The format is the same as the one used by <computeroutput>std::system_error(ec, message)</computeroutput> where <computeroutput>ec</computeroutput> is <computeroutput>std::error_code(error_code, std::generic_category()})</computeroutput>. It is implementation-defined but normally looks like:</para>
<para>.. parsed-literal:: &lt;message&gt;*: *&lt;system-message&gt;*</para>
<para>where *&lt;message&gt;* is the passed message and *&lt;system-message&gt;* is the system message corresponding to the error code. error_code* is a system error code as given by <computeroutput>errno</computeroutput>. \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/format-inl.h" line="2562" column="15" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/format-inl.h" bodystart="2562" bodyend="2571"/>
      </memberdef>
      <memberdef kind="function" id="format-inl_8h_1acc24cc2cbeebc9810faadf0ae76f7b04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FMT_FUNC void</type>
        <definition>FMT_FUNC void report_system_error</definition>
        <argsstring>(int error_code, const char *message) FMT_NOEXCEPT</argsstring>
        <name>report_system_error</name>
        <param>
          <type>int</type>
          <declname>error_code</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/format-inl.h" line="2573" column="15" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/format-inl.h" bodystart="2573" bodyend="2576"/>
      </memberdef>
      <memberdef kind="function" id="format-inl_8h_1acf8fb67486c1bfcf6a1b50b9dae1ea16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FMT_FUNC std::string</type>
        <definition>FMT_FUNC std::string vformat</definition>
        <argsstring>(string_view fmt, format_args args)</argsstring>
        <name>vformat</name>
        <param>
          <type><ref refid="classbasic__string__view" kindref="compound">string_view</ref></type>
          <declname>fmt</declname>
        </param>
        <param>
          <type><ref refid="classbasic__format__args" kindref="compound">format_args</ref></type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/format-inl.h" line="2584" column="22" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/format-inl.h" bodystart="2584" bodyend="2590"/>
      </memberdef>
      <memberdef kind="function" id="format-inl_8h_1a9d834f6ef5c0553b6c434f8d9ac105bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FMT_FUNC void</type>
        <definition>FMT_FUNC void vprint</definition>
        <argsstring>(std::FILE *f, string_view format_str, format_args args)</argsstring>
        <name>vprint</name>
        <param>
          <type>std::FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classbasic__string__view" kindref="compound">string_view</ref></type>
          <declname>format_str</declname>
        </param>
        <param>
          <type><ref refid="classbasic__format__args" kindref="compound">format_args</ref></type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/format-inl.h" line="2620" column="15" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/format-inl.h" bodystart="2620" bodyend="2624"/>
      </memberdef>
      <memberdef kind="function" id="format-inl_8h_1a77fcf4959d4c69c3800b759696f37248" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FMT_FUNC void</type>
        <definition>FMT_FUNC void vprint</definition>
        <argsstring>(string_view format_str, format_args args)</argsstring>
        <name>vprint</name>
        <param>
          <type><ref refid="classbasic__string__view" kindref="compound">string_view</ref></type>
          <declname>format_str</declname>
        </param>
        <param>
          <type><ref refid="classbasic__format__args" kindref="compound">format_args</ref></type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/format-inl.h" line="2637" column="15" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/format-inl.h" bodystart="2637" bodyend="2639"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Formatting<sp/>library<sp/>for<sp/>C++<sp/>-<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2012<sp/>-<sp/>2016,<sp/>Victor<sp/>Zverovich</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>the<sp/>license<sp/>information<sp/>refer<sp/>to<sp/>format.h.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_FORMAT_INL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_FORMAT_INL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cctype&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cerrno&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>errno</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;climits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdarg&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::memmove</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cwchar&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;exception&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_STATIC_THOUSANDS_SEPARATOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;locale&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;io.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>_isatty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;format.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal">FMT_BEGIN_NAMESPACE</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">FMT_FUNC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assert_fail(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>unchecked<sp/>std::fprintf<sp/>to<sp/>avoid<sp/>triggering<sp/>another<sp/>assertion<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>writing<sp/>to<sp/>stderr<sp/>fails</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>std::fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;%s:%d:<sp/>assertion<sp/>failed:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>file,<sp/>line,<sp/>message);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Chosen<sp/>instead<sp/>of<sp/>std::abort<sp/>to<sp/>satisfy<sp/>Clang<sp/>in<sp/>CUDA<sp/>mode<sp/>during<sp/>device</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>code<sp/>pass.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>std::terminate();</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">FMT_FUNC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>throw_format_error(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>FMT_THROW(<ref refid="classformat__error" kindref="compound">format_error</ref>(message));</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_SNPRINTF<sp/>snprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="comment">//<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fmt_snprintf(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>format,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>va_list<sp/>args;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>va_start(args,<sp/>format);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>vsnprintf_s(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>size,<sp/>_TRUNCATE,<sp/>format,<sp/>args);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>va_end(args);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_SNPRINTF<sp/>fmt_snprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal">FMT_FUNC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>format_error_code(detail::buffer&lt;char&gt;&amp;<sp/>out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_code,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>message)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Report<sp/>error<sp/>code<sp/>making<sp/>sure<sp/>that<sp/>the<sp/>output<sp/>fits<sp/>into</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>inline_buffer_size<sp/>to<sp/>avoid<sp/>dynamic<sp/>memory<sp/>allocation<sp/>and<sp/>potential</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>bad_alloc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>out.try_resize(0);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>SEP[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ERROR_STR[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;error<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Subtract<sp/>2<sp/>to<sp/>account<sp/>for<sp/>terminating<sp/>null<sp/>characters<sp/>in<sp/>SEP<sp/>and<sp/>ERROR_STR.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>error_code_size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(SEP)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ERROR_STR)<sp/>-<sp/>2;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>abs_value<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_or_64_or_128_t&lt;int&gt;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(error_code);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(detail::is_negative(error_code))<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>abs_value<sp/>=<sp/>0<sp/>-<sp/>abs_value;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>++error_code_size;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>error_code_size<sp/>+=<sp/>detail::to_unsigned(detail::count_digits(abs_value));</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>buffer_appender&lt;char&gt;(out);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(message.size()<sp/>&lt;=<sp/>inline_buffer_size<sp/>-<sp/>error_code_size)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>format_to(it,<sp/>FMT_STRING(</highlight><highlight class="stringliteral">&quot;{}{}&quot;</highlight><highlight class="normal">),<sp/>message,<sp/>SEP);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>format_to(it,<sp/>FMT_STRING(</highlight><highlight class="stringliteral">&quot;{}{}&quot;</highlight><highlight class="normal">),<sp/>ERROR_STR,<sp/>error_code);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>FMT_ASSERT(out.size()<sp/>&lt;=<sp/>inline_buffer_size,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">FMT_FUNC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>report_error(format_func<sp/>func,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_code,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><ref refid="classbasic__memory__buffer" kindref="compound">memory_buffer</ref><sp/>full_message;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>func(full_message,<sp/>error_code,<sp/>message);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>use<sp/>fwrite_fully<sp/>because<sp/>the<sp/>latter<sp/>may<sp/>throw.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::fwrite(full_message.data(),<sp/>full_message.size(),<sp/>1,<sp/>stderr)<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>std::fputc(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">,<sp/>stderr);</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>wrapper<sp/>around<sp/>fwrite<sp/>that<sp/>throws<sp/>on<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fwrite_fully(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE*<sp/>stream)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>written<sp/>=<sp/>std::fwrite(ptr,<sp/>size,<sp/>count,<sp/>stream);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(written<sp/>&lt;<sp/>count)<sp/>FMT_THROW(system_error(errno,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>write<sp/>to<sp/>file&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_STATIC_THOUSANDS_SEPARATOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Locale&gt;</highlight></codeline>
<codeline lineno="101"><highlight class="normal">locale_ref::locale_ref(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Locale&amp;<sp/>loc)<sp/>:<sp/>locale_(&amp;loc)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_same&lt;Locale,<sp/>std::locale&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Locale&gt;<sp/>Locale<sp/>locale_ref::get()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_same&lt;Locale,<sp/>std::locale&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>locale_<sp/>?<sp/>*</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">std::locale*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(locale_)<sp/>:<sp/>std::locale();</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="111"><highlight class="normal">FMT_FUNC<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>thousands_sep_impl(<ref refid="classlocale__ref" kindref="compound">locale_ref</ref><sp/>loc)<sp/>-&gt;<sp/><ref refid="structthousands__sep__result" kindref="compound">thousands_sep_result&lt;Char&gt;</ref><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>facet<sp/>=<sp/>std::use_facet&lt;std::numpunct&lt;Char&gt;&gt;(loc.get&lt;std::locale&gt;());</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>grouping<sp/>=<sp/>facet.grouping();</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>thousands_sep<sp/>=<sp/>grouping.empty()<sp/>?<sp/>Char()<sp/>:<sp/>facet.thousands_sep();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{std::move(grouping),<sp/>thousands_sep};</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/>FMT_FUNC<sp/>Char<sp/>decimal_point_impl(<ref refid="classlocale__ref" kindref="compound">locale_ref</ref><sp/>loc)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::use_facet&lt;std::numpunct&lt;Char&gt;&gt;(loc.get&lt;std::locale&gt;())</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.decimal_point();</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">FMT_FUNC<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>thousands_sep_impl(<ref refid="classlocale__ref" kindref="compound">locale_ref</ref>)<sp/>-&gt;<sp/><ref refid="structthousands__sep__result" kindref="compound">thousands_sep_result&lt;Char&gt;</ref><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{</highlight><highlight class="stringliteral">&quot;\03&quot;</highlight><highlight class="normal">,<sp/>FMT_STATIC_THOUSANDS_SEPARATOR};</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/>FMT_FUNC<sp/>Char<sp/>decimal_point_impl(<ref refid="classlocale__ref" kindref="compound">locale_ref</ref>)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!FMT_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal">FMT_API<sp/>FMT_FUNC<sp/>format_error::~format_error()<sp/>FMT_NOEXCEPT<sp/>=<sp/>default;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal">FMT_FUNC<sp/>std::system_error<sp/>vsystem_error(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_code,<sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>format_str,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbasic__format__args" kindref="compound">format_args</ref><sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ec<sp/>=<sp/>std::error_code(error_code,<sp/>std::generic_category());</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::system_error(ec,<sp/>vformat(format_str,<sp/>args));</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/>FMT_FUNC<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count_digits&lt;4&gt;(<ref refid="structdetail_1_1fallback__uintptr" kindref="compound">detail::fallback_uintptr</ref><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>fallback_uintptr<sp/>is<sp/>always<sp/>stored<sp/>in<sp/>little<sp/>endian.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*))<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>n.value[i]<sp/>==<sp/>0)<sp/>--i;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>char_digits<sp/>=<sp/>std::numeric_limits&lt;unsigned<sp/>char&gt;::digits<sp/>/<sp/>4;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i<sp/>&gt;=<sp/>0<sp/>?<sp/>i<sp/>*<sp/>char_digits<sp/>+<sp/>count_digits&lt;4,<sp/>unsigned&gt;(n.value[i])<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>log10(2)<sp/>=<sp/>0x0.4d104d427de7fbcc...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint64_t<sp/>log10_2_significand<sp/>=<sp/>0x4d104d427de7fbcc;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="structdetail_1_1basic__impl__data" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1basic__impl__data" kindref="compound">basic_impl_data</ref><sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Normalized<sp/>64-bit<sp/>significands<sp/>of<sp/>pow(10,<sp/>k),<sp/>for<sp/>k<sp/>=<sp/>-348,<sp/>-340,<sp/>...,<sp/>340.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>are<sp/>generated<sp/>by<sp/>support/compute-powers.py.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint64_t<sp/>pow10_significands[87]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xfa8fd5a0081c0288,<sp/>0xbaaee17fa23ebf76,<sp/>0x8b16fb203055ac76,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xcf42894a5dce35ea,<sp/>0x9a6bb0aa55653b2d,<sp/>0xe61acf033d1a45df,</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xab70fe17c79ac6ca,<sp/>0xff77b1fcbebcdc4f,<sp/>0xbe5691ef416bd60c,</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x8dd01fad907ffc3c,<sp/>0xd3515c2831559a83,<sp/>0x9d71ac8fada6c9b5,</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xea9c227723ee8bcb,<sp/>0xaecc49914078536d,<sp/>0x823c12795db6ce57,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xc21094364dfb5637,<sp/>0x9096ea6f3848984f,<sp/>0xd77485cb25823ac7,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xa086cfcd97bf97f4,<sp/>0xef340a98172aace5,<sp/>0xb23867fb2a35b28e,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x84c8d4dfd2c63f3b,<sp/>0xc5dd44271ad3cdba,<sp/>0x936b9fcebb25c996,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xdbac6c247d62a584,<sp/>0xa3ab66580d5fdaf6,<sp/>0xf3e2f893dec3f126,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xb5b5ada8aaff80b8,<sp/>0x87625f056c7c4a8b,<sp/>0xc9bcff6034c13053,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x964e858c91ba2655,<sp/>0xdff9772470297ebd,<sp/>0xa6dfbd9fb8e5b88f,</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xf8a95fcf88747d94,<sp/>0xb94470938fa89bcf,<sp/>0x8a08f0f8bf0f156b,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xcdb02555653131b6,<sp/>0x993fe2c6d07b7fac,<sp/>0xe45c10c42a2b3b06,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xaa242499697392d3,<sp/>0xfd87b5f28300ca0e,<sp/>0xbce5086492111aeb,</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x8cbccc096f5088cc,<sp/>0xd1b71758e219652c,<sp/>0x9c40000000000000,</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xe8d4a51000000000,<sp/>0xad78ebc5ac620000,<sp/>0x813f3978f8940984,</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xc097ce7bc90715b3,<sp/>0x8f7e32ce7bea5c70,<sp/>0xd5d238a4abe98068,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x9f4f2726179a2245,<sp/>0xed63a231d4c4fb27,<sp/>0xb0de65388cc8ada8,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x83c7088e1aab65db,<sp/>0xc45d1df942711d9a,<sp/>0x924d692ca61be758,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xda01ee641a708dea,<sp/>0xa26da3999aef774a,<sp/>0xf209787bb47d6b85,</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xb454e4a179dd1877,<sp/>0x865b86925b9bc5c2,<sp/>0xc83553c5c8965d3d,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x952ab45cfa97a0b3,<sp/>0xde469fbd99a05fe3,<sp/>0xa59bc234db398c25,</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xf6c69a72a3989f5c,<sp/>0xb7dcbf5354e9bece,<sp/>0x88fcf317f22241e2,</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xcc20ce9bd35c78a5,<sp/>0x98165af37b2153df,<sp/>0xe2a0b5dc971f303a,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xa8d9d1535ce3b396,<sp/>0xfb9b7cd9a4a7443c,<sp/>0xbb764c4ca7a44410,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x8bab8eefb6409c1a,<sp/>0xd01fef10a657842c,<sp/>0x9b10a4e5e9913129,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xe7109bfba19c0c9d,<sp/>0xac2820d9623bf429,<sp/>0x80444b5e7aa7cf85,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0xbf21e44003acdd2d,<sp/>0x8e679c2f5e44ff8f,<sp/>0xd433179d9c8cb841,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x9e19db92b4e31ba9,<sp/>0xeb96bf6ebadf77d9,<sp/>0xaf87023b9bf0ee6b,</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_GCC_VERSION<sp/>&amp;&amp;<sp/>FMT_GCC_VERSION<sp/>&lt;<sp/>409</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wnarrowing&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Binary<sp/>exponents<sp/>of<sp/>pow(10,<sp/>k),<sp/>for<sp/>k<sp/>=<sp/>-348,<sp/>-340,<sp/>...,<sp/>340,<sp/>corresponding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>significands<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>int16_t<sp/>pow10_exponents[87]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-1220,<sp/>-1193,<sp/>-1166,<sp/>-1140,<sp/>-1113,<sp/>-1087,<sp/>-1060,<sp/>-1034,<sp/>-1007,<sp/>-980,<sp/>-954,</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-927,<sp/><sp/>-901,<sp/><sp/>-874,<sp/><sp/>-847,<sp/><sp/>-821,<sp/><sp/>-794,<sp/><sp/>-768,<sp/><sp/>-741,<sp/><sp/>-715,<sp/><sp/>-688,<sp/>-661,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-635,<sp/><sp/>-608,<sp/><sp/>-582,<sp/><sp/>-555,<sp/><sp/>-529,<sp/><sp/>-502,<sp/><sp/>-475,<sp/><sp/>-449,<sp/><sp/>-422,<sp/><sp/>-396,<sp/>-369,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-343,<sp/><sp/>-316,<sp/><sp/>-289,<sp/><sp/>-263,<sp/><sp/>-236,<sp/><sp/>-210,<sp/><sp/>-183,<sp/><sp/>-157,<sp/><sp/>-130,<sp/><sp/>-103,<sp/>-77,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-50,<sp/><sp/><sp/>-24,<sp/><sp/><sp/>3,<sp/><sp/><sp/><sp/><sp/>30,<sp/><sp/><sp/><sp/>56,<sp/><sp/><sp/><sp/>83,<sp/><sp/><sp/><sp/>109,<sp/><sp/><sp/>136,<sp/><sp/><sp/>162,<sp/><sp/><sp/>189,<sp/><sp/>216,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>242,<sp/><sp/><sp/>269,<sp/><sp/><sp/>295,<sp/><sp/><sp/>322,<sp/><sp/><sp/>348,<sp/><sp/><sp/>375,<sp/><sp/><sp/>402,<sp/><sp/><sp/>428,<sp/><sp/><sp/>455,<sp/><sp/><sp/>481,<sp/><sp/>508,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>534,<sp/><sp/><sp/>561,<sp/><sp/><sp/>588,<sp/><sp/><sp/>614,<sp/><sp/><sp/>641,<sp/><sp/><sp/>667,<sp/><sp/><sp/>694,<sp/><sp/><sp/>720,<sp/><sp/><sp/>747,<sp/><sp/><sp/>774,<sp/><sp/>800,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>827,<sp/><sp/><sp/>853,<sp/><sp/><sp/>880,<sp/><sp/><sp/>907,<sp/><sp/><sp/>933,<sp/><sp/><sp/>960,<sp/><sp/><sp/>986,<sp/><sp/><sp/>1013,<sp/><sp/>1039,<sp/><sp/>1066};</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_GCC_VERSION<sp/>&amp;&amp;<sp/>FMT_GCC_VERSION<sp/>&lt;<sp/>409</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint64_t<sp/>power_of_10_64[20]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>1,<sp/>FMT_POWERS_OF_10(1ULL),<sp/>FMT_POWERS_OF_10(1000000000ULL),</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>10000000000000000000ULL};</highlight></codeline>
<codeline lineno="212"><highlight class="normal">};</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>struct<sp/>rather<sp/>than<sp/>an<sp/>alias<sp/>to<sp/>avoid<sp/>shadowing<sp/>warnings<sp/>in<sp/>gcc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215" refid="structdetail_1_1impl__data" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1impl__data" kindref="compound">impl_data</ref><sp/>:<sp/><ref refid="structdetail_1_1basic__impl__data" kindref="compound">basic_impl_data</ref>&lt;&gt;<sp/>{};</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&lt;<sp/>201703L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="structdetail_1_1basic__impl__data" kindref="compound">basic_impl_data&lt;T&gt;::pow10_significands</ref>[];</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>int16_t<sp/><ref refid="structdetail_1_1basic__impl__data" kindref="compound">basic_impl_data&lt;T&gt;::pow10_exponents</ref>[];</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="structdetail_1_1basic__impl__data" kindref="compound">basic_impl_data&lt;T&gt;::power_of_10_64</ref>[];</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224" refid="structdetail_1_1bits" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1bits" kindref="compound">bits</ref><sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FMT_CONSTEXPR_DECL<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>=</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>*<sp/>std::numeric_limits&lt;unsigned<sp/>char&gt;::digits);</highlight></codeline>
<codeline lineno="227"><highlight class="normal">};</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>significand<sp/>bits<sp/>in<sp/>Float<sp/>excluding<sp/>the<sp/>implicit<sp/>bit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Float&gt;<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_significand_bits()<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Subtract<sp/>1<sp/>to<sp/>account<sp/>for<sp/>an<sp/>implicit<sp/>most<sp/>significant<sp/>bit<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>normalized<sp/>form.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::numeric_limits&lt;Float&gt;::digits<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>floating-point<sp/>number<sp/>f<sp/>*<sp/>pow(2,<sp/>e).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237" refid="structdetail_1_1fp" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1fp" kindref="compound">fp</ref><sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>uint64_t<sp/>f;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_significand_bits<sp/>=<sp/><ref refid="structdetail_1_1bits" kindref="compound">bits</ref>&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(f)&gt;::<ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1fp" kindref="compound">fp</ref>()<sp/>:<sp/>f(0),<sp/>e(0)<sp/>{}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1fp" kindref="compound">fp</ref>(uint64_t<sp/>f_val,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e_val)<sp/>:<sp/>f(f_val),<sp/>e(e_val)<sp/>{}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>fp<sp/>from<sp/>an<sp/>IEEE754<sp/>floating-point<sp/>number.<sp/>It<sp/>is<sp/>a<sp/>template<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>prevent<sp/>compile<sp/>errors<sp/>on<sp/>systems<sp/>where<sp/>n<sp/>is<sp/>not<sp/>IEEE754.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Float&gt;<sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>FMT_CONSTEXPR<sp/><ref refid="structdetail_1_1fp" kindref="compound">fp</ref>(Float<sp/>n)<sp/>{<sp/>assign(n);<sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Float&gt;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>is_supported<sp/>=<sp/>bool_constant&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Float)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint64_t)<sp/>||</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Float)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t)&gt;;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Assigns<sp/>d<sp/>to<sp/>this<sp/>and<sp/>return<sp/>true<sp/>iff<sp/>predecessor<sp/>is<sp/>closer<sp/>than<sp/>successor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Float,<sp/>FMT_ENABLE_IF(is_supported&lt;Float&gt;::value)&gt;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>assign(Float<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assume<sp/>float<sp/>is<sp/>in<sp/>the<sp/>format<sp/>[sign][exponent][significand].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_float_significand_bits<sp/>=</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::num_significand_bits&lt;Float&gt;();</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>implicit_bit<sp/>=<sp/>1ULL<sp/>&lt;&lt;<sp/>num_float_significand_bits;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>significand_mask<sp/>=<sp/>implicit_bit<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_double<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Float)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint64_t);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>u<sp/>=<sp/>bit_cast&lt;conditional_t&lt;is_double,<sp/>uint64_t,<sp/>uint32_t&gt;&gt;(n);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>u<sp/>&amp;<sp/>significand_mask;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>exponent_mask<sp/>=<sp/>(~0ULL<sp/>&gt;&gt;<sp/>1)<sp/>&amp;<sp/>~significand_mask;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>biased_e<sp/>=</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((u<sp/>&amp;<sp/>exponent_mask)<sp/>&gt;&gt;<sp/>num_float_significand_bits);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>predecessor<sp/>is<sp/>closer<sp/>if<sp/>n<sp/>is<sp/>a<sp/>normalized<sp/>power<sp/>of<sp/>2<sp/>(f<sp/>==<sp/>0)<sp/>other</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>than<sp/>the<sp/>smallest<sp/>normalized<sp/>number<sp/>(biased_e<sp/>&gt;<sp/>1).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_predecessor_closer<sp/>=<sp/>f<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>biased_e<sp/>&gt;<sp/>1;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(biased_e<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>+=<sp/>implicit_bit;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>biased_e<sp/>=<sp/>1;<sp/><sp/></highlight><highlight class="comment">//<sp/>Subnormals<sp/>use<sp/>biased<sp/>exponent<sp/>1<sp/>(min<sp/>exponent).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exponent_bias<sp/>=<sp/>std::numeric_limits&lt;Float&gt;::max_exponent<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>e<sp/>=<sp/>biased_e<sp/>-<sp/>exponent_bias<sp/>-<sp/>num_float_significand_bits;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is_predecessor_closer;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Float,<sp/>FMT_ENABLE_IF(!is_supported&lt;Float&gt;::value)&gt;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>assign(Float)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_ASSERT(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal">};</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Normalizes<sp/>the<sp/>value<sp/>converted<sp/>from<sp/>double<sp/>and<sp/>multiplied<sp/>by<sp/>(1<sp/>&lt;&lt;<sp/>SHIFT).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SHIFT<sp/>=<sp/>0&gt;<sp/>FMT_CONSTEXPR<sp/><ref refid="structdetail_1_1fp" kindref="compound">fp</ref><sp/>normalize(<ref refid="structdetail_1_1fp" kindref="compound">fp</ref><sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>subnormals.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>implicit_bit<sp/>=<sp/>1ULL<sp/>&lt;&lt;<sp/>num_significand_bits&lt;double&gt;();</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shifted_implicit_bit<sp/>=<sp/>implicit_bit<sp/>&lt;&lt;<sp/>SHIFT;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((<ref refid="classvalue" kindref="compound">value</ref>.f<sp/>&amp;<sp/>shifted_implicit_bit)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvalue" kindref="compound">value</ref>.f<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>--<ref refid="classvalue" kindref="compound">value</ref>.e;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Subtract<sp/>1<sp/>to<sp/>account<sp/>for<sp/>hidden<sp/>bit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>offset<sp/>=</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fp::num_significand_bits<sp/>-<sp/>num_significand_bits&lt;double&gt;()<sp/>-<sp/>SHIFT<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><ref refid="classvalue" kindref="compound">value</ref>.f<sp/>&lt;&lt;=<sp/>offset;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><ref refid="classvalue" kindref="compound">value</ref>.e<sp/>-=<sp/>offset;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(fp<sp/>x,<sp/>fp<sp/>y)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x.f<sp/>==<sp/>y.f<sp/>&amp;&amp;<sp/>x.e<sp/>==<sp/>y.e;<sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Computes<sp/>lhs<sp/>*<sp/>rhs<sp/>/<sp/>pow(2,<sp/>64)<sp/>rounded<sp/>to<sp/>nearest<sp/>with<sp/>half-up<sp/>tie<sp/>breaking.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/>multiply(uint64_t<sp/>lhs,<sp/>uint64_t<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_USE_INT128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>product<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">__uint128_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lhs)<sp/>*<sp/>rhs;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>f<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(product<sp/>&gt;&gt;<sp/>64);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(product)<sp/>&amp;<sp/>(1ULL<sp/>&lt;&lt;<sp/>63))<sp/>!=<sp/>0<sp/>?<sp/>f<sp/>+<sp/>1<sp/>:<sp/>f;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Multiply<sp/>32-bit<sp/>parts<sp/>of<sp/>significands.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>uint64_t<sp/><ref refid="structmask" kindref="compound">mask</ref><sp/>=<sp/>(1ULL<sp/>&lt;&lt;<sp/>32)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>uint64_t<sp/>a<sp/>=<sp/>lhs<sp/>&gt;&gt;<sp/>32,<sp/>b<sp/>=<sp/>lhs<sp/>&amp;<sp/><ref refid="structmask" kindref="compound">mask</ref>;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>uint64_t<sp/>c<sp/>=<sp/>rhs<sp/>&gt;&gt;<sp/>32,<sp/>d<sp/>=<sp/>rhs<sp/>&amp;<sp/><ref refid="structmask" kindref="compound">mask</ref>;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>uint64_t<sp/>ac<sp/>=<sp/>a<sp/>*<sp/>c,<sp/>bc<sp/>=<sp/>b<sp/>*<sp/>c,<sp/>ad<sp/>=<sp/>a<sp/>*<sp/>d,<sp/>bd<sp/>=<sp/>b<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>mid<sp/>64-bit<sp/>of<sp/>result<sp/>and<sp/>round.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>uint64_t<sp/>mid<sp/>=<sp/>(bd<sp/>&gt;&gt;<sp/>32)<sp/>+<sp/>(ad<sp/>&amp;<sp/><ref refid="structmask" kindref="compound">mask</ref>)<sp/>+<sp/>(bc<sp/>&amp;<sp/><ref refid="structmask" kindref="compound">mask</ref>)<sp/>+<sp/>(1U<sp/>&lt;&lt;<sp/>31);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ac<sp/>+<sp/>(ad<sp/>&gt;&gt;<sp/>32)<sp/>+<sp/>(bc<sp/>&gt;&gt;<sp/>32)<sp/>+<sp/>(mid<sp/>&gt;&gt;<sp/>32);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>fp<sp/>operator*(fp<sp/>x,<sp/>fp<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{multiply(x.f,<sp/>y.f),<sp/>x.e<sp/>+<sp/>y.e<sp/>+<sp/>64};</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>cached<sp/>power<sp/>of<sp/>10<sp/>`c_k<sp/>=<sp/>c_k.f<sp/>*<sp/>pow(2,<sp/>c_k.e)`<sp/>such<sp/>that<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(binary)<sp/>exponent<sp/>satisfies<sp/>`min_exponent<sp/>&lt;=<sp/>c_k.e<sp/>&lt;=<sp/>min_exponent<sp/>+<sp/>28`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>fp<sp/>get_cached_power(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_exponent,</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>pow10_exponent)<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>significand<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(log10_2_significand);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>((min_exponent<sp/>+<sp/>fp::num_significand_bits<sp/>-<sp/>1)<sp/>*<sp/>(significand<sp/>&gt;&gt;<sp/>shift)<sp/>+</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="group__gtc__type__precision_1ga6abb23fbf4e39c50ec5341160b5da5ab" kindref="member">int64_t</ref>(1)<sp/>&lt;&lt;<sp/>shift)<sp/>-<sp/>1))<sp/><sp/></highlight><highlight class="comment">//<sp/>ceil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>arithmetic<sp/>shift</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Decimal<sp/>exponent<sp/>of<sp/>the<sp/>first<sp/>(smallest)<sp/>cached<sp/>power<sp/>of<sp/>10.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>first_dec_exp<sp/>=<sp/>-348;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Difference<sp/>between<sp/>2<sp/>consecutive<sp/>decimal<sp/>exponents<sp/>in<sp/>cached<sp/>powers<sp/>of<sp/>10.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dec_exp_step<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>index<sp/>=<sp/>(index<sp/>-<sp/>first_dec_exp<sp/>-<sp/>1)<sp/>/<sp/>dec_exp_step<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>pow10_exponent<sp/>=<sp/>first_dec_exp<sp/>+<sp/>index<sp/>*<sp/>dec_exp_step;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{impl_data::pow10_significands[index],</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>impl_data::pow10_exponents[index]};</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>simple<sp/>accumulator<sp/>to<sp/>hold<sp/>the<sp/>sums<sp/>of<sp/>terms<sp/>in<sp/>bigint::square<sp/>if<sp/>uint128_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>not<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351" refid="structdetail_1_1accumulator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1accumulator" kindref="compound">accumulator</ref><sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>uint64_t<sp/>lower;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>uint64_t<sp/>upper;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1accumulator" kindref="compound">accumulator</ref>()<sp/>:<sp/>lower(0),<sp/>upper(0)<sp/>{}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="group__gtc__type__precision_1ga822ca53a9ad412504532838906276a99" kindref="member">uint32_t</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lower);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator+=(uint64_t<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>lower<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lower<sp/>&lt;<sp/>n)<sp/>++upper;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator&gt;&gt;=(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_ASSERT(shift<sp/>==<sp/>32,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)shift;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>lower<sp/>=<sp/>(upper<sp/>&lt;&lt;<sp/>32)<sp/>|<sp/>(lower<sp/>&gt;&gt;<sp/>32);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>upper<sp/>&gt;&gt;=<sp/>32;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal">};</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372" refid="classdetail_1_1bigint" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref><sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>bigint<sp/>is<sp/>stored<sp/>as<sp/>an<sp/>array<sp/>of<sp/>bigits<sp/>(big<sp/>digits),<sp/>with<sp/>bigit<sp/>at<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>0<sp/>being<sp/>the<sp/>least<sp/>significant<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>bigit<sp/>=<sp/><ref refid="group__gtc__type__precision_1ga822ca53a9ad412504532838906276a99" kindref="member">uint32_t</ref>;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>double_bigit<sp/>=<sp/><ref refid="group__gtc__type__precision_1ga058f57c19e1befdcf12498944bd73e69" kindref="member">uint64_t</ref>;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>bigits_capacity<sp/>=<sp/>32<sp/>};</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><ref refid="classbasic__memory__buffer" kindref="compound">basic_memory_buffer&lt;bigit, bigits_capacity&gt;</ref><sp/>bigits_;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exp_;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR20<sp/>bigit<sp/>operator[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bigits_[to_unsigned(index)];</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR20<sp/>bigit&amp;<sp/>operator[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bigits_[to_unsigned(index)];</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FMT_CONSTEXPR_DECL<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bigit_bits<sp/>=<sp/><ref refid="structdetail_1_1bits" kindref="compound">bits&lt;bigit&gt;::value</ref>;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structformatter" kindref="compound">formatter</ref>&lt;<ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>&gt;;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR20<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>subtract_bigits(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/>bigit<sp/>other,<sp/>bigit&amp;<sp/>borrow)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">double_bigit</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((*this)[index])<sp/>-<sp/>other<sp/>-<sp/>borrow;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>(*this)[index]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">bigit</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structresult" kindref="compound">result</ref>);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>borrow<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">bigit</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structresult" kindref="compound">result</ref><sp/>&gt;&gt;<sp/>(bigit_bits<sp/>*<sp/>2<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR20<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>remove_leading_zeros()<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bigits<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(bigits_.size())<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(num_bigits<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[num_bigits]<sp/>==<sp/>0)<sp/>--num_bigits;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>bigits_.<ref refid="classbasic__memory__buffer_1a153c47788d6d1a76ec97780748755ea1" kindref="member">resize</ref>(to_unsigned(num_bigits<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Computes<sp/>*this<sp/>-=<sp/>other<sp/>assuming<sp/>aligned<sp/>bigints<sp/>and<sp/>*this<sp/>&gt;=<sp/>other.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR20<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>subtract_aligned(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_ASSERT(other.exp_<sp/>&gt;=<sp/>exp_,<sp/></highlight><highlight class="stringliteral">&quot;unaligned<sp/>bigints&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_ASSERT(compare(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>other)<sp/>&gt;=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>bigit<sp/>borrow<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>other.exp_<sp/>-<sp/>exp_;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0,<sp/>n<sp/>=<sp/>other.bigits_.size();<sp/>j<sp/>!=<sp/>n;<sp/>++i,<sp/>++j)</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subtract_bigits(i,<sp/>other.bigits_[j],<sp/>borrow);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(borrow<sp/>&gt;<sp/>0)<sp/>subtract_bigits(i,<sp/>0,<sp/>borrow);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>remove_leading_zeros();</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR20<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>multiply(uint32_t<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>double_bigit<sp/>wide_value<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>bigit<sp/>carry<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0,<sp/>n<sp/>=<sp/>bigits_.size();<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>double_bigit<sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>bigits_[i]<sp/>*<sp/>wide_value<sp/>+<sp/>carry;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bigits_[i]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">bigit</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structresult" kindref="compound">result</ref>);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>carry<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">bigit</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structresult" kindref="compound">result</ref><sp/>&gt;&gt;<sp/>bigit_bits);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(carry<sp/>!=<sp/>0)<sp/>bigits_.push_back(carry);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR20<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>multiply(uint64_t<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bigit<sp/><ref refid="structmask" kindref="compound">mask</ref><sp/>=<sp/>~bigit(0);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>double_bigit<sp/>lower<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>&amp;<sp/><ref refid="structmask" kindref="compound">mask</ref>;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>double_bigit<sp/>upper<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>&gt;&gt;<sp/>bigit_bits;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>double_bigit<sp/>carry<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0,<sp/>n<sp/>=<sp/>bigits_.size();<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>double_bigit<sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>bigits_[i]<sp/>*<sp/>lower<sp/>+<sp/>(carry<sp/>&amp;<sp/><ref refid="structmask" kindref="compound">mask</ref>);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>carry<sp/>=</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bigits_[i]<sp/>*<sp/>upper<sp/>+<sp/>(<ref refid="structresult" kindref="compound">result</ref><sp/>&gt;&gt;<sp/>bigit_bits)<sp/>+<sp/>(carry<sp/>&gt;&gt;<sp/>bigit_bits);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bigits_[i]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">bigit</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structresult" kindref="compound">result</ref>);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(carry<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bigits_.push_back(carry<sp/>&amp;<sp/><ref refid="structmask" kindref="compound">mask</ref>);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>carry<sp/>&gt;&gt;=<sp/>bigit_bits;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR20<sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>()<sp/>:<sp/>exp_(0)<sp/>{}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>(uint64_t<sp/>n)<sp/>{<sp/>assign(n);<sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR20<sp/><ref refid="classdetail_1_1bigint" kindref="compound">~bigint</ref>()<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_ASSERT(bigits_.capacity()<sp/>&lt;=<sp/>bigits_capacity,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR20<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assign(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>other.bigits_.size();</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>bigits_.<ref refid="classbasic__memory__buffer_1a153c47788d6d1a76ec97780748755ea1" kindref="member">resize</ref>(size);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>data<sp/>=<sp/>other.bigits_.data();</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(data,<sp/>data<sp/>+<sp/>size,<sp/>make_checked(bigits_.data(),<sp/>size));</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>exp_<sp/>=<sp/>other.exp_;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR20<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assign(uint64_t<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_bigits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bigits_[num_bigits++]<sp/>=<sp/>n<sp/>&amp;<sp/>~bigit(0);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>&gt;&gt;=<sp/>bigit_bits;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>bigits_.<ref refid="classbasic__memory__buffer_1a153c47788d6d1a76ec97780748755ea1" kindref="member">resize</ref>(num_bigits);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>exp_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR20<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bigits()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(bigits_.size())<sp/>+<sp/>exp_;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>FMT_NOINLINE<sp/>FMT_CONSTEXPR20<sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>&amp;<sp/>operator&lt;&lt;=(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift)<sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_ASSERT(shift<sp/>&gt;=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>exp_<sp/>+=<sp/>shift<sp/>/<sp/>bigit_bits;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>shift<sp/>%=<sp/>bigit_bits;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shift<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>bigit<sp/>carry<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0,<sp/>n<sp/>=<sp/>bigits_.size();<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bigit<sp/>c<sp/>=<sp/>bigits_[i]<sp/>&gt;&gt;<sp/>(bigit_bits<sp/>-<sp/>shift);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bigits_[i]<sp/>=<sp/>(bigits_[i]<sp/>&lt;&lt;<sp/>shift)<sp/>+<sp/>carry;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>carry<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(carry<sp/>!=<sp/>0)<sp/>bigits_.push_back(carry);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Int&gt;<sp/>FMT_CONSTEXPR20<sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>&amp;<sp/>operator*=(Int<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_ASSERT(<ref refid="classvalue" kindref="compound">value</ref><sp/>&gt;<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>multiply(uint32_or_64_or_128_t&lt;Int&gt;(<ref refid="classvalue" kindref="compound">value</ref>));</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>FMT_CONSTEXPR20<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compare(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_lhs_bigits<sp/>=<sp/>lhs.num_bigits(),<sp/>num_rhs_bigits<sp/>=<sp/>rhs.num_bigits();</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_lhs_bigits<sp/>!=<sp/>num_rhs_bigits)</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num_lhs_bigits<sp/>&gt;<sp/>num_rhs_bigits<sp/>?<sp/>1<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lhs.bigits_.size())<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rhs.bigits_.size())<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>i<sp/>-<sp/>j;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>&lt;<sp/>0)<sp/>end<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>i<sp/>&gt;=<sp/>end;<sp/>--i,<sp/>--j)<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bigit<sp/>lhs_bigit<sp/>=<sp/>lhs[i],<sp/>rhs_bigit<sp/>=<sp/>rhs[j];</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs_bigit<sp/>!=<sp/>rhs_bigit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs_bigit<sp/>&gt;<sp/>rhs_bigit<sp/>?<sp/>1<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>j)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i<sp/>&gt;<sp/>j<sp/>?<sp/>1<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>compare(lhs1<sp/>+<sp/>lhs2,<sp/>rhs).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>FMT_CONSTEXPR20<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>add_compare(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>&amp;<sp/>lhs1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>&amp;<sp/>lhs2,</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_lhs_bigits<sp/>=<sp/>(<ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">std::max</ref>)(lhs1.num_bigits(),<sp/>lhs2.num_bigits());</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_rhs_bigits<sp/>=<sp/>rhs.num_bigits();</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max_lhs_bigits<sp/>+<sp/>1<sp/>&lt;<sp/>num_rhs_bigits)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max_lhs_bigits<sp/>&gt;<sp/>num_rhs_bigits)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get_bigit<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>&amp;<sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>-&gt;<sp/>bigit<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i<sp/>&gt;=<sp/>n.exp_<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>n.num_bigits()<sp/>?<sp/>n[i<sp/>-<sp/>n.exp_]<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>double_bigit<sp/>borrow<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_exp<sp/>=<sp/>(<ref refid="group__core__func__common_1ga2c2bde1cec025b7ddff83c74a1113719" kindref="member">std::min</ref>)((<ref refid="group__core__func__common_1ga2c2bde1cec025b7ddff83c74a1113719" kindref="member">std::min</ref>)(lhs1.exp_,<sp/>lhs2.exp_),<sp/>rhs.exp_);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>num_rhs_bigits<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>min_exp;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>double_bigit<sp/>sum<sp/>=</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">double_bigit</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(get_bigit(lhs1,<sp/>i))<sp/>+<sp/>get_bigit(lhs2,<sp/>i);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bigit<sp/>rhs_bigit<sp/>=<sp/>get_bigit(rhs,<sp/>i);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sum<sp/>&gt;<sp/>rhs_bigit<sp/>+<sp/>borrow)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>borrow<sp/>=<sp/>rhs_bigit<sp/>+<sp/>borrow<sp/>-<sp/>sum;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(borrow<sp/>&gt;<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>borrow<sp/>&lt;&lt;=<sp/>bigit_bits;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>borrow<sp/>!=<sp/>0<sp/>?<sp/>-1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Assigns<sp/>pow(10,<sp/>exp)<sp/>to<sp/>this<sp/>bigint.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR20<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assign_pow10(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exp)<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_ASSERT(exp<sp/>&gt;=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assign(1);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>top<sp/>bit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bitmask<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(exp<sp/>&gt;=<sp/>bitmask)<sp/>bitmask<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>bitmask<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pow(10,<sp/>exp)<sp/>=<sp/>pow(5,<sp/>exp)<sp/>*<sp/>pow(2,<sp/>exp).<sp/>First<sp/>compute<sp/>pow(5,<sp/>exp)<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>repeated<sp/>squaring<sp/>and<sp/>multiplication.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>assign(5);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>bitmask<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(bitmask<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>square();</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((exp<sp/>&amp;<sp/>bitmask)<sp/>!=<sp/>0)<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>*=<sp/>5;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bitmask<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>&lt;&lt;=<sp/>exp;<sp/><sp/></highlight><highlight class="comment">//<sp/>Multiply<sp/>by<sp/>pow(2,<sp/>exp)<sp/>by<sp/>shifting.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR20<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>square()<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bigits<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(bigits_.size());</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_result_bigits<sp/>=<sp/>2<sp/>*<sp/>num_bigits;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbasic__memory__buffer" kindref="compound">basic_memory_buffer&lt;bigit, bigits_capacity&gt;</ref><sp/>n(std::move(bigits_));</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>bigits_.<ref refid="classbasic__memory__buffer_1a153c47788d6d1a76ec97780748755ea1" kindref="member">resize</ref>(to_unsigned(num_result_bigits));</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>accumulator_t<sp/>=<sp/>conditional_t&lt;FMT_USE_INT128,<sp/>uint128_t,<sp/>accumulator&gt;;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>accumulator_t();</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bigit_index<sp/>=<sp/>0;<sp/>bigit_index<sp/>&lt;<sp/>num_bigits;<sp/>++bigit_index)<sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>bigit<sp/>at<sp/>position<sp/>bigit_index<sp/>of<sp/>the<sp/>result<sp/>by<sp/>adding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cross-product<sp/>terms<sp/>n[i]<sp/>*<sp/>n[j]<sp/>such<sp/>that<sp/>i<sp/>+<sp/>j<sp/>==<sp/>bigit_index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0,<sp/>j<sp/>=<sp/>bigit_index;<sp/>j<sp/>&gt;=<sp/>0;<sp/>++i,<sp/>--j)<sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Most<sp/>terms<sp/>are<sp/>multiplied<sp/>twice<sp/>which<sp/>can<sp/>be<sp/>optimized<sp/>in<sp/>the<sp/>future.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">double_bigit</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(n[i])<sp/>*<sp/>n[j];</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[bigit_index]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">bigit</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(sum);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>&gt;&gt;=<sp/><ref refid="structdetail_1_1bits" kindref="compound">bits&lt;bigit&gt;::value</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>carry.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>the<sp/>same<sp/>for<sp/>the<sp/>top<sp/>half.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bigit_index<sp/>=<sp/>num_bigits;<sp/>bigit_index<sp/>&lt;<sp/>num_result_bigits;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++bigit_index)<sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>num_bigits<sp/>-<sp/>1,<sp/>i<sp/>=<sp/>bigit_index<sp/>-<sp/>j;<sp/>i<sp/>&lt;<sp/>num_bigits;)</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">double_bigit</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(n[i++])<sp/>*<sp/>n[j--];</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[bigit_index]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">bigit</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(sum);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>&gt;&gt;=<sp/><ref refid="structdetail_1_1bits" kindref="compound">bits&lt;bigit&gt;::value</ref>;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>remove_leading_zeros();</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>exp_<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>bigint<sp/>has<sp/>a<sp/>bigger<sp/>exponent<sp/>than<sp/>other,<sp/>adds<sp/>trailing<sp/>zero<sp/>to<sp/>make</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>exponents<sp/>equal.<sp/>This<sp/>simplifies<sp/>some<sp/>operations<sp/>such<sp/>as<sp/>subtraction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR20<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>align(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exp_difference<sp/>=<sp/>exp_<sp/>-<sp/>other.exp_;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp_difference<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bigits<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(bigits_.size());</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>bigits_.<ref refid="classbasic__memory__buffer_1a153c47788d6d1a76ec97780748755ea1" kindref="member">resize</ref>(to_unsigned(num_bigits<sp/>+<sp/>exp_difference));</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>num_bigits<sp/>-<sp/>1,<sp/>j<sp/>=<sp/>i<sp/>+<sp/>exp_difference;<sp/>i<sp/>&gt;=<sp/>0;<sp/>--i,<sp/>--j)</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bigits_[j]<sp/>=<sp/>bigits_[i];</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uninitialized_fill_n(bigits_.data(),<sp/>exp_difference,<sp/>0);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>exp_<sp/>-=<sp/>exp_difference;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Divides<sp/>this<sp/>bignum<sp/>by<sp/>divisor,<sp/>assigning<sp/>the<sp/>remainder<sp/>to<sp/>this<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>returning<sp/>the<sp/>quotient.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR20<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>divmod_assign(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1bigint" kindref="compound">bigint</ref>&amp;<sp/>divisor)<sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_ASSERT(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;divisor,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compare(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>divisor)<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_ASSERT(divisor.bigits_[divisor.bigits_.size()<sp/>-<sp/>1u]<sp/>!=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>align(divisor);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>quotient<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>subtract_aligned(divisor);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++quotient;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(compare(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>divisor)<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>quotient;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="614"><highlight class="normal">};</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>round_direction<sp/>{<sp/>unknown,<sp/>up,<sp/>down<sp/>};</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Given<sp/>the<sp/>divisor<sp/>(normally<sp/>a<sp/>power<sp/>of<sp/>10),<sp/>the<sp/>remainder<sp/>=<sp/>v<sp/>%<sp/>divisor<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="comment">//<sp/>some<sp/>number<sp/>v<sp/>and<sp/>the<sp/>error,<sp/>returns<sp/>whether<sp/>v<sp/>should<sp/>be<sp/>rounded<sp/>up,<sp/>down,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="comment">//<sp/>whether<sp/>the<sp/>rounding<sp/>direction<sp/>can&apos;t<sp/>be<sp/>determined<sp/>due<sp/>to<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="comment">//<sp/>error<sp/>should<sp/>be<sp/>less<sp/>than<sp/>divisor<sp/>/<sp/>2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>round_direction<sp/>get_round_direction(uint64_t<sp/>divisor,</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>remainder,</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>error)<sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>FMT_ASSERT(remainder<sp/>&lt;<sp/>divisor,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>divisor<sp/>-<sp/>remainder<sp/>won&apos;t<sp/>overflow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>FMT_ASSERT(error<sp/>&lt;<sp/>divisor,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>divisor<sp/>-<sp/>error<sp/>won&apos;t<sp/>overflow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>FMT_ASSERT(error<sp/>&lt;<sp/>divisor<sp/>-<sp/>error,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>error<sp/>*<sp/>2<sp/>won&apos;t<sp/>overflow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Round<sp/>down<sp/>if<sp/>(remainder<sp/>+<sp/>error)<sp/>*<sp/>2<sp/>&lt;=<sp/>divisor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remainder<sp/>&lt;=<sp/>divisor<sp/>-<sp/>remainder<sp/>&amp;&amp;<sp/>error<sp/>*<sp/>2<sp/>&lt;=<sp/>divisor<sp/>-<sp/>remainder<sp/>*<sp/>2)</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>round_direction::down;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Round<sp/>up<sp/>if<sp/>(remainder<sp/>-<sp/>error)<sp/>*<sp/>2<sp/>&gt;=<sp/>divisor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remainder<sp/>&gt;=<sp/>error<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>remainder<sp/>-<sp/>error<sp/>&gt;=<sp/>divisor<sp/>-<sp/>(remainder<sp/>-<sp/>error))<sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>round_direction::up;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>round_direction::unknown;</highlight></codeline>
<codeline lineno="637"><highlight class="normal">}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">digits<sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>more,<sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>more<sp/>digits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>done,<sp/><sp/></highlight><highlight class="comment">//<sp/>Done<sp/>generating<sp/>digits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>error<sp/><sp/></highlight><highlight class="comment">//<sp/>Digit<sp/>generation<sp/>cancelled<sp/>due<sp/>to<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal">};</highlight></codeline>
<codeline lineno="645"><highlight class="normal">}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647" refid="structdetail_1_1gen__digits__handler" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1gen__digits__handler" kindref="compound">gen_digits_handler</ref><sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buf;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exp10;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fixed;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>digits::result<sp/>on_digit(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>digit,<sp/>uint64_t<sp/>divisor,</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>remainder,<sp/>uint64_t<sp/>error,</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>integral)<sp/>{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_ASSERT(remainder<sp/>&lt;<sp/>divisor,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[size++]<sp/>=<sp/>digit;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!integral<sp/>&amp;&amp;<sp/>error<sp/>&gt;=<sp/>remainder)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>digits::error;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&lt;<sp/>precision)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>digits::more;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!integral)<sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>error<sp/>*<sp/>2<sp/>&lt;<sp/>divisor<sp/>with<sp/>overflow<sp/>prevention.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>check<sp/>is<sp/>not<sp/>needed<sp/>for<sp/>the<sp/>integral<sp/>part<sp/>because<sp/>error<sp/>=<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>divisor<sp/>&gt;<sp/>(1<sp/>&lt;&lt;<sp/>32)<sp/>there.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error<sp/>&gt;=<sp/>divisor<sp/>||<sp/>error<sp/>&gt;=<sp/>divisor<sp/>-<sp/>error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>digits::error;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ASSERT(error<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>divisor<sp/>&gt;<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dir<sp/>=<sp/>get_round_direction(divisor,<sp/>remainder,<sp/>error);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dir<sp/>!=<sp/>round_direction::up)</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dir<sp/>==<sp/>round_direction::down<sp/>?<sp/>digits::done<sp/>:<sp/>digits::error;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>++buf[size<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>size<sp/>-<sp/>1;<sp/>i<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>buf[i]<sp/>&gt;<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf[i]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++buf[i<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buf[0]<sp/>&gt;<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fixed)</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf[size++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++exp10;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>digits::done;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="686"><highlight class="normal">};</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generates<sp/>output<sp/>using<sp/>the<sp/>Grisu<sp/>digit-gen<sp/>algorithm.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="comment">//<sp/>error:<sp/>the<sp/>size<sp/>of<sp/>the<sp/>region<sp/>(lower,<sp/>upper)<sp/>outside<sp/>of<sp/>which<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="comment">//<sp/>definitely<sp/>do<sp/>not<sp/>round<sp/>to<sp/>value<sp/>(Delta<sp/>in<sp/>Grisu3).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal">FMT_INLINE<sp/>FMT_CONSTEXPR20<sp/>digits::result<sp/>grisu_gen_digits(</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdetail_1_1fp" kindref="compound">fp</ref><sp/><ref refid="classvalue" kindref="compound">value</ref>,<sp/>uint64_t<sp/>error,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>exp,<sp/><ref refid="structdetail_1_1gen__digits__handler" kindref="compound">gen_digits_handler</ref>&amp;<sp/>handler)<sp/>{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1fp" kindref="compound">fp</ref><sp/><ref refid="group__gtc__constants_1ga39c2fb227631ca25894326529bdd1ee5" kindref="member">one</ref>(1ULL<sp/>&lt;&lt;<sp/>-<ref refid="classvalue" kindref="compound">value</ref>.e,<sp/><ref refid="classvalue" kindref="compound">value</ref>.e);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>integral<sp/>part<sp/>of<sp/>scaled<sp/>value<sp/>(p1<sp/>in<sp/>Grisu)<sp/>=<sp/>value<sp/>/<sp/>one.<sp/>It<sp/>cannot<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>zero<sp/>because<sp/>it<sp/>contains<sp/>a<sp/>product<sp/>of<sp/>two<sp/>64-bit<sp/>numbers<sp/>with<sp/>MSB<sp/>set<sp/>(due</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>normalization)<sp/>-<sp/>1,<sp/>shifted<sp/>right<sp/>by<sp/>at<sp/>most<sp/>60<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>integral<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classvalue" kindref="compound">value</ref>.f<sp/>&gt;&gt;<sp/>-<ref refid="group__gtc__constants_1ga39c2fb227631ca25894326529bdd1ee5" kindref="member">one</ref>.e);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>FMT_ASSERT(integral<sp/>!=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>FMT_ASSERT(integral<sp/>==<sp/><ref refid="classvalue" kindref="compound">value</ref>.f<sp/>&gt;&gt;<sp/>-<ref refid="group__gtc__constants_1ga39c2fb227631ca25894326529bdd1ee5" kindref="member">one</ref>.e,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>fractional<sp/>part<sp/>of<sp/>scaled<sp/>value<sp/>(p2<sp/>in<sp/>Grisu)<sp/>c<sp/>=<sp/>value<sp/>%<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/>uint64_t<sp/>fractional<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>.f<sp/>&amp;<sp/>(<ref refid="group__gtc__constants_1ga39c2fb227631ca25894326529bdd1ee5" kindref="member">one</ref>.f<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/>exp<sp/>=<sp/>count_digits(integral);<sp/><sp/></highlight><highlight class="comment">//<sp/>kappa<sp/>in<sp/>Grisu.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Non-fixed<sp/>formats<sp/>require<sp/>at<sp/>least<sp/>one<sp/>digit<sp/>and<sp/>no<sp/>precision<sp/>adjustment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(handler.fixed)<sp/>{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Adjust<sp/>fixed<sp/>precision<sp/>by<sp/>exponent<sp/>because<sp/>it<sp/>is<sp/>relative<sp/>to<sp/>decimal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision_offset<sp/>=<sp/>exp<sp/>+<sp/>handler.exp10;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(precision_offset<sp/>&gt;<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handler.precision<sp/>&gt;<sp/>max_value&lt;int&gt;()<sp/>-<sp/>precision_offset)<sp/>{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FMT_THROW(<ref refid="classformat__error" kindref="compound">format_error</ref>(</highlight><highlight class="stringliteral">&quot;number<sp/>is<sp/>too<sp/>big&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.precision<sp/>+=<sp/>precision_offset;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>precision<sp/>is<sp/>satisfied<sp/>just<sp/>by<sp/>leading<sp/>zeros,<sp/>e.g.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>format(&quot;{:.2f}&quot;,<sp/>0.001)<sp/>gives<sp/>&quot;0.00&quot;<sp/>without<sp/>generating<sp/>any<sp/>digits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(handler.precision<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(handler.precision<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>digits::done;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Divide<sp/>by<sp/>10<sp/>to<sp/>prevent<sp/>overflow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>divisor<sp/>=<sp/>impl_data::power_of_10_64[exp<sp/>-<sp/>1]<sp/>&lt;&lt;<sp/>-<ref refid="group__gtc__constants_1ga39c2fb227631ca25894326529bdd1ee5" kindref="member">one</ref>.e;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dir<sp/>=<sp/>get_round_direction(divisor,<sp/><ref refid="classvalue" kindref="compound">value</ref>.f<sp/>/<sp/>10,<sp/>error<sp/>*<sp/>10);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dir<sp/>==<sp/>round_direction::unknown)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>digits::error;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>handler.buf[handler.size++]<sp/>=<sp/>dir<sp/>==<sp/>round_direction::up<sp/>?<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>digits::done;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>digits<sp/>for<sp/>the<sp/>integral<sp/>part.<sp/>This<sp/>can<sp/>produce<sp/>up<sp/>to<sp/>10<sp/>digits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>digit<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>divmod_integral<sp/>=<sp/>[&amp;](uint32_t<sp/>divisor)<sp/>{</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>digit<sp/>=<sp/>integral<sp/>/<sp/>divisor;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>integral<sp/>%=<sp/>divisor;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>optimization<sp/>by<sp/>Milo<sp/>Yip<sp/>reduces<sp/>the<sp/>number<sp/>of<sp/>integer<sp/>divisions<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>one<sp/>per<sp/>iteration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(exp)<sp/>{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>10:</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>divmod_integral(1000000000);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>9:</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>divmod_integral(100000000);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>8:</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>divmod_integral(10000000);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>7:</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>divmod_integral(1000000);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>6:</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>divmod_integral(100000);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>5:</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>divmod_integral(10000);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>divmod_integral(1000);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>divmod_integral(100);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>divmod_integral(10);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>digit<sp/>=<sp/>integral;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>integral<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ASSERT(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>number<sp/>of<sp/>digits&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>--<ref refid="group__core__func__exponential_1gaf6342f49d902286a599ceb86036236ce" kindref="member">exp</ref>;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>remainder<sp/>=<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(integral)<sp/>&lt;&lt;<sp/>-<ref refid="group__gtc__constants_1ga39c2fb227631ca25894326529bdd1ee5" kindref="member">one</ref>.e)<sp/>+<sp/>fractional;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>handler.on_digit(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>+<sp/>digit),</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>impl_data::power_of_10_64[<ref refid="group__core__func__exponential_1gaf6342f49d902286a599ceb86036236ce" kindref="member">exp</ref>]<sp/>&lt;&lt;<sp/>-<ref refid="group__gtc__constants_1ga39c2fb227631ca25894326529bdd1ee5" kindref="member">one</ref>.e,</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remainder,<sp/>error,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structresult" kindref="compound">result</ref><sp/>!=<sp/>digits::more)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(exp<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>digits<sp/>for<sp/>the<sp/>fractional<sp/>part.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>fractional<sp/>*=<sp/>10;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>error<sp/>*=<sp/>10;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>digit<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>+<sp/>(fractional<sp/>&gt;&gt;<sp/>-<ref refid="group__gtc__constants_1ga39c2fb227631ca25894326529bdd1ee5" kindref="member">one</ref>.e));</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>fractional<sp/>&amp;=<sp/><ref refid="group__gtc__constants_1ga39c2fb227631ca25894326529bdd1ee5" kindref="member">one</ref>.f<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>--<ref refid="group__core__func__exponential_1gaf6342f49d902286a599ceb86036236ce" kindref="member">exp</ref>;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>handler.on_digit(digit,<sp/><ref refid="group__gtc__constants_1ga39c2fb227631ca25894326529bdd1ee5" kindref="member">one</ref>.f,<sp/>fractional,<sp/>error,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structresult" kindref="compound">result</ref><sp/>!=<sp/>digits::more)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>128-bit<sp/>integer<sp/>type<sp/>used<sp/>internally,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789" refid="structdetail_1_1uint128__wrapper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1uint128__wrapper" kindref="compound">uint128_wrapper</ref><sp/>{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><ref refid="structdetail_1_1uint128__wrapper" kindref="compound">uint128_wrapper</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_USE_INT128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/>uint128_t<sp/>internal_;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1uint128__wrapper" kindref="compound">uint128_wrapper</ref>(uint64_t<sp/>high,<sp/>uint64_t<sp/>low)<sp/>FMT_NOEXCEPT</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>internal_{</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint128_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(low)<sp/>|</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint128_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(high)<sp/>&lt;&lt;<sp/>64)}<sp/>{}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1uint128__wrapper" kindref="compound">uint128_wrapper</ref>(uint128_t<sp/>u)<sp/>:<sp/>internal_{u}<sp/>{}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint64_t<sp/>high()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__type__precision_1ga058f57c19e1befdcf12498944bd73e69" kindref="member">uint64_t</ref>(internal_<sp/>&gt;&gt;<sp/>64);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint64_t<sp/>low()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FMT_NOEXCEPT<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__type__precision_1ga058f57c19e1befdcf12498944bd73e69" kindref="member">uint64_t</ref>(internal_);<sp/>}</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><ref refid="structdetail_1_1uint128__wrapper" kindref="compound">uint128_wrapper</ref>&amp;<sp/>operator+=(uint64_t<sp/>n)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>internal_<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/>uint64_t<sp/>high_;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/>uint64_t<sp/>low_;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1uint128__wrapper" kindref="compound">uint128_wrapper</ref>(uint64_t<sp/>high,<sp/>uint64_t<sp/>low)<sp/>FMT_NOEXCEPT</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>high_{high},</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>low_{low}<sp/>{}</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint64_t<sp/>high()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FMT_NOEXCEPT<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>high_;<sp/>}</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>uint64_t<sp/>low()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FMT_NOEXCEPT<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>low_;<sp/>}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><ref refid="structdetail_1_1uint128__wrapper" kindref="compound">uint128_wrapper</ref>&amp;<sp/>operator+=(uint64_t<sp/>n)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>defined(_M_X64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>carry<sp/>=<sp/>_addcarry_u64(0,<sp/>low_,<sp/>n,<sp/>&amp;low_);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>_addcarry_u64(carry,<sp/>high_,<sp/>0,<sp/>&amp;high_);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>sum<sp/>=<sp/>low_<sp/>+<sp/>n;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>high_<sp/>+=<sp/>(sum<sp/>&lt;<sp/>low_<sp/>?<sp/>1<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>low_<sp/>=<sp/>sum;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal">};</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implementation<sp/>of<sp/>Dragonbox<sp/>algorithm:<sp/>https://github.com/jk-jeon/dragonbox.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">dragonbox<sp/>{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Computes<sp/>128-bit<sp/>result<sp/>of<sp/>multiplication<sp/>of<sp/>two<sp/>64-bit<sp/>unsigned<sp/>integers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1uint128__wrapper" kindref="compound">uint128_wrapper</ref><sp/>umul128(uint64_t<sp/>x,<sp/>uint64_t<sp/>y)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_USE_INT128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint128_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(x)<sp/>*<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint128_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(y);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>defined(_M_X64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><ref refid="structdetail_1_1uint128__wrapper" kindref="compound">uint128_wrapper</ref><sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><ref refid="structresult" kindref="compound">result</ref>.low_<sp/>=<sp/>_umul128(x,<sp/>y,<sp/>&amp;<ref refid="structresult" kindref="compound">result</ref>.high_);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="structmask" kindref="compound">mask</ref><sp/>=<sp/>(<ref refid="group__gtc__type__precision_1ga058f57c19e1befdcf12498944bd73e69" kindref="member">uint64_t</ref>(1)<sp/>&lt;&lt;<sp/>32)<sp/>-<sp/><ref refid="group__gtc__type__precision_1ga058f57c19e1befdcf12498944bd73e69" kindref="member">uint64_t</ref>(1);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/>uint64_t<sp/>a<sp/>=<sp/>x<sp/>&gt;&gt;<sp/>32;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/>uint64_t<sp/>b<sp/>=<sp/>x<sp/>&amp;<sp/><ref refid="structmask" kindref="compound">mask</ref>;</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/>uint64_t<sp/>c<sp/>=<sp/>y<sp/>&gt;&gt;<sp/>32;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/>uint64_t<sp/>d<sp/>=<sp/>y<sp/>&amp;<sp/><ref refid="structmask" kindref="compound">mask</ref>;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/>uint64_t<sp/>ac<sp/>=<sp/>a<sp/>*<sp/>c;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/>uint64_t<sp/>bc<sp/>=<sp/>b<sp/>*<sp/>c;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/>uint64_t<sp/>ad<sp/>=<sp/>a<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/>uint64_t<sp/>bd<sp/>=<sp/>b<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/>uint64_t<sp/><ref refid="group__gtx__quaternion_1gadfb3c9580f52f7c5eb2eb805abf6c330" kindref="member">intermediate</ref><sp/>=<sp/>(bd<sp/>&gt;&gt;<sp/>32)<sp/>+<sp/>(ad<sp/>&amp;<sp/><ref refid="structmask" kindref="compound">mask</ref>)<sp/>+<sp/>(bc<sp/>&amp;<sp/><ref refid="structmask" kindref="compound">mask</ref>);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{ac<sp/>+<sp/>(<ref refid="group__gtx__quaternion_1gadfb3c9580f52f7c5eb2eb805abf6c330" kindref="member">intermediate</ref><sp/>&gt;&gt;<sp/>32)<sp/>+<sp/>(ad<sp/>&gt;&gt;<sp/>32)<sp/>+<sp/>(bc<sp/>&gt;&gt;<sp/>32),</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="group__gtx__quaternion_1gadfb3c9580f52f7c5eb2eb805abf6c330" kindref="member">intermediate</ref><sp/>&lt;&lt;<sp/>32)<sp/>+<sp/>(bd<sp/>&amp;<sp/><ref refid="structmask" kindref="compound">mask</ref>)};</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal">}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Computes<sp/>upper<sp/>64<sp/>bits<sp/>of<sp/>multiplication<sp/>of<sp/>two<sp/>64-bit<sp/>unsigned<sp/>integers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/>umul128_upper64(uint64_t<sp/>x,<sp/>uint64_t<sp/>y)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_USE_INT128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint128_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(x)<sp/>*<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint128_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(y);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(p<sp/>&gt;&gt;<sp/>64);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>defined(_M_X64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__umulh(x,<sp/>y);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>umul128(x,<sp/>y).high();</highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal">}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Computes<sp/>upper<sp/>64<sp/>bits<sp/>of<sp/>multiplication<sp/>of<sp/>a<sp/>64-bit<sp/>unsigned<sp/>integer<sp/>and<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="comment">//<sp/>128-bit<sp/>unsigned<sp/>integer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/>umul192_upper64(uint64_t<sp/>x,<sp/>uint128_wrapper<sp/>y)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/>uint128_wrapper<sp/>g0<sp/>=<sp/>umul128(x,<sp/>y.high());</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/>g0<sp/>+=<sp/>umul128_upper64(x,<sp/>y.low());</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g0.high();</highlight></codeline>
<codeline lineno="884"><highlight class="normal">}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Computes<sp/>upper<sp/>32<sp/>bits<sp/>of<sp/>multiplication<sp/>of<sp/>a<sp/>32-bit<sp/>unsigned<sp/>integer<sp/>and<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight><highlight class="comment">//<sp/>64-bit<sp/>unsigned<sp/>integer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t<sp/>umul96_upper32(uint32_t<sp/>x,<sp/>uint64_t<sp/>y)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(umul128_upper64(x,<sp/>y));</highlight></codeline>
<codeline lineno="890"><highlight class="normal">}</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Computes<sp/>middle<sp/>64<sp/>bits<sp/>of<sp/>multiplication<sp/>of<sp/>a<sp/>64-bit<sp/>unsigned<sp/>integer<sp/>and<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight><highlight class="comment">//<sp/>128-bit<sp/>unsigned<sp/>integer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/>umul192_middle64(uint64_t<sp/>x,<sp/>uint128_wrapper<sp/>y)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/>uint64_t<sp/>g01<sp/>=<sp/>x<sp/>*<sp/>y.high();</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/>uint64_t<sp/>g10<sp/>=<sp/>umul128_upper64(x,<sp/>y.low());</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g01<sp/>+<sp/>g10;</highlight></codeline>
<codeline lineno="898"><highlight class="normal">}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Computes<sp/>lower<sp/>64<sp/>bits<sp/>of<sp/>multiplication<sp/>of<sp/>a<sp/>32-bit<sp/>unsigned<sp/>integer<sp/>and<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="comment">//<sp/>64-bit<sp/>unsigned<sp/>integer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/>umul96_lower64(uint32_t<sp/>x,<sp/>uint64_t<sp/>y)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>*<sp/>y;</highlight></codeline>
<codeline lineno="904"><highlight class="normal">}</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Computes<sp/>floor(log10(pow(2,<sp/>e)))<sp/>for<sp/>e<sp/>in<sp/>[-1700,<sp/>1700]<sp/>using<sp/>the<sp/>method<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://fmt.dev/papers/Grisu-Exact.pdf#page=5,<sp/>section<sp/>3.4.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>floor_log10_pow2(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/>FMT_ASSERT(e<sp/>&lt;=<sp/>1700<sp/>&amp;&amp;<sp/>e<sp/>&gt;=<sp/>-1700,<sp/></highlight><highlight class="stringliteral">&quot;too<sp/>large<sp/>exponent&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift<sp/>=<sp/>22;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref><sp/>*<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(log10_2_significand<sp/>&gt;&gt;<sp/>(64<sp/>-<sp/>shift)))<sp/>&gt;&gt;<sp/>shift;</highlight></codeline>
<codeline lineno="912"><highlight class="normal">}</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Various<sp/>fast<sp/>log<sp/>computations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>floor_log2_pow10(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/>FMT_ASSERT(e<sp/>&lt;=<sp/>1233<sp/>&amp;&amp;<sp/>e<sp/>&gt;=<sp/>-1233,<sp/></highlight><highlight class="stringliteral">&quot;too<sp/>large<sp/>exponent&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>log2_10_integer_part<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>log2_10_fractional_digits<sp/>=<sp/>0x5269e12f346e2bf9;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift_amount<sp/>=<sp/>19;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref><sp/>*<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(log2_10_integer_part<sp/>&lt;&lt;<sp/>shift_amount)<sp/>|</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(log2_10_fractional_digits<sp/>&gt;&gt;<sp/>(64<sp/>-<sp/>shift_amount))))<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shift_amount;</highlight></codeline>
<codeline lineno="924"><highlight class="normal">}</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>floor_log10_pow2_minus_log10_4_over_3(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/>FMT_ASSERT(e<sp/>&lt;=<sp/>1700<sp/>&amp;&amp;<sp/>e<sp/>&gt;=<sp/>-1700,<sp/></highlight><highlight class="stringliteral">&quot;too<sp/>large<sp/>exponent&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>log10_4_over_3_fractional_digits<sp/>=<sp/>0x1ffbfc2bbc780375;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift_amount<sp/>=<sp/>22;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref><sp/>*<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(log10_2_significand<sp/>&gt;&gt;<sp/>(64<sp/>-<sp/>shift_amount))<sp/>-</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(log10_4_over_3_fractional_digits<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(64<sp/>-<sp/>shift_amount)))<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shift_amount;</highlight></codeline>
<codeline lineno="933"><highlight class="normal">}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>x<sp/>is<sp/>divisible<sp/>by<sp/>pow(2,<sp/>exp).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>divisible_by_power_of_2(uint32_t<sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exp)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/>FMT_ASSERT(exp<sp/>&gt;=<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/>FMT_ASSERT(x<sp/>!=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FMT_BUILTIN_CTZ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FMT_BUILTIN_CTZ(x)<sp/>&gt;=<sp/><ref refid="group__core__func__exponential_1gaf6342f49d902286a599ceb86036236ce" kindref="member">exp</ref>;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>exp<sp/>&lt;<sp/>num_bits&lt;uint32_t&gt;()<sp/>&amp;&amp;<sp/>x<sp/>==<sp/>((x<sp/>&gt;&gt;<sp/><ref refid="group__core__func__exponential_1gaf6342f49d902286a599ceb86036236ce" kindref="member">exp</ref>)<sp/>&lt;&lt;<sp/>exp);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal">}</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>divisible_by_power_of_2(uint64_t<sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exp)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/>FMT_ASSERT(exp<sp/>&gt;=<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/>FMT_ASSERT(x<sp/>!=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FMT_BUILTIN_CTZLL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FMT_BUILTIN_CTZLL(x)<sp/>&gt;=<sp/><ref refid="group__core__func__exponential_1gaf6342f49d902286a599ceb86036236ce" kindref="member">exp</ref>;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>exp<sp/>&lt;<sp/>num_bits&lt;uint64_t&gt;()<sp/>&amp;&amp;<sp/>x<sp/>==<sp/>((x<sp/>&gt;&gt;<sp/><ref refid="group__core__func__exponential_1gaf6342f49d902286a599ceb86036236ce" kindref="member">exp</ref>)<sp/>&lt;&lt;<sp/>exp);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal">}</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Table<sp/>entry<sp/>type<sp/>for<sp/>divisibility<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956" refid="structdetail_1_1dragonbox_1_1divtest__table__entry" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1dragonbox_1_1divtest__table__entry" kindref="compound">divtest_table_entry</ref><sp/>{</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/>T<sp/>mod_inv;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/>T<sp/>max_quotient;</highlight></codeline>
<codeline lineno="959"><highlight class="normal">};</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>x<sp/>is<sp/>divisible<sp/>by<sp/>pow(5,<sp/>exp).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>divisible_by_power_of_5(uint32_t<sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exp)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/>FMT_ASSERT(exp<sp/>&lt;=<sp/>10,<sp/></highlight><highlight class="stringliteral">&quot;too<sp/>large<sp/>exponent&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1dragonbox_1_1divtest__table__entry" kindref="compound">divtest_table_entry&lt;uint32_t&gt;</ref><sp/>divtest_table[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x00000001,<sp/>0xffffffff},<sp/>{0xcccccccd,<sp/>0x33333333},</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc28f5c29,<sp/>0x0a3d70a3},<sp/>{0x26e978d5,<sp/>0x020c49ba},</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x3afb7e91,<sp/>0x0068db8b},<sp/>{0x0bcbe61d,<sp/>0x0014f8b5},</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x68c26139,<sp/>0x000431bd},<sp/>{0xae8d46a5,<sp/>0x0000d6bf},</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x22e90e21,<sp/>0x00002af3},<sp/>{0x3a2e9c6d,<sp/>0x00000897},</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x3ed61f49,<sp/>0x000001b7}};</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>*<sp/>divtest_table[<ref refid="group__core__func__exponential_1gaf6342f49d902286a599ceb86036236ce" kindref="member">exp</ref>].mod_inv<sp/>&lt;=<sp/>divtest_table[<ref refid="group__core__func__exponential_1gaf6342f49d902286a599ceb86036236ce" kindref="member">exp</ref>].max_quotient;</highlight></codeline>
<codeline lineno="972"><highlight class="normal">}</highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>divisible_by_power_of_5(uint64_t<sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exp)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/>FMT_ASSERT(exp<sp/>&lt;=<sp/>23,<sp/></highlight><highlight class="stringliteral">&quot;too<sp/>large<sp/>exponent&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>divtest_table_entry&lt;uint64_t&gt;<sp/>divtest_table[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x0000000000000001,<sp/>0xffffffffffffffff},</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xcccccccccccccccd,<sp/>0x3333333333333333},</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8f5c28f5c28f5c29,<sp/>0x0a3d70a3d70a3d70},</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x1cac083126e978d5,<sp/>0x020c49ba5e353f7c},</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd288ce703afb7e91,<sp/>0x0068db8bac710cb2},</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x5d4e8fb00bcbe61d,<sp/>0x0014f8b588e368f0},</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x790fb65668c26139,<sp/>0x000431bde82d7b63},</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe5032477ae8d46a5,<sp/>0x0000d6bf94d5e57a},</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc767074b22e90e21,<sp/>0x00002af31dc46118},</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8e47ce423a2e9c6d,<sp/>0x0000089705f4136b},</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x4fa7f60d3ed61f49,<sp/>0x000001b7cdfd9d7b},</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x0fee64690c913975,<sp/>0x00000057f5ff85e5},</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x3662e0e1cf503eb1,<sp/>0x000000119799812d},</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa47a2cf9f6433fbd,<sp/>0x0000000384b84d09},</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x54186f653140a659,<sp/>0x00000000b424dc35},</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x7738164770402145,<sp/>0x0000000024075f3d},</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe4a4d1417cd9a041,<sp/>0x000000000734aca5},</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc75429d9e5c5200d,<sp/>0x000000000170ef54},</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc1773b91fac10669,<sp/>0x000000000049c977},</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x26b172506559ce15,<sp/>0x00000000000ec1e4},</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd489e3a9addec2d1,<sp/>0x000000000002f394},</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x90e860bb892c8d5d,<sp/>0x000000000000971d},</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x502e79bf1b6f4f79,<sp/>0x0000000000001e39},</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xdcd618596be30fe5,<sp/>0x000000000000060b}};</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>*<sp/>divtest_table[<ref refid="group__core__func__exponential_1gaf6342f49d902286a599ceb86036236ce" kindref="member">exp</ref>].mod_inv<sp/>&lt;=<sp/>divtest_table[<ref refid="group__core__func__exponential_1gaf6342f49d902286a599ceb86036236ce" kindref="member">exp</ref>].max_quotient;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Replaces<sp/>n<sp/>by<sp/>floor(n<sp/>/<sp/>pow(5,<sp/>N))<sp/>returning<sp/>true<sp/>if<sp/>and<sp/>only<sp/>if<sp/>n<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight><highlight class="comment">//<sp/>divisible<sp/>by<sp/>pow(5,<sp/>N).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Precondition:<sp/>n<sp/>&lt;=<sp/>2<sp/>*<sp/>pow(5,<sp/>N<sp/>+<sp/>1).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>check_divisibility_and_divide_by_pow5(uint32_t&amp;<sp/>n)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>magic_number;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits_for_comparison;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>threshold;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift_amount;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/>}<sp/>infos[]<sp/>=<sp/>{{0xcccd,<sp/>16,<sp/>0x3333,<sp/>18},<sp/>{0xa429,<sp/>8,<sp/>0x0a,<sp/>20}};</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>=<sp/>infos[N<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/>n<sp/>*=<sp/><ref refid="structinfo" kindref="compound">info</ref>.magic_number;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>comparison_mask<sp/>=<sp/>(1u<sp/>&lt;&lt;<sp/><ref refid="structinfo" kindref="compound">info</ref>.bits_for_comparison)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>(n<sp/>&amp;<sp/>comparison_mask)<sp/>&lt;=<sp/><ref refid="structinfo" kindref="compound">info</ref>.threshold;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/>n<sp/>&gt;&gt;=<sp/><ref refid="structinfo" kindref="compound">info</ref>.shift_amount;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Computes<sp/>floor(n<sp/>/<sp/>pow(10,<sp/>N))<sp/>for<sp/>small<sp/>n<sp/>and<sp/>N.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Precondition:<sp/>n<sp/>&lt;=<sp/>pow(10,<sp/>N<sp/>+<sp/>1).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N&gt;<sp/>uint32_t<sp/>small_division_by_pow10(uint32_t<sp/>n)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>magic_number;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift_amount;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>divisor_times_10;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/>}<sp/>infos[]<sp/>=<sp/>{{0xcccd,<sp/>19,<sp/>100},<sp/>{0xa3d8,<sp/>22,<sp/>1000}};</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>=<sp/>infos[N<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/>FMT_ASSERT(n<sp/>&lt;=<sp/><ref refid="structinfo" kindref="compound">info</ref>.divisor_times_10,<sp/></highlight><highlight class="stringliteral">&quot;n<sp/>is<sp/>too<sp/>large&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n<sp/>*<sp/><ref refid="structinfo" kindref="compound">info</ref>.magic_number<sp/>&gt;&gt;<sp/><ref refid="structinfo" kindref="compound">info</ref>.shift_amount;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Computes<sp/>floor(n<sp/>/<sp/>10^(kappa<sp/>+<sp/>1))<sp/>(float)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t<sp/>divide_by_10_to_kappa_plus_1(uint32_t<sp/>n)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n<sp/>/<sp/>float_info&lt;float&gt;::big_divisor;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Computes<sp/>floor(n<sp/>/<sp/>10^(kappa<sp/>+<sp/>1))<sp/>(double)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/>divide_by_10_to_kappa_plus_1(uint64_t<sp/>n)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>umul128_upper64(n,<sp/>0x83126e978d4fdf3c)<sp/>&gt;&gt;<sp/>9;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Various<sp/>subroutines<sp/>using<sp/>pow10<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045" refid="structdetail_1_1dragonbox_1_1cache__accessor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1dragonbox_1_1cache__accessor" kindref="compound">cache_accessor</ref>;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047" refid="structdetail_1_1dragonbox_1_1cache__accessor_3_01float_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1dragonbox_1_1cache__accessor" kindref="compound">cache_accessor</ref>&lt;float&gt;<sp/>{</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>carrier_uint<sp/>=<sp/>float_info&lt;float&gt;::carrier_uint;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>cache_entry_type<sp/>=<sp/><ref refid="group__gtc__type__precision_1ga058f57c19e1befdcf12498944bd73e69" kindref="member">uint64_t</ref>;</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint64_t<sp/>get_cached_power(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_ASSERT(k<sp/>&gt;=<sp/>float_info&lt;float&gt;::min_k<sp/>&amp;&amp;<sp/>k<sp/>&lt;=<sp/>float_info&lt;float&gt;::max_k,</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;k<sp/>is<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>pow10_significands[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x81ceb32c4b43fcf5,<sp/>0xa2425ff75e14fc32,<sp/>0xcad2f7f5359a3b3f,</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xfd87b5f28300ca0e,<sp/>0x9e74d1b791e07e49,<sp/>0xc612062576589ddb,</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xf79687aed3eec552,<sp/>0x9abe14cd44753b53,<sp/>0xc16d9a0095928a28,</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xf1c90080baf72cb2,<sp/>0x971da05074da7bef,<sp/>0xbce5086492111aeb,</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xec1e4a7db69561a6,<sp/>0x9392ee8e921d5d08,<sp/>0xb877aa3236a4b44a,</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xe69594bec44de15c,<sp/>0x901d7cf73ab0acda,<sp/>0xb424dc35095cd810,</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xe12e13424bb40e14,<sp/>0x8cbccc096f5088cc,<sp/>0xafebff0bcb24aaff,</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xdbe6fecebdedd5bf,<sp/>0x89705f4136b4a598,<sp/>0xabcc77118461cefd,</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xd6bf94d5e57a42bd,<sp/>0x8637bd05af6c69b6,<sp/>0xa7c5ac471b478424,</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xd1b71758e219652c,<sp/>0x83126e978d4fdf3c,<sp/>0xa3d70a3d70a3d70b,</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xcccccccccccccccd,<sp/>0x8000000000000000,<sp/>0xa000000000000000,</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xc800000000000000,<sp/>0xfa00000000000000,<sp/>0x9c40000000000000,</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xc350000000000000,<sp/>0xf424000000000000,<sp/>0x9896800000000000,</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xbebc200000000000,<sp/>0xee6b280000000000,<sp/>0x9502f90000000000,</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xba43b74000000000,<sp/>0xe8d4a51000000000,<sp/>0x9184e72a00000000,</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xb5e620f480000000,<sp/>0xe35fa931a0000000,<sp/>0x8e1bc9bf04000000,</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xb1a2bc2ec5000000,<sp/>0xde0b6b3a76400000,<sp/>0x8ac7230489e80000,</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xad78ebc5ac620000,<sp/>0xd8d726b7177a8000,<sp/>0x878678326eac9000,</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xa968163f0a57b400,<sp/>0xd3c21bcecceda100,<sp/>0x84595161401484a0,</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xa56fa5b99019a5c8,<sp/>0xcecb8f27f4200f3a,<sp/>0x813f3978f8940984,</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xa18f07d736b90be5,<sp/>0xc9f2c9cd04674ede,<sp/>0xfc6f7c4045812296,</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x9dc5ada82b70b59d,<sp/>0xc5371912364ce305,<sp/>0xf684df56c3e01bc6,</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x9a130b963a6c115c,<sp/>0xc097ce7bc90715b3,<sp/>0xf0bdc21abb48db20,</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x96769950b50d88f4,<sp/>0xbc143fa4e250eb31,<sp/>0xeb194f8e1ae525fd,</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x92efd1b8d0cf37be,<sp/>0xb7abc627050305ad,<sp/>0xe596b7b0c643c719,</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x8f7e32ce7bea5c6f,<sp/>0xb35dbf821ae4f38b,<sp/>0xe0352f62a19e306e};</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pow10_significands[k<sp/>-<sp/>float_info&lt;float&gt;::min_k];</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>carrier_uint<sp/>compute_mul(carrier_uint<sp/>u,</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cache_entry_type&amp;<sp/>cache)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>umul96_upper32(u,<sp/>cache);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>compute_delta(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cache_entry_type&amp;<sp/>cache,</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>beta_minus_1)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cache<sp/>&gt;&gt;<sp/>(64<sp/>-<sp/>1<sp/>-<sp/>beta_minus_1));</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>compute_mul_parity(carrier_uint<sp/>two_f,</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cache_entry_type&amp;<sp/>cache,</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>beta_minus_1)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_ASSERT(beta_minus_1<sp/>&gt;=<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_ASSERT(beta_minus_1<sp/>&lt;<sp/>64,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((umul96_lower64(two_f,<sp/>cache)<sp/>&gt;&gt;<sp/>(64<sp/>-<sp/>beta_minus_1))<sp/>&amp;<sp/>1)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>carrier_uint<sp/>compute_left_endpoint_for_shorter_interval_case(</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cache_entry_type&amp;<sp/>cache,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>beta_minus_1)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">carrier_uint</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(cache<sp/>-<sp/>(cache<sp/>&gt;&gt;<sp/>(float_info&lt;float&gt;::significand_bits<sp/>+<sp/>2)))<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(64<sp/>-<sp/>float_info&lt;float&gt;::significand_bits<sp/>-<sp/>1<sp/>-<sp/>beta_minus_1));</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>carrier_uint<sp/>compute_right_endpoint_for_shorter_interval_case(</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cache_entry_type&amp;<sp/>cache,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>beta_minus_1)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">carrier_uint</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(cache<sp/>+<sp/>(cache<sp/>&gt;&gt;<sp/>(float_info&lt;float&gt;::significand_bits<sp/>+<sp/>1)))<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(64<sp/>-<sp/>float_info&lt;float&gt;::significand_bits<sp/>-<sp/>1<sp/>-<sp/>beta_minus_1));</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>carrier_uint<sp/>compute_round_up_for_shorter_interval_case(</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cache_entry_type&amp;<sp/>cache,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>beta_minus_1)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">carrier_uint</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(64<sp/>-<sp/>float_info&lt;float&gt;::significand_bits<sp/>-<sp/>2<sp/>-<sp/>beta_minus_1))<sp/>+</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1)<sp/>/</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1125"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight></codeline>
<codeline lineno="1127" refid="structdetail_1_1dragonbox_1_1cache__accessor_3_01double_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdetail_1_1dragonbox_1_1cache__accessor" kindref="compound">cache_accessor</ref>&lt;double&gt;<sp/>{</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>carrier_uint<sp/>=<sp/>float_info&lt;double&gt;::carrier_uint;</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1uint128__wrapper" kindref="compound">cache_entry_type</ref><sp/>=<sp/><ref refid="structdetail_1_1uint128__wrapper" kindref="compound">uint128_wrapper</ref>;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1uint128__wrapper" kindref="compound">uint128_wrapper</ref><sp/>get_cached_power(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_ASSERT(k<sp/>&gt;=<sp/>float_info&lt;double&gt;::min_k<sp/>&amp;&amp;<sp/>k<sp/>&lt;=<sp/>float_info&lt;double&gt;::max_k,</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;k<sp/>is<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1uint128__wrapper" kindref="compound">uint128_wrapper</ref><sp/>pow10_significands[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_USE_FULL_CACHE_DRAGONBOX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xff77b1fcbebcdc4f,<sp/>0x25e8e89c13bb0f7b},</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9faacf3df73609b1,<sp/>0x77b191618c54e9ad},</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc795830d75038c1d,<sp/>0xd59df5b9ef6a2418},</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xf97ae3d0d2446f25,<sp/>0x4b0573286b44ad1e},</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9becce62836ac577,<sp/>0x4ee367f9430aec33},</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc2e801fb244576d5,<sp/>0x229c41f793cda740},</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xf3a20279ed56d48a,<sp/>0x6b43527578c11110},</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9845418c345644d6,<sp/>0x830a13896b78aaaa},</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xbe5691ef416bd60c,<sp/>0x23cc986bc656d554},</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xedec366b11c6cb8f,<sp/>0x2cbfbe86b7ec8aa9},</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x94b3a202eb1c3f39,<sp/>0x7bf7d71432f3d6aa},</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb9e08a83a5e34f07,<sp/>0xdaf5ccd93fb0cc54},</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe858ad248f5c22c9,<sp/>0xd1b3400f8f9cff69},</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x91376c36d99995be,<sp/>0x23100809b9c21fa2},</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb58547448ffffb2d,<sp/>0xabd40a0c2832a78b},</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe2e69915b3fff9f9,<sp/>0x16c90c8f323f516d},</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8dd01fad907ffc3b,<sp/>0xae3da7d97f6792e4},</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb1442798f49ffb4a,<sp/>0x99cd11cfdf41779d},</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xdd95317f31c7fa1d,<sp/>0x40405643d711d584},</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8a7d3eef7f1cfc52,<sp/>0x482835ea666b2573},</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xad1c8eab5ee43b66,<sp/>0xda3243650005eed0},</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd863b256369d4a40,<sp/>0x90bed43e40076a83},</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x873e4f75e2224e68,<sp/>0x5a7744a6e804a292},</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa90de3535aaae202,<sp/>0x711515d0a205cb37},</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd3515c2831559a83,<sp/>0x0d5a5b44ca873e04},</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8412d9991ed58091,<sp/>0xe858790afe9486c3},</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa5178fff668ae0b6,<sp/>0x626e974dbe39a873},</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xce5d73ff402d98e3,<sp/>0xfb0a3d212dc81290},</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x80fa687f881c7f8e,<sp/>0x7ce66634bc9d0b9a},</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa139029f6a239f72,<sp/>0x1c1fffc1ebc44e81},</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc987434744ac874e,<sp/>0xa327ffb266b56221},</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xfbe9141915d7a922,<sp/>0x4bf1ff9f0062baa9},</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9d71ac8fada6c9b5,<sp/>0x6f773fc3603db4aa},</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc4ce17b399107c22,<sp/>0xcb550fb4384d21d4},</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xf6019da07f549b2b,<sp/>0x7e2a53a146606a49},</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x99c102844f94e0fb,<sp/>0x2eda7444cbfc426e},</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc0314325637a1939,<sp/>0xfa911155fefb5309},</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xf03d93eebc589f88,<sp/>0x793555ab7eba27cb},</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x96267c7535b763b5,<sp/>0x4bc1558b2f3458df},</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xbbb01b9283253ca2,<sp/>0x9eb1aaedfb016f17},</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xea9c227723ee8bcb,<sp/>0x465e15a979c1cadd},</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x92a1958a7675175f,<sp/>0x0bfacd89ec191eca},</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb749faed14125d36,<sp/>0xcef980ec671f667c},</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe51c79a85916f484,<sp/>0x82b7e12780e7401b},</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8f31cc0937ae58d2,<sp/>0xd1b2ecb8b0908811},</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb2fe3f0b8599ef07,<sp/>0x861fa7e6dcb4aa16},</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xdfbdcece67006ac9,<sp/>0x67a791e093e1d49b},</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8bd6a141006042bd,<sp/>0xe0c8bb2c5c6d24e1},</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xaecc49914078536d,<sp/>0x58fae9f773886e19},</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xda7f5bf590966848,<sp/>0xaf39a475506a899f},</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x888f99797a5e012d,<sp/>0x6d8406c952429604},</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xaab37fd7d8f58178,<sp/>0xc8e5087ba6d33b84},</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd5605fcdcf32e1d6,<sp/>0xfb1e4a9a90880a65},</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x855c3be0a17fcd26,<sp/>0x5cf2eea09a550680},</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa6b34ad8c9dfc06f,<sp/>0xf42faa48c0ea481f},</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd0601d8efc57b08b,<sp/>0xf13b94daf124da27},</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x823c12795db6ce57,<sp/>0x76c53d08d6b70859},</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa2cb1717b52481ed,<sp/>0x54768c4b0c64ca6f},</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xcb7ddcdda26da268,<sp/>0xa9942f5dcf7dfd0a},</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xfe5d54150b090b02,<sp/>0xd3f93b35435d7c4d},</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9efa548d26e5a6e1,<sp/>0xc47bc5014a1a6db0},</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc6b8e9b0709f109a,<sp/>0x359ab6419ca1091c},</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xf867241c8cc6d4c0,<sp/>0xc30163d203c94b63},</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9b407691d7fc44f8,<sp/>0x79e0de63425dcf1e},</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc21094364dfb5636,<sp/>0x985915fc12f542e5},</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xf294b943e17a2bc4,<sp/>0x3e6f5b7b17b2939e},</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x979cf3ca6cec5b5a,<sp/>0xa705992ceecf9c43},</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xbd8430bd08277231,<sp/>0x50c6ff782a838354},</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xece53cec4a314ebd,<sp/>0xa4f8bf5635246429},</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x940f4613ae5ed136,<sp/>0x871b7795e136be9a},</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb913179899f68584,<sp/>0x28e2557b59846e40},</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe757dd7ec07426e5,<sp/>0x331aeada2fe589d0},</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9096ea6f3848984f,<sp/>0x3ff0d2c85def7622},</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb4bca50b065abe63,<sp/>0x0fed077a756b53aa},</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe1ebce4dc7f16dfb,<sp/>0xd3e8495912c62895},</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8d3360f09cf6e4bd,<sp/>0x64712dd7abbbd95d},</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb080392cc4349dec,<sp/>0xbd8d794d96aacfb4},</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xdca04777f541c567,<sp/>0xecf0d7a0fc5583a1},</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x89e42caaf9491b60,<sp/>0xf41686c49db57245},</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xac5d37d5b79b6239,<sp/>0x311c2875c522ced6},</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd77485cb25823ac7,<sp/>0x7d633293366b828c},</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x86a8d39ef77164bc,<sp/>0xae5dff9c02033198},</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa8530886b54dbdeb,<sp/>0xd9f57f830283fdfd},</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd267caa862a12d66,<sp/>0xd072df63c324fd7c},</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8380dea93da4bc60,<sp/>0x4247cb9e59f71e6e},</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa46116538d0deb78,<sp/>0x52d9be85f074e609},</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xcd795be870516656,<sp/>0x67902e276c921f8c},</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x806bd9714632dff6,<sp/>0x00ba1cd8a3db53b7},</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa086cfcd97bf97f3,<sp/>0x80e8a40eccd228a5},</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc8a883c0fdaf7df0,<sp/>0x6122cd128006b2ce},</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xfad2a4b13d1b5d6c,<sp/>0x796b805720085f82},</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9cc3a6eec6311a63,<sp/>0xcbe3303674053bb1},</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc3f490aa77bd60fc,<sp/>0xbedbfc4411068a9d},</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xf4f1b4d515acb93b,<sp/>0xee92fb5515482d45},</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x991711052d8bf3c5,<sp/>0x751bdd152d4d1c4b},</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xbf5cd54678eef0b6,<sp/>0xd262d45a78a0635e},</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xef340a98172aace4,<sp/>0x86fb897116c87c35},</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9580869f0e7aac0e,<sp/>0xd45d35e6ae3d4da1},</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xbae0a846d2195712,<sp/>0x8974836059cca10a},</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe998d258869facd7,<sp/>0x2bd1a438703fc94c},</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x91ff83775423cc06,<sp/>0x7b6306a34627ddd0},</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb67f6455292cbf08,<sp/>0x1a3bc84c17b1d543},</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe41f3d6a7377eeca,<sp/>0x20caba5f1d9e4a94},</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8e938662882af53e,<sp/>0x547eb47b7282ee9d},</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb23867fb2a35b28d,<sp/>0xe99e619a4f23aa44},</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xdec681f9f4c31f31,<sp/>0x6405fa00e2ec94d5},</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8b3c113c38f9f37e,<sp/>0xde83bc408dd3dd05},</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xae0b158b4738705e,<sp/>0x9624ab50b148d446},</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd98ddaee19068c76,<sp/>0x3badd624dd9b0958},</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x87f8a8d4cfa417c9,<sp/>0xe54ca5d70a80e5d7},</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa9f6d30a038d1dbc,<sp/>0x5e9fcf4ccd211f4d},</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd47487cc8470652b,<sp/>0x7647c32000696720},</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x84c8d4dfd2c63f3b,<sp/>0x29ecd9f40041e074},</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa5fb0a17c777cf09,<sp/>0xf468107100525891},</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xcf79cc9db955c2cc,<sp/>0x7182148d4066eeb5},</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x81ac1fe293d599bf,<sp/>0xc6f14cd848405531},</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa21727db38cb002f,<sp/>0xb8ada00e5a506a7d},</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xca9cf1d206fdc03b,<sp/>0xa6d90811f0e4851d},</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xfd442e4688bd304a,<sp/>0x908f4a166d1da664},</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9e4a9cec15763e2e,<sp/>0x9a598e4e043287ff},</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc5dd44271ad3cdba,<sp/>0x40eff1e1853f29fe},</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xf7549530e188c128,<sp/>0xd12bee59e68ef47d},</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9a94dd3e8cf578b9,<sp/>0x82bb74f8301958cf},</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc13a148e3032d6e7,<sp/>0xe36a52363c1faf02},</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xf18899b1bc3f8ca1,<sp/>0xdc44e6c3cb279ac2},</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x96f5600f15a7b7e5,<sp/>0x29ab103a5ef8c0ba},</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xbcb2b812db11a5de,<sp/>0x7415d448f6b6f0e8},</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xebdf661791d60f56,<sp/>0x111b495b3464ad22},</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x936b9fcebb25c995,<sp/>0xcab10dd900beec35},</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb84687c269ef3bfb,<sp/>0x3d5d514f40eea743},</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe65829b3046b0afa,<sp/>0x0cb4a5a3112a5113},</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8ff71a0fe2c2e6dc,<sp/>0x47f0e785eaba72ac},</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb3f4e093db73a093,<sp/>0x59ed216765690f57},</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe0f218b8d25088b8,<sp/>0x306869c13ec3532d},</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8c974f7383725573,<sp/>0x1e414218c73a13fc},</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xafbd2350644eeacf,<sp/>0xe5d1929ef90898fb},</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xdbac6c247d62a583,<sp/>0xdf45f746b74abf3a},</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x894bc396ce5da772,<sp/>0x6b8bba8c328eb784},</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xab9eb47c81f5114f,<sp/>0x066ea92f3f326565},</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd686619ba27255a2,<sp/>0xc80a537b0efefebe},</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8613fd0145877585,<sp/>0xbd06742ce95f5f37},</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa798fc4196e952e7,<sp/>0x2c48113823b73705},</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd17f3b51fca3a7a0,<sp/>0xf75a15862ca504c6},</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x82ef85133de648c4,<sp/>0x9a984d73dbe722fc},</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa3ab66580d5fdaf5,<sp/>0xc13e60d0d2e0ebbb},</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xcc963fee10b7d1b3,<sp/>0x318df905079926a9},</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xffbbcfe994e5c61f,<sp/>0xfdf17746497f7053},</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9fd561f1fd0f9bd3,<sp/>0xfeb6ea8bedefa634},</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc7caba6e7c5382c8,<sp/>0xfe64a52ee96b8fc1},</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xf9bd690a1b68637b,<sp/>0x3dfdce7aa3c673b1},</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9c1661a651213e2d,<sp/>0x06bea10ca65c084f},</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc31bfa0fe5698db8,<sp/>0x486e494fcff30a63},</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xf3e2f893dec3f126,<sp/>0x5a89dba3c3efccfb},</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x986ddb5c6b3a76b7,<sp/>0xf89629465a75e01d},</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xbe89523386091465,<sp/>0xf6bbb397f1135824},</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xee2ba6c0678b597f,<sp/>0x746aa07ded582e2d},</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x94db483840b717ef,<sp/>0xa8c2a44eb4571cdd},</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xba121a4650e4ddeb,<sp/>0x92f34d62616ce414},</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe896a0d7e51e1566,<sp/>0x77b020baf9c81d18},</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x915e2486ef32cd60,<sp/>0x0ace1474dc1d122f},</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb5b5ada8aaff80b8,<sp/>0x0d819992132456bb},</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe3231912d5bf60e6,<sp/>0x10e1fff697ed6c6a},</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8df5efabc5979c8f,<sp/>0xca8d3ffa1ef463c2},</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb1736b96b6fd83b3,<sp/>0xbd308ff8a6b17cb3},</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xddd0467c64bce4a0,<sp/>0xac7cb3f6d05ddbdf},</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8aa22c0dbef60ee4,<sp/>0x6bcdf07a423aa96c},</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xad4ab7112eb3929d,<sp/>0x86c16c98d2c953c7},</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd89d64d57a607744,<sp/>0xe871c7bf077ba8b8},</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x87625f056c7c4a8b,<sp/>0x11471cd764ad4973},</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa93af6c6c79b5d2d,<sp/>0xd598e40d3dd89bd0},</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd389b47879823479,<sp/>0x4aff1d108d4ec2c4},</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x843610cb4bf160cb,<sp/>0xcedf722a585139bb},</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa54394fe1eedb8fe,<sp/>0xc2974eb4ee658829},</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xce947a3da6a9273e,<sp/>0x733d226229feea33},</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x811ccc668829b887,<sp/>0x0806357d5a3f5260},</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa163ff802a3426a8,<sp/>0xca07c2dcb0cf26f8},</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc9bcff6034c13052,<sp/>0xfc89b393dd02f0b6},</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xfc2c3f3841f17c67,<sp/>0xbbac2078d443ace3},</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9d9ba7832936edc0,<sp/>0xd54b944b84aa4c0e},</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc5029163f384a931,<sp/>0x0a9e795e65d4df12},</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xf64335bcf065d37d,<sp/>0x4d4617b5ff4a16d6},</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x99ea0196163fa42e,<sp/>0x504bced1bf8e4e46},</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc06481fb9bcf8d39,<sp/>0xe45ec2862f71e1d7},</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xf07da27a82c37088,<sp/>0x5d767327bb4e5a4d},</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x964e858c91ba2655,<sp/>0x3a6a07f8d510f870},</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xbbe226efb628afea,<sp/>0x890489f70a55368c},</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xeadab0aba3b2dbe5,<sp/>0x2b45ac74ccea842f},</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x92c8ae6b464fc96f,<sp/>0x3b0b8bc90012929e},</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb77ada0617e3bbcb,<sp/>0x09ce6ebb40173745},</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe55990879ddcaabd,<sp/>0xcc420a6a101d0516},</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8f57fa54c2a9eab6,<sp/>0x9fa946824a12232e},</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb32df8e9f3546564,<sp/>0x47939822dc96abfa},</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xdff9772470297ebd,<sp/>0x59787e2b93bc56f8},</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8bfbea76c619ef36,<sp/>0x57eb4edb3c55b65b},</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xaefae51477a06b03,<sp/>0xede622920b6b23f2},</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xdab99e59958885c4,<sp/>0xe95fab368e45ecee},</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x88b402f7fd75539b,<sp/>0x11dbcb0218ebb415},</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xaae103b5fcd2a881,<sp/>0xd652bdc29f26a11a},</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd59944a37c0752a2,<sp/>0x4be76d3346f04960},</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x857fcae62d8493a5,<sp/>0x6f70a4400c562ddc},</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa6dfbd9fb8e5b88e,<sp/>0xcb4ccd500f6bb953},</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd097ad07a71f26b2,<sp/>0x7e2000a41346a7a8},</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x825ecc24c873782f,<sp/>0x8ed400668c0c28c9},</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa2f67f2dfa90563b,<sp/>0x728900802f0f32fb},</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xcbb41ef979346bca,<sp/>0x4f2b40a03ad2ffba},</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xfea126b7d78186bc,<sp/>0xe2f610c84987bfa9},</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9f24b832e6b0f436,<sp/>0x0dd9ca7d2df4d7ca},</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc6ede63fa05d3143,<sp/>0x91503d1c79720dbc},</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xf8a95fcf88747d94,<sp/>0x75a44c6397ce912b},</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9b69dbe1b548ce7c,<sp/>0xc986afbe3ee11abb},</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc24452da229b021b,<sp/>0xfbe85badce996169},</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xf2d56790ab41c2a2,<sp/>0xfae27299423fb9c4},</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x97c560ba6b0919a5,<sp/>0xdccd879fc967d41b},</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xbdb6b8e905cb600f,<sp/>0x5400e987bbc1c921},</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xed246723473e3813,<sp/>0x290123e9aab23b69},</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9436c0760c86e30b,<sp/>0xf9a0b6720aaf6522},</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb94470938fa89bce,<sp/>0xf808e40e8d5b3e6a},</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe7958cb87392c2c2,<sp/>0xb60b1d1230b20e05},</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x90bd77f3483bb9b9,<sp/>0xb1c6f22b5e6f48c3},</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb4ecd5f01a4aa828,<sp/>0x1e38aeb6360b1af4},</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe2280b6c20dd5232,<sp/>0x25c6da63c38de1b1},</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8d590723948a535f,<sp/>0x579c487e5a38ad0f},</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb0af48ec79ace837,<sp/>0x2d835a9df0c6d852},</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xdcdb1b2798182244,<sp/>0xf8e431456cf88e66},</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8a08f0f8bf0f156b,<sp/>0x1b8e9ecb641b5900},</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xac8b2d36eed2dac5,<sp/>0xe272467e3d222f40},</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd7adf884aa879177,<sp/>0x5b0ed81dcc6abb10},</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x86ccbb52ea94baea,<sp/>0x98e947129fc2b4ea},</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa87fea27a539e9a5,<sp/>0x3f2398d747b36225},</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd29fe4b18e88640e,<sp/>0x8eec7f0d19a03aae},</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x83a3eeeef9153e89,<sp/>0x1953cf68300424ad},</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa48ceaaab75a8e2b,<sp/>0x5fa8c3423c052dd8},</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xcdb02555653131b6,<sp/>0x3792f412cb06794e},</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x808e17555f3ebf11,<sp/>0xe2bbd88bbee40bd1},</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa0b19d2ab70e6ed6,<sp/>0x5b6aceaeae9d0ec5},</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc8de047564d20a8b,<sp/>0xf245825a5a445276},</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xfb158592be068d2e,<sp/>0xeed6e2f0f0d56713},</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9ced737bb6c4183d,<sp/>0x55464dd69685606c},</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc428d05aa4751e4c,<sp/>0xaa97e14c3c26b887},</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xf53304714d9265df,<sp/>0xd53dd99f4b3066a9},</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x993fe2c6d07b7fab,<sp/>0xe546a8038efe402a},</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xbf8fdb78849a5f96,<sp/>0xde98520472bdd034},</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xef73d256a5c0f77c,<sp/>0x963e66858f6d4441},</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x95a8637627989aad,<sp/>0xdde7001379a44aa9},</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xbb127c53b17ec159,<sp/>0x5560c018580d5d53},</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe9d71b689dde71af,<sp/>0xaab8f01e6e10b4a7},</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9226712162ab070d,<sp/>0xcab3961304ca70e9},</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb6b00d69bb55c8d1,<sp/>0x3d607b97c5fd0d23},</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe45c10c42a2b3b05,<sp/>0x8cb89a7db77c506b},</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8eb98a7a9a5b04e3,<sp/>0x77f3608e92adb243},</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb267ed1940f1c61c,<sp/>0x55f038b237591ed4},</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xdf01e85f912e37a3,<sp/>0x6b6c46dec52f6689},</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8b61313bbabce2c6,<sp/>0x2323ac4b3b3da016},</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xae397d8aa96c1b77,<sp/>0xabec975e0a0d081b},</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd9c7dced53c72255,<sp/>0x96e7bd358c904a22},</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x881cea14545c7575,<sp/>0x7e50d64177da2e55},</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xaa242499697392d2,<sp/>0xdde50bd1d5d0b9ea},</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd4ad2dbfc3d07787,<sp/>0x955e4ec64b44e865},</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x84ec3c97da624ab4,<sp/>0xbd5af13bef0b113f},</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa6274bbdd0fadd61,<sp/>0xecb1ad8aeacdd58f},</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xcfb11ead453994ba,<sp/>0x67de18eda5814af3},</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x81ceb32c4b43fcf4,<sp/>0x80eacf948770ced8},</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa2425ff75e14fc31,<sp/>0xa1258379a94d028e},</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xcad2f7f5359a3b3e,<sp/>0x096ee45813a04331},</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xfd87b5f28300ca0d,<sp/>0x8bca9d6e188853fd},</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9e74d1b791e07e48,<sp/>0x775ea264cf55347e},</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc612062576589dda,<sp/>0x95364afe032a819e},</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xf79687aed3eec551,<sp/>0x3a83ddbd83f52205},</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9abe14cd44753b52,<sp/>0xc4926a9672793543},</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc16d9a0095928a27,<sp/>0x75b7053c0f178294},</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xf1c90080baf72cb1,<sp/>0x5324c68b12dd6339},</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x971da05074da7bee,<sp/>0xd3f6fc16ebca5e04},</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xbce5086492111aea,<sp/>0x88f4bb1ca6bcf585},</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xec1e4a7db69561a5,<sp/>0x2b31e9e3d06c32e6},</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9392ee8e921d5d07,<sp/>0x3aff322e62439fd0},</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb877aa3236a4b449,<sp/>0x09befeb9fad487c3},</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe69594bec44de15b,<sp/>0x4c2ebe687989a9b4},</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x901d7cf73ab0acd9,<sp/>0x0f9d37014bf60a11},</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb424dc35095cd80f,<sp/>0x538484c19ef38c95},</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe12e13424bb40e13,<sp/>0x2865a5f206b06fba},</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8cbccc096f5088cb,<sp/>0xf93f87b7442e45d4},</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xafebff0bcb24aafe,<sp/>0xf78f69a51539d749},</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xdbe6fecebdedd5be,<sp/>0xb573440e5a884d1c},</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x89705f4136b4a597,<sp/>0x31680a88f8953031},</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xabcc77118461cefc,<sp/>0xfdc20d2b36ba7c3e},</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd6bf94d5e57a42bc,<sp/>0x3d32907604691b4d},</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8637bd05af6c69b5,<sp/>0xa63f9a49c2c1b110},</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa7c5ac471b478423,<sp/>0x0fcf80dc33721d54},</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd1b71758e219652b,<sp/>0xd3c36113404ea4a9},</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x83126e978d4fdf3b,<sp/>0x645a1cac083126ea},</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa3d70a3d70a3d70a,<sp/>0x3d70a3d70a3d70a4},</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xcccccccccccccccc,<sp/>0xcccccccccccccccd},</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8000000000000000,<sp/>0x0000000000000000},</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa000000000000000,<sp/>0x0000000000000000},</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc800000000000000,<sp/>0x0000000000000000},</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xfa00000000000000,<sp/>0x0000000000000000},</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9c40000000000000,<sp/>0x0000000000000000},</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc350000000000000,<sp/>0x0000000000000000},</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xf424000000000000,<sp/>0x0000000000000000},</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9896800000000000,<sp/>0x0000000000000000},</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xbebc200000000000,<sp/>0x0000000000000000},</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xee6b280000000000,<sp/>0x0000000000000000},</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9502f90000000000,<sp/>0x0000000000000000},</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xba43b74000000000,<sp/>0x0000000000000000},</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe8d4a51000000000,<sp/>0x0000000000000000},</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9184e72a00000000,<sp/>0x0000000000000000},</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb5e620f480000000,<sp/>0x0000000000000000},</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe35fa931a0000000,<sp/>0x0000000000000000},</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8e1bc9bf04000000,<sp/>0x0000000000000000},</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb1a2bc2ec5000000,<sp/>0x0000000000000000},</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xde0b6b3a76400000,<sp/>0x0000000000000000},</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8ac7230489e80000,<sp/>0x0000000000000000},</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xad78ebc5ac620000,<sp/>0x0000000000000000},</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd8d726b7177a8000,<sp/>0x0000000000000000},</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x878678326eac9000,<sp/>0x0000000000000000},</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa968163f0a57b400,<sp/>0x0000000000000000},</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd3c21bcecceda100,<sp/>0x0000000000000000},</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x84595161401484a0,<sp/>0x0000000000000000},</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa56fa5b99019a5c8,<sp/>0x0000000000000000},</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xcecb8f27f4200f3a,<sp/>0x0000000000000000},</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x813f3978f8940984,<sp/>0x4000000000000000},</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa18f07d736b90be5,<sp/>0x5000000000000000},</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc9f2c9cd04674ede,<sp/>0xa400000000000000},</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xfc6f7c4045812296,<sp/>0x4d00000000000000},</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9dc5ada82b70b59d,<sp/>0xf020000000000000},</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc5371912364ce305,<sp/>0x6c28000000000000},</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xf684df56c3e01bc6,<sp/>0xc732000000000000},</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9a130b963a6c115c,<sp/>0x3c7f400000000000},</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc097ce7bc90715b3,<sp/>0x4b9f100000000000},</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xf0bdc21abb48db20,<sp/>0x1e86d40000000000},</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x96769950b50d88f4,<sp/>0x1314448000000000},</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xbc143fa4e250eb31,<sp/>0x17d955a000000000},</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xeb194f8e1ae525fd,<sp/>0x5dcfab0800000000},</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x92efd1b8d0cf37be,<sp/>0x5aa1cae500000000},</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb7abc627050305ad,<sp/>0xf14a3d9e40000000},</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe596b7b0c643c719,<sp/>0x6d9ccd05d0000000},</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8f7e32ce7bea5c6f,<sp/>0xe4820023a2000000},</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb35dbf821ae4f38b,<sp/>0xdda2802c8a800000},</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe0352f62a19e306e,<sp/>0xd50b2037ad200000},</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8c213d9da502de45,<sp/>0x4526f422cc340000},</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xaf298d050e4395d6,<sp/>0x9670b12b7f410000},</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xdaf3f04651d47b4c,<sp/>0x3c0cdd765f114000},</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x88d8762bf324cd0f,<sp/>0xa5880a69fb6ac800},</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xab0e93b6efee0053,<sp/>0x8eea0d047a457a00},</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd5d238a4abe98068,<sp/>0x72a4904598d6d880},</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x85a36366eb71f041,<sp/>0x47a6da2b7f864750},</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa70c3c40a64e6c51,<sp/>0x999090b65f67d924},</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd0cf4b50cfe20765,<sp/>0xfff4b4e3f741cf6d},</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x82818f1281ed449f,<sp/>0xbff8f10e7a8921a4},</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa321f2d7226895c7,<sp/>0xaff72d52192b6a0d},</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xcbea6f8ceb02bb39,<sp/>0x9bf4f8a69f764490},</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xfee50b7025c36a08,<sp/>0x02f236d04753d5b4},</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9f4f2726179a2245,<sp/>0x01d762422c946590},</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc722f0ef9d80aad6,<sp/>0x424d3ad2b7b97ef5},</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xf8ebad2b84e0d58b,<sp/>0xd2e0898765a7deb2},</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9b934c3b330c8577,<sp/>0x63cc55f49f88eb2f},</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc2781f49ffcfa6d5,<sp/>0x3cbf6b71c76b25fb},</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xf316271c7fc3908a,<sp/>0x8bef464e3945ef7a},</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x97edd871cfda3a56,<sp/>0x97758bf0e3cbb5ac},</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xbde94e8e43d0c8ec,<sp/>0x3d52eeed1cbea317},</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xed63a231d4c4fb27,<sp/>0x4ca7aaa863ee4bdd},</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x945e455f24fb1cf8,<sp/>0x8fe8caa93e74ef6a},</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb975d6b6ee39e436,<sp/>0xb3e2fd538e122b44},</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe7d34c64a9c85d44,<sp/>0x60dbbca87196b616},</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x90e40fbeea1d3a4a,<sp/>0xbc8955e946fe31cd},</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb51d13aea4a488dd,<sp/>0x6babab6398bdbe41},</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe264589a4dcdab14,<sp/>0xc696963c7eed2dd1},</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8d7eb76070a08aec,<sp/>0xfc1e1de5cf543ca2},</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb0de65388cc8ada8,<sp/>0x3b25a55f43294bcb},</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xdd15fe86affad912,<sp/>0x49ef0eb713f39ebe},</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8a2dbf142dfcc7ab,<sp/>0x6e3569326c784337},</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xacb92ed9397bf996,<sp/>0x49c2c37f07965404},</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd7e77a8f87daf7fb,<sp/>0xdc33745ec97be906},</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x86f0ac99b4e8dafd,<sp/>0x69a028bb3ded71a3},</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa8acd7c0222311bc,<sp/>0xc40832ea0d68ce0c},</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd2d80db02aabd62b,<sp/>0xf50a3fa490c30190},</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x83c7088e1aab65db,<sp/>0x792667c6da79e0fa},</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa4b8cab1a1563f52,<sp/>0x577001b891185938},</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xcde6fd5e09abcf26,<sp/>0xed4c0226b55e6f86},</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x80b05e5ac60b6178,<sp/>0x544f8158315b05b4},</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa0dc75f1778e39d6,<sp/>0x696361ae3db1c721},</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc913936dd571c84c,<sp/>0x03bc3a19cd1e38e9},</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xfb5878494ace3a5f,<sp/>0x04ab48a04065c723},</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9d174b2dcec0e47b,<sp/>0x62eb0d64283f9c76},</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc45d1df942711d9a,<sp/>0x3ba5d0bd324f8394},</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xf5746577930d6500,<sp/>0xca8f44ec7ee36479},</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9968bf6abbe85f20,<sp/>0x7e998b13cf4e1ecb},</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xbfc2ef456ae276e8,<sp/>0x9e3fedd8c321a67e},</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xefb3ab16c59b14a2,<sp/>0xc5cfe94ef3ea101e},</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x95d04aee3b80ece5,<sp/>0xbba1f1d158724a12},</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xbb445da9ca61281f,<sp/>0x2a8a6e45ae8edc97},</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xea1575143cf97226,<sp/>0xf52d09d71a3293bd},</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x924d692ca61be758,<sp/>0x593c2626705f9c56},</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb6e0c377cfa2e12e,<sp/>0x6f8b2fb00c77836c},</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe498f455c38b997a,<sp/>0x0b6dfb9c0f956447},</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8edf98b59a373fec,<sp/>0x4724bd4189bd5eac},</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb2977ee300c50fe7,<sp/>0x58edec91ec2cb657},</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xdf3d5e9bc0f653e1,<sp/>0x2f2967b66737e3ed},</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8b865b215899f46c,<sp/>0xbd79e0d20082ee74},</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xae67f1e9aec07187,<sp/>0xecd8590680a3aa11},</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xda01ee641a708de9,<sp/>0xe80e6f4820cc9495},</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x884134fe908658b2,<sp/>0x3109058d147fdcdd},</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xaa51823e34a7eede,<sp/>0xbd4b46f0599fd415},</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd4e5e2cdc1d1ea96,<sp/>0x6c9e18ac7007c91a},</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x850fadc09923329e,<sp/>0x03e2cf6bc604ddb0},</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa6539930bf6bff45,<sp/>0x84db8346b786151c},</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xcfe87f7cef46ff16,<sp/>0xe612641865679a63},</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x81f14fae158c5f6e,<sp/>0x4fcb7e8f3f60c07e},</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa26da3999aef7749,<sp/>0xe3be5e330f38f09d},</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xcb090c8001ab551c,<sp/>0x5cadf5bfd3072cc5},</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xfdcb4fa002162a63,<sp/>0x73d9732fc7c8f7f6},</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9e9f11c4014dda7e,<sp/>0x2867e7fddcdd9afa},</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc646d63501a1511d,<sp/>0xb281e1fd541501b8},</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xf7d88bc24209a565,<sp/>0x1f225a7ca91a4226},</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9ae757596946075f,<sp/>0x3375788de9b06958},</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc1a12d2fc3978937,<sp/>0x0052d6b1641c83ae},</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xf209787bb47d6b84,<sp/>0xc0678c5dbd23a49a},</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9745eb4d50ce6332,<sp/>0xf840b7ba963646e0},</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xbd176620a501fbff,<sp/>0xb650e5a93bc3d898},</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xec5d3fa8ce427aff,<sp/>0xa3e51f138ab4cebe},</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x93ba47c980e98cdf,<sp/>0xc66f336c36b10137},</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb8a8d9bbe123f017,<sp/>0xb80b0047445d4184},</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe6d3102ad96cec1d,<sp/>0xa60dc059157491e5},</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9043ea1ac7e41392,<sp/>0x87c89837ad68db2f},</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb454e4a179dd1877,<sp/>0x29babe4598c311fb},</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe16a1dc9d8545e94,<sp/>0xf4296dd6fef3d67a},</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8ce2529e2734bb1d,<sp/>0x1899e4a65f58660c},</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb01ae745b101e9e4,<sp/>0x5ec05dcff72e7f8f},</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xdc21a1171d42645d,<sp/>0x76707543f4fa1f73},</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x899504ae72497eba,<sp/>0x6a06494a791c53a8},</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xabfa45da0edbde69,<sp/>0x0487db9d17636892},</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd6f8d7509292d603,<sp/>0x45a9d2845d3c42b6},</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x865b86925b9bc5c2,<sp/>0x0b8a2392ba45a9b2},</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa7f26836f282b732,<sp/>0x8e6cac7768d7141e},</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd1ef0244af2364ff,<sp/>0x3207d795430cd926},</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8335616aed761f1f,<sp/>0x7f44e6bd49e807b8},</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa402b9c5a8d3a6e7,<sp/>0x5f16206c9c6209a6},</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xcd036837130890a1,<sp/>0x36dba887c37a8c0f},</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x802221226be55a64,<sp/>0xc2494954da2c9789},</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa02aa96b06deb0fd,<sp/>0xf2db9baa10b7bd6c},</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc83553c5c8965d3d,<sp/>0x6f92829494e5acc7},</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xfa42a8b73abbf48c,<sp/>0xcb772339ba1f17f9},</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9c69a97284b578d7,<sp/>0xff2a760414536efb},</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc38413cf25e2d70d,<sp/>0xfef5138519684aba},</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xf46518c2ef5b8cd1,<sp/>0x7eb258665fc25d69},</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x98bf2f79d5993802,<sp/>0xef2f773ffbd97a61},</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xbeeefb584aff8603,<sp/>0xaafb550ffacfd8fa},</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xeeaaba2e5dbf6784,<sp/>0x95ba2a53f983cf38},</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x952ab45cfa97a0b2,<sp/>0xdd945a747bf26183},</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xba756174393d88df,<sp/>0x94f971119aeef9e4},</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe912b9d1478ceb17,<sp/>0x7a37cd5601aab85d},</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x91abb422ccb812ee,<sp/>0xac62e055c10ab33a},</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb616a12b7fe617aa,<sp/>0x577b986b314d6009},</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe39c49765fdf9d94,<sp/>0xed5a7e85fda0b80b},</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8e41ade9fbebc27d,<sp/>0x14588f13be847307},</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb1d219647ae6b31c,<sp/>0x596eb2d8ae258fc8},</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xde469fbd99a05fe3,<sp/>0x6fca5f8ed9aef3bb},</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8aec23d680043bee,<sp/>0x25de7bb9480d5854},</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xada72ccc20054ae9,<sp/>0xaf561aa79a10ae6a},</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd910f7ff28069da4,<sp/>0x1b2ba1518094da04},</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x87aa9aff79042286,<sp/>0x90fb44d2f05d0842},</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa99541bf57452b28,<sp/>0x353a1607ac744a53},</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd3fa922f2d1675f2,<sp/>0x42889b8997915ce8},</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x847c9b5d7c2e09b7,<sp/>0x69956135febada11},</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa59bc234db398c25,<sp/>0x43fab9837e699095},</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xcf02b2c21207ef2e,<sp/>0x94f967e45e03f4bb},</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8161afb94b44f57d,<sp/>0x1d1be0eebac278f5},</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa1ba1ba79e1632dc,<sp/>0x6462d92a69731732},</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xca28a291859bbf93,<sp/>0x7d7b8f7503cfdcfe},</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xfcb2cb35e702af78,<sp/>0x5cda735244c3d43e},</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9defbf01b061adab,<sp/>0x3a0888136afa64a7},</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc56baec21c7a1916,<sp/>0x088aaa1845b8fdd0},</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xf6c69a72a3989f5b,<sp/>0x8aad549e57273d45},</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9a3c2087a63f6399,<sp/>0x36ac54e2f678864b},</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc0cb28a98fcf3c7f,<sp/>0x84576a1bb416a7dd},</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xf0fdf2d3f3c30b9f,<sp/>0x656d44a2a11c51d5},</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x969eb7c47859e743,<sp/>0x9f644ae5a4b1b325},</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xbc4665b596706114,<sp/>0x873d5d9f0dde1fee},</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xeb57ff22fc0c7959,<sp/>0xa90cb506d155a7ea},</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9316ff75dd87cbd8,<sp/>0x09a7f12442d588f2},</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb7dcbf5354e9bece,<sp/>0x0c11ed6d538aeb2f},</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe5d3ef282a242e81,<sp/>0x8f1668c8a86da5fa},</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8fa475791a569d10,<sp/>0xf96e017d694487bc},</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb38d92d760ec4455,<sp/>0x37c981dcc395a9ac},</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe070f78d3927556a,<sp/>0x85bbe253f47b1417},</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8c469ab843b89562,<sp/>0x93956d7478ccec8e},</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xaf58416654a6babb,<sp/>0x387ac8d1970027b2},</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xdb2e51bfe9d0696a,<sp/>0x06997b05fcc0319e},</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x88fcf317f22241e2,<sp/>0x441fece3bdf81f03},</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xab3c2fddeeaad25a,<sp/>0xd527e81cad7626c3},</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd60b3bd56a5586f1,<sp/>0x8a71e223d8d3b074},</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x85c7056562757456,<sp/>0xf6872d5667844e49},</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa738c6bebb12d16c,<sp/>0xb428f8ac016561db},</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd106f86e69d785c7,<sp/>0xe13336d701beba52},</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x82a45b450226b39c,<sp/>0xecc0024661173473},</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa34d721642b06084,<sp/>0x27f002d7f95d0190},</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xcc20ce9bd35c78a5,<sp/>0x31ec038df7b441f4},</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xff290242c83396ce,<sp/>0x7e67047175a15271},</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9f79a169bd203e41,<sp/>0x0f0062c6e984d386},</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc75809c42c684dd1,<sp/>0x52c07b78a3e60868},</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xf92e0c3537826145,<sp/>0xa7709a56ccdf8a82},</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9bbcc7a142b17ccb,<sp/>0x88a66076400bb691},</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc2abf989935ddbfe,<sp/>0x6acff893d00ea435},</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xf356f7ebf83552fe,<sp/>0x0583f6b8c4124d43},</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x98165af37b2153de,<sp/>0xc3727a337a8b704a},</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xbe1bf1b059e9a8d6,<sp/>0x744f18c0592e4c5c},</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xeda2ee1c7064130c,<sp/>0x1162def06f79df73},</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9485d4d1c63e8be7,<sp/>0x8addcb5645ac2ba8},</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb9a74a0637ce2ee1,<sp/>0x6d953e2bd7173692},</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe8111c87c5c1ba99,<sp/>0xc8fa8db6ccdd0437},</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x910ab1d4db9914a0,<sp/>0x1d9c9892400a22a2},</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb54d5e4a127f59c8,<sp/>0x2503beb6d00cab4b},</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe2a0b5dc971f303a,<sp/>0x2e44ae64840fd61d},</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8da471a9de737e24,<sp/>0x5ceaecfed289e5d2},</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb10d8e1456105dad,<sp/>0x7425a83e872c5f47},</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xdd50f1996b947518,<sp/>0xd12f124e28f77719},</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8a5296ffe33cc92f,<sp/>0x82bd6b70d99aaa6f},</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xace73cbfdc0bfb7b,<sp/>0x636cc64d1001550b},</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd8210befd30efa5a,<sp/>0x3c47f7e05401aa4e},</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8714a775e3e95c78,<sp/>0x65acfaec34810a71},</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa8d9d1535ce3b396,<sp/>0x7f1839a741a14d0d},</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd31045a8341ca07c,<sp/>0x1ede48111209a050},</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x83ea2b892091e44d,<sp/>0x934aed0aab460432},</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa4e4b66b68b65d60,<sp/>0xf81da84d5617853f},</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xce1de40642e3f4b9,<sp/>0x36251260ab9d668e},</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x80d2ae83e9ce78f3,<sp/>0xc1d72b7c6b426019},</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa1075a24e4421730,<sp/>0xb24cf65b8612f81f},</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc94930ae1d529cfc,<sp/>0xdee033f26797b627},</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xfb9b7cd9a4a7443c,<sp/>0x169840ef017da3b1},</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9d412e0806e88aa5,<sp/>0x8e1f289560ee864e},</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc491798a08a2ad4e,<sp/>0xf1a6f2bab92a27e2},</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xf5b5d7ec8acb58a2,<sp/>0xae10af696774b1db},</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9991a6f3d6bf1765,<sp/>0xacca6da1e0a8ef29},</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xbff610b0cc6edd3f,<sp/>0x17fd090a58d32af3},</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xeff394dcff8a948e,<sp/>0xddfc4b4cef07f5b0},</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x95f83d0a1fb69cd9,<sp/>0x4abdaf101564f98e},</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xbb764c4ca7a4440f,<sp/>0x9d6d1ad41abe37f1},</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xea53df5fd18d5513,<sp/>0x84c86189216dc5ed},</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x92746b9be2f8552c,<sp/>0x32fd3cf5b4e49bb4},</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb7118682dbb66a77,<sp/>0x3fbc8c33221dc2a1},</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe4d5e82392a40515,<sp/>0x0fabaf3feaa5334a},</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8f05b1163ba6832d,<sp/>0x29cb4d87f2a7400e},</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb2c71d5bca9023f8,<sp/>0x743e20e9ef511012},</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xdf78e4b2bd342cf6,<sp/>0x914da9246b255416},</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8bab8eefb6409c1a,<sp/>0x1ad089b6c2f7548e},</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xae9672aba3d0c320,<sp/>0xa184ac2473b529b1},</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xda3c0f568cc4f3e8,<sp/>0xc9e5d72d90a2741e},</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8865899617fb1871,<sp/>0x7e2fa67c7a658892},</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xaa7eebfb9df9de8d,<sp/>0xddbb901b98feeab7},</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd51ea6fa85785631,<sp/>0x552a74227f3ea565},</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8533285c936b35de,<sp/>0xd53a88958f87275f},</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa67ff273b8460356,<sp/>0x8a892abaf368f137},</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd01fef10a657842c,<sp/>0x2d2b7569b0432d85},</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8213f56a67f6b29b,<sp/>0x9c3b29620e29fc73},</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa298f2c501f45f42,<sp/>0x8349f3ba91b47b8f},</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xcb3f2f7642717713,<sp/>0x241c70a936219a73},</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xfe0efb53d30dd4d7,<sp/>0xed238cd383aa0110},</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9ec95d1463e8a506,<sp/>0xf4363804324a40aa},</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc67bb4597ce2ce48,<sp/>0xb143c6053edcd0d5},</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xf81aa16fdc1b81da,<sp/>0xdd94b7868e94050a},</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9b10a4e5e9913128,<sp/>0xca7cf2b4191c8326},</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc1d4ce1f63f57d72,<sp/>0xfd1c2f611f63a3f0},</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xf24a01a73cf2dccf,<sp/>0xbc633b39673c8cec},</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x976e41088617ca01,<sp/>0xd5be0503e085d813},</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xbd49d14aa79dbc82,<sp/>0x4b2d8644d8a74e18},</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xec9c459d51852ba2,<sp/>0xddf8e7d60ed1219e},</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x93e1ab8252f33b45,<sp/>0xcabb90e5c942b503},</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb8da1662e7b00a17,<sp/>0x3d6a751f3b936243},</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe7109bfba19c0c9d,<sp/>0x0cc512670a783ad4},</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x906a617d450187e2,<sp/>0x27fb2b80668b24c5},</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb484f9dc9641e9da,<sp/>0xb1f9f660802dedf6},</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe1a63853bbd26451,<sp/>0x5e7873f8a0396973},</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8d07e33455637eb2,<sp/>0xdb0b487b6423e1e8},</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb049dc016abc5e5f,<sp/>0x91ce1a9a3d2cda62},</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xdc5c5301c56b75f7,<sp/>0x7641a140cc7810fb},</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x89b9b3e11b6329ba,<sp/>0xa9e904c87fcb0a9d},</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xac2820d9623bf429,<sp/>0x546345fa9fbdcd44},</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd732290fbacaf133,<sp/>0xa97c177947ad4095},</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x867f59a9d4bed6c0,<sp/>0x49ed8eabcccc485d},</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa81f301449ee8c70,<sp/>0x5c68f256bfff5a74},</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd226fc195c6a2f8c,<sp/>0x73832eec6fff3111},</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x83585d8fd9c25db7,<sp/>0xc831fd53c5ff7eab},</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa42e74f3d032f525,<sp/>0xba3e7ca8b77f5e55},</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xcd3a1230c43fb26f,<sp/>0x28ce1bd2e55f35eb},</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x80444b5e7aa7cf85,<sp/>0x7980d163cf5b81b3},</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa0555e361951c366,<sp/>0xd7e105bcc332621f},</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc86ab5c39fa63440,<sp/>0x8dd9472bf3fefaa7},</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xfa856334878fc150,<sp/>0xb14f98f6f0feb951},</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9c935e00d4b9d8d2,<sp/>0x6ed1bf9a569f33d3},</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc3b8358109e84f07,<sp/>0x0a862f80ec4700c8},</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xf4a642e14c6262c8,<sp/>0xcd27bb612758c0fa},</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x98e7e9cccfbd7dbd,<sp/>0x8038d51cb897789c},</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xbf21e44003acdd2c,<sp/>0xe0470a63e6bd56c3},</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xeeea5d5004981478,<sp/>0x1858ccfce06cac74},</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x95527a5202df0ccb,<sp/>0x0f37801e0c43ebc8},</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xbaa718e68396cffd,<sp/>0xd30560258f54e6ba},</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe950df20247c83fd,<sp/>0x47c6b82ef32a2069},</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x91d28b7416cdd27e,<sp/>0x4cdc331d57fa5441},</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb6472e511c81471d,<sp/>0xe0133fe4adf8e952},</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe3d8f9e563a198e5,<sp/>0x58180fddd97723a6},</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8e679c2f5e44ff8f,<sp/>0x570f09eaa7ea7648},</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb201833b35d63f73,<sp/>0x2cd2cc6551e513da},</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xde81e40a034bcf4f,<sp/>0xf8077f7ea65e58d1},</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8b112e86420f6191,<sp/>0xfb04afaf27faf782},</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xadd57a27d29339f6,<sp/>0x79c5db9af1f9b563},</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd94ad8b1c7380874,<sp/>0x18375281ae7822bc},</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x87cec76f1c830548,<sp/>0x8f2293910d0b15b5},</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa9c2794ae3a3c69a,<sp/>0xb2eb3875504ddb22},</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd433179d9c8cb841,<sp/>0x5fa60692a46151eb},</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x849feec281d7f328,<sp/>0xdbc7c41ba6bcd333},</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa5c7ea73224deff3,<sp/>0x12b9b522906c0800},</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xcf39e50feae16bef,<sp/>0xd768226b34870a00},</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x81842f29f2cce375,<sp/>0xe6a1158300d46640},</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa1e53af46f801c53,<sp/>0x60495ae3c1097fd0},</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xca5e89b18b602368,<sp/>0x385bb19cb14bdfc4},</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xfcf62c1dee382c42,<sp/>0x46729e03dd9ed7b5},</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9e19db92b4e31ba9,<sp/>0x6c07a2c26a8346d1},</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc5a05277621be293,<sp/>0xc7098b7305241885},</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0xf70867153aa2db38,</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xb8cbee4fc66d1ea7<sp/>}</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xff77b1fcbebcdc4f,<sp/>0x25e8e89c13bb0f7b},</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xce5d73ff402d98e3,<sp/>0xfb0a3d212dc81290},</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa6b34ad8c9dfc06f,<sp/>0xf42faa48c0ea481f},</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x86a8d39ef77164bc,<sp/>0xae5dff9c02033198},</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd98ddaee19068c76,<sp/>0x3badd624dd9b0958},</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xafbd2350644eeacf,<sp/>0xe5d1929ef90898fb},</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8df5efabc5979c8f,<sp/>0xca8d3ffa1ef463c2},</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe55990879ddcaabd,<sp/>0xcc420a6a101d0516},</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb94470938fa89bce,<sp/>0xf808e40e8d5b3e6a},</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x95a8637627989aad,<sp/>0xdde7001379a44aa9},</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xf1c90080baf72cb1,<sp/>0x5324c68b12dd6339},</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xc350000000000000,<sp/>0x0000000000000000},</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x9dc5ada82b70b59d,<sp/>0xf020000000000000},</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xfee50b7025c36a08,<sp/>0x02f236d04753d5b4},</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xcde6fd5e09abcf26,<sp/>0xed4c0226b55e6f86},</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xa6539930bf6bff45,<sp/>0x84db8346b786151c},</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x865b86925b9bc5c2,<sp/>0x0b8a2392ba45a9b2},</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xd910f7ff28069da4,<sp/>0x1b2ba1518094da04},</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xaf58416654a6babb,<sp/>0x387ac8d1970027b2},</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0x8da471a9de737e24,<sp/>0x5ceaecfed289e5d2},</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xe4d5e82392a40515,<sp/>0x0fabaf3feaa5334a},</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{0xb8da1662e7b00a17,<sp/>0x3d6a751f3b936243},</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0x95527a5202df0ccb,</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0f37801e0c43ebc8<sp/>}</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_USE_FULL_CACHE_DRAGONBOX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pow10_significands[k<sp/>-<sp/>float_info&lt;double&gt;::min_k];</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>powers_of_5_64[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0000000000000001,<sp/>0x0000000000000005,<sp/>0x0000000000000019,</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x000000000000007d,<sp/>0x0000000000000271,<sp/>0x0000000000000c35,</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0000000000003d09,<sp/>0x000000000001312d,<sp/>0x000000000005f5e1,</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x00000000001dcd65,<sp/>0x00000000009502f9,<sp/>0x0000000002e90edd,</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x000000000e8d4a51,<sp/>0x0000000048c27395,<sp/>0x000000016bcc41e9,</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x000000071afd498d,<sp/>0x0000002386f26fc1,<sp/>0x000000b1a2bc2ec5,</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x000003782dace9d9,<sp/>0x00001158e460913d,<sp/>0x000056bc75e2d631,</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0001b1ae4d6e2ef5,<sp/>0x000878678326eac9,<sp/>0x002a5a058fc295ed,</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x00d3c21bcecceda1,<sp/>0x0422ca8b0a00a425,<sp/>0x14adf4b7320334b9};</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>pow10_recovery_errors[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x50001400,<sp/>0x54044100,<sp/>0x54014555,<sp/>0x55954415,<sp/>0x54115555,<sp/>0x00000001,</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x50000000,<sp/>0x00104000,<sp/>0x54010004,<sp/>0x05004001,<sp/>0x55555544,<sp/>0x41545555,</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x54040551,<sp/>0x15445545,<sp/>0x51555514,<sp/>0x10000015,<sp/>0x00101100,<sp/>0x01100015,</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x00000000,<sp/>0x00000000,<sp/>0x00000000,<sp/>0x00000000,<sp/>0x04450514,<sp/>0x45414110,</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x55555145,<sp/>0x50544050,<sp/>0x15040155,<sp/>0x11054140,<sp/>0x50111514,<sp/>0x11451454,</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x00400541,<sp/>0x00000000,<sp/>0x55555450,<sp/>0x10056551,<sp/>0x10054011,<sp/>0x55551014,</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x69514555,<sp/>0x05151109,<sp/>0x00155555};</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"></highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compression_ratio<sp/>=<sp/>27;</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"></highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>base<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cache_index<sp/>=<sp/>(k<sp/>-<sp/>float_info&lt;double&gt;::min_k)<sp/>/<sp/>compression_ratio;</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kb<sp/>=<sp/>cache_index<sp/>*<sp/>compression_ratio<sp/>+<sp/>float_info&lt;double&gt;::min_k;</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>k<sp/>-<sp/>kb;</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>base<sp/>cache.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdetail_1_1uint128__wrapper" kindref="compound">uint128_wrapper</ref><sp/>base_cache<sp/>=<sp/>pow10_significands[cache_index];</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offset<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base_cache;</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>required<sp/>amount<sp/>of<sp/>bit-shift.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alpha<sp/>=<sp/>floor_log2_pow10(kb<sp/>+<sp/>offset)<sp/>-<sp/>floor_log2_pow10(kb)<sp/>-<sp/>offset;</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_ASSERT(alpha<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>alpha<sp/>&lt;<sp/>64,<sp/></highlight><highlight class="stringliteral">&quot;shifting<sp/>error<sp/>detected&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"></highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>to<sp/>recover<sp/>the<sp/>real<sp/>cache.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>pow5<sp/>=<sp/>powers_of_5_64[offset];</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdetail_1_1uint128__wrapper" kindref="compound">uint128_wrapper</ref><sp/>recovered_cache<sp/>=<sp/>umul128(base_cache.high(),<sp/>pow5);</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdetail_1_1uint128__wrapper" kindref="compound">uint128_wrapper</ref><sp/>middle_low<sp/>=</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>umul128(base_cache.low()<sp/>-<sp/>(kb<sp/>&lt;<sp/>0<sp/>?<sp/>1u<sp/>:<sp/>0u),<sp/>pow5);</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/>recovered_cache<sp/>+=<sp/>middle_low.high();</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"></highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>high_to_middle<sp/>=<sp/>recovered_cache.high()<sp/>&lt;&lt;<sp/>(64<sp/>-<sp/>alpha);</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>middle_to_low<sp/>=<sp/>recovered_cache.low()<sp/>&lt;&lt;<sp/>(64<sp/>-<sp/>alpha);</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"></highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/>recovered_cache<sp/>=</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdetail_1_1uint128__wrapper" kindref="compound">uint128_wrapper</ref>{(recovered_cache.low()<sp/>&gt;&gt;<sp/>alpha)<sp/>|<sp/>high_to_middle,</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((middle_low.low()<sp/>&gt;&gt;<sp/>alpha)<sp/>|<sp/>middle_to_low)};</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"></highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kb<sp/>&lt;<sp/>0)<sp/>recovered_cache<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"></highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_idx<sp/>=<sp/>(k<sp/>-<sp/>float_info&lt;double&gt;::min_k)<sp/>/<sp/>16;</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>error<sp/>=<sp/>(pow10_recovery_errors[error_idx]<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((k<sp/>-<sp/>float_info&lt;double&gt;::min_k)<sp/>%<sp/>16)<sp/>*<sp/>2)<sp/>&amp;</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x3;</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"></highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>error<sp/>back.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_ASSERT(recovered_cache.low()<sp/>+<sp/>error<sp/>&gt;=<sp/>recovered_cache.low(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{recovered_cache.high(),<sp/>recovered_cache.low()<sp/>+<sp/>error};</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>carrier_uint<sp/>compute_mul(carrier_uint<sp/>u,</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1uint128__wrapper" kindref="compound">cache_entry_type</ref>&amp;<sp/>cache)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>umul192_upper64(u,<sp/>cache);</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"></highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>compute_delta(<ref refid="structdetail_1_1uint128__wrapper" kindref="compound">cache_entry_type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>cache,</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>beta_minus_1)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cache.high()<sp/>&gt;&gt;<sp/>(64<sp/>-<sp/>1<sp/>-<sp/>beta_minus_1));</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>compute_mul_parity(carrier_uint<sp/>two_f,</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1uint128__wrapper" kindref="compound">cache_entry_type</ref>&amp;<sp/>cache,</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>beta_minus_1)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_ASSERT(beta_minus_1<sp/>&gt;=<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_ASSERT(beta_minus_1<sp/>&lt;<sp/>64,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((umul192_middle64(two_f,<sp/>cache)<sp/>&gt;&gt;<sp/>(64<sp/>-<sp/>beta_minus_1))<sp/>&amp;<sp/>1)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>carrier_uint<sp/>compute_left_endpoint_for_shorter_interval_case(</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1uint128__wrapper" kindref="compound">cache_entry_type</ref>&amp;<sp/>cache,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>beta_minus_1)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(cache.high()<sp/>-</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(cache.high()<sp/>&gt;&gt;<sp/>(float_info&lt;double&gt;::significand_bits<sp/>+<sp/>2)))<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(64<sp/>-<sp/>float_info&lt;double&gt;::significand_bits<sp/>-<sp/>1<sp/>-<sp/>beta_minus_1);</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>carrier_uint<sp/>compute_right_endpoint_for_shorter_interval_case(</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1uint128__wrapper" kindref="compound">cache_entry_type</ref>&amp;<sp/>cache,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>beta_minus_1)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(cache.high()<sp/>+</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(cache.high()<sp/>&gt;&gt;<sp/>(float_info&lt;double&gt;::significand_bits<sp/>+<sp/>1)))<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(64<sp/>-<sp/>float_info&lt;double&gt;::significand_bits<sp/>-<sp/>1<sp/>-<sp/>beta_minus_1);</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"></highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>carrier_uint<sp/>compute_round_up_for_shorter_interval_case(</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdetail_1_1uint128__wrapper" kindref="compound">cache_entry_type</ref>&amp;<sp/>cache,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>beta_minus_1)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((cache.high()<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(64<sp/>-<sp/>float_info&lt;double&gt;::significand_bits<sp/>-<sp/>2<sp/>-<sp/>beta_minus_1))<sp/>+</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1)<sp/>/</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2;</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1892"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"></highlight></codeline>
<codeline lineno="1894"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Various<sp/>integer<sp/>checks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1895"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_left_endpoint_integer_shorter_interval(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exponent)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>exponent<sp/>&gt;=</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float_info&lt;</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T&gt;::case_shorter_interval_left_endpoint_lower_threshold<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exponent<sp/>&lt;=</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float_info&lt;T&gt;::case_shorter_interval_left_endpoint_upper_threshold;</highlight></codeline>
<codeline lineno="1902"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_endpoint_integer(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>float_info&lt;T&gt;::carrier_uint<sp/>two_f,</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exponent,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minus_k)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exponent<sp/>&lt;<sp/>float_info&lt;T&gt;::case_fc_pm_half_lower_threshold)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>k<sp/>&gt;=<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exponent<sp/>&lt;=<sp/>float_info&lt;T&gt;::case_fc_pm_half_upper_threshold)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>k<sp/>&lt;<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exponent<sp/>&gt;<sp/>float_info&lt;T&gt;::divisibility_check_by_5_threshold)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>divisible_by_power_of_5(two_f,<sp/>minus_k);</highlight></codeline>
<codeline lineno="1912"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_center_integer(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>float_info&lt;T&gt;::carrier_uint<sp/>two_f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exponent,</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minus_k)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Exponent<sp/>for<sp/>5<sp/>is<sp/>negative.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exponent<sp/>&gt;<sp/>float_info&lt;T&gt;::divisibility_check_by_5_threshold)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exponent<sp/>&gt;<sp/>float_info&lt;T&gt;::case_fc_upper_threshold)</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>divisible_by_power_of_5(two_f,<sp/>minus_k);</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Both<sp/>exponents<sp/>are<sp/>nonnegative.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exponent<sp/>&gt;=<sp/>float_info&lt;T&gt;::case_fc_lower_threshold)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Exponent<sp/>for<sp/>2<sp/>is<sp/>negative.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>divisible_by_power_of_2(two_f,<sp/>minus_k<sp/>-<sp/>exponent<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1925"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"></highlight></codeline>
<codeline lineno="1927"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Remove<sp/>trailing<sp/>zeros<sp/>from<sp/>n<sp/>and<sp/>return<sp/>the<sp/>number<sp/>of<sp/>zeros<sp/>removed<sp/>(float)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1928"><highlight class="normal">FMT_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>remove_trailing_zeros(uint32_t&amp;<sp/>n)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FMT_BUILTIN_CTZ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>FMT_BUILTIN_CTZ(n);</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>ctz(n);</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&gt;<sp/>float_info&lt;float&gt;::max_trailing_zeros)</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>float_info&lt;float&gt;::max_trailing_zeros;</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"></highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>mod_inv1<sp/>=<sp/>0xcccccccd;</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>max_quotient1<sp/>=<sp/>0x33333333;</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>mod_inv2<sp/>=<sp/>0xc28f5c29;</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>max_quotient2<sp/>=<sp/>0x0a3d70a3;</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"></highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>s<sp/>&lt;<sp/>t<sp/>-<sp/>1;<sp/>s<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>*<sp/>mod_inv2<sp/>&gt;<sp/>max_quotient2)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>*=<sp/>mod_inv2;</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>&lt;<sp/>t<sp/>&amp;&amp;<sp/>n<sp/>*<sp/>mod_inv1<sp/>&lt;=<sp/>max_quotient1)<sp/>{</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>*=<sp/>mod_inv1;</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/>++s;</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/>n<sp/>&gt;&gt;=<sp/>s;</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="1953"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Removes<sp/>trailing<sp/>zeros<sp/>and<sp/>returns<sp/>the<sp/>number<sp/>of<sp/>zeros<sp/>removed<sp/>(double)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1956"><highlight class="normal">FMT_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>remove_trailing_zeros(uint64_t&amp;<sp/>n)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FMT_BUILTIN_CTZLL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>FMT_BUILTIN_CTZLL(n);</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>ctzll(n);</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&gt;<sp/>float_info&lt;double&gt;::max_trailing_zeros)</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>float_info&lt;double&gt;::max_trailing_zeros;</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Divide<sp/>by<sp/>10^8<sp/>and<sp/>reduce<sp/>to<sp/>32-bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>ret_value.significand<sp/>&lt;=<sp/>(2^64<sp/>-<sp/>1)<sp/>/<sp/>1000<sp/>&lt;<sp/>10^17,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>both<sp/>of<sp/>the<sp/>quotient<sp/>and<sp/>the<sp/>r<sp/>should<sp/>fit<sp/>in<sp/>32-bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1967"><highlight class="normal"></highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>mod_inv1<sp/>=<sp/>0xcccccccd;</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>max_quotient1<sp/>=<sp/>0x33333333;</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>mod_inv8<sp/>=<sp/>0xc767074b22e90e21;</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>max_quotient8<sp/>=<sp/>0x00002af31dc46118;</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"></highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>number<sp/>is<sp/>divisible<sp/>by<sp/>1&apos;0000&apos;0000,<sp/>work<sp/>with<sp/>the<sp/>quotient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&gt;=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>quotient_candidate<sp/>=<sp/>n<sp/>*<sp/>mod_inv8;</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"></highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(quotient_candidate<sp/>&lt;=<sp/>max_quotient8)<sp/>{</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>quotient<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(quotient_candidate<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>s<sp/>&lt;<sp/>t;<sp/>++s)<sp/>{</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(quotient<sp/>*<sp/>mod_inv1<sp/>&gt;<sp/>max_quotient1)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quotient<sp/>*=<sp/>mod_inv1;</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>quotient<sp/>&gt;&gt;=<sp/>(s<sp/>-<sp/>8);</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>quotient;</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"></highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>work<sp/>with<sp/>the<sp/>remainder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>quotient<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(n<sp/>/<sp/>100000000);</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>remainder<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(n<sp/>-<sp/>100000000<sp/>*<sp/>quotient);</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"></highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>0<sp/>||<sp/>remainder<sp/>*<sp/>mod_inv1<sp/>&gt;<sp/>max_quotient1)<sp/>{</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/>remainder<sp/>*=<sp/>mod_inv1;</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"></highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>1<sp/>||<sp/>remainder<sp/>*<sp/>mod_inv1<sp/>&gt;<sp/>max_quotient1)<sp/>{</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(remainder<sp/>&gt;&gt;<sp/>1)<sp/>+<sp/>quotient<sp/>*<sp/>10000000ull;</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/>remainder<sp/>*=<sp/>mod_inv1;</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"></highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>2<sp/>||<sp/>remainder<sp/>*<sp/>mod_inv1<sp/>&gt;<sp/>max_quotient1)<sp/>{</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(remainder<sp/>&gt;&gt;<sp/>2)<sp/>+<sp/>quotient<sp/>*<sp/>1000000ull;</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/>remainder<sp/>*=<sp/>mod_inv1;</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"></highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>3<sp/>||<sp/>remainder<sp/>*<sp/>mod_inv1<sp/>&gt;<sp/>max_quotient1)<sp/>{</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(remainder<sp/>&gt;&gt;<sp/>3)<sp/>+<sp/>quotient<sp/>*<sp/>100000ull;</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>3;</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/>remainder<sp/>*=<sp/>mod_inv1;</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"></highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>4<sp/>||<sp/>remainder<sp/>*<sp/>mod_inv1<sp/>&gt;<sp/>max_quotient1)<sp/>{</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(remainder<sp/>&gt;&gt;<sp/>4)<sp/>+<sp/>quotient<sp/>*<sp/>10000ull;</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4;</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/>remainder<sp/>*=<sp/>mod_inv1;</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"></highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>5<sp/>||<sp/>remainder<sp/>*<sp/>mod_inv1<sp/>&gt;<sp/>max_quotient1)<sp/>{</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(remainder<sp/>&gt;&gt;<sp/>5)<sp/>+<sp/>quotient<sp/>*<sp/>1000ull;</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>5;</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/>remainder<sp/>*=<sp/>mod_inv1;</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"></highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>6<sp/>||<sp/>remainder<sp/>*<sp/>mod_inv1<sp/>&gt;<sp/>max_quotient1)<sp/>{</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(remainder<sp/>&gt;&gt;<sp/>6)<sp/>+<sp/>quotient<sp/>*<sp/>100ull;</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>6;</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/>remainder<sp/>*=<sp/>mod_inv1;</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"></highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>(remainder<sp/>&gt;&gt;<sp/>7)<sp/>+<sp/>quotient<sp/>*<sp/>10ull;</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>7;</highlight></codeline>
<codeline lineno="2038"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"></highlight></codeline>
<codeline lineno="2040"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>main<sp/>algorithm<sp/>for<sp/>shorter<sp/>interval<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2041"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2042"><highlight class="normal">FMT_INLINE<sp/>decimal_fp&lt;T&gt;<sp/>shorter_interval_case(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exponent)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/>decimal_fp&lt;T&gt;<sp/>ret_value;</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>k<sp/>and<sp/>beta</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minus_k<sp/>=<sp/>floor_log10_pow2_minus_log10_4_over_3(exponent);</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>beta_minus_1<sp/>=<sp/>exponent<sp/>+<sp/>floor_log2_pow10(-minus_k);</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"></highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>xi<sp/>and<sp/>zi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>cache_entry_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>cache_accessor&lt;T&gt;::cache_entry_type;</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cache_entry_type<sp/>cache<sp/>=<sp/>cache_accessor&lt;T&gt;::get_cached_power(-minus_k);</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"></highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>xi<sp/>=<sp/>cache_accessor&lt;T&gt;::compute_left_endpoint_for_shorter_interval_case(</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cache,<sp/>beta_minus_1);</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>zi<sp/>=<sp/>cache_accessor&lt;T&gt;::compute_right_endpoint_for_shorter_interval_case(</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cache,<sp/>beta_minus_1);</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"></highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>left<sp/>endpoint<sp/>is<sp/>not<sp/>an<sp/>integer,<sp/>increase<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_left_endpoint_integer_shorter_interval&lt;T&gt;(exponent))<sp/>++xi;</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"></highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>bigger<sp/>divisor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/>ret_value.significand<sp/>=<sp/>zi<sp/>/<sp/>10;</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"></highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>succeed,<sp/>remove<sp/>trailing<sp/>zeros<sp/>if<sp/>necessary<sp/>and<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret_value.significand<sp/>*<sp/>10<sp/>&gt;=<sp/>xi)<sp/>{</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/>ret_value.exponent<sp/>=<sp/>minus_k<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/>ret_value.exponent<sp/>+=<sp/>remove_trailing_zeros(ret_value.significand);</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret_value;</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"></highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>compute<sp/>the<sp/>round-up<sp/>of<sp/>y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/>ret_value.significand<sp/>=</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cache_accessor&lt;T&gt;::compute_round_up_for_shorter_interval_case(</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache,<sp/>beta_minus_1);</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/>ret_value.exponent<sp/>=<sp/>minus_k;</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"></highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>tie<sp/>occurs,<sp/>choose<sp/>one<sp/>of<sp/>them<sp/>according<sp/>to<sp/>the<sp/>rule</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exponent<sp/>&gt;=<sp/>float_info&lt;T&gt;::shorter_interval_tie_lower_threshold<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exponent<sp/>&lt;=<sp/>float_info&lt;T&gt;::shorter_interval_tie_upper_threshold)<sp/>{</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/>ret_value.significand<sp/>=<sp/>ret_value.significand<sp/>%<sp/>2<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>ret_value.significand</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>ret_value.significand<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret_value.significand<sp/>&lt;<sp/>xi)<sp/>{</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/>++ret_value.significand;</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret_value;</highlight></codeline>
<codeline lineno="2086"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"></highlight></codeline>
<codeline lineno="2088"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>decimal_fp&lt;T&gt;<sp/>to_decimal(T<sp/>x)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Step<sp/>1:<sp/>integer<sp/>promotion<sp/>&amp;<sp/>Schubfach<sp/>multiplier<sp/>calculation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2090"><highlight class="normal"></highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>carrier_uint<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>float_info&lt;T&gt;::carrier_uint;</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>cache_entry_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>cache_accessor&lt;T&gt;::cache_entry_type;</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>br<sp/>=<sp/>bit_cast&lt;carrier_uint&gt;(x);</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"></highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>significand<sp/>bits<sp/>and<sp/>exponent<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>carrier_uint<sp/>significand_mask<sp/>=</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">carrier_uint</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>&lt;&lt;<sp/>float_info&lt;T&gt;::significand_bits)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/>carrier_uint<sp/>significand<sp/>=<sp/>(br<sp/>&amp;<sp/>significand_mask);</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exponent<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((br<sp/>&amp;<sp/>exponent_mask&lt;T&gt;())<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float_info&lt;T&gt;::significand_bits);</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"></highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exponent<sp/>!=<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>normal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/>exponent<sp/>+=<sp/>float_info&lt;T&gt;::exponent_bias<sp/>-<sp/>float_info&lt;T&gt;::significand_bits;</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Shorter<sp/>interval<sp/>case;<sp/>proceed<sp/>like<sp/>Schubfach.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(significand<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shorter_interval_case&lt;T&gt;(exponent);</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/>significand<sp/>|=</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">carrier_uint</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>&lt;&lt;<sp/>float_info&lt;T&gt;::significand_bits);</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Subnormal<sp/>case;<sp/>the<sp/>interval<sp/>is<sp/>always<sp/>regular.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(significand<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{0,<sp/>0};</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/>exponent<sp/>=<sp/>float_info&lt;T&gt;::min_exponent<sp/>-<sp/>float_info&lt;T&gt;::significand_bits;</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"></highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>include_left_endpoint<sp/>=<sp/>(significand<sp/>%<sp/>2<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>include_right_endpoint<sp/>=<sp/>include_left_endpoint;</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"></highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>k<sp/>and<sp/>beta.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minus_k<sp/>=<sp/>floor_log10_pow2(exponent)<sp/>-<sp/>float_info&lt;T&gt;::kappa;</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cache_entry_type<sp/>cache<sp/>=<sp/>cache_accessor&lt;T&gt;::get_cached_power(-minus_k);</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>beta_minus_1<sp/>=<sp/>exponent<sp/>+<sp/>floor_log2_pow10(-minus_k);</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"></highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>zi<sp/>and<sp/>deltai</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>10^kappa<sp/>&lt;=<sp/>deltai<sp/>&lt;<sp/>10^(kappa<sp/>+<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>deltai<sp/>=<sp/>cache_accessor&lt;T&gt;::compute_delta(cache,<sp/>beta_minus_1);</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>carrier_uint<sp/>two_fc<sp/>=<sp/>significand<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>carrier_uint<sp/>two_fr<sp/>=<sp/>two_fc<sp/>|<sp/>1;</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>carrier_uint<sp/>zi<sp/>=</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cache_accessor&lt;T&gt;::compute_mul(two_fr<sp/>&lt;&lt;<sp/>beta_minus_1,<sp/>cache);</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Step<sp/>2:<sp/>Try<sp/>larger<sp/>divisor;<sp/>remove<sp/>trailing<sp/>zeros<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2133"><highlight class="normal"></highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>an<sp/>upper<sp/>bound<sp/>on<sp/>zi,<sp/>we<sp/>might<sp/>be<sp/>able<sp/>to<sp/>optimize<sp/>the<sp/>division</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>better<sp/>than<sp/>the<sp/>compiler;<sp/>we<sp/>are<sp/>computing<sp/>zi<sp/>/<sp/>big_divisor<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/>decimal_fp&lt;T&gt;<sp/>ret_value;</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/>ret_value.significand<sp/>=<sp/>divide_by_10_to_kappa_plus_1(zi);</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/>uint32_t<sp/>r<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(zi<sp/>-<sp/>float_info&lt;T&gt;::big_divisor<sp/>*</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret_value.significand);</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"></highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>&gt;<sp/>deltai)<sp/>{</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>small_divisor_case_label;</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>&lt;<sp/>deltai)<sp/>{</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Exclude<sp/>the<sp/>right<sp/>endpoint<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>!include_right_endpoint<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_endpoint_integer&lt;T&gt;(two_fr,<sp/>exponent,<sp/>minus_k))<sp/>{</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--ret_value.significand;</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>float_info&lt;T&gt;::big_divisor;</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>small_divisor_case_label;</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>r<sp/>==<sp/>deltai;<sp/>compare<sp/>fractional<sp/>parts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>conditions<sp/>in<sp/>the<sp/>order<sp/>different<sp/>from<sp/>the<sp/>paper</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>take<sp/>advantage<sp/>of<sp/>short-circuiting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>carrier_uint<sp/>two_fl<sp/>=<sp/>two_fc<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((!include_left_endpoint<sp/>||</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!is_endpoint_integer&lt;T&gt;(two_fl,<sp/>exponent,<sp/>minus_k))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!cache_accessor&lt;T&gt;::compute_mul_parity(two_fl,<sp/>cache,<sp/>beta_minus_1))<sp/>{</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>small_divisor_case_label;</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/>ret_value.exponent<sp/>=<sp/>minus_k<sp/>+<sp/>float_info&lt;T&gt;::kappa<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"></highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>may<sp/>need<sp/>to<sp/>remove<sp/>trailing<sp/>zeros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/>ret_value.exponent<sp/>+=<sp/>remove_trailing_zeros(ret_value.significand);</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret_value;</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"></highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Step<sp/>3:<sp/>Find<sp/>the<sp/>significand<sp/>with<sp/>the<sp/>smaller<sp/>divisor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2169"><highlight class="normal"></highlight></codeline>
<codeline lineno="2170"><highlight class="normal">small_divisor_case_label:</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/>ret_value.significand<sp/>*=<sp/>10;</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/>ret_value.exponent<sp/>=<sp/>minus_k<sp/>+<sp/>float_info&lt;T&gt;::kappa;</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"></highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="structmask" kindref="compound">mask</ref><sp/>=<sp/>(1u<sp/>&lt;&lt;<sp/>float_info&lt;T&gt;::kappa)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dist<sp/>=<sp/>r<sp/>-<sp/>(deltai<sp/>/<sp/>2)<sp/>+<sp/>(float_info&lt;T&gt;::small_divisor<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"></highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>dist<sp/>divisible<sp/>by<sp/>2^kappa?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((dist<sp/>&amp;<sp/><ref refid="structmask" kindref="compound">mask</ref>)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>approx_y_parity<sp/>=</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((dist<sp/>^<sp/>(float_info&lt;T&gt;::small_divisor<sp/>/<sp/>2))<sp/>&amp;<sp/>1)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/>dist<sp/>&gt;&gt;=<sp/>float_info&lt;T&gt;::kappa;</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"></highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>dist<sp/>divisible<sp/>by<sp/>5^kappa?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(check_divisibility_and_divide_by_pow5&lt;float_info&lt;T&gt;::kappa&gt;(dist))<sp/>{</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret_value.significand<sp/>+=<sp/>dist;</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"></highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>z^(f)<sp/>&gt;=<sp/>epsilon^(f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>either<sp/>yi<sp/>==<sp/>zi<sp/>-<sp/>epsiloni<sp/>or<sp/>yi<sp/>==<sp/>(zi<sp/>-<sp/>epsiloni)<sp/>-<sp/>1,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>where<sp/>yi<sp/>==<sp/>zi<sp/>-<sp/>epsiloni<sp/>if<sp/>and<sp/>only<sp/>if<sp/>z^(f)<sp/>&gt;=<sp/>epsilon^(f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>there<sp/>are<sp/>only<sp/>2<sp/>possibilities,<sp/>we<sp/>only<sp/>need<sp/>to<sp/>care<sp/>about<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parity.<sp/>Also,<sp/>zi<sp/>and<sp/>r<sp/>should<sp/>have<sp/>the<sp/>same<sp/>parity<sp/>since<sp/>the<sp/>divisor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>an<sp/>even<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cache_accessor&lt;T&gt;::compute_mul_parity(two_fc,<sp/>cache,<sp/>beta_minus_1)<sp/>!=</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>approx_y_parity)<sp/>{</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--ret_value.significand;</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>z^(f)<sp/>&gt;=<sp/>epsilon^(f),<sp/>we<sp/>might<sp/>have<sp/>a<sp/>tie</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>z^(f)<sp/>==<sp/>epsilon^(f),<sp/>or<sp/>equivalently,<sp/>when<sp/>y<sp/>is<sp/>an<sp/>integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_center_integer&lt;T&gt;(two_fc,<sp/>exponent,<sp/>minus_k))<sp/>{</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret_value.significand<sp/>=<sp/>ret_value.significand<sp/>%<sp/>2<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>ret_value.significand</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>ret_value.significand<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>dist<sp/>not<sp/>divisible<sp/>by<sp/>5^kappa?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret_value.significand<sp/>+=<sp/>dist;</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>dist<sp/>not<sp/>divisible<sp/>by<sp/>2^kappa?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>we<sp/>know<sp/>dist<sp/>is<sp/>small,<sp/>we<sp/>might<sp/>be<sp/>able<sp/>to<sp/>optimize<sp/>the<sp/>division</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>better<sp/>than<sp/>the<sp/>compiler;<sp/>we<sp/>are<sp/>computing<sp/>dist<sp/>/<sp/>small_divisor<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/>ret_value.significand<sp/>+=</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>small_division_by_pow10&lt;float_info&lt;T&gt;::kappa&gt;(dist);</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret_value;</highlight></codeline>
<codeline lineno="2219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2220"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>dragonbox</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2221"><highlight class="normal"></highlight></codeline>
<codeline lineno="2222"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>a<sp/>floating-point<sp/>number<sp/>using<sp/>a<sp/>variation<sp/>of<sp/>the<sp/>Fixed-Precision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2223"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Positive<sp/>Floating-Point<sp/>Printout<sp/>((FPP)^2)<sp/>algorithm<sp/>by<sp/>Steele<sp/>&amp;<sp/>White:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2224"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://fmt.dev/papers/p372-steele.pdf.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal">FMT_CONSTEXPR20<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>format_dragon(fp<sp/><ref refid="classvalue" kindref="compound">value</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_predecessor_closer,</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_digits,<sp/><ref refid="classbuffer" kindref="compound">buffer&lt;char&gt;</ref>&amp;<sp/>buf,</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>exp10)<sp/>{</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/>bigint<sp/>numerator;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>*<sp/>R<sp/>in<sp/>(FPP)^2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/>bigint<sp/>denominator;<sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>*<sp/>S<sp/>in<sp/>(FPP)^2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>lower<sp/>and<sp/>upper<sp/>are<sp/>differences<sp/>between<sp/>value<sp/>and<sp/>corresponding<sp/>boundaries.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/>bigint<sp/>lower;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(M^-<sp/>in<sp/>(FPP)^2).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/>bigint<sp/>upper_store;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>upper&apos;s<sp/>value<sp/>if<sp/>different<sp/>from<sp/>lower.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/>bigint*<sp/>upper<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>(M^+<sp/>in<sp/>(FPP)^2).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Shift<sp/>numerator<sp/>and<sp/>denominator<sp/>by<sp/>an<sp/>extra<sp/>bit<sp/>or<sp/>two<sp/>(if<sp/>lower<sp/>boundary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>closer)<sp/>to<sp/>make<sp/>lower<sp/>and<sp/>upper<sp/>integers.<sp/>This<sp/>eliminates<sp/>multiplication</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>by<sp/>2<sp/>during<sp/>later<sp/>computations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift<sp/>=<sp/>is_predecessor_closer<sp/>?<sp/>2<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/>uint64_t<sp/>significand<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>.f<sp/>&lt;&lt;<sp/>shift;</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classvalue" kindref="compound">value</ref>.e<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/>numerator.assign(significand);</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/>numerator<sp/>&lt;&lt;=<sp/><ref refid="classvalue" kindref="compound">value</ref>.e;</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/>lower.assign(1);</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/>lower<sp/>&lt;&lt;=<sp/><ref refid="classvalue" kindref="compound">value</ref>.e;</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shift<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>upper_store.assign(1);</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>upper_store<sp/>&lt;&lt;=<sp/><ref refid="classvalue" kindref="compound">value</ref>.e<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>upper<sp/>=<sp/>&amp;upper_store;</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/>denominator.assign_pow10(exp10);</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/>denominator<sp/>&lt;&lt;=<sp/>shift;</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp10<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/>numerator.assign_pow10(-exp10);</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/>lower.assign(numerator);</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shift<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>upper_store.assign(numerator);</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>upper_store<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>upper<sp/>=<sp/>&amp;upper_store;</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/>numerator<sp/>*=<sp/>significand;</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/>denominator.assign(1);</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/>denominator<sp/>&lt;&lt;=<sp/>shift<sp/>-<sp/><ref refid="classvalue" kindref="compound">value</ref>.e;</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/>numerator.assign(significand);</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/>denominator.assign_pow10(exp10);</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/>denominator<sp/>&lt;&lt;=<sp/>shift<sp/>-<sp/><ref refid="classvalue" kindref="compound">value</ref>.e;</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/>lower.assign(1);</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shift<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>upper_store.assign(1ULL<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>upper<sp/>=<sp/>&amp;upper_store;</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Invariant:<sp/>value<sp/>==<sp/>(numerator<sp/>/<sp/>denominator)<sp/>*<sp/>pow(10,<sp/>exp10).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_digits<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>the<sp/>shortest<sp/>representation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!upper)<sp/>upper<sp/>=<sp/>&amp;lower;</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>even<sp/>=<sp/>(<ref refid="classvalue" kindref="compound">value</ref>.f<sp/>&amp;<sp/>1)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/>num_digits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data<sp/>=<sp/>buf.data();</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>digit<sp/>=<sp/>numerator.divmod_assign(denominator);</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>low<sp/>=<sp/>compare(numerator,<sp/>lower)<sp/>-<sp/>even<sp/>&lt;<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>numerator<sp/>&lt;[=]<sp/>lower.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>numerator<sp/>+<sp/>upper<sp/>&gt;[=]<sp/>pow10:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>high<sp/>=<sp/>add_compare(numerator,<sp/>*upper,<sp/>denominator)<sp/>+<sp/>even<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data[num_digits++]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>+<sp/>digit);</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(low<sp/>||<sp/>high)<sp/>{</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!low)<sp/>{</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++data[num_digits<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(high)<sp/>{</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>add_compare(numerator,<sp/>numerator,<sp/>denominator);</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Round<sp/>half<sp/>to<sp/>even.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structresult" kindref="compound">result</ref><sp/>&gt;<sp/>0<sp/>||<sp/>(<ref refid="structresult" kindref="compound">result</ref><sp/>==<sp/>0<sp/>&amp;&amp;<sp/>(digit<sp/>%<sp/>2)<sp/>!=<sp/>0))</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++data[num_digits<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf.try_resize(to_unsigned(num_digits));</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp10<sp/>-=<sp/>num_digits<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numerator<sp/>*=<sp/>10;</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lower<sp/>*=<sp/>10;</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(upper<sp/>!=<sp/>&amp;lower)<sp/>*upper<sp/>*=<sp/>10;</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>the<sp/>given<sp/>number<sp/>of<sp/>digits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/>exp10<sp/>-=<sp/>num_digits<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_digits<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/>denominator<sp/>*=<sp/>10;</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>digit<sp/>=<sp/>add_compare(numerator,<sp/>numerator,<sp/>denominator)<sp/>&gt;<sp/>0<sp/>?<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/>buf.push_back(digit);</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/>buf.try_resize(to_unsigned(num_digits));</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_digits<sp/>-<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>digit<sp/>=<sp/>numerator.divmod_assign(denominator);</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[i]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>+<sp/>digit);</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/>numerator<sp/>*=<sp/>10;</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>digit<sp/>=<sp/>numerator.divmod_assign(denominator);</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>add_compare(numerator,<sp/>numerator,<sp/>denominator);</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structresult" kindref="compound">result</ref><sp/>&gt;<sp/>0<sp/>||<sp/>(<ref refid="structresult" kindref="compound">result</ref><sp/>==<sp/>0<sp/>&amp;&amp;<sp/>(digit<sp/>%<sp/>2)<sp/>!=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(digit<sp/>==<sp/>9)<sp/>{</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>overflow<sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>+<sp/>10;</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf[num_digits<sp/>-<sp/>1]<sp/>=<sp/>overflow;</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Propagate<sp/>the<sp/>carry.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>num_digits<sp/>-<sp/>1;<sp/>i<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>buf[i]<sp/>==<sp/>overflow;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf[i]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++buf[i<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buf[0]<sp/>==<sp/>overflow)<sp/>{</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++exp10;</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/>++digit;</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/>buf[num_digits<sp/>-<sp/>1]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>+<sp/>digit);</highlight></codeline>
<codeline lineno="2337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"></highlight></codeline>
<codeline lineno="2339"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Float&gt;</highlight></codeline>
<codeline lineno="2340"><highlight class="normal">FMT_HEADER_ONLY_CONSTEXPR20<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>format_float(Float<sp/><ref refid="classvalue" kindref="compound">value</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision,</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfloat__specs" kindref="compound">float_specs</ref><sp/>specs,</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer&lt;char&gt;</ref>&amp;<sp/>buf)<sp/>{</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>float<sp/>is<sp/>passed<sp/>as<sp/>double<sp/>to<sp/>reduce<sp/>the<sp/>number<sp/>of<sp/>instantiations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(!std::is_same&lt;Float,<sp/>float&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/>FMT_ASSERT(<ref refid="classvalue" kindref="compound">value</ref><sp/>&gt;=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;value<sp/>is<sp/>negative&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"></highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fixed<sp/>=<sp/>specs.format<sp/>==<sp/>float_format::fixed;</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classvalue" kindref="compound">value</ref><sp/>&lt;=<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;=<sp/>instead<sp/>of<sp/>==<sp/>to<sp/>silence<sp/>a<sp/>warning.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(precision<sp/>&lt;=<sp/>0<sp/>||<sp/>!fixed)<sp/>{</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf.push_back(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/>buf.try_resize(to_unsigned(precision));</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/>fill_n(buf.data(),<sp/>precision,<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-precision;</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"></highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs.fallback)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>snprintf_float(<ref refid="classvalue" kindref="compound">value</ref>,<sp/>precision,<sp/>specs,<sp/>buf);</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"></highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_constant_evaluated()<sp/>&amp;&amp;<sp/>precision<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>Dragonbox<sp/>for<sp/>the<sp/>shortest<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs.binary32)<sp/>{</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dec<sp/>=<sp/>dragonbox::to_decimal(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classvalue" kindref="compound">value</ref>));</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>write&lt;char&gt;(buffer_appender&lt;char&gt;(buf),<sp/>dec.significand);</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dec.exponent;</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dec<sp/>=<sp/>dragonbox::to_decimal(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classvalue" kindref="compound">value</ref>));</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/>write&lt;char&gt;(buffer_appender&lt;char&gt;(buf),<sp/>dec.significand);</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dec.exponent;</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"></highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__core__func__exponential_1gaf6342f49d902286a599ceb86036236ce" kindref="member">exp</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_dragon<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_fast_float&lt;Float&gt;())<sp/>{</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>Grisu<sp/>+<sp/>Dragon4<sp/>for<sp/>the<sp/>given<sp/>precision:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>https://www.cs.tufts.edu/~nr/cs257/archive/florian-loitsch/printf.pdf.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_exp<sp/>=<sp/>-60;<sp/><sp/></highlight><highlight class="comment">//<sp/>alpha<sp/>in<sp/>Grisu.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cached_exp10<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>K<sp/>in<sp/>Grisu.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/>fp<sp/>normalized<sp/>=<sp/>normalize(fp(<ref refid="classvalue" kindref="compound">value</ref>));</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cached_pow<sp/>=<sp/>get_cached_power(</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_exp<sp/>-<sp/>(normalized.e<sp/>+<sp/>fp::num_significand_bits),<sp/>cached_exp10);</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/>normalized<sp/>=<sp/>normalized<sp/>*<sp/>cached_pow;</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/>gen_digits_handler<sp/>handler{buf.data(),<sp/>0,<sp/>precision,<sp/>-cached_exp10,<sp/>fixed};</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(grisu_gen_digits(normalized,<sp/>1,<sp/>exp,<sp/>handler)<sp/>!=<sp/>digits::error<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!is_constant_evaluated())<sp/>{</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__core__func__exponential_1gaf6342f49d902286a599ceb86036236ce" kindref="member">exp</ref><sp/>+=<sp/>handler.exp10;</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf.try_resize(to_unsigned(handler.size));</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>use_dragon<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__core__func__exponential_1gaf6342f49d902286a599ceb86036236ce" kindref="member">exp</ref><sp/>+=<sp/>handler.size<sp/>-<sp/>cached_exp10<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>precision<sp/>=<sp/>handler.precision;</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(use_dragon)<sp/>{</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>fp();</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_predecessor_closer<sp/>=</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specs.binary32<sp/>?<sp/>f.assign(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classvalue" kindref="compound">value</ref>))<sp/>:<sp/>f.assign(<ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Limit<sp/>precision<sp/>to<sp/>the<sp/>maximum<sp/>possible<sp/>number<sp/>of<sp/>significant<sp/>digits<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>IEEE754<sp/>double<sp/>because<sp/>we<sp/>don&apos;t<sp/>need<sp/>to<sp/>generate<sp/>zeros.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_double_digits<sp/>=<sp/>767;</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(precision<sp/>&gt;<sp/>max_double_digits)<sp/>precision<sp/>=<sp/>max_double_digits;</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/>format_dragon(f,<sp/>is_predecessor_closer,<sp/>precision,<sp/>buf,<sp/>exp);</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fixed<sp/>&amp;&amp;<sp/>!specs.showpoint)<sp/>{</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>trailing<sp/>zeros.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>num_digits<sp/>=<sp/>buf.size();</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(num_digits<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>buf[num_digits<sp/>-<sp/>1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--num_digits;</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++<ref refid="group__core__func__exponential_1gaf6342f49d902286a599ceb86036236ce" kindref="member">exp</ref>;</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/>buf.try_resize(num_digits);</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__core__func__exponential_1gaf6342f49d902286a599ceb86036236ce" kindref="member">exp</ref>;</highlight></codeline>
<codeline lineno="2414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"></highlight></codeline>
<codeline lineno="2416"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>snprintf_float(T<sp/><ref refid="classvalue" kindref="compound">value</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision,<sp/><ref refid="structfloat__specs" kindref="compound">float_specs</ref><sp/>specs,</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer&lt;char&gt;</ref>&amp;<sp/>buf)<sp/>{</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Buffer<sp/>capacity<sp/>must<sp/>be<sp/>non-zero,<sp/>otherwise<sp/>MSVC&apos;s<sp/>vsnprintf_s<sp/>will<sp/>fail.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/>FMT_ASSERT(buf.capacity()<sp/>&gt;<sp/>buf.size(),<sp/></highlight><highlight class="stringliteral">&quot;empty<sp/>buffer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(!std::is_same&lt;T,<sp/>float&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Subtract<sp/>1<sp/>to<sp/>account<sp/>for<sp/>the<sp/>difference<sp/>in<sp/>precision<sp/>since<sp/>we<sp/>use<sp/>%e<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>both<sp/>general<sp/>and<sp/>exponent<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs.format<sp/>==<sp/>float_format::general<sp/>||</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>specs.format<sp/>==<sp/>float_format::exp)</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/>precision<sp/>=<sp/>(precision<sp/>&gt;=<sp/>0<sp/>?<sp/>precision<sp/>:<sp/>6)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"></highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Build<sp/>the<sp/>format<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>max_format_size<sp/>=<sp/>7<sp/>};<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>longest<sp/>format<sp/>is<sp/>&quot;%#.*Le&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>format[max_format_size];</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>format_ptr<sp/>=<sp/>format;</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/>*format_ptr++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs.showpoint<sp/>&amp;&amp;<sp/>specs.format<sp/>==<sp/>float_format::hex)<sp/>*format_ptr++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(precision<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/>*format_ptr++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/>*format_ptr++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_same&lt;T,<sp/>long<sp/>double&gt;())<sp/>*format_ptr++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;L&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/>*format_ptr++<sp/>=<sp/>specs.format<sp/>!=<sp/>float_format::hex</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(specs.format<sp/>==<sp/>float_format::fixed<sp/>?<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(specs.upper<sp/>?<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/>*format_ptr<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"></highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Format<sp/>using<sp/>snprintf.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>buf.size();</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>begin<sp/>=<sp/>buf.data()<sp/>+<sp/>offset;</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>capacity<sp/>=<sp/>buf.capacity()<sp/>-<sp/>offset;</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FMT_FUZZ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(precision<sp/>&gt;<sp/>100000)</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;fuzz<sp/>mode<sp/>-<sp/>avoid<sp/>large<sp/>allocation<sp/>inside<sp/>snprintf&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Suppress<sp/>the<sp/>warning<sp/>about<sp/>a<sp/>nonliteral<sp/>format<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cannot<sp/>use<sp/>auto<sp/>because<sp/>of<sp/>a<sp/>bug<sp/>in<sp/>MinGW<sp/>(#1532).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>(*snprintf_ptr)(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/>size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/>...)<sp/>=<sp/>FMT_SNPRINTF;</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>precision<sp/>&gt;=<sp/>0</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>snprintf_ptr(begin,<sp/>capacity,<sp/>format,<sp/>precision,<sp/><ref refid="classvalue" kindref="compound">value</ref>)</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>snprintf_ptr(begin,<sp/>capacity,<sp/>format,<sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structresult" kindref="compound">result</ref><sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>buffer<sp/>will<sp/>grow<sp/>exponentially.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf.try_reserve(buf.capacity()<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>to_unsigned(<ref refid="structresult" kindref="compound">result</ref>);</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Size<sp/>equal<sp/>to<sp/>capacity<sp/>means<sp/>that<sp/>the<sp/>last<sp/>character<sp/>was<sp/>truncated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&gt;=<sp/>capacity)<sp/>{</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf.try_reserve(size<sp/>+<sp/>offset<sp/>+<sp/>1);<sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>1<sp/>for<sp/>the<sp/>terminating<sp/>&apos;\0&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>is_digit<sp/>=<sp/>[](</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">;<sp/>};</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs.format<sp/>==<sp/>float_format::fixed)<sp/>{</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(precision<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf.try_resize(size);</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>and<sp/>remove<sp/>the<sp/>decimal<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>begin<sp/>+<sp/>size,<sp/>p<sp/>=<sp/>end;</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--p;</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(is_digit(*p));</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fraction_size<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(end<sp/>-<sp/>p<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::memmove(p,<sp/>p<sp/>+<sp/>1,<sp/>to_unsigned(fraction_size));</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf.try_resize(size<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-fraction_size;</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs.format<sp/>==<sp/>float_format::hex)<sp/>{</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buf.try_resize(size<sp/>+<sp/>offset);</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>and<sp/>parse<sp/>the<sp/>exponent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>begin<sp/>+<sp/>size,<sp/>exp_pos<sp/>=<sp/>end;</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--exp_pos;</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*exp_pos<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="group__core__func__common_1gaf749e7f029eb88580a45493e41002629" kindref="member">sign</ref><sp/>=<sp/>exp_pos[1];</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_ASSERT(<ref refid="group__core__func__common_1gaf749e7f029eb88580a45493e41002629" kindref="member">sign</ref><sp/>==<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal"><sp/>||<sp/><ref refid="group__core__func__common_1gaf749e7f029eb88580a45493e41002629" kindref="member">sign</ref><sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__core__func__exponential_1gaf6342f49d902286a599ceb86036236ce" kindref="member">exp</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>exp_pos<sp/>+<sp/>2;<sp/><sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>&apos;e&apos;<sp/>and<sp/>sign.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ASSERT(is_digit(*p),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__core__func__exponential_1gaf6342f49d902286a599ceb86036236ce" kindref="member">exp</ref><sp/>=<sp/><ref refid="group__core__func__exponential_1gaf6342f49d902286a599ceb86036236ce" kindref="member">exp</ref><sp/>*<sp/>10<sp/>+<sp/>(*p++<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p<sp/>!=<sp/>end);</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__core__func__common_1gaf749e7f029eb88580a45493e41002629" kindref="member">sign</ref><sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/><ref refid="group__core__func__exponential_1gaf6342f49d902286a599ceb86036236ce" kindref="member">exp</ref><sp/>=<sp/>-<ref refid="group__core__func__exponential_1gaf6342f49d902286a599ceb86036236ce" kindref="member">exp</ref>;</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fraction_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp_pos<sp/>!=<sp/>begin<sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>trailing<sp/>zeros.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fraction_end<sp/>=<sp/>exp_pos<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*fraction_end<sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>--fraction_end;</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>fractional<sp/>part<sp/>left<sp/>to<sp/>get<sp/>rid<sp/>of<sp/>the<sp/>decimal<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fraction_size<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fraction_end<sp/>-<sp/>begin<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::memmove(begin<sp/>+<sp/>1,<sp/>begin<sp/>+<sp/>2,<sp/>to_unsigned(fraction_size));</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/>buf.try_resize(to_unsigned(fraction_size)<sp/>+<sp/>offset<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__core__func__exponential_1gaf6342f49d902286a599ceb86036236ce" kindref="member">exp</ref><sp/>-<sp/>fraction_size;</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2518"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2519"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2520"><highlight class="normal"></highlight></codeline>
<codeline lineno="2521" refid="structformatter_3_01detail_1_1bigint_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structformatter" kindref="compound">formatter</ref>&lt;detail::bigint&gt;<sp/>{</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>format_parse_context::iterator<sp/>parse(</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbasic__format__parse__context" kindref="compound">format_parse_context</ref>&amp;<sp/>ctx)<sp/>{</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ctx.begin();</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"></highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/>format_context::iterator<sp/>format(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdetail_1_1bigint" kindref="compound">detail::bigint</ref>&amp;<sp/>n,</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbasic__format__context" kindref="compound">format_context</ref>&amp;<sp/>ctx)<sp/>{</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out<sp/>=<sp/>ctx.out();</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>n.bigits_.size();<sp/>i<sp/>&gt;<sp/>0;<sp/>--i)<sp/>{</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>=<sp/>n.bigits_[i<sp/>-<sp/>1u];</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)<sp/>{</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>format_to(out,<sp/>FMT_STRING(</highlight><highlight class="stringliteral">&quot;{:x}&quot;</highlight><highlight class="normal">),<sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>format_to(out,<sp/>FMT_STRING(</highlight><highlight class="stringliteral">&quot;{:08x}&quot;</highlight><highlight class="normal">),<sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n.exp_<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>format_to(out,<sp/>FMT_STRING(</highlight><highlight class="stringliteral">&quot;p{}&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n.exp_<sp/>*<sp/>detail::bigint::bigit_bits);</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2545"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"></highlight></codeline>
<codeline lineno="2547"><highlight class="normal">FMT_FUNC<sp/>detail::utf8_to_utf16::utf8_to_utf16(<ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/>for_each_codepoint(s,<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](uint32_t<sp/>cp,<sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cp<sp/>==<sp/>invalid_code_point)<sp/>FMT_THROW(std::runtime_error(</highlight><highlight class="stringliteral">&quot;invalid<sp/>utf8&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cp<sp/>&lt;=<sp/>0xFFFF)<sp/>{</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer_.push_back(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cp));</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cp<sp/>-=<sp/>0x10000;</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer_.push_back(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0xD800<sp/>+<sp/>(cp<sp/>&gt;&gt;<sp/>10)));</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer_.push_back(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0xDC00<sp/>+<sp/>(cp<sp/>&amp;<sp/>0x3FF)));</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/>buffer_.push_back(0);</highlight></codeline>
<codeline lineno="2560"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"></highlight></codeline>
<codeline lineno="2562"><highlight class="normal">FMT_FUNC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>format_system_error(detail::buffer&lt;char&gt;&amp;<sp/>out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_code,</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/>FMT_TRY<sp/>{</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ec<sp/>=<sp/>std::error_code(error_code,<sp/>std::generic_category());</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/>write(std::back_inserter(out),<sp/>std::system_error(ec,<sp/>message).what());</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/>FMT_CATCH(...)<sp/>{}</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/>format_error_code(out,<sp/>error_code,<sp/>message);</highlight></codeline>
<codeline lineno="2571"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"></highlight></codeline>
<codeline lineno="2573"><highlight class="normal">FMT_FUNC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>report_system_error(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_code,</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/>report_error(format_system_error,<sp/>error_code,<sp/>message);</highlight></codeline>
<codeline lineno="2576"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"></highlight></codeline>
<codeline lineno="2578"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DEPRECATED!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2579"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>defined<sp/>here<sp/>and<sp/>not<sp/>inline<sp/>for<sp/>ABI<sp/>compatiblity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2580"><highlight class="normal">FMT_FUNC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>detail::error_handler::on_error(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/>throw_format_error(message);</highlight></codeline>
<codeline lineno="2582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"></highlight></codeline>
<codeline lineno="2584"><highlight class="normal">FMT_FUNC<sp/>std::string<sp/>vformat(<ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>fmt,<sp/><ref refid="classbasic__format__args" kindref="compound">format_args</ref><sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>optimize<sp/>the<sp/>&quot;{}&quot;<sp/>case<sp/>to<sp/>keep<sp/>the<sp/>binary<sp/>size<sp/>small<sp/>and<sp/>because<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>better<sp/>optimized<sp/>in<sp/>fmt::format<sp/>anyway.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classbuffer" kindref="compound">buffer</ref><sp/>=<sp/><ref refid="classbasic__memory__buffer" kindref="compound">memory_buffer</ref>();</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/>detail::vformat_to(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>fmt,<sp/>args);</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtx__string__cast_1ga8f0dced1fd45e67e2d77e80ab93c7af5" kindref="member">to_string</ref>(<ref refid="classbuffer" kindref="compound">buffer</ref>);</highlight></codeline>
<codeline lineno="2590"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"></highlight></codeline>
<codeline lineno="2592"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2593"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__gtx__raw__data_1ga1fc2589df6d44e923cd1820cf14805cf" kindref="member">dword</ref><sp/>=<sp/>conditional_t&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(long)<sp/>==<sp/>4,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">&gt;;</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>__declspec(dllimport)<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__stdcall<sp/>WriteConsoleW(<sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/><ref refid="group__gtx__raw__data_1ga1fc2589df6d44e923cd1820cf14805cf" kindref="member">dword</ref>,<sp/><ref refid="group__gtx__raw__data_1ga1fc2589df6d44e923cd1820cf14805cf" kindref="member">dword</ref>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="2597"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2598"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2599"><highlight class="normal"></highlight></codeline>
<codeline lineno="2600"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="2601"><highlight class="normal">FMT_FUNC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print(std::FILE*<sp/>f,<sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>text)<sp/>{</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fd<sp/>=<sp/>_fileno(f);</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_isatty(fd))<sp/>{</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::utf8_to_utf16<sp/><ref refid="group__gtc__type__precision_1gae7a1571503f83d2264ddfa705a6b082a" kindref="member">u16</ref>(<ref refid="classbasic__string__view" kindref="compound">string_view</ref>(text.<ref refid="classbasic__string__view_1a412831997be4db05ecb111fe51792be1" kindref="member">data</ref>(),<sp/>text.<ref refid="classbasic__string__view_1afdfceff7bfe9fdb7faf4f8bd35c3fc2c" kindref="member">size</ref>()));</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>written<sp/>=<sp/><ref refid="group__gtx__raw__data_1ga1fc2589df6d44e923cd1820cf14805cf" kindref="member">detail::dword</ref>();</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(detail::WriteConsoleW(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(_get_osfhandle(fd)),</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1gae7a1571503f83d2264ddfa705a6b082a" kindref="member">u16</ref>.c_str(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="group__gtc__type__precision_1gae7a1571503f83d2264ddfa705a6b082a" kindref="member">u16</ref>.size()),</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;written,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fallback<sp/>to<sp/>fwrite<sp/>on<sp/>failure.<sp/>It<sp/>can<sp/>happen<sp/>if<sp/>the<sp/>output<sp/>has<sp/>been</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>redirected<sp/>to<sp/>NUL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/>detail::fwrite_fully(text.<ref refid="classbasic__string__view_1a412831997be4db05ecb111fe51792be1" kindref="member">data</ref>(),<sp/>1,<sp/>text.<ref refid="classbasic__string__view_1afdfceff7bfe9fdb7faf4f8bd35c3fc2c" kindref="member">size</ref>(),<sp/>f);</highlight></codeline>
<codeline lineno="2617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2618"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2619"><highlight class="normal"></highlight></codeline>
<codeline lineno="2620"><highlight class="normal">FMT_FUNC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vprint(std::FILE*<sp/>f,<sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>format_str,<sp/><ref refid="classbasic__format__args" kindref="compound">format_args</ref><sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><ref refid="classbasic__memory__buffer" kindref="compound">memory_buffer</ref><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>;</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/>detail::vformat_to(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>format_str,<sp/>args);</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/>detail::print(f,<sp/>{<ref refid="classbuffer" kindref="compound">buffer</ref>.<ref refid="classbuffer_1ae42a4b4e65620def1fc0c5e4be5d3a86" kindref="member">data</ref>(),<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>.<ref refid="classbuffer_1abef013fc250411a71bd271e27cbcfa5d" kindref="member">size</ref>()});</highlight></codeline>
<codeline lineno="2624"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"></highlight></codeline>
<codeline lineno="2626"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2627"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Print<sp/>assuming<sp/>legacy<sp/>(non-Unicode)<sp/>encoding.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2628"><highlight class="normal">FMT_FUNC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>detail::vprint_mojibake(std::FILE*<sp/>f,<sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>format_str,</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbasic__format__args" kindref="compound">format_args</ref><sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><ref refid="classbasic__memory__buffer" kindref="compound">memory_buffer</ref><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>;</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/>detail::vformat_to(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>format_str,</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbasic__format__args" kindref="compound">basic_format_args</ref>&lt;<ref refid="classbasic__format__context" kindref="compound">buffer_context&lt;char&gt;</ref>&gt;(args));</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/>fwrite_fully(<ref refid="classbuffer" kindref="compound">buffer</ref>.<ref refid="classbuffer_1ae42a4b4e65620def1fc0c5e4be5d3a86" kindref="member">data</ref>(),<sp/>1,<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>.<ref refid="classbuffer_1abef013fc250411a71bd271e27cbcfa5d" kindref="member">size</ref>(),<sp/>f);</highlight></codeline>
<codeline lineno="2634"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2636"><highlight class="normal"></highlight></codeline>
<codeline lineno="2637"><highlight class="normal">FMT_FUNC<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vprint(<ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>format_str,<sp/><ref refid="classbasic__format__args" kindref="compound">format_args</ref><sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/>vprint(stdout,<sp/>format_str,<sp/>args);</highlight></codeline>
<codeline lineno="2639"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"></highlight></codeline>
<codeline lineno="2641"><highlight class="normal">FMT_END_NAMESPACE</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"></highlight></codeline>
<codeline lineno="2643"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>FMT_FORMAT_INL_H_</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/format-inl.h"/>
  </compounddef>
</doxygen>
