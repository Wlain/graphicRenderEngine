<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="bench_8cpp" kind="file" language="C++">
    <compoundname>bench.cpp</compoundname>
    <includes refid="spdlog_8h" local="yes">spdlog/spdlog.h</includes>
    <includes refid="basic__file__sink_8h" local="yes">spdlog/sinks/basic_file_sink.h</includes>
    <includes refid="daily__file__sink_8h" local="yes">spdlog/sinks/daily_file_sink.h</includes>
    <includes refid="null__sink_8h" local="yes">spdlog/sinks/null_sink.h</includes>
    <includes refid="rotating__file__sink_8h" local="yes">spdlog/sinks/rotating_file_sink.h</includes>
    <includes refid="format_8h" local="yes">spdlog/fmt/bundled/format.h</includes>
    <includes refid="3rdparty_2spdlog_2bench_2utils_8h" local="yes">utils.h</includes>
    <includes local="no">atomic</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">memory</includes>
    <includes local="no">string</includes>
    <includes local="no">thread</includes>
    <incdepgraph>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/bench/bench.cpp</label>
        <link refid="bench_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>utils.h</label>
        <link refid="3rdparty_2spdlog_2bench_2utils_8h_source"/>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>common-inl.h</label>
        <link refid="common-inl_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>spdlog/common.h</label>
        <link refid="spdlog_2include_2spdlog_2common_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>spdlog/details/backtracer.h</label>
        <link refid="backtracer_8h_source"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>spdlog/details/circular_q.h</label>
        <link refid="circular__q_8h_source"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>spdlog/details/file_helper.h</label>
        <link refid="file__helper_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>spdlog/details/log_msg.h</label>
        <link refid="log__msg_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>spdlog/details/log_msg_buffer.h</label>
        <link refid="log__msg__buffer_8h_source"/>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>spdlog/details/null_mutex.h</label>
        <link refid="null__mutex_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>spdlog/details/os.h</label>
        <link refid="details_2os_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>spdlog/details/registry.h</label>
        <link refid="registry_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>spdlog/details/synchronous_factory.h</label>
        <link refid="synchronous__factory_8h_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>spdlog/fmt/bundled/chrono.h</label>
        <link refid="bundled_2chrono_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>spdlog/fmt/bundled/core.h</label>
        <link refid="core_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>spdlog/fmt/bundled/format.h</label>
        <link refid="format_8h_source"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>spdlog/fmt/chrono.h</label>
        <link refid="chrono_8h_source"/>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>spdlog/fmt/fmt.h</label>
        <link refid="fmt_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>spdlog/formatter.h</label>
        <link refid="formatter_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>spdlog/logger.h</label>
        <link refid="3rdparty_2spdlog_2include_2spdlog_2logger_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>spdlog/sinks/base_sink.h</label>
        <link refid="base__sink_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>spdlog/sinks/basic_file_sink.h</label>
        <link refid="basic__file__sink_8h_source"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>spdlog/sinks/daily_file_sink.h</label>
        <link refid="daily__file__sink_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>spdlog/sinks/null_sink.h</label>
        <link refid="null__sink_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>spdlog/sinks/rotating_file_sink.h</label>
        <link refid="rotating__file__sink_8h_source"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>spdlog/sinks/sink.h</label>
        <link refid="sink_8h_source"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>spdlog/spdlog.h</label>
        <link refid="spdlog_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>spdlog/tweakme.h</label>
        <link refid="tweakme_8h_source"/>
      </node>
      <node id="39">
        <label>spdlog/version.h</label>
        <link refid="version_8h_source"/>
      </node>
      <node id="28">
        <label>algorithm</label>
      </node>
      <node id="6">
        <label>atomic</label>
      </node>
      <node id="38">
        <label>cassert</label>
      </node>
      <node id="8">
        <label>chrono</label>
      </node>
      <node id="23">
        <label>cmath</label>
      </node>
      <node id="18">
        <label>cstddef</label>
      </node>
      <node id="24">
        <label>cstdint</label>
      </node>
      <node id="15">
        <label>cstdio</label>
      </node>
      <node id="59">
        <label>cstdlib</label>
      </node>
      <node id="19">
        <label>cstring</label>
      </node>
      <node id="50">
        <label>ctime</label>
      </node>
      <node id="11">
        <label>exception</label>
      </node>
      <node id="14">
        <label>functional</label>
      </node>
      <node id="9">
        <label>initializer_list</label>
      </node>
      <node id="57">
        <label>iomanip</label>
      </node>
      <node id="20">
        <label>iterator</label>
      </node>
      <node id="21">
        <label>limits</label>
      </node>
      <node id="51">
        <label>locale</label>
      </node>
      <node id="10">
        <label>memory</label>
      </node>
      <node id="31">
        <label>mutex</label>
      </node>
      <node id="52">
        <label>ostream</label>
      </node>
      <node id="58">
        <label>sstream</label>
      </node>
      <node id="25">
        <label>stdexcept</label>
      </node>
      <node id="12">
        <label>string</label>
      </node>
      <node id="26">
        <label>system_error</label>
      </node>
      <node id="60">
        <label>thread</label>
      </node>
      <node id="43">
        <label>tuple</label>
      </node>
      <node id="13">
        <label>type_traits</label>
      </node>
      <node id="30">
        <label>unordered_map</label>
      </node>
      <node id="7">
        <label>utility</label>
      </node>
      <node id="37">
        <label>vector</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="bench_8cpp_1a1dd34dafb9d04d995fc20aba8b0a8545" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t file_size</definition>
        <argsstring></argsstring>
        <name>file_size</name>
        <initializer>= 30 * 1024 * 1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/bench/bench.cpp" line="36" column="21" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/bench/bench.cpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="bench_8cpp_1a1956604f95f0dd9266cc5e85a33bf565" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t rotating_files</definition>
        <argsstring></argsstring>
        <name>rotating_files</name>
        <initializer>= 5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/bench/bench.cpp" line="37" column="21" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/bench/bench.cpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="bench_8cpp_1a90e9a7f7d8b7e956103b27fdad266932" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int max_threads</definition>
        <argsstring></argsstring>
        <name>max_threads</name>
        <initializer>= 1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/bench/bench.cpp" line="38" column="18" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/bench/bench.cpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="bench_8cpp_1a7319bfe51ec9511b35f5c12e521065f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bench</definition>
        <argsstring>(int howmany, std::shared_ptr&lt; spdlog::logger &gt; log)</argsstring>
        <name>bench</name>
        <param>
          <type>int</type>
          <declname>howmany</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">spdlog::logger</ref> &gt;</type>
          <declname>log</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/bench/bench.cpp" line="148" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/bench/bench.cpp" bodystart="148" bodyend="166" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/bench/bench.cpp" declline="30" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="bench_8cpp_1a6fd114fb26c7c46f894e9bd33afa794b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bench_mt</definition>
        <argsstring>(int howmany, std::shared_ptr&lt; spdlog::logger &gt; log, size_t thread_count)</argsstring>
        <name>bench_mt</name>
        <param>
          <type>int</type>
          <declname>howmany</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">spdlog::logger</ref> &gt;</type>
          <declname>log</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>thread_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/bench/bench.cpp" line="168" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/bench/bench.cpp" bodystart="168" bodyend="197" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/bench/bench.cpp" declline="31" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="bench_8cpp_1a2ff08f98f9450575018aeaf80382301c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bench_threaded_logging</definition>
        <argsstring>(size_t threads, int iters)</argsstring>
        <name>bench_threaded_logging</name>
        <param>
          <type>size_t</type>
          <declname>threads</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/bench/bench.cpp" line="40" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/bench/bench.cpp" bodystart="40" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="bench_8cpp_1a579dbdcca06263202a96f4b95e31c4c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bench_single_threaded</definition>
        <argsstring>(int iters)</argsstring>
        <name>bench_single_threaded</name>
        <param>
          <type>int</type>
          <declname>iters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/bench/bench.cpp" line="76" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/bench/bench.cpp" bodystart="76" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="bench_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/bench/bench.cpp" line="113" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/bench/bench.cpp" bodystart="113" bodyend="146"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright(c)<sp/>2015<sp/>Gabi<sp/>Melman.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>MIT<sp/>License<sp/>(http://opensource.org/licenses/MIT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>bench.cpp<sp/>:<sp/>spdlog<sp/>benchmarks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;spdlog/spdlog.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;spdlog/sinks/basic_file_sink.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;spdlog/sinks/daily_file_sink.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;spdlog/sinks/null_sink.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;spdlog/sinks/rotating_file_sink.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SPDLOG_USE_STD_FORMAT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>include<sp/>&lt;format&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(SPDLOG_FMT_EXTERNAL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>include<sp/>&lt;fmt/locale.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>include<sp/>&quot;spdlog/fmt/bundled/format.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;utils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;atomic&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>EXIT_FAILURE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bench(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>howmany,<sp/>std::shared_ptr&lt;spdlog::logger&gt;<sp/><ref refid="group__core__func__exponential_1gad26901b9f2fdd30612867a8dcfa73fbc" kindref="member">log</ref>);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bench_mt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>howmany,<sp/>std::shared_ptr&lt;spdlog::logger&gt;<sp/><ref refid="group__core__func__exponential_1gad26901b9f2fdd30612867a8dcfa73fbc" kindref="member">log</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>thread_count);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>bench_default_api(int<sp/>howmany,<sp/>std::shared_ptr&lt;spdlog::logger&gt;<sp/>log);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>bench_c_string(int<sp/>howmany,<sp/>std::shared_ptr&lt;spdlog::logger&gt;<sp/>log);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>file_size<sp/>=<sp/>30<sp/>*<sp/>1024<sp/>*<sp/>1024;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rotating_files<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_threads<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bench_threaded_logging(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>threads,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iters)</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::info(</highlight><highlight class="stringliteral">&quot;**************************************************************&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::info(spdlog::fmt_lib::format(std::locale(</highlight><highlight class="stringliteral">&quot;en_US.UTF-8&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;Multi<sp/>threaded:<sp/>{:L}<sp/>threads,<sp/>{:L}<sp/>messages&quot;</highlight><highlight class="normal">,<sp/>threads,<sp/>iters));</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::info(</highlight><highlight class="stringliteral">&quot;**************************************************************&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>basic_mt<sp/>=<sp/>spdlog::basic_logger_mt(</highlight><highlight class="stringliteral">&quot;basic_mt&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;logs/basic_mt.log&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>bench_mt(iters,<sp/>std::move(basic_mt),<sp/>threads);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>basic_mt_tracing<sp/>=<sp/>spdlog::basic_logger_mt(</highlight><highlight class="stringliteral">&quot;basic_mt/backtrace-on&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;logs/basic_mt.log&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_mt_tracing-&gt;enable_backtrace(32);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>bench_mt(iters,<sp/>std::move(basic_mt_tracing),<sp/>threads);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::info(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rotating_mt<sp/>=<sp/>spdlog::rotating_logger_mt(</highlight><highlight class="stringliteral">&quot;rotating_mt&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;logs/rotating_mt.log&quot;</highlight><highlight class="normal">,<sp/>file_size,<sp/>rotating_files);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>bench_mt(iters,<sp/>std::move(rotating_mt),<sp/>threads);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rotating_mt_tracing<sp/>=<sp/>spdlog::rotating_logger_mt(</highlight><highlight class="stringliteral">&quot;rotating_mt/backtrace-on&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;logs/rotating_mt.log&quot;</highlight><highlight class="normal">,<sp/>file_size,<sp/>rotating_files);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>rotating_mt_tracing-&gt;enable_backtrace(32);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>bench_mt(iters,<sp/>std::move(rotating_mt_tracing),<sp/>threads);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::info(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>daily_mt<sp/>=<sp/>spdlog::daily_logger_mt(</highlight><highlight class="stringliteral">&quot;daily_mt&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;logs/daily_mt.log&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>bench_mt(iters,<sp/>std::move(daily_mt),<sp/>threads);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>daily_mt_tracing<sp/>=<sp/>spdlog::daily_logger_mt(</highlight><highlight class="stringliteral">&quot;daily_mt/backtrace-on&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;logs/daily_mt.log&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>daily_mt_tracing-&gt;enable_backtrace(32);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>bench_mt(iters,<sp/>std::move(daily_mt_tracing),<sp/>threads);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::info(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>empty_logger<sp/>=<sp/>std::make_shared&lt;spdlog::logger&gt;(</highlight><highlight class="stringliteral">&quot;level-off&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>empty_logger-&gt;set_level(spdlog::level::off);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>bench(iters,<sp/>empty_logger);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>empty_logger_tracing<sp/>=<sp/>std::make_shared&lt;spdlog::logger&gt;(</highlight><highlight class="stringliteral">&quot;level-off/backtrace-on&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>empty_logger_tracing-&gt;set_level(spdlog::level::off);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>empty_logger_tracing-&gt;enable_backtrace(32);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>bench(iters,<sp/>empty_logger_tracing);</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bench_single_threaded(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iters)</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::info(</highlight><highlight class="stringliteral">&quot;**************************************************************&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::info(spdlog::fmt_lib::format(std::locale(</highlight><highlight class="stringliteral">&quot;en_US.UTF-8&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;Single<sp/>threaded:<sp/>{}<sp/>messages&quot;</highlight><highlight class="normal">,<sp/>iters));</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::info(</highlight><highlight class="stringliteral">&quot;**************************************************************&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>basic_st<sp/>=<sp/>spdlog::basic_logger_st(</highlight><highlight class="stringliteral">&quot;basic_st&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;logs/basic_st.log&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>bench(iters,<sp/>std::move(basic_st));</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>basic_st_tracing<sp/>=<sp/>spdlog::basic_logger_st(</highlight><highlight class="stringliteral">&quot;basic_st/backtrace-on&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;logs/basic_st.log&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>bench(iters,<sp/>std::move(basic_st_tracing));</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::info(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rotating_st<sp/>=<sp/>spdlog::rotating_logger_st(</highlight><highlight class="stringliteral">&quot;rotating_st&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;logs/rotating_st.log&quot;</highlight><highlight class="normal">,<sp/>file_size,<sp/>rotating_files);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>bench(iters,<sp/>std::move(rotating_st));</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rotating_st_tracing<sp/>=<sp/>spdlog::rotating_logger_st(</highlight><highlight class="stringliteral">&quot;rotating_st/backtrace-on&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;logs/rotating_st.log&quot;</highlight><highlight class="normal">,<sp/>file_size,<sp/>rotating_files);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>rotating_st_tracing-&gt;enable_backtrace(32);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>bench(iters,<sp/>std::move(rotating_st_tracing));</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::info(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>daily_st<sp/>=<sp/>spdlog::daily_logger_st(</highlight><highlight class="stringliteral">&quot;daily_st&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;logs/daily_st.log&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>bench(iters,<sp/>std::move(daily_st));</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>daily_st_tracing<sp/>=<sp/>spdlog::daily_logger_st(</highlight><highlight class="stringliteral">&quot;daily_st/backtrace-on&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;logs/daily_st.log&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>daily_st_tracing-&gt;enable_backtrace(32);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>bench(iters,<sp/>std::move(daily_st_tracing));</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::info(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>empty_logger<sp/>=<sp/>std::make_shared&lt;spdlog::logger&gt;(</highlight><highlight class="stringliteral">&quot;level-off&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>empty_logger-&gt;set_level(spdlog::level::off);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>bench(iters,<sp/>empty_logger);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>empty_logger_tracing<sp/>=<sp/>std::make_shared&lt;spdlog::logger&gt;(</highlight><highlight class="stringliteral">&quot;level-off/backtrace-on&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>empty_logger_tracing-&gt;set_level(spdlog::level::off);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>empty_logger_tracing-&gt;enable_backtrace(32);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>bench(iters,<sp/>empty_logger_tracing);</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[])</highlight></codeline>
<codeline lineno="114"><highlight class="normal">{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::set_automatic_registration(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::default_logger()-&gt;set_pattern(</highlight><highlight class="stringliteral">&quot;[%^%l%$]<sp/>%v&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iters<sp/>=<sp/>250000;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>threads<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argc<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iters<sp/>=<sp/>std::stoi(argv[1]);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argc<sp/>&gt;<sp/>2)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>threads<sp/>=<sp/>std::stoul(argv[2]);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(threads<sp/>&gt;<sp/>max_threads)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(spdlog::fmt_lib::format(</highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>threads<sp/>exceeds<sp/>maximum({})&quot;</highlight><highlight class="normal">,<sp/>max_threads));</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bench_single_threaded(iters);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bench_threaded_logging(1,<sp/>iters);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bench_threaded_logging(threads,<sp/>iters);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception<sp/>&amp;ex)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::error(ex.what());</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_SUCCESS;</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bench(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>howmany,<sp/>std::shared_ptr&lt;spdlog::logger&gt;<sp/><ref refid="group__core__func__exponential_1gad26901b9f2fdd30612867a8dcfa73fbc" kindref="member">log</ref>)</highlight></codeline>
<codeline lineno="149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::chrono::duration;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::chrono::duration_cast;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::chrono::high_resolution_clock;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>high_resolution_clock::now();</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>howmany;<sp/>++i)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__core__func__exponential_1gad26901b9f2fdd30612867a8dcfa73fbc" kindref="member">log</ref>-&gt;info(</highlight><highlight class="stringliteral">&quot;Hello<sp/>logger:<sp/>msg<sp/>number<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>delta<sp/>=<sp/>high_resolution_clock::now()<sp/>-<sp/>start;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>delta_d<sp/>=<sp/>duration_cast&lt;duration&lt;double&gt;&gt;(delta).count();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::info(spdlog::fmt_lib::format(</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::locale(</highlight><highlight class="stringliteral">&quot;en_US.UTF-8&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;{:&lt;30}<sp/>Elapsed:<sp/>{:0.2f}<sp/>secs<sp/>{:&gt;16L}/sec&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__core__func__exponential_1gad26901b9f2fdd30612867a8dcfa73fbc" kindref="member">log</ref>-&gt;name(),<sp/>delta_d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(howmany<sp/>/<sp/>delta_d)));</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::drop(<ref refid="group__core__func__exponential_1gad26901b9f2fdd30612867a8dcfa73fbc" kindref="member">log</ref>-&gt;name());</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bench_mt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>howmany,<sp/>std::shared_ptr&lt;spdlog::logger&gt;<sp/><ref refid="group__core__func__exponential_1gad26901b9f2fdd30612867a8dcfa73fbc" kindref="member">log</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>thread_count)</highlight></codeline>
<codeline lineno="169"><highlight class="normal">{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::chrono::duration;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::chrono::duration_cast;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::chrono::high_resolution_clock;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::thread&gt;<sp/>threads;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>threads.reserve(thread_count);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>high_resolution_clock::now();</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>0;<sp/>t<sp/>&lt;<sp/>thread_count;<sp/>++t)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>threads.emplace_back([&amp;]()<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>howmany<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(thread_count);<sp/>j++)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__core__func__exponential_1gad26901b9f2fdd30612867a8dcfa73fbc" kindref="member">log</ref>-&gt;info(</highlight><highlight class="stringliteral">&quot;Hello<sp/>logger:<sp/>msg<sp/>number<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>j);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;t<sp/>:<sp/>threads)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.join();</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>delta<sp/>=<sp/>high_resolution_clock::now()<sp/>-<sp/>start;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>delta_d<sp/>=<sp/>duration_cast&lt;duration&lt;double&gt;&gt;(delta).count();</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::info(spdlog::fmt_lib::format(</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::locale(</highlight><highlight class="stringliteral">&quot;en_US.UTF-8&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;{:&lt;30}<sp/>Elapsed:<sp/>{:0.2f}<sp/>secs<sp/>{:&gt;16L}/sec&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__core__func__exponential_1gad26901b9f2fdd30612867a8dcfa73fbc" kindref="member">log</ref>-&gt;name(),<sp/>delta_d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(howmany<sp/>/<sp/>delta_d)));</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::drop(<ref refid="group__core__func__exponential_1gad26901b9f2fdd30612867a8dcfa73fbc" kindref="member">log</ref>-&gt;name());</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="200"><highlight class="comment">void<sp/>bench_default_api(int<sp/>howmany,<sp/>std::shared_ptr&lt;spdlog::logger&gt;<sp/>log)</highlight></codeline>
<codeline lineno="201"><highlight class="comment">{</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/><sp/><sp/><sp/>using<sp/>std::chrono::high_resolution_clock;</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/><sp/><sp/><sp/>using<sp/>std::chrono::duration;</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/><sp/><sp/>using<sp/>std::chrono::duration_cast;</highlight></codeline>
<codeline lineno="205"><highlight class="comment"></highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/><sp/><sp/><sp/>auto<sp/>orig_default<sp/>=<sp/>spdlog::default_logger();</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/><sp/><sp/>spdlog::set_default_logger(log);</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/><sp/><sp/><sp/>auto<sp/>start<sp/>=<sp/>high_resolution_clock::now();</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(auto<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>howmany;<sp/>++i)</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::info(&quot;Hello<sp/>logger:<sp/>msg<sp/>number<sp/>{}&quot;,<sp/>i);</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="comment"></highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/><sp/><sp/><sp/>auto<sp/>delta<sp/>=<sp/>high_resolution_clock::now()<sp/>-<sp/>start;</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/><sp/><sp/><sp/>auto<sp/>delta_d<sp/>=<sp/>duration_cast&lt;duration&lt;double&gt;&gt;(delta).count();</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/><sp/><sp/>spdlog::drop(log-&gt;name());</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/><sp/><sp/><sp/>spdlog::set_default_logger(std::move(orig_default));</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/><sp/><sp/><sp/>spdlog::info(&quot;{:&lt;30}<sp/>Elapsed:<sp/>{:0.2f}<sp/>secs<sp/>{:&gt;16}/sec&quot;,<sp/>log-&gt;name(),<sp/>delta_d,<sp/>int(howmany<sp/>/<sp/>delta_d));</highlight></codeline>
<codeline lineno="219"><highlight class="comment">}</highlight></codeline>
<codeline lineno="220"><highlight class="comment"></highlight></codeline>
<codeline lineno="221"><highlight class="comment">void<sp/>bench_c_string(int<sp/>howmany,<sp/>std::shared_ptr&lt;spdlog::logger&gt;<sp/>log)</highlight></codeline>
<codeline lineno="222"><highlight class="comment">{</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/><sp/><sp/><sp/>using<sp/>std::chrono::high_resolution_clock;</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/><sp/><sp/><sp/>using<sp/>std::chrono::duration;</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/><sp/><sp/><sp/>using<sp/>std::chrono::duration_cast;</highlight></codeline>
<codeline lineno="226"><highlight class="comment"></highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/><sp/><sp/>const<sp/>char<sp/>*msg<sp/>=<sp/>&quot;Lorem<sp/>ipsum<sp/>dolor<sp/>sit<sp/>amet,<sp/>consectetur<sp/>adipiscing<sp/>elit.<sp/>Vestibulum<sp/>pharetra<sp/>metus<sp/>cursus<sp/>&quot;</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;lacus<sp/>placerat<sp/>congue.<sp/>Nulla<sp/>egestas,<sp/>mauris<sp/>a<sp/>tincidunt<sp/>tempus,<sp/>enim<sp/>lectus<sp/>volutpat<sp/>mi,<sp/>eu<sp/>consequat<sp/>sem<sp/>&quot;</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;libero<sp/>nec<sp/>massa.<sp/>In<sp/>dapibus<sp/>ipsum<sp/>a<sp/>diam<sp/>rhoncus<sp/>gravida.<sp/>Etiam<sp/>non<sp/>dapibus<sp/>eros.<sp/>Donec<sp/>fringilla<sp/>dui<sp/>sed<sp/>&quot;</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;augue<sp/>pretium,<sp/>nec<sp/>scelerisque<sp/>est<sp/>maximus.<sp/>Nullam<sp/>convallis,<sp/>sem<sp/>nec<sp/>blandit<sp/>maximus,<sp/>nisi<sp/>turpis<sp/>ornare<sp/>&quot;</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;nisl,<sp/>sit<sp/>amet<sp/>volutpat<sp/>neque<sp/>massa<sp/>eu<sp/>odio.<sp/>Maecenas<sp/>malesuada<sp/>quam<sp/>ex,<sp/>posuere<sp/>congue<sp/>nibh<sp/>turpis<sp/>duis.&quot;;</highlight></codeline>
<codeline lineno="232"><highlight class="comment"></highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/><sp/><sp/>auto<sp/>orig_default<sp/>=<sp/>spdlog::default_logger();</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/><sp/><sp/>spdlog::set_default_logger(log);</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/><sp/><sp/>auto<sp/>start<sp/>=<sp/>high_resolution_clock::now();</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(auto<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>howmany;<sp/>++i)</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::log(spdlog::level::info,<sp/>msg);</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="comment"></highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/><sp/><sp/><sp/>auto<sp/>delta<sp/>=<sp/>high_resolution_clock::now()<sp/>-<sp/>start;</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/><sp/><sp/><sp/>auto<sp/>delta_d<sp/>=<sp/>duration_cast&lt;duration&lt;double&gt;&gt;(delta).count();</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/><sp/><sp/>spdlog::drop(log-&gt;name());</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/><sp/><sp/><sp/>spdlog::set_default_logger(std::move(orig_default));</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/><sp/><sp/><sp/>spdlog::info(&quot;{:&lt;30}<sp/>Elapsed:<sp/>{:0.2f}<sp/>secs<sp/>{:&gt;16}/sec&quot;,<sp/>log-&gt;name(),<sp/>delta_d,<sp/>int(howmany<sp/>/<sp/>delta_d));</highlight></codeline>
<codeline lineno="246"><highlight class="comment">}</highlight></codeline>
<codeline lineno="247"><highlight class="comment"></highlight></codeline>
<codeline lineno="248"><highlight class="comment">*/</highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/bench/bench.cpp"/>
  </compounddef>
</doxygen>
